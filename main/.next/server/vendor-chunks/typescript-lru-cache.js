"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/typescript-lru-cache";
exports.ids = ["vendor-chunks/typescript-lru-cache"];
exports.modules = {

/***/ "(ssr)/./node_modules/typescript-lru-cache/dist/LRUCache.js":
/*!************************************************************!*\
  !*** ./node_modules/typescript-lru-cache/dist/LRUCache.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LRUCache = void 0;\r\nconst LRUCacheNode_1 = __webpack_require__(/*! ./LRUCacheNode */ \"(ssr)/./node_modules/typescript-lru-cache/dist/LRUCacheNode.js\");\r\n/**\r\n * A key value cache that implements the LRU policy.\r\n *\r\n * @typeparam TKey The type of the keys in the cache. Defaults to `string`.\r\n * @typeparam TValue The type of the values in the cache. Defaults to `any`.\r\n *\r\n * @see {@link https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)}\r\n */\r\nclass LRUCache {\r\n    /**\r\n     * Creates a new instance of the LRUCache.\r\n     *\r\n     * @param options Additional configuration options for the LRUCache.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * // No options.\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // With options.\r\n     * const cache = new LRUCache({\r\n     *  entryExpirationTimeInMS: 10000\r\n     * });\r\n     * ```\r\n     */\r\n    constructor(options) {\r\n        this.lookupTable = new Map();\r\n        this.head = null;\r\n        this.tail = null;\r\n        const { maxSize = 25, entryExpirationTimeInMS = null, onEntryEvicted, onEntryMarkedAsMostRecentlyUsed, cloneFn, clone } = options !== null && options !== void 0 ? options : {};\r\n        if (Number.isNaN(maxSize) || maxSize <= 0) {\r\n            throw new Error('maxSize must be greater than 0.');\r\n        }\r\n        if (typeof entryExpirationTimeInMS === 'number' &&\r\n            (entryExpirationTimeInMS <= 0 || Number.isNaN(entryExpirationTimeInMS))) {\r\n            throw new Error('entryExpirationTimeInMS must either be null (no expiry) or greater than 0');\r\n        }\r\n        this.maxSizeInternal = maxSize;\r\n        this.entryExpirationTimeInMS = entryExpirationTimeInMS;\r\n        this.onEntryEvicted = onEntryEvicted;\r\n        this.onEntryMarkedAsMostRecentlyUsed = onEntryMarkedAsMostRecentlyUsed;\r\n        this.clone = clone;\r\n        this.cloneFn = cloneFn;\r\n    }\r\n    /**\r\n     * Returns the number of entries in the LRUCache object.\r\n     * If the cache has entryExpirationTimeInMS set, expired entries will be removed before the size is returned.\r\n     *\r\n     * @returns The number of entries in the cache.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * const size = cache.size;\r\n     *\r\n     * // Will log 1\r\n     * console.log(size);\r\n     * ```\r\n     */\r\n    get size() {\r\n        this.cleanCache();\r\n        return this.lookupTable.size;\r\n    }\r\n    /**\r\n     * Returns the number of entries that can still be added to the LRUCache without evicting existing entries.\r\n     *\r\n     * @returns The number of entries that can still be added without evicting existing entries.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache({ maxSize: 10 });\r\n     *\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * const remainingSize = cache.remainingSize;\r\n     *\r\n     * // Will log 9 due to 9 spots remaining before reaching maxSize of 10.\r\n     * console.log(remainingSize);\r\n     * ```\r\n     */\r\n    get remainingSize() {\r\n        return this.maxSizeInternal - this.size;\r\n    }\r\n    /**\r\n     * Returns the most recently used (newest) entry in the cache.\r\n     * This will not mark the entry as recently used.\r\n     * If the newest node is expired, it will be removed.\r\n     *\r\n     * @returns The most recently used (newest) entry in the cache.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache({ maxSize: 10 });\r\n     *\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * const newest = cache.newest;\r\n     *\r\n     * // Will log testValue\r\n     * console.log(newest.value);\r\n     *\r\n     * // Will log testKey\r\n     * console.log(newest.key);\r\n     * ```\r\n     */\r\n    get newest() {\r\n        if (!this.head) {\r\n            return null;\r\n        }\r\n        if (this.head.isExpired) {\r\n            this.removeNodeFromListAndLookupTable(this.head);\r\n            return this.newest;\r\n        }\r\n        return this.mapNodeToEntry(this.head);\r\n    }\r\n    /**\r\n     * Returns the least recently used (oldest) entry in the cache.\r\n     * This will not mark the entry as recently used.\r\n     * If the oldest node is expired, it will be removed.\r\n     *\r\n     * @returns The least recently used (oldest) entry in the cache.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache({ maxSize: 10 });\r\n     *\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * const oldest = cache.oldest;\r\n     *\r\n     * // Will log testValue\r\n     * console.log(oldest.value);\r\n     *\r\n     * // Will log testKey\r\n     * console.log(oldest.key);\r\n     * ```\r\n     */\r\n    get oldest() {\r\n        if (!this.tail) {\r\n            return null;\r\n        }\r\n        if (this.tail.isExpired) {\r\n            this.removeNodeFromListAndLookupTable(this.tail);\r\n            return this.oldest;\r\n        }\r\n        return this.mapNodeToEntry(this.tail);\r\n    }\r\n    /**\r\n     * Gets or sets the maxSize of the cache.\r\n     * This will evict the least recently used entries if needed to reach new maxSize.\r\n     *\r\n     * @param value The new value for maxSize. Must be greater than 0.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache({ maxSize: 10 });\r\n     *\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Will be 10\r\n     * const maxSize = cache.maxSize;\r\n     *\r\n     * // Set new maxSize to 5. If there are more than 5 items in the cache, the least recently used entries will be removed until cache size is 5.\r\n     * cache.maxSize = 5;\r\n     * ```\r\n     */\r\n    get maxSize() {\r\n        return this.maxSizeInternal;\r\n    }\r\n    set maxSize(value) {\r\n        if (Number.isNaN(value) || value <= 0) {\r\n            throw new Error('maxSize must be greater than 0.');\r\n        }\r\n        this.maxSizeInternal = value;\r\n        this.enforceSizeLimit();\r\n    }\r\n    /**\r\n     * Sets the value for the key in the LRUCache object. Returns the LRUCache object.\r\n     * This marks the newly added entry as the most recently used entry.\r\n     * If adding the new entry makes the cache size go above maxSize,\r\n     * this will evict the least recently used entries until size is equal to maxSize.\r\n     *\r\n     * @param key The key of the entry.\r\n     * @param value The value to set for the key.\r\n     * @param entryOptions Additional configuration options for the cache entry.\r\n     *\r\n     * @returns The LRUCache instance.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Set the key key2 to value value2. Pass in optional options.\r\n     * cache.set('key2', 'value2', { entryExpirationTimeInMS: 10 });\r\n     * ```\r\n     */\r\n    set(key, value, entryOptions) {\r\n        const currentNodeForKey = this.lookupTable.get(key);\r\n        if (currentNodeForKey) {\r\n            this.removeNodeFromListAndLookupTable(currentNodeForKey);\r\n        }\r\n        const node = new LRUCacheNode_1.LRUCacheNode(key, value, {\r\n            entryExpirationTimeInMS: this.entryExpirationTimeInMS,\r\n            onEntryEvicted: this.onEntryEvicted,\r\n            onEntryMarkedAsMostRecentlyUsed: this.onEntryMarkedAsMostRecentlyUsed,\r\n            clone: this.clone,\r\n            cloneFn: this.cloneFn,\r\n            ...entryOptions\r\n        });\r\n        this.setNodeAsHead(node);\r\n        this.lookupTable.set(key, node);\r\n        this.enforceSizeLimit();\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns the value associated to the key, or null if there is none or if the entry is expired.\r\n     * If an entry is returned, this marks the returned entry as the most recently used entry.\r\n     *\r\n     * @param key The key of the entry to get.\r\n     *\r\n     * @returns The cached value or null.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Will be 'testValue'. Entry will now be most recently used.\r\n     * const item1 = cache.get('testKey');\r\n     *\r\n     * // Will be null\r\n     * const item2 = cache.get('keyNotInCache');\r\n     * ```\r\n     */\r\n    get(key) {\r\n        const node = this.lookupTable.get(key);\r\n        if (!node) {\r\n            return null;\r\n        }\r\n        if (node.isExpired) {\r\n            this.removeNodeFromListAndLookupTable(node);\r\n            return null;\r\n        }\r\n        this.setNodeAsHead(node);\r\n        return node.value;\r\n    }\r\n    /**\r\n     * Returns the value associated to the key, or null if there is none or if the entry is expired.\r\n     * If an entry is returned, this will not mark the entry as most recently accessed.\r\n     * Useful if a value is needed but the order of the cache should not be changed.\r\n     *\r\n     * @param key The key of the entry to get.\r\n     *\r\n     * @returns The cached value or null.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Will be 'testValue'\r\n     * const item1 = cache.peek('testKey');\r\n     *\r\n     * // Will be null\r\n     * const item2 = cache.peek('keyNotInCache');\r\n     * ```\r\n     */\r\n    peek(key) {\r\n        const node = this.lookupTable.get(key);\r\n        if (!node) {\r\n            return null;\r\n        }\r\n        if (node.isExpired) {\r\n            this.removeNodeFromListAndLookupTable(node);\r\n            return null;\r\n        }\r\n        return node.value;\r\n    }\r\n    /**\r\n     * Deletes the entry for the passed in key.\r\n     *\r\n     * @param key The key of the entry to delete\r\n     *\r\n     * @returns True if an element in the LRUCache object existed and has been removed,\r\n     * or false if the element does not exist.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Will be true\r\n     * const wasDeleted = cache.delete('testKey');\r\n     *\r\n     * // Will be false\r\n     * const wasDeleted2 = cache.delete('keyNotInCache');\r\n     * ```\r\n     */\r\n    delete(key) {\r\n        const node = this.lookupTable.get(key);\r\n        if (!node) {\r\n            return false;\r\n        }\r\n        return this.removeNodeFromListAndLookupTable(node);\r\n    }\r\n    /**\r\n     * Returns a boolean asserting whether a value has been associated to the key in the LRUCache object or not.\r\n     * This does not mark the entry as recently used.\r\n     * If the cache has a key but the entry is expired, it will be removed and false will be returned.\r\n     *\r\n     * @param key The key of the entry to check if exists\r\n     *\r\n     * @returns true if the cache contains the supplied key. False if not.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Will be true\r\n     * const wasDeleted = cache.has('testKey');\r\n     *\r\n     * // Will be false\r\n     * const wasDeleted2 = cache.has('keyNotInCache');\r\n     * ```\r\n     */\r\n    has(key) {\r\n        const node = this.lookupTable.get(key);\r\n        if (!node) {\r\n            return false;\r\n        }\r\n        if (node.isExpired) {\r\n            this.removeNodeFromListAndLookupTable(node);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Removes all entries in the cache.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // Clear cache.\r\n     * cache.clear();\r\n     * ```\r\n     */\r\n    clear() {\r\n        this.head = null;\r\n        this.tail = null;\r\n        this.lookupTable.clear();\r\n    }\r\n    /**\r\n     * Searches the cache for an entry matching the passed in condition.\r\n     * Expired entries will be skipped (and removed).\r\n     * If multiply entries in the cache match the condition, the most recently used entry will be returned.\r\n     * If an entry is returned, this marks the returned entry as the most recently used entry.\r\n     *\r\n     * @param condition The condition to apply to each entry in the\r\n     *\r\n     * @returns The first cache entry to match the condition. Null if none match.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * // item will be { key: 'testKey', value: 'testValue }\r\n     * const item = cache.find(entry => {\r\n     *   const { key, value } = entry;\r\n     *\r\n     *   if (key === 'testKey' || value === 'something') {\r\n     *     return true;\r\n     *   }\r\n     *\r\n     *   return false;\r\n     * });\r\n     *\r\n     * // item2 will be null\r\n     * const item2 = cache.find(entry => entry.key === 'notInCache');\r\n     * ```\r\n     */\r\n    find(condition) {\r\n        let node = this.head;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            const entry = this.mapNodeToEntry(node);\r\n            if (condition(entry)) {\r\n                this.setNodeAsHead(node);\r\n                return entry;\r\n            }\r\n            node = node.next;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Iterates over and applies the callback function to each entry in the cache.\r\n     * Iterates in order from most recently accessed entry to least recently.\r\n     * Expired entries will be skipped (and removed).\r\n     * No entry will be marked as recently used.\r\n     *\r\n     * @param callback the callback function to apply to the entry\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * cache.forEach((key, value, index) => {\r\n     *   // do something with key, value, and/or index\r\n     * });\r\n     * ```\r\n     */\r\n    forEach(callback) {\r\n        let node = this.head;\r\n        let index = 0;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            callback(node.value, node.key, index);\r\n            node = node.next;\r\n            index++;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Generator which can be used with for ... of ... to iterate over the cache values.\r\n     * Iterates in order from most recently accessed entry to least recently.\r\n     * Expired entries will be skipped (and removed).\r\n     * No entry will be marked as accessed.\r\n     *\r\n     * @returns A Generator for the cache values.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * for (const value of cache.values()) {\r\n     *   // do something with the value\r\n     * }\r\n     * ```\r\n     */\r\n    *values() {\r\n        let node = this.head;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            yield node.value;\r\n            node = node.next;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Generator which can be used with for ... of ... to iterate over the cache keys.\r\n     * Iterates in order from most recently accessed entry to least recently.\r\n     * Expired entries will be skipped (and removed).\r\n     * No entry will be marked as accessed.\r\n     *\r\n     * @returns A Generator for the cache keys.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * for (const key of cache.keys()) {\r\n     *   // do something with the key\r\n     * }\r\n     * ```\r\n     */\r\n    *keys() {\r\n        let node = this.head;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            yield node.key;\r\n            node = node.next;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Generator which can be used with for ... of ... to iterate over the cache entries.\r\n     * Iterates in order from most recently accessed entry to least recently.\r\n     * Expired entries will be skipped (and removed).\r\n     * No entry will be marked as accessed.\r\n     *\r\n     * @returns A Generator for the cache entries.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * for (const entry of cache.entries()) {\r\n     *   const { key, value } = entry;\r\n     *   // do something with the entry\r\n     * }\r\n     * ```\r\n     */\r\n    *entries() {\r\n        let node = this.head;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            yield this.mapNodeToEntry(node);\r\n            node = node.next;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Generator which can be used with for ... of ... to iterate over the cache entries.\r\n     * Iterates in order from most recently accessed entry to least recently.\r\n     * Expired entries will be skipped (and removed).\r\n     * No entry will be marked as accessed.\r\n     *\r\n     * @returns A Generator for the cache entries.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const cache = new LRUCache();\r\n     *\r\n     * // Set the key testKey to value testValue\r\n     * cache.set('testKey', 'testValue');\r\n     *\r\n     * for (const entry of cache) {\r\n     *   const { key, value } = entry;\r\n     *   // do something with the entry\r\n     * }\r\n     * ```\r\n     */\r\n    *[Symbol.iterator]() {\r\n        let node = this.head;\r\n        while (node) {\r\n            if (node.isExpired) {\r\n                const next = node.next;\r\n                this.removeNodeFromListAndLookupTable(node);\r\n                node = next;\r\n                continue;\r\n            }\r\n            yield this.mapNodeToEntry(node);\r\n            node = node.next;\r\n        }\r\n    }\r\n    enforceSizeLimit() {\r\n        let node = this.tail;\r\n        while (node !== null && this.size > this.maxSizeInternal) {\r\n            const prev = node.prev;\r\n            this.removeNodeFromListAndLookupTable(node);\r\n            node = prev;\r\n        }\r\n    }\r\n    mapNodeToEntry({ key, value }) {\r\n        return {\r\n            key,\r\n            value\r\n        };\r\n    }\r\n    setNodeAsHead(node) {\r\n        this.removeNodeFromList(node);\r\n        if (!this.head) {\r\n            this.head = node;\r\n            this.tail = node;\r\n        }\r\n        else {\r\n            node.next = this.head;\r\n            this.head.prev = node;\r\n            this.head = node;\r\n        }\r\n        node.invokeOnEntryMarkedAsMostRecentlyUsed();\r\n    }\r\n    removeNodeFromList(node) {\r\n        if (node.prev !== null) {\r\n            node.prev.next = node.next;\r\n        }\r\n        if (node.next !== null) {\r\n            node.next.prev = node.prev;\r\n        }\r\n        if (this.head === node) {\r\n            this.head = node.next;\r\n        }\r\n        if (this.tail === node) {\r\n            this.tail = node.prev;\r\n        }\r\n        node.next = null;\r\n        node.prev = null;\r\n    }\r\n    removeNodeFromListAndLookupTable(node) {\r\n        node.invokeOnEvicted();\r\n        this.removeNodeFromList(node);\r\n        return this.lookupTable.delete(node.key);\r\n    }\r\n    cleanCache() {\r\n        // Don't spend time cleaning if entries don't expire.\r\n        if (!this.entryExpirationTimeInMS) {\r\n            return;\r\n        }\r\n        const expiredNodes = [];\r\n        for (const node of this.lookupTable.values()) {\r\n            if (node.isExpired) {\r\n                expiredNodes.push(node);\r\n            }\r\n        }\r\n        expiredNodes.forEach(node => this.removeNodeFromListAndLookupTable(node));\r\n    }\r\n}\r\nexports.LRUCache = LRUCache;\r\n//# sourceMappingURL=LRUCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/typescript-lru-cache/dist/LRUCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/typescript-lru-cache/dist/LRUCacheNode.js":
/*!****************************************************************!*\
  !*** ./node_modules/typescript-lru-cache/dist/LRUCacheNode.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LRUCacheNode = void 0;\r\nclass LRUCacheNode {\r\n    constructor(key, value, options) {\r\n        const { entryExpirationTimeInMS = null, next = null, prev = null, onEntryEvicted, onEntryMarkedAsMostRecentlyUsed, clone, cloneFn } = options !== null && options !== void 0 ? options : {};\r\n        if (typeof entryExpirationTimeInMS === 'number' &&\r\n            (entryExpirationTimeInMS <= 0 || Number.isNaN(entryExpirationTimeInMS))) {\r\n            throw new Error('entryExpirationTimeInMS must either be null (no expiry) or greater than 0');\r\n        }\r\n        this.clone = clone !== null && clone !== void 0 ? clone : false;\r\n        this.cloneFn = cloneFn !== null && cloneFn !== void 0 ? cloneFn : this.defaultClone;\r\n        this.key = key;\r\n        this.internalValue = this.clone ? this.cloneFn(value) : value;\r\n        this.created = Date.now();\r\n        this.entryExpirationTimeInMS = entryExpirationTimeInMS;\r\n        this.next = next;\r\n        this.prev = prev;\r\n        this.onEntryEvicted = onEntryEvicted;\r\n        this.onEntryMarkedAsMostRecentlyUsed = onEntryMarkedAsMostRecentlyUsed;\r\n    }\r\n    get value() {\r\n        return this.clone ? this.cloneFn(this.internalValue) : this.internalValue;\r\n    }\r\n    get isExpired() {\r\n        return typeof this.entryExpirationTimeInMS === 'number' && Date.now() - this.created > this.entryExpirationTimeInMS;\r\n    }\r\n    invokeOnEvicted() {\r\n        if (this.onEntryEvicted) {\r\n            const { key, value, isExpired } = this;\r\n            this.onEntryEvicted({ key, value, isExpired });\r\n        }\r\n    }\r\n    invokeOnEntryMarkedAsMostRecentlyUsed() {\r\n        if (this.onEntryMarkedAsMostRecentlyUsed) {\r\n            const { key, value } = this;\r\n            this.onEntryMarkedAsMostRecentlyUsed({ key, value });\r\n        }\r\n    }\r\n    defaultClone(value) {\r\n        if (typeof value === 'boolean' || typeof value === 'string' || typeof value === 'number') {\r\n            return value;\r\n        }\r\n        return JSON.parse(JSON.stringify(value));\r\n    }\r\n}\r\nexports.LRUCacheNode = LRUCacheNode;\r\n//# sourceMappingURL=LRUCacheNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHlwZXNjcmlwdC1scnUtY2FjaGUvZGlzdC9MUlVDYWNoZU5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQSxnQkFBZ0IsNEhBQTRIO0FBQzVJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd0JBQXdCO0FBQzVDLGtDQUFrQyx1QkFBdUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQyxtREFBbUQsWUFBWTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYWJsb2Zlcm5hbmRlei90ZXN0MTIzL1RFTkVYLXBma21jOS9tYWluL25vZGVfbW9kdWxlcy90eXBlc2NyaXB0LWxydS1jYWNoZS9kaXN0L0xSVUNhY2hlTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkxSVUNhY2hlTm9kZSA9IHZvaWQgMDtcclxuY2xhc3MgTFJVQ2FjaGVOb2RlIHtcclxuICAgIGNvbnN0cnVjdG9yKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCB7IGVudHJ5RXhwaXJhdGlvblRpbWVJbk1TID0gbnVsbCwgbmV4dCA9IG51bGwsIHByZXYgPSBudWxsLCBvbkVudHJ5RXZpY3RlZCwgb25FbnRyeU1hcmtlZEFzTW9zdFJlY2VudGx5VXNlZCwgY2xvbmUsIGNsb25lRm4gfSA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnlFeHBpcmF0aW9uVGltZUluTVMgPT09ICdudW1iZXInICYmXHJcbiAgICAgICAgICAgIChlbnRyeUV4cGlyYXRpb25UaW1lSW5NUyA8PSAwIHx8IE51bWJlci5pc05hTihlbnRyeUV4cGlyYXRpb25UaW1lSW5NUykpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZW50cnlFeHBpcmF0aW9uVGltZUluTVMgbXVzdCBlaXRoZXIgYmUgbnVsbCAobm8gZXhwaXJ5KSBvciBncmVhdGVyIHRoYW4gMCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNsb25lID0gY2xvbmUgIT09IG51bGwgJiYgY2xvbmUgIT09IHZvaWQgMCA/IGNsb25lIDogZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jbG9uZUZuID0gY2xvbmVGbiAhPT0gbnVsbCAmJiBjbG9uZUZuICE9PSB2b2lkIDAgPyBjbG9uZUZuIDogdGhpcy5kZWZhdWx0Q2xvbmU7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbFZhbHVlID0gdGhpcy5jbG9uZSA/IHRoaXMuY2xvbmVGbih2YWx1ZSkgOiB2YWx1ZTtcclxuICAgICAgICB0aGlzLmNyZWF0ZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHRoaXMuZW50cnlFeHBpcmF0aW9uVGltZUluTVMgPSBlbnRyeUV4cGlyYXRpb25UaW1lSW5NUztcclxuICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xyXG4gICAgICAgIHRoaXMucHJldiA9IHByZXY7XHJcbiAgICAgICAgdGhpcy5vbkVudHJ5RXZpY3RlZCA9IG9uRW50cnlFdmljdGVkO1xyXG4gICAgICAgIHRoaXMub25FbnRyeU1hcmtlZEFzTW9zdFJlY2VudGx5VXNlZCA9IG9uRW50cnlNYXJrZWRBc01vc3RSZWNlbnRseVVzZWQ7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUgPyB0aGlzLmNsb25lRm4odGhpcy5pbnRlcm5hbFZhbHVlKSA6IHRoaXMuaW50ZXJuYWxWYWx1ZTtcclxuICAgIH1cclxuICAgIGdldCBpc0V4cGlyZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmVudHJ5RXhwaXJhdGlvblRpbWVJbk1TID09PSAnbnVtYmVyJyAmJiBEYXRlLm5vdygpIC0gdGhpcy5jcmVhdGVkID4gdGhpcy5lbnRyeUV4cGlyYXRpb25UaW1lSW5NUztcclxuICAgIH1cclxuICAgIGludm9rZU9uRXZpY3RlZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5vbkVudHJ5RXZpY3RlZCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IGtleSwgdmFsdWUsIGlzRXhwaXJlZCB9ID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5vbkVudHJ5RXZpY3RlZCh7IGtleSwgdmFsdWUsIGlzRXhwaXJlZCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbnZva2VPbkVudHJ5TWFya2VkQXNNb3N0UmVjZW50bHlVc2VkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9uRW50cnlNYXJrZWRBc01vc3RSZWNlbnRseVVzZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLm9uRW50cnlNYXJrZWRBc01vc3RSZWNlbnRseVVzZWQoeyBrZXksIHZhbHVlIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRlZmF1bHRDbG9uZSh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTFJVQ2FjaGVOb2RlID0gTFJVQ2FjaGVOb2RlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1MUlVDYWNoZU5vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/typescript-lru-cache/dist/LRUCacheNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/typescript-lru-cache/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/typescript-lru-cache/dist/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n__exportStar(__webpack_require__(/*! ./LRUCache */ \"(ssr)/./node_modules/typescript-lru-cache/dist/LRUCache.js\"), exports);\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHlwZXNjcmlwdC1scnUtY2FjaGUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsOEVBQVk7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYWJsb2Zlcm5hbmRlei90ZXN0MTIzL1RFTkVYLXBma21jOS9tYWluL25vZGVfbW9kdWxlcy90eXBlc2NyaXB0LWxydS1jYWNoZS9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KSk7XHJcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9MUlVDYWNoZVwiKSwgZXhwb3J0cyk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/typescript-lru-cache/dist/index.js\n");

/***/ })

};
;