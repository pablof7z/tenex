"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cashu";
exports.ids = ["vendor-chunks/@cashu"];
exports.modules = {

/***/ "(ssr)/./node_modules/@cashu/cashu-ts/lib/cashu-ts.es.js":
/*!*********************************************************!*\
  !*** ./node_modules/@cashu/cashu-ts/lib/cashu-ts.es.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CashuMint: () => (/* binding */ P),\n/* harmony export */   CashuWallet: () => (/* binding */ Be),\n/* harmony export */   CheckStateEnum: () => (/* binding */ le),\n/* harmony export */   HttpResponseError: () => (/* binding */ R),\n/* harmony export */   MeltQuoteState: () => (/* binding */ N),\n/* harmony export */   MintOperationError: () => (/* binding */ st),\n/* harmony export */   MintQuoteState: () => (/* binding */ j),\n/* harmony export */   NetworkError: () => (/* binding */ et),\n/* harmony export */   OutputData: () => (/* binding */ q),\n/* harmony export */   PaymentRequest: () => (/* binding */ Z),\n/* harmony export */   PaymentRequestTransportType: () => (/* binding */ fe),\n/* harmony export */   decodePaymentRequest: () => (/* binding */ De),\n/* harmony export */   deriveKeysetId: () => (/* binding */ Ue),\n/* harmony export */   getDecodedToken: () => (/* binding */ se),\n/* harmony export */   getDecodedTokenBinary: () => (/* binding */ xe),\n/* harmony export */   getEncodedToken: () => (/* binding */ Te),\n/* harmony export */   getEncodedTokenBinary: () => (/* binding */ Oe),\n/* harmony export */   getEncodedTokenV4: () => (/* binding */ ee),\n/* harmony export */   hasValidDleq: () => (/* binding */ ae),\n/* harmony export */   injectWebSocketImpl: () => (/* binding */ Fe),\n/* harmony export */   setGlobalRequestOptions: () => (/* binding */ Ne)\n/* harmony export */ });\n/* harmony import */ var _cashu_crypto_modules_client_NUT12__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cashu/crypto/modules/client/NUT12 */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/client/NUT12.js\");\n/* harmony import */ var _cashu_crypto_modules_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cashu/crypto/modules/common */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/common/index.js\");\n/* harmony import */ var _noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var _cashu_crypto_modules_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @cashu/crypto/modules/client */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/client/index.js\");\n/* harmony import */ var _cashu_crypto_modules_client_NUT11__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @cashu/crypto/modules/client/NUT11 */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/client/NUT11.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _cashu_crypto_modules_client_NUT09__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @cashu/crypto/modules/client/NUT09 */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/client/NUT09.js\");\n\n\n\n\n\n\n\n\n\n\nfunction Ot(s) {\n  return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(s).toString(\"base64\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\nfunction gt(s) {\n  return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(s, \"base64\");\n}\nfunction xt(s) {\n  const t = JSON.stringify(s);\n  return Bt(buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(t).toString(\"base64\"));\n}\nfunction Ft(s) {\n  const t = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(Nt(s), \"base64\").toString();\n  return JSON.parse(t);\n}\nfunction Nt(s) {\n  return s.replace(/-/g, \"+\").replace(/_/g, \"/\").split(\"=\")[0];\n}\nfunction Bt(s) {\n  return s.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").split(\"=\")[0];\n}\nfunction Kt(s) {\n  return typeof s == \"number\" || typeof s == \"string\";\n}\nfunction J(s) {\n  const t = [];\n  return Y(s, t), new Uint8Array(t);\n}\nfunction Y(s, t) {\n  if (s === null)\n    t.push(246);\n  else if (s === void 0)\n    t.push(247);\n  else if (typeof s == \"boolean\")\n    t.push(s ? 245 : 244);\n  else if (typeof s == \"number\")\n    wt(s, t);\n  else if (typeof s == \"string\")\n    kt(s, t);\n  else if (Array.isArray(s))\n    Qt(s, t);\n  else if (s instanceof Uint8Array)\n    Rt(s, t);\n  else if (typeof s == \"object\")\n    Lt(s, t);\n  else\n    throw new Error(\"Unsupported type\");\n}\nfunction wt(s, t) {\n  if (s < 24)\n    t.push(s);\n  else if (s < 256)\n    t.push(24, s);\n  else if (s < 65536)\n    t.push(25, s >> 8, s & 255);\n  else if (s < 4294967296)\n    t.push(26, s >> 24, s >> 16 & 255, s >> 8 & 255, s & 255);\n  else\n    throw new Error(\"Unsupported integer size\");\n}\nfunction Rt(s, t) {\n  const e = s.length;\n  if (e < 24)\n    t.push(64 + e);\n  else if (e < 256)\n    t.push(88, e);\n  else if (e < 65536)\n    t.push(89, e >> 8 & 255, e & 255);\n  else if (e < 4294967296)\n    t.push(\n      90,\n      e >> 24 & 255,\n      e >> 16 & 255,\n      e >> 8 & 255,\n      e & 255\n    );\n  else\n    throw new Error(\"Byte string too long to encode\");\n  for (let n = 0; n < s.length; n++)\n    t.push(s[n]);\n}\nfunction kt(s, t) {\n  const e = new TextEncoder().encode(s), n = e.length;\n  if (n < 24)\n    t.push(96 + n);\n  else if (n < 256)\n    t.push(120, n);\n  else if (n < 65536)\n    t.push(121, n >> 8 & 255, n & 255);\n  else if (n < 4294967296)\n    t.push(\n      122,\n      n >> 24 & 255,\n      n >> 16 & 255,\n      n >> 8 & 255,\n      n & 255\n    );\n  else\n    throw new Error(\"String too long to encode\");\n  for (let r = 0; r < e.length; r++)\n    t.push(e[r]);\n}\nfunction Qt(s, t) {\n  const e = s.length;\n  if (e < 24)\n    t.push(128 | e);\n  else if (e < 256)\n    t.push(152, e);\n  else if (e < 65536)\n    t.push(153, e >> 8, e & 255);\n  else\n    throw new Error(\"Unsupported array length\");\n  for (const n of s)\n    Y(n, t);\n}\nfunction Lt(s, t) {\n  const e = Object.keys(s);\n  wt(e.length, t), t[t.length - 1] |= 160;\n  for (const n of e)\n    kt(n, t), Y(s[n], t);\n}\nfunction X(s) {\n  const t = new DataView(s.buffer, s.byteOffset, s.byteLength);\n  return W(t, 0).value;\n}\nfunction W(s, t) {\n  if (t >= s.byteLength)\n    throw new Error(\"Unexpected end of data\");\n  const e = s.getUint8(t++), n = e >> 5, r = e & 31;\n  switch (n) {\n    case 0:\n      return Wt(s, t, r);\n    case 1:\n      return jt(s, t, r);\n    case 2:\n      return Ct(s, t, r);\n    case 3:\n      return Ht(s, t, r);\n    case 4:\n      return $t(s, t, r);\n    case 5:\n      return zt(s, t, r);\n    case 7:\n      return Gt(s, t, r);\n    default:\n      throw new Error(`Unsupported major type: ${n}`);\n  }\n}\nfunction B(s, t, e) {\n  if (e < 24) return { value: e, offset: t };\n  if (e === 24) return { value: s.getUint8(t++), offset: t };\n  if (e === 25) {\n    const n = s.getUint16(t, !1);\n    return t += 2, { value: n, offset: t };\n  }\n  if (e === 26) {\n    const n = s.getUint32(t, !1);\n    return t += 4, { value: n, offset: t };\n  }\n  if (e === 27) {\n    const n = s.getUint32(t, !1), r = s.getUint32(t + 4, !1);\n    return t += 8, { value: n * 2 ** 32 + r, offset: t };\n  }\n  throw new Error(`Unsupported length: ${e}`);\n}\nfunction Wt(s, t, e) {\n  const { value: n, offset: r } = B(s, t, e);\n  return { value: n, offset: r };\n}\nfunction jt(s, t, e) {\n  const { value: n, offset: r } = B(s, t, e);\n  return { value: -1 - n, offset: r };\n}\nfunction Ct(s, t, e) {\n  const { value: n, offset: r } = B(s, t, e);\n  if (r + n > s.byteLength)\n    throw new Error(\"Byte string length exceeds data length\");\n  return { value: new Uint8Array(s.buffer, s.byteOffset + r, n), offset: r + n };\n}\nfunction Ht(s, t, e) {\n  const { value: n, offset: r } = B(s, t, e);\n  if (r + n > s.byteLength)\n    throw new Error(\"String length exceeds data length\");\n  const o = new Uint8Array(s.buffer, s.byteOffset + r, n);\n  return { value: new TextDecoder().decode(o), offset: r + n };\n}\nfunction $t(s, t, e) {\n  const { value: n, offset: r } = B(s, t, e), o = [];\n  let i = r;\n  for (let c = 0; c < n; c++) {\n    const a = W(s, i);\n    o.push(a.value), i = a.offset;\n  }\n  return { value: o, offset: i };\n}\nfunction zt(s, t, e) {\n  const { value: n, offset: r } = B(s, t, e), o = {};\n  let i = r;\n  for (let c = 0; c < n; c++) {\n    const a = W(s, i);\n    if (!Kt(a.value))\n      throw new Error(\"Invalid key type\");\n    const h = W(s, a.offset);\n    o[a.value] = h.value, i = h.offset;\n  }\n  return { value: o, offset: i };\n}\nfunction Vt(s) {\n  const t = (s & 31744) >> 10, e = s & 1023, n = s & 32768 ? -1 : 1;\n  return t === 0 ? n * 2 ** -14 * (e / 1024) : t === 31 ? e ? NaN : n * (1 / 0) : n * 2 ** (t - 15) * (1 + e / 1024);\n}\nfunction Gt(s, t, e) {\n  if (e < 24)\n    switch (e) {\n      case 20:\n        return { value: !1, offset: t };\n      case 21:\n        return { value: !0, offset: t };\n      case 22:\n        return { value: null, offset: t };\n      case 23:\n        return { value: void 0, offset: t };\n      default:\n        throw new Error(`Unknown simple value: ${e}`);\n    }\n  if (e === 24) return { value: s.getUint8(t++), offset: t };\n  if (e === 25) {\n    const n = Vt(s.getUint16(t, !1));\n    return t += 2, { value: n, offset: t };\n  }\n  if (e === 26) {\n    const n = s.getFloat32(t, !1);\n    return t += 4, { value: n, offset: t };\n  }\n  if (e === 27) {\n    const n = s.getFloat64(t, !1);\n    return t += 8, { value: n, offset: t };\n  }\n  throw new Error(`Unknown simple or float value: ${e}`);\n}\nclass Z {\n  constructor(t, e, n, r, o, i, c = !1) {\n    this.transport = t, this.id = e, this.amount = n, this.unit = r, this.mints = o, this.description = i, this.singleUse = c;\n  }\n  toRawRequest() {\n    const t = {\n      t: this.transport.map((e) => ({ t: e.type, a: e.target, g: e.tags }))\n    };\n    return this.id && (t.i = this.id), this.amount && (t.a = this.amount), this.unit && (t.u = this.unit), this.mints && (t.m = this.mints), this.description && (t.d = this.description), this.singleUse && (t.s = this.singleUse), t;\n  }\n  toEncodedRequest() {\n    const t = this.toRawRequest(), e = J(t);\n    return \"creqA\" + buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(e).toString(\"base64\");\n  }\n  getTransport(t) {\n    return this.transport.find((e) => e.type === t);\n  }\n  static fromRawRequest(t) {\n    const e = t.t.map((n) => ({\n      type: n.t,\n      target: n.a,\n      tags: n.g\n    }));\n    return new Z(\n      e,\n      t.i,\n      t.a,\n      t.u,\n      t.m,\n      t.d,\n      t.s\n    );\n  }\n  static fromEncodedRequest(t) {\n    if (!t.startsWith(\"creq\"))\n      throw new Error(\"unsupported pr: invalid prefix\");\n    if (t[4] !== \"A\")\n      throw new Error(\"unsupported pr version\");\n    const n = t.slice(5), r = gt(n), o = X(r);\n    return this.fromRawRequest(o);\n  }\n}\nconst Jt = \"A\", Yt = \"cashu\";\nfunction S(s, t, e, n) {\n  if (e) {\n    const o = ft(e);\n    if (o > s)\n      throw new Error(`Split is greater than total amount: ${o} > ${s}`);\n    if (e.some((i) => !_t(i, t)))\n      throw new Error(\"Provided amount preferences do not match the amounts of the mint keyset.\");\n    s = s - ft(e);\n  } else\n    e = [];\n  return bt(t, \"desc\").forEach((o) => {\n    const i = Math.floor(s / o);\n    for (let c = 0; c < i; ++c) e?.push(o);\n    s %= o;\n  }), e.sort((o, i) => o - i);\n}\nfunction dt(s, t, e, n) {\n  const r = [], o = s.map((h) => h.amount);\n  bt(e, \"asc\").forEach((h) => {\n    const d = o.filter((m) => m === h).length, f = Math.max(n - d, 0);\n    for (let m = 0; m < f && !(r.reduce((u, l) => u + l, 0) + h > t); ++m)\n      r.push(h);\n  });\n  const c = t - r.reduce((h, d) => h + d, 0);\n  return c && S(c, e).forEach((d) => {\n    r.push(d);\n  }), r.sort((h, d) => h - d);\n}\nfunction bt(s, t = \"desc\") {\n  return t == \"desc\" ? Object.keys(s).map((e) => parseInt(e)).sort((e, n) => n - e) : Object.keys(s).map((e) => parseInt(e)).sort((e, n) => e - n);\n}\nfunction _t(s, t) {\n  return s in t;\n}\nfunction Xt(s) {\n  return Et((0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(s));\n}\nfunction Et(s) {\n  return BigInt(`0x${s}`);\n}\nfunction Zt(s) {\n  return s.toString(16).padStart(64, \"0\");\n}\nfunction lt(s) {\n  return /^[a-f0-9]*$/i.test(s);\n}\nfunction Pt(s) {\n  return Array.isArray(s) ? s.some((t) => !lt(t.id)) : lt(s.id);\n}\nfunction te(s) {\n  const t = { token: [{ mint: s.mint, proofs: s.proofs }] };\n  return s.unit && (t.unit = s.unit), s.memo && (t.memo = s.memo), Yt + Jt + xt(t);\n}\nfunction Te(s, t) {\n  if (Pt(s.proofs) || t?.version === 3) {\n    if (t?.version === 4)\n      throw new Error(\"can not encode to v4 token if proofs contain non-hex keyset id\");\n    return te(s);\n  }\n  return ee(s);\n}\nfunction ee(s) {\n  if (s.proofs.forEach((c) => {\n    if (c.dleq && c.dleq.r == null)\n      throw new Error(\"Missing blinding factor in included DLEQ proof\");\n  }), Pt(s.proofs))\n    throw new Error(\"can not encode to v4 token if proofs contain non-hex keyset id\");\n  const e = St(s), n = J(e), r = \"cashu\", o = \"B\", i = Ot(n);\n  return r + o + i;\n}\nfunction St(s) {\n  const t = {}, e = s.mint;\n  for (let r = 0; r < s.proofs.length; r++) {\n    const o = s.proofs[r];\n    t[o.id] ? t[o.id].push(o) : t[o.id] = [o];\n  }\n  const n = {\n    m: e,\n    u: s.unit || \"sat\",\n    t: Object.keys(t).map(\n      (r) => ({\n        i: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(r),\n        p: t[r].map(\n          (o) => ({\n            a: o.amount,\n            s: o.secret,\n            c: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(o.C),\n            ...o.dleq && {\n              d: {\n                e: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(o.dleq.e),\n                s: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(o.dleq.s),\n                r: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(o.dleq.r ?? \"00\")\n              }\n            }\n          })\n        )\n      })\n    )\n  };\n  return s.memo && (n.d = s.memo), n;\n}\nfunction It(s) {\n  const t = [];\n  s.t.forEach(\n    (n) => n.p.forEach((r) => {\n      t.push({\n        secret: r.s,\n        C: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(r.c),\n        amount: r.a,\n        id: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(n.i),\n        ...r.d && {\n          dleq: {\n            r: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(r.d.r),\n            s: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(r.d.s),\n            e: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(r.d.e)\n          }\n        }\n      });\n    })\n  );\n  const e = { mint: s.m, proofs: t, unit: s.u || \"sat\" };\n  return s.d && (e.memo = s.d), e;\n}\nfunction se(s) {\n  return [\"web+cashu://\", \"cashu://\", \"cashu:\", \"cashu\"].forEach((e) => {\n    s.startsWith(e) && (s = s.slice(e.length));\n  }), ne(s);\n}\nfunction ne(s) {\n  const t = s.slice(0, 1), e = s.slice(1);\n  if (t === \"A\") {\n    const n = Ft(e);\n    if (n.token.length > 1)\n      throw new Error(\"Multi entry token are not supported\");\n    const r = n.token[0], o = {\n      mint: r.mint,\n      proofs: r.proofs,\n      unit: n.unit || \"sat\"\n    };\n    return n.memo && (o.memo = n.memo), o;\n  } else if (t === \"B\") {\n    const n = gt(e), r = X(n);\n    return It(r);\n  }\n  throw new Error(\"Token version is not supported\");\n}\nfunction Ue(s) {\n  const t = Object.entries(s).sort((r, o) => +r[0] - +o[0]).map(([, r]) => (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(r)).reduce((r, o) => re(r, o), new Uint8Array()), e = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_7__.sha256)(t);\n  return \"00\" + Buffer.from(e).toString(\"hex\").slice(0, 14);\n}\nfunction re(s, t) {\n  const e = new Uint8Array(s.length + t.length);\n  return e.set(s), e.set(t, s.length), e;\n}\nfunction v(s) {\n  return typeof s == \"object\";\n}\nfunction E(...s) {\n  return s.map((t) => t.replace(/(^\\/+|\\/+$)/g, \"\")).join(\"/\");\n}\nfunction oe(s) {\n  return s.replace(/\\/$/, \"\");\n}\nfunction U(s) {\n  return s.reduce((t, e) => t + e.amount, 0);\n}\nfunction De(s) {\n  return Z.fromEncodedRequest(s);\n}\nclass ie {\n  get value() {\n    return this._value;\n  }\n  set value(t) {\n    this._value = t;\n  }\n  get next() {\n    return this._next;\n  }\n  set next(t) {\n    this._next = t;\n  }\n  constructor(t) {\n    this._value = t, this._next = null;\n  }\n}\nclass ce {\n  get first() {\n    return this._first;\n  }\n  set first(t) {\n    this._first = t;\n  }\n  get last() {\n    return this._last;\n  }\n  set last(t) {\n    this._last = t;\n  }\n  get size() {\n    return this._size;\n  }\n  set size(t) {\n    this._size = t;\n  }\n  constructor() {\n    this._first = null, this._last = null, this._size = 0;\n  }\n  enqueue(t) {\n    const e = new ie(t);\n    return this._size === 0 || !this._last ? (this._first = e, this._last = e) : (this._last.next = e, this._last = e), this._size++, !0;\n  }\n  dequeue() {\n    if (this._size === 0 || !this._first) return null;\n    const t = this._first;\n    return this._first = t.next, t.next = null, this._size--, t.value;\n  }\n}\nfunction L(s) {\n  return s.map((t) => {\n    const e = { ...t };\n    return delete e.dleq, e;\n  });\n}\nfunction ae(s, t) {\n  if (s.dleq == null)\n    return !1;\n  const e = {\n    e: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(s.dleq.e),\n    s: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(s.dleq.s),\n    r: Et(s.dleq.r ?? \"00\")\n  };\n  if (!_t(s.amount, t.keys))\n    throw new Error(`undefined key for amount ${s.amount}`);\n  const n = t.keys[s.amount];\n  return !!(0,_cashu_crypto_modules_client_NUT12__WEBPACK_IMPORTED_MODULE_0__.verifyDLEQProof_reblind)(\n    new TextEncoder().encode(s.secret),\n    e,\n    (0,_cashu_crypto_modules_common__WEBPACK_IMPORTED_MODULE_1__.pointFromHex)(s.C),\n    (0,_cashu_crypto_modules_common__WEBPACK_IMPORTED_MODULE_1__.pointFromHex)(n)\n  );\n}\nfunction ue(...s) {\n  const t = s.reduce((r, o) => r + o.length, 0), e = new Uint8Array(t);\n  let n = 0;\n  for (let r = 0; r < s.length; r++)\n    e.set(s[r], n), n = n + s[r].length;\n  return e;\n}\nfunction Oe(s) {\n  const t = new TextEncoder(), e = St(s), n = J(e), r = t.encode(\"craw\"), o = t.encode(\"B\");\n  return ue(r, o, n);\n}\nfunction xe(s) {\n  const t = new TextDecoder(), e = t.decode(s.slice(0, 4)), n = t.decode(new Uint8Array([s[4]]));\n  if (e !== \"craw\" || n !== \"B\")\n    throw new Error(\"not a valid binary token\");\n  const r = s.slice(5), o = X(r);\n  return It(o);\n}\nfunction ft(s) {\n  return s.reduce((t, e) => t + e, 0);\n}\nlet tt;\ntypeof WebSocket < \"u\" && (tt = WebSocket);\nfunction Fe(s) {\n  tt = s;\n}\nfunction he() {\n  return tt;\n}\nclass x {\n  constructor() {\n    this.connectionMap = /* @__PURE__ */ new Map();\n  }\n  static getInstance() {\n    return x.instace || (x.instace = new x()), x.instace;\n  }\n  getConnection(t) {\n    if (this.connectionMap.has(t))\n      return this.connectionMap.get(t);\n    const e = new de(t);\n    return this.connectionMap.set(t, e), e;\n  }\n}\nclass de {\n  constructor(t) {\n    this.subListeners = {}, this.rpcListeners = {}, this.rpcId = 0, this._WS = he(), this.url = new URL(t), this.messageQueue = new ce();\n  }\n  connect() {\n    return this.connectionPromise || (this.connectionPromise = new Promise((t, e) => {\n      try {\n        this.ws = new this._WS(this.url);\n      } catch (n) {\n        e(n);\n        return;\n      }\n      this.ws.onopen = () => {\n        t();\n      }, this.ws.onerror = () => {\n        e(new Error(\"Failed to open WebSocket\"));\n      }, this.ws.onmessage = (n) => {\n        this.messageQueue.enqueue(n.data), this.handlingInterval || (this.handlingInterval = setInterval(\n          this.handleNextMesage.bind(this),\n          0\n        ));\n      }, this.ws.onclose = () => {\n        this.connectionPromise = void 0;\n      };\n    })), this.connectionPromise;\n  }\n  sendRequest(t, e) {\n    if (this.ws?.readyState !== 1)\n      throw new Error(\"Socket not open...\");\n    const n = this.rpcId;\n    this.rpcId++;\n    const r = JSON.stringify({ jsonrpc: \"2.0\", method: t, params: e, id: n });\n    this.ws?.send(r);\n  }\n  closeSubscription(t) {\n    this.ws?.send(JSON.stringify([\"CLOSE\", t]));\n  }\n  addSubListener(t, e) {\n    (this.subListeners[t] = this.subListeners[t] || []).push(e);\n  }\n  //TODO: Move to RPCManagerClass\n  addRpcListener(t, e, n) {\n    this.rpcListeners[n] = { callback: t, errorCallback: e };\n  }\n  //TODO: Move to RPCManagerClass\n  removeRpcListener(t) {\n    delete this.rpcListeners[t];\n  }\n  removeListener(t, e) {\n    if (this.subListeners[t].length === 1) {\n      delete this.subListeners[t];\n      return;\n    }\n    this.subListeners[t] = this.subListeners[t].filter((n) => n !== e);\n  }\n  async ensureConnection() {\n    this.ws?.readyState !== 1 && await this.connect();\n  }\n  handleNextMesage() {\n    if (this.messageQueue.size === 0) {\n      clearInterval(this.handlingInterval), this.handlingInterval = void 0;\n      return;\n    }\n    const t = this.messageQueue.dequeue();\n    let e;\n    try {\n      if (e = JSON.parse(t), \"result\" in e && e.id != null)\n        this.rpcListeners[e.id] && (this.rpcListeners[e.id].callback(), this.removeRpcListener(e.id));\n      else if (\"error\" in e && e.id != null)\n        this.rpcListeners[e.id] && (this.rpcListeners[e.id].errorCallback(e.error), this.removeRpcListener(e.id));\n      else if (\"method\" in e && !(\"id\" in e)) {\n        const n = e.params.subId;\n        if (!n)\n          return;\n        if (this.subListeners[n]?.length > 0) {\n          const r = e;\n          this.subListeners[n].forEach((o) => o(r.params.payload));\n        }\n      }\n    } catch (n) {\n      console.error(n);\n      return;\n    }\n  }\n  createSubscription(t, e, n) {\n    if (this.ws?.readyState !== 1)\n      return n(new Error(\"Socket is not open\"));\n    const r = (Math.random() + 1).toString(36).substring(7);\n    return this.addRpcListener(\n      () => {\n        this.addSubListener(r, e);\n      },\n      (o) => {\n        n(new Error(o.message));\n      },\n      this.rpcId\n    ), this.sendRequest(\"subscribe\", { ...t, subId: r }), this.rpcId++, r;\n  }\n  cancelSubscription(t, e) {\n    this.removeListener(t, e), this.rpcId++, this.sendRequest(\"unsubscribe\", { subId: t });\n  }\n  get activeSubscriptions() {\n    return Object.keys(this.subListeners);\n  }\n  close() {\n    this.ws && this.ws?.close();\n  }\n}\nvar le = /* @__PURE__ */ ((s) => (s.UNSPENT = \"UNSPENT\", s.PENDING = \"PENDING\", s.SPENT = \"SPENT\", s))(le || {}), N = /* @__PURE__ */ ((s) => (s.UNPAID = \"UNPAID\", s.PENDING = \"PENDING\", s.PAID = \"PAID\", s))(N || {}), j = /* @__PURE__ */ ((s) => (s.UNPAID = \"UNPAID\", s.PAID = \"PAID\", s.ISSUED = \"ISSUED\", s))(j || {}), fe = /* @__PURE__ */ ((s) => (s.POST = \"post\", s.NOSTR = \"nostr\", s))(fe || {});\nclass R extends Error {\n  constructor(t, e) {\n    super(t), this.status = e, this.name = \"HttpResponseError\", Object.setPrototypeOf(this, R.prototype);\n  }\n}\nclass et extends Error {\n  constructor(t) {\n    super(t), this.name = \"NetworkError\", Object.setPrototypeOf(this, et.prototype);\n  }\n}\nclass st extends R {\n  constructor(t, e) {\n    super(e || \"Unknown mint operation error\", 400), this.code = t, this.name = \"MintOperationError\", Object.setPrototypeOf(this, st.prototype);\n  }\n}\nlet At = {};\nfunction Ne(s) {\n  At = s;\n}\nasync function pe({\n  endpoint: s,\n  requestBody: t,\n  headers: e,\n  ...n\n}) {\n  const r = t ? JSON.stringify(t) : void 0, o = {\n    Accept: \"application/json, text/plain, */*\",\n    ...r ? { \"Content-Type\": \"application/json\" } : void 0,\n    ...e\n  };\n  let i;\n  try {\n    i = await fetch(s, { body: r, headers: o, ...n });\n  } catch (c) {\n    throw new et(c instanceof Error ? c.message : \"Network request failed\");\n  }\n  if (!i.ok) {\n    const c = await i.json().catch(() => ({ error: \"bad response\" }));\n    throw i.status === 400 && \"code\" in c && \"detail\" in c ? new st(c.code, c.detail) : new R(\n      \"error\" in c ? c.error : c.detail || \"HTTP request failed\",\n      i.status\n    );\n  }\n  try {\n    return await i.json();\n  } catch (c) {\n    throw console.error(\"Failed to parse HTTP response\", c), new R(\"bad response\", i.status);\n  }\n}\nasync function A(s) {\n  return await pe({ ...s, ...At });\n}\nfunction H(s) {\n  return s.state || (console.warn(\n    \"Field 'state' not found in MeltQuoteResponse. Update NUT-05 of mint: https://github.com/cashubtc/nuts/pull/136)\"\n  ), typeof s.paid == \"boolean\" && (s.state = s.paid ? N.PAID : N.UNPAID)), s;\n}\nfunction pt(s) {\n  return s.state || (console.warn(\n    \"Field 'state' not found in MintQuoteResponse. Update NUT-04 of mint: https://github.com/cashubtc/nuts/pull/141)\"\n  ), typeof s.paid == \"boolean\" && (s.state = s.paid ? j.PAID : j.UNPAID)), s;\n}\nfunction me(s) {\n  return Array.isArray(s?.contact) && s?.contact.length > 0 && (s.contact = s.contact.map((t) => Array.isArray(t) && t.length === 2 && typeof t[0] == \"string\" && typeof t[1] == \"string\" ? (console.warn(\n    \"Mint returned deprecated 'contact' field: Update NUT-06: https://github.com/cashubtc/nuts/pull/117\"\n  ), { method: t[0], info: t[1] }) : t)), s;\n}\nclass P {\n  /**\n   * @param _mintUrl requires mint URL to create this object\n   * @param _customRequest if passed, use custom request implementation for network communication with the mint\n   */\n  constructor(t, e) {\n    this._mintUrl = t, this._customRequest = e, this._mintUrl = oe(t), this._customRequest = e;\n  }\n  get mintUrl() {\n    return this._mintUrl;\n  }\n  /**\n   * fetches mints info at the /info endpoint\n   * @param mintUrl\n   * @param customRequest\n   */\n  static async getInfo(t, e) {\n    const r = await (e || A)({\n      endpoint: E(t, \"/v1/info\")\n    });\n    return me(r);\n  }\n  /**\n   * fetches mints info at the /info endpoint\n   */\n  async getInfo() {\n    return P.getInfo(this._mintUrl, this._customRequest);\n  }\n  /**\n   * Performs a swap operation with ecash inputs and outputs.\n   * @param mintUrl\n   * @param swapPayload payload containing inputs and outputs\n   * @param customRequest\n   * @returns signed outputs\n   */\n  static async swap(t, e, n) {\n    const o = await (n || A)({\n      endpoint: E(t, \"/v1/swap\"),\n      method: \"POST\",\n      requestBody: e\n    });\n    if (!v(o) || !Array.isArray(o?.signatures))\n      throw new Error(o.detail ?? \"bad response\");\n    return o;\n  }\n  /**\n   * Performs a swap operation with ecash inputs and outputs.\n   * @param swapPayload payload containing inputs and outputs\n   * @returns signed outputs\n   */\n  async swap(t) {\n    return P.swap(this._mintUrl, t, this._customRequest);\n  }\n  /**\n   * Requests a new mint quote from the mint.\n   * @param mintUrl\n   * @param mintQuotePayload Payload for creating a new mint quote\n   * @param customRequest\n   * @returns the mint will create and return a new mint quote containing a payment request for the specified amount and unit\n   */\n  static async createMintQuote(t, e, n) {\n    const o = await (n || A)({\n      endpoint: E(t, \"/v1/mint/quote/bolt11\"),\n      method: \"POST\",\n      requestBody: e\n    });\n    return pt(o);\n  }\n  /**\n   * Requests a new mint quote from the mint.\n   * @param mintQuotePayload Payload for creating a new mint quote\n   * @returns the mint will create and return a new mint quote containing a payment request for the specified amount and unit\n   */\n  async createMintQuote(t) {\n    return P.createMintQuote(this._mintUrl, t, this._customRequest);\n  }\n  /**\n   * Gets an existing mint quote from the mint.\n   * @param mintUrl\n   * @param quote Quote ID\n   * @param customRequest\n   * @returns the mint will create and return a Lightning invoice for the specified amount\n   */\n  static async checkMintQuote(t, e, n) {\n    const o = await (n || A)({\n      endpoint: E(t, \"/v1/mint/quote/bolt11\", e),\n      method: \"GET\"\n    });\n    return pt(o);\n  }\n  /**\n   * Gets an existing mint quote from the mint.\n   * @param quote Quote ID\n   * @returns the mint will create and return a Lightning invoice for the specified amount\n   */\n  async checkMintQuote(t) {\n    return P.checkMintQuote(this._mintUrl, t, this._customRequest);\n  }\n  /**\n   * Mints new tokens by requesting blind signatures on the provided outputs.\n   * @param mintUrl\n   * @param mintPayload Payload containing the outputs to get blind signatures on\n   * @param customRequest\n   * @returns serialized blinded signatures\n   */\n  static async mint(t, e, n) {\n    const o = await (n || A)({\n      endpoint: E(t, \"/v1/mint/bolt11\"),\n      method: \"POST\",\n      requestBody: e\n    });\n    if (!v(o) || !Array.isArray(o?.signatures))\n      throw new Error(\"bad response\");\n    return o;\n  }\n  /**\n   * Mints new tokens by requesting blind signatures on the provided outputs.\n   * @param mintPayload Payload containing the outputs to get blind signatures on\n   * @returns serialized blinded signatures\n   */\n  async mint(t) {\n    return P.mint(this._mintUrl, t, this._customRequest);\n  }\n  /**\n   * Requests a new melt quote from the mint.\n   * @param mintUrl\n   * @param MeltQuotePayload\n   * @returns\n   */\n  static async createMeltQuote(t, e, n) {\n    const o = await (n || A)({\n      endpoint: E(t, \"/v1/melt/quote/bolt11\"),\n      method: \"POST\",\n      requestBody: e\n    }), i = H(o);\n    if (!v(i) || typeof i?.amount != \"number\" || typeof i?.fee_reserve != \"number\" || typeof i?.quote != \"string\")\n      throw new Error(\"bad response\");\n    return i;\n  }\n  /**\n   * Requests a new melt quote from the mint.\n   * @param MeltQuotePayload\n   * @returns\n   */\n  async createMeltQuote(t) {\n    return P.createMeltQuote(this._mintUrl, t, this._customRequest);\n  }\n  /**\n   * Gets an existing melt quote.\n   * @param mintUrl\n   * @param quote Quote ID\n   * @returns\n   */\n  static async checkMeltQuote(t, e, n) {\n    const o = await (n || A)({\n      endpoint: E(t, \"/v1/melt/quote/bolt11\", e),\n      method: \"GET\"\n    }), i = H(o);\n    if (!v(i) || typeof i?.amount != \"number\" || typeof i?.fee_reserve != \"number\" || typeof i?.quote != \"string\" || typeof i?.state != \"string\" || !Object.values(N).includes(i.state))\n      throw new Error(\"bad response\");\n    return i;\n  }\n  /**\n   * Gets an existing melt quote.\n   * @param quote Quote ID\n   * @returns\n   */\n  async checkMeltQuote(t) {\n    return P.checkMeltQuote(this._mintUrl, t, this._customRequest);\n  }\n  /**\n   * Requests the mint to pay for a Bolt11 payment request by providing ecash as inputs to be spent. The inputs contain the amount and the fee_reserves for a Lightning payment. The payload can also contain blank outputs in order to receive back overpaid Lightning fees.\n   * @param mintUrl\n   * @param meltPayload\n   * @param customRequest\n   * @returns\n   */\n  static async melt(t, e, n) {\n    const o = await (n || A)({\n      endpoint: E(t, \"/v1/melt/bolt11\"),\n      method: \"POST\",\n      requestBody: e\n    }), i = H(o);\n    if (!v(i) || typeof i?.state != \"string\" || !Object.values(N).includes(i.state))\n      throw new Error(\"bad response\");\n    return i;\n  }\n  /**\n   * Ask mint to perform a melt operation. This pays a lightning invoice and destroys tokens matching its amount + fees\n   * @param meltPayload\n   * @returns\n   */\n  async melt(t) {\n    return P.melt(this._mintUrl, t, this._customRequest);\n  }\n  /**\n   * Checks if specific proofs have already been redeemed\n   * @param mintUrl\n   * @param checkPayload\n   * @param customRequest\n   * @returns redeemed and unredeemed ordered list of booleans\n   */\n  static async check(t, e, n) {\n    const o = await (n || A)({\n      endpoint: E(t, \"/v1/checkstate\"),\n      method: \"POST\",\n      requestBody: e\n    });\n    if (!v(o) || !Array.isArray(o?.states))\n      throw new Error(\"bad response\");\n    return o;\n  }\n  /**\n   * Get the mints public keys\n   * @param mintUrl\n   * @param keysetId optional param to get the keys for a specific keyset. If not specified, the keys from all active keysets are fetched\n   * @param customRequest\n   * @returns\n   */\n  static async getKeys(t, e, n) {\n    e && (e = e.replace(/\\//g, \"_\").replace(/\\+/g, \"-\"));\n    const o = await (n || A)({\n      endpoint: e ? E(t, \"/v1/keys\", e) : E(t, \"/v1/keys\")\n    });\n    if (!v(o) || !Array.isArray(o.keysets))\n      throw new Error(\"bad response\");\n    return o;\n  }\n  /**\n   * Get the mints public keys\n   * @param keysetId optional param to get the keys for a specific keyset. If not specified, the keys from all active keysets are fetched\n   * @returns the mints public keys\n   */\n  async getKeys(t, e) {\n    return await P.getKeys(\n      e || this._mintUrl,\n      t,\n      this._customRequest\n    );\n  }\n  /**\n   * Get the mints keysets in no specific order\n   * @param mintUrl\n   * @param customRequest\n   * @returns all the mints past and current keysets.\n   */\n  static async getKeySets(t, e) {\n    return (e || A)({ endpoint: E(t, \"/v1/keysets\") });\n  }\n  /**\n   * Get the mints keysets in no specific order\n   * @returns all the mints past and current keysets.\n   */\n  async getKeySets() {\n    return P.getKeySets(this._mintUrl, this._customRequest);\n  }\n  /**\n   * Checks if specific proofs have already been redeemed\n   * @param checkPayload\n   * @returns redeemed and unredeemed ordered list of booleans\n   */\n  async check(t) {\n    return P.check(this._mintUrl, t, this._customRequest);\n  }\n  static async restore(t, e, n) {\n    const o = await (n || A)({\n      endpoint: E(t, \"/v1/restore\"),\n      method: \"POST\",\n      requestBody: e\n    });\n    if (!v(o) || !Array.isArray(o?.outputs) || !Array.isArray(o?.signatures))\n      throw new Error(\"bad response\");\n    return o;\n  }\n  async restore(t) {\n    return P.restore(this._mintUrl, t, this._customRequest);\n  }\n  /**\n   * Tries to establish a websocket connection with the websocket mint url according to NUT-17\n   */\n  async connectWebSocket() {\n    if (this.ws)\n      await this.ws.ensureConnection();\n    else {\n      const t = new URL(this._mintUrl), e = \"v1/ws\";\n      t.pathname && (t.pathname.endsWith(\"/\") ? t.pathname += e : t.pathname += \"/\" + e), this.ws = x.getInstance().getConnection(\n        `${t.protocol === \"https:\" ? \"wss\" : \"ws\"}://${t.host}${t.pathname}`\n      );\n      try {\n        await this.ws.connect();\n      } catch (n) {\n        throw console.log(n), new Error(\"Failed to connect to WebSocket...\");\n      }\n    }\n  }\n  /**\n   * Closes a websocket connection\n   */\n  disconnectWebSocket() {\n    this.ws && this.ws.close();\n  }\n  get webSocketConnection() {\n    return this.ws;\n  }\n}\nclass mt {\n  constructor(t) {\n    this._mintInfo = t;\n  }\n  isSupported(t) {\n    switch (t) {\n      case 4:\n      case 5:\n        return this.checkMintMelt(t);\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n      case 14:\n      case 20:\n        return this.checkGenericNut(t);\n      case 17:\n        return this.checkNut17();\n      case 15:\n        return this.checkNut15();\n      default:\n        throw new Error(\"nut is not supported by cashu-ts\");\n    }\n  }\n  checkGenericNut(t) {\n    return this._mintInfo.nuts[t]?.supported ? { supported: !0 } : { supported: !1 };\n  }\n  checkMintMelt(t) {\n    const e = this._mintInfo.nuts[t];\n    return e && e.methods.length > 0 && !e.disabled ? { disabled: !1, params: e.methods } : { disabled: !0, params: e.methods };\n  }\n  checkNut17() {\n    return this._mintInfo.nuts[17] && this._mintInfo.nuts[17].supported.length > 0 ? { supported: !0, params: this._mintInfo.nuts[17].supported } : { supported: !1 };\n  }\n  checkNut15() {\n    return this._mintInfo.nuts[15] && this._mintInfo.nuts[15].methods.length > 0 ? { supported: !0, params: this._mintInfo.nuts[15].methods } : { supported: !1 };\n  }\n  get contact() {\n    return this._mintInfo.contact;\n  }\n  get description() {\n    return this._mintInfo.description;\n  }\n  get description_long() {\n    return this._mintInfo.description_long;\n  }\n  get name() {\n    return this._mintInfo.name;\n  }\n  get pubkey() {\n    return this._mintInfo.pubkey;\n  }\n  get nuts() {\n    return this._mintInfo.nuts;\n  }\n  get version() {\n    return this._mintInfo.version;\n  }\n  get motd() {\n    return this._mintInfo.motd;\n  }\n}\nfunction ye(s, t) {\n  let e = s;\n  for (const r of t)\n    e += r.B_;\n  const n = new TextEncoder().encode(e);\n  return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_7__.sha256)(n);\n}\nfunction ge(s, t, e) {\n  const n = ye(t, e), r = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.hexToBytes)(s), o = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_9__.schnorr.sign(n, r);\n  return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.bytesToHex)(o);\n}\nclass $ {\n  constructor(t, e, n) {\n    this.amount = t, this.B_ = e, this.id = n;\n  }\n  getSerializedBlindedMessage() {\n    return { amount: this.amount, B_: this.B_.toHex(!0), id: this.id };\n  }\n}\nfunction z(s) {\n  return typeof s == \"function\";\n}\nclass q {\n  constructor(t, e, n) {\n    this.secret = n, this.blindingFactor = e, this.blindedMessage = t;\n  }\n  toProof(t, e) {\n    let n;\n    t.dleq && (n = {\n      s: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.hexToBytes)(t.dleq.s),\n      e: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.hexToBytes)(t.dleq.e),\n      r: this.blindingFactor\n    });\n    const r = {\n      id: t.id,\n      amount: t.amount,\n      C_: (0,_cashu_crypto_modules_common__WEBPACK_IMPORTED_MODULE_1__.pointFromHex)(t.C_),\n      dleq: n\n    }, o = (0,_cashu_crypto_modules_common__WEBPACK_IMPORTED_MODULE_1__.pointFromHex)(e.keys[t.amount]), i = (0,_cashu_crypto_modules_client__WEBPACK_IMPORTED_MODULE_3__.constructProofFromPromise)(r, this.blindingFactor, this.secret, o);\n    return {\n      ...(0,_cashu_crypto_modules_client__WEBPACK_IMPORTED_MODULE_3__.serializeProof)(i),\n      ...n && {\n        dleq: {\n          s: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.bytesToHex)(n.s),\n          e: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.bytesToHex)(n.e),\n          r: Zt(n.r ?? BigInt(0))\n        }\n      }\n    };\n  }\n  static createP2PKData(t, e, n, r) {\n    return S(e, n.keys, r).map((i) => this.createSingleP2PKData(t, i, n.id));\n  }\n  static createSingleP2PKData(t, e, n) {\n    const r = [\n      \"P2PK\",\n      {\n        nonce: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.bytesToHex)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.randomBytes)(32)),\n        data: t.pubkey,\n        tags: []\n      }\n    ];\n    t.locktime && r[1].tags.push([\"locktime\", t.locktime]), t.refundKeys && r[1].tags.push([\"refund\", t.refundKeys]);\n    const o = JSON.stringify(r), i = new TextEncoder().encode(o), { r: c, B_: a } = (0,_cashu_crypto_modules_client__WEBPACK_IMPORTED_MODULE_3__.blindMessage)(i);\n    return new q(\n      new $(e, a, n).getSerializedBlindedMessage(),\n      c,\n      i\n    );\n  }\n  static createRandomData(t, e, n) {\n    return S(t, e.keys, n).map((o) => this.createSingleRandomData(o, e.id));\n  }\n  static createSingleRandomData(t, e) {\n    const n = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.bytesToHex)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.randomBytes)(32)), r = new TextEncoder().encode(n), { r: o, B_: i } = (0,_cashu_crypto_modules_client__WEBPACK_IMPORTED_MODULE_3__.blindMessage)(r);\n    return new q(\n      new $(t, i, e).getSerializedBlindedMessage(),\n      o,\n      r\n    );\n  }\n  static createDeterministicData(t, e, n, r, o) {\n    return S(t, r.keys, o).map(\n      (c, a) => this.createSingleDeterministicData(c, e, n + a, r.id)\n    );\n  }\n  static createSingleDeterministicData(t, e, n, r) {\n    const o = (0,_cashu_crypto_modules_client_NUT09__WEBPACK_IMPORTED_MODULE_5__.deriveSecret)(e, r, n), i = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.bytesToHex)(o), c = new TextEncoder().encode(i), a = Xt((0,_cashu_crypto_modules_client_NUT09__WEBPACK_IMPORTED_MODULE_5__.deriveBlindingFactor)(e, r, n)), { r: h, B_: d } = (0,_cashu_crypto_modules_client__WEBPACK_IMPORTED_MODULE_3__.blindMessage)(c, a);\n    return new q(\n      new $(t, d, r).getSerializedBlindedMessage(),\n      h,\n      c\n    );\n  }\n}\nconst we = 3, ke = \"sat\";\nclass Be {\n  /**\n   * @param mint Cashu mint instance is used to make api calls\n   * @param options.unit optionally set unit (default is 'sat')\n   * @param options.keys public keys from the mint (will be fetched from mint if not provided)\n   * @param options.keysets keysets from the mint (will be fetched from mint if not provided)\n   * @param options.mintInfo mint info from the mint (will be fetched from mint if not provided)\n   * @param options.denominationTarget target number proofs per denomination (default: see @constant DEFAULT_DENOMINATION_TARGET)\n   * @param options.bip39seed BIP39 seed for deterministic secrets.\n   * @param options.keepFactory A function that will be used by all parts of the library that produce proofs to be kept (change, etc.).\n   * This can lead to poor performance, in which case the seed should be directly provided\n   */\n  constructor(t, e) {\n    this._keys = /* @__PURE__ */ new Map(), this._keysets = [], this._seed = void 0, this._unit = ke, this._mintInfo = void 0, this._denominationTarget = we, this.mint = t;\n    let n = [];\n    if (e?.keys && !Array.isArray(e.keys) ? n = [e.keys] : e?.keys && Array.isArray(e?.keys) && (n = e?.keys), n && n.forEach((r) => this._keys.set(r.id, r)), e?.unit && (this._unit = e?.unit), e?.keysets && (this._keysets = e.keysets), e?.mintInfo && (this._mintInfo = new mt(e.mintInfo)), e?.denominationTarget && (this._denominationTarget = e.denominationTarget), e?.bip39seed) {\n      if (e.bip39seed instanceof Uint8Array) {\n        this._seed = e.bip39seed;\n        return;\n      }\n      throw new Error(\"bip39seed must be a valid UInt8Array\");\n    }\n    e?.keepFactory && (this._keepFactory = e.keepFactory);\n  }\n  get unit() {\n    return this._unit;\n  }\n  get keys() {\n    return this._keys;\n  }\n  get keysetId() {\n    if (!this._keysetId)\n      throw new Error(\"No keysetId set\");\n    return this._keysetId;\n  }\n  set keysetId(t) {\n    this._keysetId = t;\n  }\n  get keysets() {\n    return this._keysets;\n  }\n  get mintInfo() {\n    if (!this._mintInfo)\n      throw new Error(\"Mint info not loaded\");\n    return this._mintInfo;\n  }\n  /**\n   * Get information about the mint\n   * @returns mint info\n   */\n  async getMintInfo() {\n    const t = await this.mint.getInfo();\n    return this._mintInfo = new mt(t), this._mintInfo;\n  }\n  /**\n   * Get stored information about the mint or request it if not loaded.\n   * @returns mint info\n   */\n  async lazyGetMintInfo() {\n    return this._mintInfo ? this._mintInfo : await this.getMintInfo();\n  }\n  /**\n   * Load mint information, keysets and keys. This function can be called if no keysets are passed in the constructor\n   */\n  async loadMint() {\n    await this.getMintInfo(), await this.getKeySets(), await this.getKeys();\n  }\n  /**\n   * Choose a keyset to activate based on the lowest input fee\n   *\n   * Note: this function will filter out deprecated base64 keysets\n   *\n   * @param keysets keysets to choose from\n   * @returns active keyset\n   */\n  getActiveKeyset(t) {\n    let e = t.filter((r) => r.active);\n    e = e.filter((r) => r.id.startsWith(\"00\"));\n    const n = e.sort(\n      (r, o) => (r.input_fee_ppk ?? 0) - (o.input_fee_ppk ?? 0)\n    )[0];\n    if (!n)\n      throw new Error(\"No active keyset found\");\n    return n;\n  }\n  /**\n   * Get keysets from the mint with the unit of the wallet\n   * @returns keysets with wallet's unit\n   */\n  async getKeySets() {\n    const e = (await this.mint.getKeySets()).keysets.filter((n) => n.unit === this._unit);\n    return this._keysets = e, this._keysets;\n  }\n  /**\n   * Get all active keys from the mint and set the keyset with the lowest fees as the active wallet keyset.\n   * @returns keyset\n   */\n  async getAllKeys() {\n    const t = await this.mint.getKeys();\n    return this._keys = new Map(t.keysets.map((e) => [e.id, e])), this.keysetId = this.getActiveKeyset(this._keysets).id, t.keysets;\n  }\n  /**\n   * Get public keys from the mint. If keys were already fetched, it will return those.\n   *\n   * If `keysetId` is set, it will fetch and return that specific keyset.\n   * Otherwise, we select an active keyset with the unit of the wallet.\n   *\n   * @param keysetId optional keysetId to get keys for\n   * @param forceRefresh? if set to true, it will force refresh the keyset from the mint\n   * @returns keyset\n   */\n  async getKeys(t, e) {\n    if ((!(this._keysets.length > 0) || e) && await this.getKeySets(), t || (t = this.getActiveKeyset(this._keysets).id), !this._keysets.find((n) => n.id === t) && (await this.getKeySets(), !this._keysets.find((n) => n.id === t)))\n      throw new Error(`could not initialize keys. No keyset with id '${t}' found`);\n    if (!this._keys.get(t)) {\n      const n = await this.mint.getKeys(t);\n      this._keys.set(t, n.keysets[0]);\n    }\n    return this.keysetId = t, this._keys.get(t);\n  }\n  /**\n   * Receive an encoded or raw Cashu token (only supports single tokens. It will only process the first token in the token array)\n   * @param {(string|Token)} token - Cashu token, either as string or decoded\n   * @param {ReceiveOptions} [options] - Optional configuration for token processing\n   * @returns New token with newly created proofs, token entries that had errors\n   */\n  async receive(t, e) {\n    const { requireDleq: n, keysetId: r, outputAmounts: o, counter: i, pubkey: c, privkey: a, outputData: h, p2pk: d } = e || {};\n    typeof t == \"string\" && (t = se(t));\n    const f = await this.getKeys(r);\n    if (n && t.proofs.some((k) => !ae(k, f)))\n      throw new Error(\"Token contains proofs with invalid DLEQ\");\n    const m = U(t.proofs) - this.getFeesForProofs(t.proofs);\n    let u;\n    h ? u = { send: h } : this._keepFactory && (u = { send: this._keepFactory });\n    const l = this.createSwapPayload(\n      m,\n      t.proofs,\n      f,\n      o,\n      i,\n      c,\n      a,\n      u,\n      d\n    ), { signatures: w } = await this.mint.swap(l.payload), y = l.outputData.map((k, p) => k.toProof(w[p], f)), g = [];\n    return l.sortedIndices.forEach((k, p) => {\n      g[k] = y[p];\n    }), g;\n  }\n  /**\n   * Send proofs of a given amount, by providing at least the required amount of proofs\n   * @param amount amount to send\n   * @param proofs array of proofs (accumulated amount of proofs must be >= than amount)\n   * @param {SendOptions} [options] - Optional parameters for configuring the send operation\n   * @returns {SendResponse}\n   */\n  async send(t, e, n) {\n    const {\n      proofsWeHave: r,\n      offline: o,\n      includeFees: i,\n      includeDleq: c,\n      keysetId: a,\n      outputAmounts: h,\n      pubkey: d,\n      privkey: f,\n      outputData: m\n    } = n || {};\n    if (c && (e = e.filter((y) => y.dleq != null)), U(e) < t)\n      throw new Error(\"Not enough funds available to send\");\n    const { keep: u, send: l } = this.selectProofsToSend(\n      e,\n      t,\n      n?.includeFees\n    ), w = i ? this.getFeesForProofs(l) : 0;\n    if (!o && (U(l) != t + w || // if the exact amount cannot be selected\n    h || d || f || a || m)) {\n      const { keep: y, send: g } = this.selectProofsToSend(\n        e,\n        t,\n        !0\n      );\n      r?.push(...y);\n      const k = await this.swap(t, g, n);\n      let { keep: p, send: _ } = k;\n      const T = k.serialized;\n      return p = y.concat(p), c || (_ = L(_)), { keep: p, send: _, serialized: T };\n    }\n    if (U(l) < t + w)\n      throw new Error(\"Not enough funds available to send\");\n    return c ? { keep: u, send: l } : { keep: u, send: L(l) };\n  }\n  selectProofsToSend(t, e, n) {\n    const r = t.sort((u, l) => u.amount - l.amount), o = r.filter((u) => u.amount <= e).sort((u, l) => l.amount - u.amount), c = r.filter((u) => u.amount > e).sort((u, l) => u.amount - l.amount)[0];\n    if (!o.length && c)\n      return {\n        keep: t.filter((u) => u.secret !== c.secret),\n        send: [c]\n      };\n    if (!o.length && !c)\n      return { keep: t, send: [] };\n    let a = e, h = [o[0]];\n    const d = [], f = n ? this.getFeesForProofs(h) : 0;\n    if (a -= h[0].amount - f / 1e3, a > 0) {\n      const { keep: u, send: l } = this.selectProofsToSend(\n        o.slice(1),\n        a,\n        n\n      );\n      h.push(...l), d.push(...u);\n    }\n    const m = n ? this.getFeesForProofs(h) : 0;\n    return U(h) < e + m && c && (h = [c]), {\n      keep: t.filter((u) => !h.includes(u)),\n      send: h\n    };\n  }\n  /**\n   * calculates the fees based on inputs (proofs)\n   * @param proofs input proofs to calculate fees for\n   * @returns fee amount\n   */\n  getFeesForProofs(t) {\n    if (!this._keysets.length)\n      throw new Error(\"Could not calculate fees. No keysets found\");\n    return new Set(t.map((r) => r.id)).forEach((r) => {\n      if (!this._keysets.find((o) => o.id === r))\n        throw new Error(`Could not calculate fees. No keyset found with id: ${r}`);\n    }), Math.floor(\n      Math.max(\n        (t.reduce(\n          (r, o) => r + (this._keysets.find((i) => i.id === o.id)?.input_fee_ppk || 0),\n          0\n        ) + 999) / 1e3,\n        0\n      )\n    );\n  }\n  /**\n   * calculates the fees based on inputs for a given keyset\n   * @param nInputs number of inputs\n   * @param keysetId keysetId used to lookup `input_fee_ppk`\n   * @returns fee amount\n   */\n  getFeesForKeyset(t, e) {\n    return Math.floor(\n      Math.max(\n        (t * (this._keysets.find((r) => r.id === e)?.input_fee_ppk || 0) + 999) / 1e3,\n        0\n      )\n    );\n  }\n  /**\n   * Splits and creates sendable tokens\n   * if no amount is specified, the amount is implied by the cumulative amount of all proofs\n   * if both amount and preference are set, but the preference cannot fulfill the amount, then we use the default split\n   *  @param {SwapOptions} [options] - Optional parameters for configuring the swap operation\n   * @returns promise of the change- and send-proofs\n   */\n  async swap(t, e, n) {\n    let { outputAmounts: r } = n || {};\n    const { includeFees: o, keysetId: i, counter: c, pubkey: a, privkey: h, proofsWeHave: d, outputData: f, p2pk: m } = n || {}, u = await this.getKeys(i), l = e;\n    let w = t;\n    const y = U(e);\n    let g = y - w - this.getFeesForProofs(l), k = r?.sendAmounts || S(w, u.keys);\n    if (o) {\n      let b = this.getFeesForKeyset(k.length, u.id), I = S(b, u.keys);\n      for (; this.getFeesForKeyset(k.concat(I).length, u.id) > b; )\n        b++, I = S(b, u.keys);\n      k = k.concat(I), w += b, g -= b;\n    }\n    let p;\n    if (!r?.keepAmounts && d)\n      p = dt(\n        d,\n        g,\n        u.keys,\n        this._denominationTarget\n      );\n    else if (r) {\n      if (r.keepAmounts?.reduce((b, I) => b + I, 0) != g)\n        throw new Error(\"Keep amounts do not match amount to keep\");\n      p = r.keepAmounts;\n    }\n    if (w + this.getFeesForProofs(l) > y)\n      throw console.error(\n        `Not enough funds available (${y}) for swap amountToSend: ${w} + fee: ${this.getFeesForProofs(\n          l\n        )} | length: ${l.length}`\n      ), new Error(\"Not enough funds available for swap\");\n    if (w + this.getFeesForProofs(l) + g != y)\n      throw new Error(\"Amounts do not match for swap\");\n    r = {\n      keepAmounts: p,\n      sendAmounts: k\n    };\n    const _ = f?.keep || this._keepFactory, T = f?.send, K = this.createSwapPayload(\n      w,\n      l,\n      u,\n      r,\n      c,\n      a,\n      h,\n      { keep: _, send: T },\n      m\n    ), { signatures: qt } = await this.mint.swap(K.payload), nt = K.outputData.map((b, I) => b.toProof(qt[I], u)), rt = [], ot = [], it = Array(K.keepVector.length), ct = Array(nt.length);\n    return K.sortedIndices.forEach((b, I) => {\n      it[b] = K.keepVector[I], ct[b] = nt[I];\n    }), ct.forEach((b, I) => {\n      it[I] ? rt.push(b) : ot.push(b);\n    }), {\n      keep: rt,\n      send: ot\n    };\n  }\n  /**\n   * Restores batches of deterministic proofs until no more signatures are returned from the mint\n   * @param [gapLimit=300] the amount of empty counters that should be returned before restoring ends (defaults to 300)\n   * @param [batchSize=100] the amount of proofs that should be restored at a time (defaults to 100)\n   * @param [counter=0] the counter that should be used as a starting point (defaults to 0)\n   * @param [keysetId] which keysetId to use for the restoration. If none is passed the instance's default one will be used\n   */\n  async batchRestore(t = 300, e = 100, n = 0, r) {\n    const o = Math.ceil(t / e), i = [];\n    let c, a = 0;\n    for (; a < o; ) {\n      const h = await this.restore(n, e, { keysetId: r });\n      h.proofs.length > 0 ? (a = 0, i.push(...h.proofs), c = h.lastCounterWithSignature) : a++, n += e;\n    }\n    return { proofs: i, lastCounterWithSignature: c };\n  }\n  /**\n   * Regenerates\n   * @param start set starting point for count (first cycle for each keyset should usually be 0)\n   * @param count set number of blinded messages that should be generated\n   * @param options.keysetId set a custom keysetId to restore from. keysetIds can be loaded with `CashuMint.getKeySets()`\n   */\n  async restore(t, e, n) {\n    const { keysetId: r } = n || {}, o = await this.getKeys(r);\n    if (!this._seed)\n      throw new Error(\"CashuWallet must be initialized with a seed to use restore\");\n    const i = Array(e).fill(1), c = q.createDeterministicData(\n      i.length,\n      this._seed,\n      t,\n      o,\n      i\n    ), { outputs: a, signatures: h } = await this.mint.restore({\n      outputs: c.map((u) => u.blindedMessage)\n    }), d = {};\n    a.forEach((u, l) => d[u.B_] = h[l]);\n    const f = [];\n    let m;\n    for (let u = 0; u < c.length; u++) {\n      const l = d[c[u].blindedMessage.B_];\n      l && (m = t + u, c[u].blindedMessage.amount = l.amount, f.push(c[u].toProof(l, o)));\n    }\n    return {\n      proofs: f,\n      lastCounterWithSignature: m\n    };\n  }\n  /**\n   * Requests a mint quote form the mint. Response returns a Lightning payment request for the requested given amount and unit.\n   * @param amount Amount requesting for mint.\n   * @param description optional description for the mint quote\n   * @param pubkey optional public key to lock the quote to\n   * @returns the mint will return a mint quote with a Lightning invoice for minting tokens of the specified amount and unit\n   */\n  async createMintQuote(t, e) {\n    const n = {\n      unit: this._unit,\n      amount: t,\n      description: e\n    };\n    return await this.mint.createMintQuote(n);\n  }\n  /**\n   * Requests a mint quote from the mint that is locked to a public key.\n   * @param amount Amount requesting for mint.\n   * @param pubkey public key to lock the quote to\n   * @param description optional description for the mint quote\n   * @returns the mint will return a mint quote with a Lightning invoice for minting tokens of the specified amount and unit.\n   * The quote will be locked to the specified `pubkey`.\n   */\n  async createLockedMintQuote(t, e, n) {\n    const { supported: r } = (await this.getMintInfo()).isSupported(20);\n    if (!r)\n      throw new Error(\"Mint does not support NUT-20\");\n    const o = {\n      unit: this._unit,\n      amount: t,\n      description: n,\n      pubkey: e\n    }, i = await this.mint.createMintQuote(o);\n    if (!i.pubkey)\n      throw new Error(\"Mint returned unlocked mint quote\");\n    return i;\n  }\n  /**\n   * Gets an existing mint quote from the mint.\n   * @param quote Quote ID\n   * @returns the mint will create and return a Lightning invoice for the specified amount\n   */\n  async checkMintQuote(t) {\n    return await this.mint.checkMintQuote(t);\n  }\n  async mintProofs(t, e, n) {\n    let { outputAmounts: r } = n || {};\n    const { counter: o, pubkey: i, p2pk: c, keysetId: a, proofsWeHave: h, outputData: d, privateKey: f } = n || {}, m = await this.getKeys(a);\n    !r && h && (r = {\n      keepAmounts: dt(h, t, m.keys, this._denominationTarget),\n      sendAmounts: []\n    });\n    let u = [];\n    if (d)\n      if (z(d)) {\n        const y = S(t, m.keys, r?.keepAmounts);\n        for (let g = 0; g < y.length; g++)\n          u.push(d(y[g], m));\n      } else\n        u = d;\n    else if (this._keepFactory) {\n      const y = S(t, m.keys, r?.keepAmounts);\n      for (let g = 0; g < y.length; g++)\n        u.push(this._keepFactory(y[g], m));\n    } else\n      u = this.createOutputData(\n        t,\n        m,\n        o,\n        i,\n        r?.keepAmounts,\n        c\n      );\n    let l;\n    if (typeof e != \"string\") {\n      if (!f)\n        throw new Error(\"Can not sign locked quote without private key\");\n      const y = u.map((k) => k.blindedMessage), g = ge(f, e.quote, y);\n      l = {\n        outputs: y,\n        quote: e.quote,\n        signature: g\n      };\n    } else\n      l = {\n        outputs: u.map((y) => y.blindedMessage),\n        quote: e\n      };\n    const { signatures: w } = await this.mint.mint(l);\n    return u.map((y, g) => y.toProof(w[g], m));\n  }\n  /**\n   * Requests a melt quote from the mint. Response returns amount and fees for a given unit in order to pay a Lightning invoice.\n   * @param invoice LN invoice that needs to get a fee estimate\n   * @returns the mint will create and return a melt quote for the invoice with an amount and fee reserve\n   */\n  async createMeltQuote(t) {\n    const e = {\n      unit: this._unit,\n      request: t\n    };\n    return await this.mint.createMeltQuote(e);\n  }\n  /**\n   * Requests a multi path melt quote from the mint.\n   * @param invoice LN invoice that needs to get a fee estimate\n   * @param partialAmount the partial amount of the invoice's total to be paid by this instance\n   * @returns the mint will create and return a melt quote for the invoice with an amount and fee reserve\n   */\n  async createMultiPathMeltQuote(t, e) {\n    const { supported: n, params: r } = (await this.lazyGetMintInfo()).isSupported(15);\n    if (!n)\n      throw new Error(\"Mint does not support NUT-15\");\n    if (!r?.some((h) => h.method === \"bolt11\" && h.unit === this.unit))\n      throw new Error(`Mint does not support MPP for bolt11 and ${this.unit}`);\n    const i = {\n      mpp: {\n        amount: e\n      }\n    }, c = {\n      unit: this._unit,\n      request: t,\n      options: i\n    };\n    return await this.mint.createMeltQuote(c);\n  }\n  /**\n   * Return an existing melt quote from the mint.\n   * @param quote ID of the melt quote\n   * @returns the mint will return an existing melt quote\n   */\n  async checkMeltQuote(t) {\n    return await this.mint.checkMeltQuote(t);\n  }\n  /**\n   * Melt proofs for a melt quote. proofsToSend must be at least amount+fee_reserve form the melt quote. This function does not perform coin selection!.\n   * Returns melt quote and change proofs\n   * @param meltQuote ID of the melt quote\n   * @param proofsToSend proofs to melt\n   * @param {MeltProofOptions} [options] - Optional parameters for configuring the Melting Proof operation\n   * @returns\n   */\n  async meltProofs(t, e, n) {\n    const { keysetId: r, counter: o, privkey: i } = n || {}, c = await this.getKeys(r), a = this.createBlankOutputs(\n      U(e) - t.amount,\n      c,\n      o,\n      this._keepFactory\n    );\n    i != null && (e = (0,_cashu_crypto_modules_client_NUT11__WEBPACK_IMPORTED_MODULE_4__.getSignedProofs)(\n      e.map((f) => ({\n        amount: f.amount,\n        C: (0,_cashu_crypto_modules_common__WEBPACK_IMPORTED_MODULE_1__.pointFromHex)(f.C),\n        id: f.id,\n        secret: new TextEncoder().encode(f.secret)\n      })),\n      i\n    ).map((f) => (0,_cashu_crypto_modules_client__WEBPACK_IMPORTED_MODULE_3__.serializeProof)(f))), e = L(e);\n    const h = {\n      quote: t.quote,\n      inputs: e,\n      outputs: a.map((f) => f.blindedMessage)\n    }, d = await this.mint.melt(h);\n    return {\n      quote: d,\n      change: d.change?.map((f, m) => a[m].toProof(f, c)) ?? []\n    };\n  }\n  /**\n   * Creates a split payload\n   * @param amount amount to send\n   * @param proofsToSend proofs to split*\n   * @param outputAmounts? optionally specify the output's amounts to keep and to send.\n   * @param counter? optionally set counter to derive secret deterministically. CashuWallet class must be initialized with seed phrase to take effect\n   * @param pubkey? optionally locks ecash to pubkey. Will not be deterministic, even if counter is set!\n   * @param privkey? will create a signature on the @param proofsToSend secrets if set\n   * @returns\n   */\n  createSwapPayload(t, e, n, r, o, i, c, a, h) {\n    const d = e.reduce((p, _) => p + _.amount, 0);\n    r && r.sendAmounts && !r.keepAmounts && (r.keepAmounts = S(\n      d - t - this.getFeesForProofs(e),\n      n.keys\n    ));\n    const f = d - t - this.getFeesForProofs(e);\n    let m = [], u = [];\n    if (a?.keep)\n      if (z(a.keep)) {\n        const p = a.keep;\n        S(f, n.keys).forEach((T) => {\n          m.push(p(T, n));\n        });\n      } else\n        m = a.keep;\n    else\n      m = this.createOutputData(\n        f,\n        n,\n        o,\n        void 0,\n        r?.keepAmounts,\n        void 0,\n        this._keepFactory\n      );\n    if (a?.send)\n      if (z(a.send)) {\n        const p = a.send;\n        S(t, n.keys).forEach((T) => {\n          u.push(p(T, n));\n        });\n      } else\n        u = a.send;\n    else\n      u = this.createOutputData(\n        t,\n        n,\n        o ? o + m.length : void 0,\n        i,\n        r?.sendAmounts,\n        h\n      );\n    c && (e = (0,_cashu_crypto_modules_client_NUT11__WEBPACK_IMPORTED_MODULE_4__.getSignedProofs)(\n      e.map((p) => ({\n        amount: p.amount,\n        C: (0,_cashu_crypto_modules_common__WEBPACK_IMPORTED_MODULE_1__.pointFromHex)(p.C),\n        id: p.id,\n        secret: new TextEncoder().encode(p.secret)\n      })),\n      c\n    ).map((p) => (0,_cashu_crypto_modules_client__WEBPACK_IMPORTED_MODULE_3__.serializeProof)(p))), e = L(e);\n    const l = [...m, ...u], w = l.map((p, _) => _).sort(\n      (p, _) => l[p].blindedMessage.amount - l[_].blindedMessage.amount\n    ), y = [\n      ...Array(m.length).fill(!0),\n      ...Array(u.length).fill(!1)\n    ], g = w.map((p) => l[p]), k = w.map((p) => y[p]);\n    return {\n      payload: {\n        inputs: e,\n        outputs: g.map((p) => p.blindedMessage)\n      },\n      outputData: g,\n      keepVector: k,\n      sortedIndices: w\n    };\n  }\n  /**\n   * Get an array of the states of proofs from the mint (as an array of CheckStateEnum's)\n   * @param proofs (only the `secret` field is required)\n   * @returns\n   */\n  async checkProofsStates(t) {\n    const e = new TextEncoder(), n = t.map((i) => (0,_cashu_crypto_modules_common__WEBPACK_IMPORTED_MODULE_1__.hashToCurve)(e.encode(i.secret)).toHex(!0)), r = 100, o = [];\n    for (let i = 0; i < n.length; i += r) {\n      const c = n.slice(i, i + r), { states: a } = await this.mint.check({\n        Ys: c\n      }), h = {};\n      a.forEach((d) => {\n        h[d.Y] = d;\n      });\n      for (let d = 0; d < c.length; d++) {\n        const f = h[c[d]];\n        if (!f)\n          throw new Error(\"Could not find state for proof with Y: \" + c[d]);\n        o.push(f);\n      }\n    }\n    return o;\n  }\n  /**\n   * Register a callback to be called whenever a mint quote's state changes\n   * @param quoteIds List of mint quote IDs that should be subscribed to\n   * @param callback Callback function that will be called whenever a mint quote state changes\n   * @param errorCallback\n   * @returns\n   */\n  async onMintQuoteUpdates(t, e, n) {\n    if (await this.mint.connectWebSocket(), !this.mint.webSocketConnection)\n      throw new Error(\"failed to establish WebSocket connection.\");\n    const r = this.mint.webSocketConnection.createSubscription(\n      { kind: \"bolt11_mint_quote\", filters: t },\n      e,\n      n\n    );\n    return () => {\n      this.mint.webSocketConnection?.cancelSubscription(r, e);\n    };\n  }\n  /**\n   * Register a callback to be called whenever a melt quote's state changes\n   * @param quoteIds List of melt quote IDs that should be subscribed to\n   * @param callback Callback function that will be called whenever a melt quote state changes\n   * @param errorCallback\n   * @returns\n   */\n  async onMeltQuotePaid(t, e, n) {\n    return this.onMeltQuoteUpdates(\n      [t],\n      (r) => {\n        r.state === N.PAID && e(r);\n      },\n      n\n    );\n  }\n  /**\n   * Register a callback to be called when a single mint quote gets paid\n   * @param quoteId Mint quote id that should be subscribed to\n   * @param callback Callback function that will be called when this mint quote gets paid\n   * @param errorCallback\n   * @returns\n   */\n  async onMintQuotePaid(t, e, n) {\n    return this.onMintQuoteUpdates(\n      [t],\n      (r) => {\n        r.state === j.PAID && e(r);\n      },\n      n\n    );\n  }\n  /**\n   * Register a callback to be called when a single melt quote gets paid\n   * @param quoteId Melt quote id that should be subscribed to\n   * @param callback Callback function that will be called when this melt quote gets paid\n   * @param errorCallback\n   * @returns\n   */\n  async onMeltQuoteUpdates(t, e, n) {\n    if (await this.mint.connectWebSocket(), !this.mint.webSocketConnection)\n      throw new Error(\"failed to establish WebSocket connection.\");\n    const r = this.mint.webSocketConnection.createSubscription(\n      { kind: \"bolt11_melt_quote\", filters: t },\n      e,\n      n\n    );\n    return () => {\n      this.mint.webSocketConnection?.cancelSubscription(r, e);\n    };\n  }\n  /**\n   * Register a callback to be called whenever a subscribed proof state changes\n   * @param proofs List of proofs that should be subscribed to\n   * @param callback Callback function that will be called whenever a proof's state changes\n   * @param errorCallback\n   * @returns\n   */\n  async onProofStateUpdates(t, e, n) {\n    if (await this.mint.connectWebSocket(), !this.mint.webSocketConnection)\n      throw new Error(\"failed to establish WebSocket connection.\");\n    const r = new TextEncoder(), o = {};\n    for (let a = 0; a < t.length; a++) {\n      const h = (0,_cashu_crypto_modules_common__WEBPACK_IMPORTED_MODULE_1__.hashToCurve)(r.encode(t[a].secret)).toHex(!0);\n      o[h] = t[a];\n    }\n    const i = Object.keys(o), c = this.mint.webSocketConnection.createSubscription(\n      { kind: \"proof_state\", filters: i },\n      (a) => {\n        e({ ...a, proof: o[a.Y] });\n      },\n      n\n    );\n    return () => {\n      this.mint.webSocketConnection?.cancelSubscription(c, e);\n    };\n  }\n  /**\n   * Creates blinded messages for a according to @param amounts\n   * @param amount array of amounts to create blinded messages for\n   * @param counter? optionally set counter to derive secret deterministically. CashuWallet class must be initialized with seed phrase to take effect\n   * @param keyksetId? override the keysetId derived from the current mintKeys with a custom one. This should be a keyset that was fetched from the `/keysets` endpoint\n   * @param pubkey? optionally locks ecash to pubkey. Will not be deterministic, even if counter is set!\n   * @returns blinded messages, secrets, rs, and amounts\n   */\n  createOutputData(t, e, n, r, o, i, c) {\n    let a;\n    if (r)\n      a = q.createP2PKData({ pubkey: r }, t, e, o);\n    else if (n || n === 0) {\n      if (!this._seed)\n        throw new Error(\"cannot create deterministic messages without seed\");\n      a = q.createDeterministicData(\n        t,\n        this._seed,\n        n,\n        e,\n        o\n      );\n    } else i ? a = q.createP2PKData(i, t, e, o) : c ? a = S(t, e.keys).map((d) => c(d, e)) : a = q.createRandomData(t, e, o);\n    return a;\n  }\n  /**\n   * Creates NUT-08 blank outputs (fee returns) for a given fee reserve\n   * See: https://github.com/cashubtc/nuts/blob/main/08.md\n   * @param amount amount to cover with blank outputs\n   * @param keysetId mint keysetId\n   * @param counter? optionally set counter to derive secret deterministically. CashuWallet class must be initialized with seed phrase to take effect\n   * @returns blinded messages, secrets, and rs\n   */\n  createBlankOutputs(t, e, n, r) {\n    let o = Math.ceil(Math.log2(t)) || 1;\n    o < 0 && (o = 0);\n    const i = o ? Array(o).fill(1) : [];\n    return this.createOutputData(t, e, n, void 0, i, void 0, r);\n  }\n}\n\n//# sourceMappingURL=cashu-ts.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/cashu-ts/lib/cashu-ts.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cashu/crypto/modules/esm/client/NUT09.js":
/*!****************************************************************!*\
  !*** ./node_modules/@cashu/crypto/modules/esm/client/NUT09.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deriveSeedFromMnemonic = exports.generateNewMnemonic = exports.deriveBlindingFactor = exports.deriveSecret = void 0;\nconst bip32_1 = __webpack_require__(/*! @scure/bip32 */ \"(ssr)/./node_modules/@cashu/crypto/node_modules/@scure/bip32/lib/index.js\");\nconst index_js_1 = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/common/index.js\");\nconst bip39_1 = __webpack_require__(/*! @scure/bip39 */ \"(ssr)/./node_modules/@cashu/crypto/node_modules/@scure/bip39/index.js\");\nconst english_1 = __webpack_require__(/*! @scure/bip39/wordlists/english */ \"(ssr)/./node_modules/@cashu/crypto/node_modules/@scure/bip39/wordlists/english.js\");\nconst STANDARD_DERIVATION_PATH = `m/129372'/0'`;\nvar DerivationType;\n(function (DerivationType) {\n    DerivationType[DerivationType[\"SECRET\"] = 0] = \"SECRET\";\n    DerivationType[DerivationType[\"BLINDING_FACTOR\"] = 1] = \"BLINDING_FACTOR\";\n})(DerivationType || (DerivationType = {}));\nconst deriveSecret = (seed, keysetId, counter) => {\n    return derive(seed, keysetId, counter, DerivationType.SECRET);\n};\nexports.deriveSecret = deriveSecret;\nconst deriveBlindingFactor = (seed, keysetId, counter) => {\n    return derive(seed, keysetId, counter, DerivationType.BLINDING_FACTOR);\n};\nexports.deriveBlindingFactor = deriveBlindingFactor;\nconst derive = (seed, keysetId, counter, secretOrBlinding) => {\n    const hdkey = bip32_1.HDKey.fromMasterSeed(seed);\n    const keysetIdInt = (0, index_js_1.getKeysetIdInt)(keysetId);\n    const derivationPath = `${STANDARD_DERIVATION_PATH}/${keysetIdInt}'/${counter}'/${secretOrBlinding}`;\n    const derived = hdkey.derive(derivationPath);\n    if (derived.privateKey === null) {\n        throw new Error('Could not derive private key');\n    }\n    return derived.privateKey;\n};\nconst generateNewMnemonic = () => {\n    const mnemonic = (0, bip39_1.generateMnemonic)(english_1.wordlist, 128);\n    return mnemonic;\n};\nexports.generateNewMnemonic = generateNewMnemonic;\nconst deriveSeedFromMnemonic = (mnemonic) => {\n    const seed = (0, bip39_1.mnemonicToSeedSync)(mnemonic);\n    return seed;\n};\nexports.deriveSeedFromMnemonic = deriveSeedFromMnemonic;\n//# sourceMappingURL=NUT09.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS9jbGllbnQvTlVUMDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsMkJBQTJCLEdBQUcsNEJBQTRCLEdBQUcsb0JBQW9CO0FBQ2xILGdCQUFnQixtQkFBTyxDQUFDLCtGQUFjO0FBQ3RDLG1CQUFtQixtQkFBTyxDQUFDLDBGQUFvQjtBQUMvQyxnQkFBZ0IsbUJBQU8sQ0FBQywyRkFBYztBQUN0QyxrQkFBa0IsbUJBQU8sQ0FBQyx5SEFBZ0M7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHlCQUF5QixHQUFHLFlBQVksSUFBSSxRQUFRLElBQUksaUJBQWlCO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS9jbGllbnQvTlVUMDkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlcml2ZVNlZWRGcm9tTW5lbW9uaWMgPSBleHBvcnRzLmdlbmVyYXRlTmV3TW5lbW9uaWMgPSBleHBvcnRzLmRlcml2ZUJsaW5kaW5nRmFjdG9yID0gZXhwb3J0cy5kZXJpdmVTZWNyZXQgPSB2b2lkIDA7XG5jb25zdCBiaXAzMl8xID0gcmVxdWlyZShcIkBzY3VyZS9iaXAzMlwiKTtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2luZGV4LmpzXCIpO1xuY29uc3QgYmlwMzlfMSA9IHJlcXVpcmUoXCJAc2N1cmUvYmlwMzlcIik7XG5jb25zdCBlbmdsaXNoXzEgPSByZXF1aXJlKFwiQHNjdXJlL2JpcDM5L3dvcmRsaXN0cy9lbmdsaXNoXCIpO1xuY29uc3QgU1RBTkRBUkRfREVSSVZBVElPTl9QQVRIID0gYG0vMTI5MzcyJy8wJ2A7XG52YXIgRGVyaXZhdGlvblR5cGU7XG4oZnVuY3Rpb24gKERlcml2YXRpb25UeXBlKSB7XG4gICAgRGVyaXZhdGlvblR5cGVbRGVyaXZhdGlvblR5cGVbXCJTRUNSRVRcIl0gPSAwXSA9IFwiU0VDUkVUXCI7XG4gICAgRGVyaXZhdGlvblR5cGVbRGVyaXZhdGlvblR5cGVbXCJCTElORElOR19GQUNUT1JcIl0gPSAxXSA9IFwiQkxJTkRJTkdfRkFDVE9SXCI7XG59KShEZXJpdmF0aW9uVHlwZSB8fCAoRGVyaXZhdGlvblR5cGUgPSB7fSkpO1xuY29uc3QgZGVyaXZlU2VjcmV0ID0gKHNlZWQsIGtleXNldElkLCBjb3VudGVyKSA9PiB7XG4gICAgcmV0dXJuIGRlcml2ZShzZWVkLCBrZXlzZXRJZCwgY291bnRlciwgRGVyaXZhdGlvblR5cGUuU0VDUkVUKTtcbn07XG5leHBvcnRzLmRlcml2ZVNlY3JldCA9IGRlcml2ZVNlY3JldDtcbmNvbnN0IGRlcml2ZUJsaW5kaW5nRmFjdG9yID0gKHNlZWQsIGtleXNldElkLCBjb3VudGVyKSA9PiB7XG4gICAgcmV0dXJuIGRlcml2ZShzZWVkLCBrZXlzZXRJZCwgY291bnRlciwgRGVyaXZhdGlvblR5cGUuQkxJTkRJTkdfRkFDVE9SKTtcbn07XG5leHBvcnRzLmRlcml2ZUJsaW5kaW5nRmFjdG9yID0gZGVyaXZlQmxpbmRpbmdGYWN0b3I7XG5jb25zdCBkZXJpdmUgPSAoc2VlZCwga2V5c2V0SWQsIGNvdW50ZXIsIHNlY3JldE9yQmxpbmRpbmcpID0+IHtcbiAgICBjb25zdCBoZGtleSA9IGJpcDMyXzEuSERLZXkuZnJvbU1hc3RlclNlZWQoc2VlZCk7XG4gICAgY29uc3Qga2V5c2V0SWRJbnQgPSAoMCwgaW5kZXhfanNfMS5nZXRLZXlzZXRJZEludCkoa2V5c2V0SWQpO1xuICAgIGNvbnN0IGRlcml2YXRpb25QYXRoID0gYCR7U1RBTkRBUkRfREVSSVZBVElPTl9QQVRIfS8ke2tleXNldElkSW50fScvJHtjb3VudGVyfScvJHtzZWNyZXRPckJsaW5kaW5nfWA7XG4gICAgY29uc3QgZGVyaXZlZCA9IGhka2V5LmRlcml2ZShkZXJpdmF0aW9uUGF0aCk7XG4gICAgaWYgKGRlcml2ZWQucHJpdmF0ZUtleSA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBkZXJpdmUgcHJpdmF0ZSBrZXknKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlcml2ZWQucHJpdmF0ZUtleTtcbn07XG5jb25zdCBnZW5lcmF0ZU5ld01uZW1vbmljID0gKCkgPT4ge1xuICAgIGNvbnN0IG1uZW1vbmljID0gKDAsIGJpcDM5XzEuZ2VuZXJhdGVNbmVtb25pYykoZW5nbGlzaF8xLndvcmRsaXN0LCAxMjgpO1xuICAgIHJldHVybiBtbmVtb25pYztcbn07XG5leHBvcnRzLmdlbmVyYXRlTmV3TW5lbW9uaWMgPSBnZW5lcmF0ZU5ld01uZW1vbmljO1xuY29uc3QgZGVyaXZlU2VlZEZyb21NbmVtb25pYyA9IChtbmVtb25pYykgPT4ge1xuICAgIGNvbnN0IHNlZWQgPSAoMCwgYmlwMzlfMS5tbmVtb25pY1RvU2VlZFN5bmMpKG1uZW1vbmljKTtcbiAgICByZXR1cm4gc2VlZDtcbn07XG5leHBvcnRzLmRlcml2ZVNlZWRGcm9tTW5lbW9uaWMgPSBkZXJpdmVTZWVkRnJvbU1uZW1vbmljO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TlVUMDkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/crypto/modules/esm/client/NUT09.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cashu/crypto/modules/esm/client/NUT11.js":
/*!****************************************************************!*\
  !*** ./node_modules/@cashu/crypto/modules/esm/client/NUT11.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getSignedProof = exports.getSignedOutputs = exports.getSignedOutput = exports.getSignedProofs = exports.signBlindedMessage = exports.signP2PKsecret = exports.createP2PKsecret = void 0;\nconst utils_1 = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/abstract/utils.js\");\nconst sha256_1 = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/sha256.js\");\nconst secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/secp256k1.js\");\nconst utils_2 = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/utils.js\");\nconst NUT11_js_1 = __webpack_require__(/*! ../common/NUT11.js */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/common/NUT11.js\");\nconst createP2PKsecret = (pubkey) => {\n    const newSecret = [\n        'P2PK',\n        {\n            nonce: (0, utils_1.bytesToHex)((0, utils_2.randomBytes)(32)),\n            data: pubkey\n        }\n    ];\n    const parsed = JSON.stringify(newSecret);\n    return new TextEncoder().encode(parsed);\n};\nexports.createP2PKsecret = createP2PKsecret;\nconst signP2PKsecret = (secret, privateKey) => {\n    const msghash = (0, sha256_1.sha256)(new TextDecoder().decode(secret));\n    const sig = secp256k1_1.schnorr.sign(msghash, privateKey);\n    return sig;\n};\nexports.signP2PKsecret = signP2PKsecret;\nconst signBlindedMessage = (B_, privateKey) => {\n    const msgHash = (0, sha256_1.sha256)(B_);\n    const sig = secp256k1_1.schnorr.sign(msgHash, privateKey);\n    return sig;\n};\nexports.signBlindedMessage = signBlindedMessage;\nconst getSignedProofs = (proofs, privateKey) => {\n    return proofs.map((p) => {\n        try {\n            const parsed = (0, NUT11_js_1.parseSecret)(p.secret);\n            if (parsed[0] !== 'P2PK') {\n                throw new Error('unknown secret type');\n            }\n            return (0, exports.getSignedProof)(p, (0, utils_1.hexToBytes)(privateKey));\n        }\n        catch (error) {\n            return p;\n        }\n    });\n};\nexports.getSignedProofs = getSignedProofs;\nconst getSignedOutput = (output, privateKey) => {\n    const B_ = output.B_.toHex(true);\n    const signature = (0, exports.signBlindedMessage)(B_, privateKey);\n    output.witness = { signatures: [(0, utils_1.bytesToHex)(signature)] };\n    return output;\n};\nexports.getSignedOutput = getSignedOutput;\nconst getSignedOutputs = (outputs, privateKey) => {\n    return outputs.map((o) => (0, exports.getSignedOutput)(o, privateKey));\n};\nexports.getSignedOutputs = getSignedOutputs;\nconst getSignedProof = (proof, privateKey) => {\n    if (!proof.witness) {\n        proof.witness = {\n            signatures: [(0, utils_1.bytesToHex)((0, exports.signP2PKsecret)(proof.secret, privateKey))]\n        };\n    }\n    return proof;\n};\nexports.getSignedProof = getSignedProof;\n//# sourceMappingURL=NUT11.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS9jbGllbnQvTlVUMTEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsd0JBQXdCLEdBQUcsdUJBQXVCLEdBQUcsdUJBQXVCLEdBQUcsMEJBQTBCLEdBQUcsc0JBQXNCLEdBQUcsd0JBQXdCO0FBQ3RMLGdCQUFnQixtQkFBTyxDQUFDLDBGQUE4QjtBQUN0RCxpQkFBaUIsbUJBQU8sQ0FBQywwRUFBc0I7QUFDL0Msb0JBQW9CLG1CQUFPLENBQUMsZ0ZBQXlCO0FBQ3JELGdCQUFnQixtQkFBTyxDQUFDLHdFQUFxQjtBQUM3QyxtQkFBbUIsbUJBQU8sQ0FBQywwRkFBb0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS9jbGllbnQvTlVUMTEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFNpZ25lZFByb29mID0gZXhwb3J0cy5nZXRTaWduZWRPdXRwdXRzID0gZXhwb3J0cy5nZXRTaWduZWRPdXRwdXQgPSBleHBvcnRzLmdldFNpZ25lZFByb29mcyA9IGV4cG9ydHMuc2lnbkJsaW5kZWRNZXNzYWdlID0gZXhwb3J0cy5zaWduUDJQS3NlY3JldCA9IGV4cG9ydHMuY3JlYXRlUDJQS3NlY3JldCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQG5vYmxlL2N1cnZlcy9hYnN0cmFjdC91dGlsc1wiKTtcbmNvbnN0IHNoYTI1Nl8xID0gcmVxdWlyZShcIkBub2JsZS9oYXNoZXMvc2hhMjU2XCIpO1xuY29uc3Qgc2VjcDI1NmsxXzEgPSByZXF1aXJlKFwiQG5vYmxlL2N1cnZlcy9zZWNwMjU2azFcIik7XG5jb25zdCB1dGlsc18yID0gcmVxdWlyZShcIkBub2JsZS9oYXNoZXMvdXRpbHNcIik7XG5jb25zdCBOVVQxMV9qc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9OVVQxMS5qc1wiKTtcbmNvbnN0IGNyZWF0ZVAyUEtzZWNyZXQgPSAocHVia2V5KSA9PiB7XG4gICAgY29uc3QgbmV3U2VjcmV0ID0gW1xuICAgICAgICAnUDJQSycsXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5vbmNlOiAoMCwgdXRpbHNfMS5ieXRlc1RvSGV4KSgoMCwgdXRpbHNfMi5yYW5kb21CeXRlcykoMzIpKSxcbiAgICAgICAgICAgIGRhdGE6IHB1YmtleVxuICAgICAgICB9XG4gICAgXTtcbiAgICBjb25zdCBwYXJzZWQgPSBKU09OLnN0cmluZ2lmeShuZXdTZWNyZXQpO1xuICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUocGFyc2VkKTtcbn07XG5leHBvcnRzLmNyZWF0ZVAyUEtzZWNyZXQgPSBjcmVhdGVQMlBLc2VjcmV0O1xuY29uc3Qgc2lnblAyUEtzZWNyZXQgPSAoc2VjcmV0LCBwcml2YXRlS2V5KSA9PiB7XG4gICAgY29uc3QgbXNnaGFzaCA9ICgwLCBzaGEyNTZfMS5zaGEyNTYpKG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShzZWNyZXQpKTtcbiAgICBjb25zdCBzaWcgPSBzZWNwMjU2azFfMS5zY2hub3JyLnNpZ24obXNnaGFzaCwgcHJpdmF0ZUtleSk7XG4gICAgcmV0dXJuIHNpZztcbn07XG5leHBvcnRzLnNpZ25QMlBLc2VjcmV0ID0gc2lnblAyUEtzZWNyZXQ7XG5jb25zdCBzaWduQmxpbmRlZE1lc3NhZ2UgPSAoQl8sIHByaXZhdGVLZXkpID0+IHtcbiAgICBjb25zdCBtc2dIYXNoID0gKDAsIHNoYTI1Nl8xLnNoYTI1NikoQl8pO1xuICAgIGNvbnN0IHNpZyA9IHNlY3AyNTZrMV8xLnNjaG5vcnIuc2lnbihtc2dIYXNoLCBwcml2YXRlS2V5KTtcbiAgICByZXR1cm4gc2lnO1xufTtcbmV4cG9ydHMuc2lnbkJsaW5kZWRNZXNzYWdlID0gc2lnbkJsaW5kZWRNZXNzYWdlO1xuY29uc3QgZ2V0U2lnbmVkUHJvb2ZzID0gKHByb29mcywgcHJpdmF0ZUtleSkgPT4ge1xuICAgIHJldHVybiBwcm9vZnMubWFwKChwKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSAoMCwgTlVUMTFfanNfMS5wYXJzZVNlY3JldCkocC5zZWNyZXQpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZFswXSAhPT0gJ1AyUEsnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHNlY3JldCB0eXBlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKDAsIGV4cG9ydHMuZ2V0U2lnbmVkUHJvb2YpKHAsICgwLCB1dGlsc18xLmhleFRvQnl0ZXMpKHByaXZhdGVLZXkpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0cy5nZXRTaWduZWRQcm9vZnMgPSBnZXRTaWduZWRQcm9vZnM7XG5jb25zdCBnZXRTaWduZWRPdXRwdXQgPSAob3V0cHV0LCBwcml2YXRlS2V5KSA9PiB7XG4gICAgY29uc3QgQl8gPSBvdXRwdXQuQl8udG9IZXgodHJ1ZSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gKDAsIGV4cG9ydHMuc2lnbkJsaW5kZWRNZXNzYWdlKShCXywgcHJpdmF0ZUtleSk7XG4gICAgb3V0cHV0LndpdG5lc3MgPSB7IHNpZ25hdHVyZXM6IFsoMCwgdXRpbHNfMS5ieXRlc1RvSGV4KShzaWduYXR1cmUpXSB9O1xuICAgIHJldHVybiBvdXRwdXQ7XG59O1xuZXhwb3J0cy5nZXRTaWduZWRPdXRwdXQgPSBnZXRTaWduZWRPdXRwdXQ7XG5jb25zdCBnZXRTaWduZWRPdXRwdXRzID0gKG91dHB1dHMsIHByaXZhdGVLZXkpID0+IHtcbiAgICByZXR1cm4gb3V0cHV0cy5tYXAoKG8pID0+ICgwLCBleHBvcnRzLmdldFNpZ25lZE91dHB1dCkobywgcHJpdmF0ZUtleSkpO1xufTtcbmV4cG9ydHMuZ2V0U2lnbmVkT3V0cHV0cyA9IGdldFNpZ25lZE91dHB1dHM7XG5jb25zdCBnZXRTaWduZWRQcm9vZiA9IChwcm9vZiwgcHJpdmF0ZUtleSkgPT4ge1xuICAgIGlmICghcHJvb2Yud2l0bmVzcykge1xuICAgICAgICBwcm9vZi53aXRuZXNzID0ge1xuICAgICAgICAgICAgc2lnbmF0dXJlczogWygwLCB1dGlsc18xLmJ5dGVzVG9IZXgpKCgwLCBleHBvcnRzLnNpZ25QMlBLc2VjcmV0KShwcm9vZi5zZWNyZXQsIHByaXZhdGVLZXkpKV1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHByb29mO1xufTtcbmV4cG9ydHMuZ2V0U2lnbmVkUHJvb2YgPSBnZXRTaWduZWRQcm9vZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5VVDExLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/crypto/modules/esm/client/NUT11.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cashu/crypto/modules/esm/client/NUT12.js":
/*!****************************************************************!*\
  !*** ./node_modules/@cashu/crypto/modules/esm/client/NUT12.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.verifyDLEQProof_reblind = exports.verifyDLEQProof = void 0;\nconst index_js_1 = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/common/index.js\");\nconst utils_1 = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/abstract/utils.js\");\nconst secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/secp256k1.js\");\nconst utils_js_1 = __webpack_require__(/*! ../util/utils.js */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/util/utils.js\");\nfunction arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length)\n        return false;\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i])\n            return false;\n    }\n    return true;\n}\nconst verifyDLEQProof = (dleq, B_, C_, A) => {\n    const sG = secp256k1_1.secp256k1.ProjectivePoint.fromPrivateKey((0, utils_1.bytesToHex)(dleq.s));\n    const eA = A.multiply((0, utils_js_1.bytesToNumber)(dleq.e));\n    const sB_ = B_.multiply((0, utils_js_1.bytesToNumber)(dleq.s));\n    const eC_ = C_.multiply((0, utils_js_1.bytesToNumber)(dleq.e));\n    const R_1 = sG.subtract(eA); // R1 = sG - eA\n    const R_2 = sB_.subtract(eC_); // R2 = sB' - eC'\n    const hash = (0, index_js_1.hash_e)([R_1, R_2, A, C_]); // e == hash(R1, R2, A, C')\n    return arraysEqual(hash, dleq.e);\n};\nexports.verifyDLEQProof = verifyDLEQProof;\nconst verifyDLEQProof_reblind = (secret, // secret\ndleq, C, // unblinded e-cash signature point\nA // mint public key point\n) => {\n    if (dleq.r === undefined)\n        throw new Error('verifyDLEQProof_reblind: Undefined blinding factor');\n    const Y = (0, index_js_1.hashToCurve)(secret);\n    const C_ = C.add(A.multiply(dleq.r)); // Re-blind the e-cash signature\n    const bG = secp256k1_1.secp256k1.ProjectivePoint.fromPrivateKey(dleq.r);\n    const B_ = Y.add(bG); // Re-blind the message\n    return (0, exports.verifyDLEQProof)(dleq, B_, C_, A);\n};\nexports.verifyDLEQProof_reblind = verifyDLEQProof_reblind;\n//# sourceMappingURL=NUT12.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS9jbGllbnQvTlVUMTIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLEdBQUcsdUJBQXVCO0FBQ3pELG1CQUFtQixtQkFBTyxDQUFDLDBGQUFvQjtBQUMvQyxnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBOEI7QUFDdEQsb0JBQW9CLG1CQUFPLENBQUMsZ0ZBQXlCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLHNGQUFrQjtBQUM3QztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDLG1DQUFtQztBQUNuQyw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS9jbGllbnQvTlVUMTIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZlcmlmeURMRVFQcm9vZl9yZWJsaW5kID0gZXhwb3J0cy52ZXJpZnlETEVRUHJvb2YgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9pbmRleC5qc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQG5vYmxlL2N1cnZlcy9hYnN0cmFjdC91dGlsc1wiKTtcbmNvbnN0IHNlY3AyNTZrMV8xID0gcmVxdWlyZShcIkBub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxXCIpO1xuY29uc3QgdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3V0aWxzLmpzXCIpO1xuZnVuY3Rpb24gYXJyYXlzRXF1YWwoYXJyMSwgYXJyMikge1xuICAgIGlmIChhcnIxLmxlbmd0aCAhPT0gYXJyMi5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycjFbaV0gIT09IGFycjJbaV0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuY29uc3QgdmVyaWZ5RExFUVByb29mID0gKGRsZXEsIEJfLCBDXywgQSkgPT4ge1xuICAgIGNvbnN0IHNHID0gc2VjcDI1NmsxXzEuc2VjcDI1NmsxLlByb2plY3RpdmVQb2ludC5mcm9tUHJpdmF0ZUtleSgoMCwgdXRpbHNfMS5ieXRlc1RvSGV4KShkbGVxLnMpKTtcbiAgICBjb25zdCBlQSA9IEEubXVsdGlwbHkoKDAsIHV0aWxzX2pzXzEuYnl0ZXNUb051bWJlcikoZGxlcS5lKSk7XG4gICAgY29uc3Qgc0JfID0gQl8ubXVsdGlwbHkoKDAsIHV0aWxzX2pzXzEuYnl0ZXNUb051bWJlcikoZGxlcS5zKSk7XG4gICAgY29uc3QgZUNfID0gQ18ubXVsdGlwbHkoKDAsIHV0aWxzX2pzXzEuYnl0ZXNUb051bWJlcikoZGxlcS5lKSk7XG4gICAgY29uc3QgUl8xID0gc0cuc3VidHJhY3QoZUEpOyAvLyBSMSA9IHNHIC0gZUFcbiAgICBjb25zdCBSXzIgPSBzQl8uc3VidHJhY3QoZUNfKTsgLy8gUjIgPSBzQicgLSBlQydcbiAgICBjb25zdCBoYXNoID0gKDAsIGluZGV4X2pzXzEuaGFzaF9lKShbUl8xLCBSXzIsIEEsIENfXSk7IC8vIGUgPT0gaGFzaChSMSwgUjIsIEEsIEMnKVxuICAgIHJldHVybiBhcnJheXNFcXVhbChoYXNoLCBkbGVxLmUpO1xufTtcbmV4cG9ydHMudmVyaWZ5RExFUVByb29mID0gdmVyaWZ5RExFUVByb29mO1xuY29uc3QgdmVyaWZ5RExFUVByb29mX3JlYmxpbmQgPSAoc2VjcmV0LCAvLyBzZWNyZXRcbmRsZXEsIEMsIC8vIHVuYmxpbmRlZCBlLWNhc2ggc2lnbmF0dXJlIHBvaW50XG5BIC8vIG1pbnQgcHVibGljIGtleSBwb2ludFxuKSA9PiB7XG4gICAgaWYgKGRsZXEuciA9PT0gdW5kZWZpbmVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZlcmlmeURMRVFQcm9vZl9yZWJsaW5kOiBVbmRlZmluZWQgYmxpbmRpbmcgZmFjdG9yJyk7XG4gICAgY29uc3QgWSA9ICgwLCBpbmRleF9qc18xLmhhc2hUb0N1cnZlKShzZWNyZXQpO1xuICAgIGNvbnN0IENfID0gQy5hZGQoQS5tdWx0aXBseShkbGVxLnIpKTsgLy8gUmUtYmxpbmQgdGhlIGUtY2FzaCBzaWduYXR1cmVcbiAgICBjb25zdCBiRyA9IHNlY3AyNTZrMV8xLnNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQuZnJvbVByaXZhdGVLZXkoZGxlcS5yKTtcbiAgICBjb25zdCBCXyA9IFkuYWRkKGJHKTsgLy8gUmUtYmxpbmQgdGhlIG1lc3NhZ2VcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMudmVyaWZ5RExFUVByb29mKShkbGVxLCBCXywgQ18sIEEpO1xufTtcbmV4cG9ydHMudmVyaWZ5RExFUVByb29mX3JlYmxpbmQgPSB2ZXJpZnlETEVRUHJvb2ZfcmVibGluZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5VVDEyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/crypto/modules/esm/client/NUT12.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cashu/crypto/modules/esm/client/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@cashu/crypto/modules/esm/client/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serializeBlindedMessage = exports.deserializeProof = exports.serializeProof = exports.constructProofFromPromise = exports.unblindSignature = exports.blindMessage = exports.createRandomBlindedMessage = void 0;\nconst secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/secp256k1.js\");\nconst utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/utils.js\");\nconst utils_js_1 = __webpack_require__(/*! ../util/utils.js */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/util/utils.js\");\nconst index_js_1 = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/common/index.js\");\nconst NUT11_js_1 = __webpack_require__(/*! ./NUT11.js */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/client/NUT11.js\");\nfunction createRandomBlindedMessage(privateKey) {\n    return blindMessage((0, utils_1.randomBytes)(32), (0, utils_js_1.bytesToNumber)(secp256k1_1.secp256k1.utils.randomPrivateKey()), privateKey);\n}\nexports.createRandomBlindedMessage = createRandomBlindedMessage;\nfunction blindMessage(secret, r, privateKey) {\n    const Y = (0, index_js_1.hashToCurve)(secret);\n    if (!r) {\n        r = (0, utils_js_1.bytesToNumber)(secp256k1_1.secp256k1.utils.randomPrivateKey());\n    }\n    const rG = secp256k1_1.secp256k1.ProjectivePoint.BASE.multiply(r);\n    const B_ = Y.add(rG);\n    if (privateKey !== undefined) {\n        return (0, NUT11_js_1.getSignedOutput)({ B_, r, secret }, privateKey);\n    }\n    return { B_, r, secret };\n}\nexports.blindMessage = blindMessage;\nfunction unblindSignature(C_, r, A) {\n    const C = C_.subtract(A.multiply(r));\n    return C;\n}\nexports.unblindSignature = unblindSignature;\nfunction constructProofFromPromise(promise, r, secret, key) {\n    const A = key;\n    const C = unblindSignature(promise.C_, r, A);\n    const proof = {\n        id: promise.id,\n        amount: promise.amount,\n        secret,\n        C\n    };\n    return proof;\n}\nexports.constructProofFromPromise = constructProofFromPromise;\nconst serializeProof = (proof) => {\n    return {\n        amount: proof.amount,\n        C: proof.C.toHex(true),\n        id: proof.id,\n        secret: new TextDecoder().decode(proof.secret),\n        witness: JSON.stringify(proof.witness)\n    };\n};\nexports.serializeProof = serializeProof;\nconst deserializeProof = (proof) => {\n    return {\n        amount: proof.amount,\n        C: (0, index_js_1.pointFromHex)(proof.C),\n        id: proof.id,\n        secret: new TextEncoder().encode(proof.secret),\n        witness: proof.witness ? JSON.parse(proof.witness) : undefined\n    };\n};\nexports.deserializeProof = deserializeProof;\nconst serializeBlindedMessage = (bm, amount) => {\n    return {\n        B_: bm.B_.toHex(true),\n        amount: amount\n    };\n};\nexports.serializeBlindedMessage = serializeBlindedMessage;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS9jbGllbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLEdBQUcsd0JBQXdCLEdBQUcsc0JBQXNCLEdBQUcsaUNBQWlDLEdBQUcsd0JBQXdCLEdBQUcsb0JBQW9CLEdBQUcsa0NBQWtDO0FBQzlNLG9CQUFvQixtQkFBTyxDQUFDLGdGQUF5QjtBQUNyRCxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBcUI7QUFDN0MsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQWtCO0FBQzdDLG1CQUFtQixtQkFBTyxDQUFDLDBGQUFvQjtBQUMvQyxtQkFBbUIsbUJBQU8sQ0FBQyxrRkFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxlQUFlO0FBQ2hFO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYWJsb2Zlcm5hbmRlei90ZXN0MTIzL1RFTkVYLXBma21jOS9tYWluL25vZGVfbW9kdWxlcy9AY2FzaHUvY3J5cHRvL21vZHVsZXMvZXNtL2NsaWVudC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2VyaWFsaXplQmxpbmRlZE1lc3NhZ2UgPSBleHBvcnRzLmRlc2VyaWFsaXplUHJvb2YgPSBleHBvcnRzLnNlcmlhbGl6ZVByb29mID0gZXhwb3J0cy5jb25zdHJ1Y3RQcm9vZkZyb21Qcm9taXNlID0gZXhwb3J0cy51bmJsaW5kU2lnbmF0dXJlID0gZXhwb3J0cy5ibGluZE1lc3NhZ2UgPSBleHBvcnRzLmNyZWF0ZVJhbmRvbUJsaW5kZWRNZXNzYWdlID0gdm9pZCAwO1xuY29uc3Qgc2VjcDI1NmsxXzEgPSByZXF1aXJlKFwiQG5vYmxlL2N1cnZlcy9zZWNwMjU2azFcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBub2JsZS9oYXNoZXMvdXRpbHNcIik7XG5jb25zdCB1dGlsc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvdXRpbHMuanNcIik7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9pbmRleC5qc1wiKTtcbmNvbnN0IE5VVDExX2pzXzEgPSByZXF1aXJlKFwiLi9OVVQxMS5qc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVJhbmRvbUJsaW5kZWRNZXNzYWdlKHByaXZhdGVLZXkpIHtcbiAgICByZXR1cm4gYmxpbmRNZXNzYWdlKCgwLCB1dGlsc18xLnJhbmRvbUJ5dGVzKSgzMiksICgwLCB1dGlsc19qc18xLmJ5dGVzVG9OdW1iZXIpKHNlY3AyNTZrMV8xLnNlY3AyNTZrMS51dGlscy5yYW5kb21Qcml2YXRlS2V5KCkpLCBwcml2YXRlS2V5KTtcbn1cbmV4cG9ydHMuY3JlYXRlUmFuZG9tQmxpbmRlZE1lc3NhZ2UgPSBjcmVhdGVSYW5kb21CbGluZGVkTWVzc2FnZTtcbmZ1bmN0aW9uIGJsaW5kTWVzc2FnZShzZWNyZXQsIHIsIHByaXZhdGVLZXkpIHtcbiAgICBjb25zdCBZID0gKDAsIGluZGV4X2pzXzEuaGFzaFRvQ3VydmUpKHNlY3JldCk7XG4gICAgaWYgKCFyKSB7XG4gICAgICAgIHIgPSAoMCwgdXRpbHNfanNfMS5ieXRlc1RvTnVtYmVyKShzZWNwMjU2azFfMS5zZWNwMjU2azEudXRpbHMucmFuZG9tUHJpdmF0ZUtleSgpKTtcbiAgICB9XG4gICAgY29uc3QgckcgPSBzZWNwMjU2azFfMS5zZWNwMjU2azEuUHJvamVjdGl2ZVBvaW50LkJBU0UubXVsdGlwbHkocik7XG4gICAgY29uc3QgQl8gPSBZLmFkZChyRyk7XG4gICAgaWYgKHByaXZhdGVLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gKDAsIE5VVDExX2pzXzEuZ2V0U2lnbmVkT3V0cHV0KSh7IEJfLCByLCBzZWNyZXQgfSwgcHJpdmF0ZUtleSk7XG4gICAgfVxuICAgIHJldHVybiB7IEJfLCByLCBzZWNyZXQgfTtcbn1cbmV4cG9ydHMuYmxpbmRNZXNzYWdlID0gYmxpbmRNZXNzYWdlO1xuZnVuY3Rpb24gdW5ibGluZFNpZ25hdHVyZShDXywgciwgQSkge1xuICAgIGNvbnN0IEMgPSBDXy5zdWJ0cmFjdChBLm11bHRpcGx5KHIpKTtcbiAgICByZXR1cm4gQztcbn1cbmV4cG9ydHMudW5ibGluZFNpZ25hdHVyZSA9IHVuYmxpbmRTaWduYXR1cmU7XG5mdW5jdGlvbiBjb25zdHJ1Y3RQcm9vZkZyb21Qcm9taXNlKHByb21pc2UsIHIsIHNlY3JldCwga2V5KSB7XG4gICAgY29uc3QgQSA9IGtleTtcbiAgICBjb25zdCBDID0gdW5ibGluZFNpZ25hdHVyZShwcm9taXNlLkNfLCByLCBBKTtcbiAgICBjb25zdCBwcm9vZiA9IHtcbiAgICAgICAgaWQ6IHByb21pc2UuaWQsXG4gICAgICAgIGFtb3VudDogcHJvbWlzZS5hbW91bnQsXG4gICAgICAgIHNlY3JldCxcbiAgICAgICAgQ1xuICAgIH07XG4gICAgcmV0dXJuIHByb29mO1xufVxuZXhwb3J0cy5jb25zdHJ1Y3RQcm9vZkZyb21Qcm9taXNlID0gY29uc3RydWN0UHJvb2ZGcm9tUHJvbWlzZTtcbmNvbnN0IHNlcmlhbGl6ZVByb29mID0gKHByb29mKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYW1vdW50OiBwcm9vZi5hbW91bnQsXG4gICAgICAgIEM6IHByb29mLkMudG9IZXgodHJ1ZSksXG4gICAgICAgIGlkOiBwcm9vZi5pZCxcbiAgICAgICAgc2VjcmV0OiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUocHJvb2Yuc2VjcmV0KSxcbiAgICAgICAgd2l0bmVzczogSlNPTi5zdHJpbmdpZnkocHJvb2Yud2l0bmVzcylcbiAgICB9O1xufTtcbmV4cG9ydHMuc2VyaWFsaXplUHJvb2YgPSBzZXJpYWxpemVQcm9vZjtcbmNvbnN0IGRlc2VyaWFsaXplUHJvb2YgPSAocHJvb2YpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbW91bnQ6IHByb29mLmFtb3VudCxcbiAgICAgICAgQzogKDAsIGluZGV4X2pzXzEucG9pbnRGcm9tSGV4KShwcm9vZi5DKSxcbiAgICAgICAgaWQ6IHByb29mLmlkLFxuICAgICAgICBzZWNyZXQ6IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShwcm9vZi5zZWNyZXQpLFxuICAgICAgICB3aXRuZXNzOiBwcm9vZi53aXRuZXNzID8gSlNPTi5wYXJzZShwcm9vZi53aXRuZXNzKSA6IHVuZGVmaW5lZFxuICAgIH07XG59O1xuZXhwb3J0cy5kZXNlcmlhbGl6ZVByb29mID0gZGVzZXJpYWxpemVQcm9vZjtcbmNvbnN0IHNlcmlhbGl6ZUJsaW5kZWRNZXNzYWdlID0gKGJtLCBhbW91bnQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBCXzogYm0uQl8udG9IZXgodHJ1ZSksXG4gICAgICAgIGFtb3VudDogYW1vdW50XG4gICAgfTtcbn07XG5leHBvcnRzLnNlcmlhbGl6ZUJsaW5kZWRNZXNzYWdlID0gc2VyaWFsaXplQmxpbmRlZE1lc3NhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/crypto/modules/esm/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cashu/crypto/modules/esm/common/NUT11.js":
/*!****************************************************************!*\
  !*** ./node_modules/@cashu/crypto/modules/esm/common/NUT11.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseSecret = void 0;\nconst parseSecret = (secret) => {\n    try {\n        if (secret instanceof Uint8Array) {\n            secret = new TextDecoder().decode(secret);\n        }\n        return JSON.parse(secret);\n    }\n    catch (e) {\n        throw new Error(\"can't parse secret\");\n    }\n};\nexports.parseSecret = parseSecret;\n//# sourceMappingURL=NUT11.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS9jb21tb24vTlVUMTEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYWJsb2Zlcm5hbmRlei90ZXN0MTIzL1RFTkVYLXBma21jOS9tYWluL25vZGVfbW9kdWxlcy9AY2FzaHUvY3J5cHRvL21vZHVsZXMvZXNtL2NvbW1vbi9OVVQxMS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VTZWNyZXQgPSB2b2lkIDA7XG5jb25zdCBwYXJzZVNlY3JldCA9IChzZWNyZXQpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoc2VjcmV0IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgc2VjcmV0ID0gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHNlY3JldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc2VjcmV0KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FuJ3QgcGFyc2Ugc2VjcmV0XCIpO1xuICAgIH1cbn07XG5leHBvcnRzLnBhcnNlU2VjcmV0ID0gcGFyc2VTZWNyZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OVVQxMS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/crypto/modules/esm/common/NUT11.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cashu/crypto/modules/esm/common/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@cashu/crypto/modules/esm/common/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deriveKeysetId = exports.deserializeMintKeys = exports.serializeMintKeys = exports.createRandomPrivateKey = exports.getKeysetIdInt = exports.pointFromHex = exports.pointFromBytes = exports.hash_e = exports.hashToCurve = void 0;\nconst secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/secp256k1.js\");\nconst sha256_1 = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/sha256.js\");\nconst utils_1 = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/abstract/utils.js\");\nconst utils_js_1 = __webpack_require__(/*! ../util/utils.js */ \"(ssr)/./node_modules/@cashu/crypto/modules/esm/util/utils.js\");\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nconst DOMAIN_SEPARATOR = (0, utils_1.hexToBytes)('536563703235366b315f48617368546f43757276655f43617368755f');\nfunction hashToCurve(secret) {\n    const msgToHash = (0, sha256_1.sha256)(buffer_1.Buffer.concat([DOMAIN_SEPARATOR, secret]));\n    const counter = new Uint32Array(1);\n    const maxIterations = 2 ** 16;\n    for (let i = 0; i < maxIterations; i++) {\n        const counterBytes = new Uint8Array(counter.buffer);\n        const hash = (0, sha256_1.sha256)(buffer_1.Buffer.concat([msgToHash, counterBytes]));\n        try {\n            return pointFromHex((0, utils_1.bytesToHex)(buffer_1.Buffer.concat([new Uint8Array([0x02]), hash])));\n        }\n        catch (error) {\n            counter[0]++;\n        }\n    }\n    throw new Error('No valid point found');\n}\nexports.hashToCurve = hashToCurve;\nfunction hash_e(pubkeys) {\n    const hexStrings = pubkeys.map((p) => p.toHex(false));\n    const e_ = hexStrings.join('');\n    const e = (0, sha256_1.sha256)(new TextEncoder().encode(e_));\n    return e;\n}\nexports.hash_e = hash_e;\nfunction pointFromBytes(bytes) {\n    return secp256k1_1.secp256k1.ProjectivePoint.fromHex((0, utils_1.bytesToHex)(bytes));\n}\nexports.pointFromBytes = pointFromBytes;\nfunction pointFromHex(hex) {\n    return secp256k1_1.secp256k1.ProjectivePoint.fromHex(hex);\n}\nexports.pointFromHex = pointFromHex;\nconst getKeysetIdInt = (keysetId) => {\n    let keysetIdInt;\n    if (/^[a-fA-F0-9]+$/.test(keysetId)) {\n        keysetIdInt = (0, utils_js_1.hexToNumber)(keysetId) % BigInt(2 ** 31 - 1);\n    }\n    else {\n        //legacy keyset compatibility\n        keysetIdInt = (0, utils_js_1.bytesToNumber)((0, utils_js_1.encodeBase64toUint8)(keysetId)) % BigInt(2 ** 31 - 1);\n    }\n    return keysetIdInt;\n};\nexports.getKeysetIdInt = getKeysetIdInt;\nfunction createRandomPrivateKey() {\n    return secp256k1_1.secp256k1.utils.randomPrivateKey();\n}\nexports.createRandomPrivateKey = createRandomPrivateKey;\nfunction serializeMintKeys(mintKeys) {\n    const serializedMintKeys = {};\n    Object.keys(mintKeys).forEach((p) => {\n        serializedMintKeys[p] = (0, utils_1.bytesToHex)(mintKeys[p]);\n    });\n    return serializedMintKeys;\n}\nexports.serializeMintKeys = serializeMintKeys;\nfunction deserializeMintKeys(serializedMintKeys) {\n    const mintKeys = {};\n    Object.keys(serializedMintKeys).forEach((p) => {\n        mintKeys[p] = (0, utils_1.hexToBytes)(serializedMintKeys[p]);\n    });\n    return mintKeys;\n}\nexports.deserializeMintKeys = deserializeMintKeys;\nfunction deriveKeysetId(keys) {\n    const KEYSET_VERSION = '00';\n    const mapBigInt = (k) => {\n        return [BigInt(k[0]), k[1]];\n    };\n    const pubkeysConcat = Object.entries(serializeMintKeys(keys))\n        .map(mapBigInt)\n        .sort((a, b) => (a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0))\n        .map(([, pubKey]) => (0, utils_1.hexToBytes)(pubKey))\n        .reduce((prev, curr) => mergeUInt8Arrays(prev, curr), new Uint8Array());\n    const hash = (0, sha256_1.sha256)(pubkeysConcat);\n    const hashHex = buffer_1.Buffer.from(hash).toString('hex').slice(0, 14);\n    return '00' + hashHex;\n}\nexports.deriveKeysetId = deriveKeysetId;\nfunction mergeUInt8Arrays(a1, a2) {\n    // sum of individual array lengths\n    const mergedArray = new Uint8Array(a1.length + a2.length);\n    mergedArray.set(a1);\n    mergedArray.set(a2, a1.length);\n    return mergedArray;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS9jb21tb24vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsMkJBQTJCLEdBQUcseUJBQXlCLEdBQUcsOEJBQThCLEdBQUcsc0JBQXNCLEdBQUcsb0JBQW9CLEdBQUcsc0JBQXNCLEdBQUcsY0FBYyxHQUFHLG1CQUFtQjtBQUNqTyxvQkFBb0IsbUJBQU8sQ0FBQyxnRkFBeUI7QUFDckQsaUJBQWlCLG1CQUFPLENBQUMsMEVBQXNCO0FBQy9DLGdCQUFnQixtQkFBTyxDQUFDLDBGQUE4QjtBQUN0RCxtQkFBbUIsbUJBQU8sQ0FBQyxzRkFBa0I7QUFDN0MsaUJBQWlCLG1CQUFPLENBQUMscURBQVM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS9jb21tb24vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlcml2ZUtleXNldElkID0gZXhwb3J0cy5kZXNlcmlhbGl6ZU1pbnRLZXlzID0gZXhwb3J0cy5zZXJpYWxpemVNaW50S2V5cyA9IGV4cG9ydHMuY3JlYXRlUmFuZG9tUHJpdmF0ZUtleSA9IGV4cG9ydHMuZ2V0S2V5c2V0SWRJbnQgPSBleHBvcnRzLnBvaW50RnJvbUhleCA9IGV4cG9ydHMucG9pbnRGcm9tQnl0ZXMgPSBleHBvcnRzLmhhc2hfZSA9IGV4cG9ydHMuaGFzaFRvQ3VydmUgPSB2b2lkIDA7XG5jb25zdCBzZWNwMjU2azFfMSA9IHJlcXVpcmUoXCJAbm9ibGUvY3VydmVzL3NlY3AyNTZrMVwiKTtcbmNvbnN0IHNoYTI1Nl8xID0gcmVxdWlyZShcIkBub2JsZS9oYXNoZXMvc2hhMjU2XCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbm9ibGUvY3VydmVzL2Fic3RyYWN0L3V0aWxzXCIpO1xuY29uc3QgdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3V0aWxzLmpzXCIpO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyL1wiKTtcbmNvbnN0IERPTUFJTl9TRVBBUkFUT1IgPSAoMCwgdXRpbHNfMS5oZXhUb0J5dGVzKSgnNTM2NTYzNzAzMjM1MzY2YjMxNWY0ODYxNzM2ODU0NmY0Mzc1NzI3NjY1NWY0MzYxNzM2ODc1NWYnKTtcbmZ1bmN0aW9uIGhhc2hUb0N1cnZlKHNlY3JldCkge1xuICAgIGNvbnN0IG1zZ1RvSGFzaCA9ICgwLCBzaGEyNTZfMS5zaGEyNTYpKGJ1ZmZlcl8xLkJ1ZmZlci5jb25jYXQoW0RPTUFJTl9TRVBBUkFUT1IsIHNlY3JldF0pKTtcbiAgICBjb25zdCBjb3VudGVyID0gbmV3IFVpbnQzMkFycmF5KDEpO1xuICAgIGNvbnN0IG1heEl0ZXJhdGlvbnMgPSAyICoqIDE2O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4SXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvdW50ZXJCeXRlcyA9IG5ldyBVaW50OEFycmF5KGNvdW50ZXIuYnVmZmVyKTtcbiAgICAgICAgY29uc3QgaGFzaCA9ICgwLCBzaGEyNTZfMS5zaGEyNTYpKGJ1ZmZlcl8xLkJ1ZmZlci5jb25jYXQoW21zZ1RvSGFzaCwgY291bnRlckJ5dGVzXSkpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHBvaW50RnJvbUhleCgoMCwgdXRpbHNfMS5ieXRlc1RvSGV4KShidWZmZXJfMS5CdWZmZXIuY29uY2F0KFtuZXcgVWludDhBcnJheShbMHgwMl0pLCBoYXNoXSkpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvdW50ZXJbMF0rKztcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHZhbGlkIHBvaW50IGZvdW5kJyk7XG59XG5leHBvcnRzLmhhc2hUb0N1cnZlID0gaGFzaFRvQ3VydmU7XG5mdW5jdGlvbiBoYXNoX2UocHVia2V5cykge1xuICAgIGNvbnN0IGhleFN0cmluZ3MgPSBwdWJrZXlzLm1hcCgocCkgPT4gcC50b0hleChmYWxzZSkpO1xuICAgIGNvbnN0IGVfID0gaGV4U3RyaW5ncy5qb2luKCcnKTtcbiAgICBjb25zdCBlID0gKDAsIHNoYTI1Nl8xLnNoYTI1NikobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGVfKSk7XG4gICAgcmV0dXJuIGU7XG59XG5leHBvcnRzLmhhc2hfZSA9IGhhc2hfZTtcbmZ1bmN0aW9uIHBvaW50RnJvbUJ5dGVzKGJ5dGVzKSB7XG4gICAgcmV0dXJuIHNlY3AyNTZrMV8xLnNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQuZnJvbUhleCgoMCwgdXRpbHNfMS5ieXRlc1RvSGV4KShieXRlcykpO1xufVxuZXhwb3J0cy5wb2ludEZyb21CeXRlcyA9IHBvaW50RnJvbUJ5dGVzO1xuZnVuY3Rpb24gcG9pbnRGcm9tSGV4KGhleCkge1xuICAgIHJldHVybiBzZWNwMjU2azFfMS5zZWNwMjU2azEuUHJvamVjdGl2ZVBvaW50LmZyb21IZXgoaGV4KTtcbn1cbmV4cG9ydHMucG9pbnRGcm9tSGV4ID0gcG9pbnRGcm9tSGV4O1xuY29uc3QgZ2V0S2V5c2V0SWRJbnQgPSAoa2V5c2V0SWQpID0+IHtcbiAgICBsZXQga2V5c2V0SWRJbnQ7XG4gICAgaWYgKC9eW2EtZkEtRjAtOV0rJC8udGVzdChrZXlzZXRJZCkpIHtcbiAgICAgICAga2V5c2V0SWRJbnQgPSAoMCwgdXRpbHNfanNfMS5oZXhUb051bWJlcikoa2V5c2V0SWQpICUgQmlnSW50KDIgKiogMzEgLSAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vbGVnYWN5IGtleXNldCBjb21wYXRpYmlsaXR5XG4gICAgICAgIGtleXNldElkSW50ID0gKDAsIHV0aWxzX2pzXzEuYnl0ZXNUb051bWJlcikoKDAsIHV0aWxzX2pzXzEuZW5jb2RlQmFzZTY0dG9VaW50OCkoa2V5c2V0SWQpKSAlIEJpZ0ludCgyICoqIDMxIC0gMSk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzZXRJZEludDtcbn07XG5leHBvcnRzLmdldEtleXNldElkSW50ID0gZ2V0S2V5c2V0SWRJbnQ7XG5mdW5jdGlvbiBjcmVhdGVSYW5kb21Qcml2YXRlS2V5KCkge1xuICAgIHJldHVybiBzZWNwMjU2azFfMS5zZWNwMjU2azEudXRpbHMucmFuZG9tUHJpdmF0ZUtleSgpO1xufVxuZXhwb3J0cy5jcmVhdGVSYW5kb21Qcml2YXRlS2V5ID0gY3JlYXRlUmFuZG9tUHJpdmF0ZUtleTtcbmZ1bmN0aW9uIHNlcmlhbGl6ZU1pbnRLZXlzKG1pbnRLZXlzKSB7XG4gICAgY29uc3Qgc2VyaWFsaXplZE1pbnRLZXlzID0ge307XG4gICAgT2JqZWN0LmtleXMobWludEtleXMpLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgc2VyaWFsaXplZE1pbnRLZXlzW3BdID0gKDAsIHV0aWxzXzEuYnl0ZXNUb0hleCkobWludEtleXNbcF0pO1xuICAgIH0pO1xuICAgIHJldHVybiBzZXJpYWxpemVkTWludEtleXM7XG59XG5leHBvcnRzLnNlcmlhbGl6ZU1pbnRLZXlzID0gc2VyaWFsaXplTWludEtleXM7XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZU1pbnRLZXlzKHNlcmlhbGl6ZWRNaW50S2V5cykge1xuICAgIGNvbnN0IG1pbnRLZXlzID0ge307XG4gICAgT2JqZWN0LmtleXMoc2VyaWFsaXplZE1pbnRLZXlzKS5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgIG1pbnRLZXlzW3BdID0gKDAsIHV0aWxzXzEuaGV4VG9CeXRlcykoc2VyaWFsaXplZE1pbnRLZXlzW3BdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWludEtleXM7XG59XG5leHBvcnRzLmRlc2VyaWFsaXplTWludEtleXMgPSBkZXNlcmlhbGl6ZU1pbnRLZXlzO1xuZnVuY3Rpb24gZGVyaXZlS2V5c2V0SWQoa2V5cykge1xuICAgIGNvbnN0IEtFWVNFVF9WRVJTSU9OID0gJzAwJztcbiAgICBjb25zdCBtYXBCaWdJbnQgPSAoaykgPT4ge1xuICAgICAgICByZXR1cm4gW0JpZ0ludChrWzBdKSwga1sxXV07XG4gICAgfTtcbiAgICBjb25zdCBwdWJrZXlzQ29uY2F0ID0gT2JqZWN0LmVudHJpZXMoc2VyaWFsaXplTWludEtleXMoa2V5cykpXG4gICAgICAgIC5tYXAobWFwQmlnSW50KVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gKGFbMF0gPCBiWzBdID8gLTEgOiBhWzBdID4gYlswXSA/IDEgOiAwKSlcbiAgICAgICAgLm1hcCgoWywgcHViS2V5XSkgPT4gKDAsIHV0aWxzXzEuaGV4VG9CeXRlcykocHViS2V5KSlcbiAgICAgICAgLnJlZHVjZSgocHJldiwgY3VycikgPT4gbWVyZ2VVSW50OEFycmF5cyhwcmV2LCBjdXJyKSwgbmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgY29uc3QgaGFzaCA9ICgwLCBzaGEyNTZfMS5zaGEyNTYpKHB1YmtleXNDb25jYXQpO1xuICAgIGNvbnN0IGhhc2hIZXggPSBidWZmZXJfMS5CdWZmZXIuZnJvbShoYXNoKS50b1N0cmluZygnaGV4Jykuc2xpY2UoMCwgMTQpO1xuICAgIHJldHVybiAnMDAnICsgaGFzaEhleDtcbn1cbmV4cG9ydHMuZGVyaXZlS2V5c2V0SWQgPSBkZXJpdmVLZXlzZXRJZDtcbmZ1bmN0aW9uIG1lcmdlVUludDhBcnJheXMoYTEsIGEyKSB7XG4gICAgLy8gc3VtIG9mIGluZGl2aWR1YWwgYXJyYXkgbGVuZ3Roc1xuICAgIGNvbnN0IG1lcmdlZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYTEubGVuZ3RoICsgYTIubGVuZ3RoKTtcbiAgICBtZXJnZWRBcnJheS5zZXQoYTEpO1xuICAgIG1lcmdlZEFycmF5LnNldChhMiwgYTEubGVuZ3RoKTtcbiAgICByZXR1cm4gbWVyZ2VkQXJyYXk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/crypto/modules/esm/common/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cashu/crypto/modules/esm/util/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@cashu/crypto/modules/esm/util/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodeBase64toUint8 = exports.hexToNumber = exports.bytesToNumber = void 0;\nconst utils_1 = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/abstract/utils.js\");\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nfunction bytesToNumber(bytes) {\n    return hexToNumber((0, utils_1.bytesToHex)(bytes));\n}\nexports.bytesToNumber = bytesToNumber;\nfunction hexToNumber(hex) {\n    return BigInt(`0x${hex}`);\n}\nexports.hexToNumber = hexToNumber;\nfunction encodeBase64toUint8(base64String) {\n    return buffer_1.Buffer.from(base64String, 'base64');\n}\nexports.encodeBase64toUint8 = encodeBase64toUint8;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS91dGlsL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLG1CQUFtQixHQUFHLHFCQUFxQjtBQUN6RSxnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBOEI7QUFDdEQsaUJBQWlCLG1CQUFPLENBQUMscURBQVM7QUFDbEM7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsdUJBQXVCLElBQUk7QUFDM0I7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQGNhc2h1L2NyeXB0by9tb2R1bGVzL2VzbS91dGlsL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbmNvZGVCYXNlNjR0b1VpbnQ4ID0gZXhwb3J0cy5oZXhUb051bWJlciA9IGV4cG9ydHMuYnl0ZXNUb051bWJlciA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQG5vYmxlL2N1cnZlcy9hYnN0cmFjdC91dGlsc1wiKTtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlci9cIik7XG5mdW5jdGlvbiBieXRlc1RvTnVtYmVyKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGhleFRvTnVtYmVyKCgwLCB1dGlsc18xLmJ5dGVzVG9IZXgpKGJ5dGVzKSk7XG59XG5leHBvcnRzLmJ5dGVzVG9OdW1iZXIgPSBieXRlc1RvTnVtYmVyO1xuZnVuY3Rpb24gaGV4VG9OdW1iZXIoaGV4KSB7XG4gICAgcmV0dXJuIEJpZ0ludChgMHgke2hleH1gKTtcbn1cbmV4cG9ydHMuaGV4VG9OdW1iZXIgPSBoZXhUb051bWJlcjtcbmZ1bmN0aW9uIGVuY29kZUJhc2U2NHRvVWludDgoYmFzZTY0U3RyaW5nKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGJhc2U2NFN0cmluZywgJ2Jhc2U2NCcpO1xufVxuZXhwb3J0cy5lbmNvZGVCYXNlNjR0b1VpbnQ4ID0gZW5jb2RlQmFzZTY0dG9VaW50ODtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/crypto/modules/esm/util/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cashu/crypto/node_modules/@scure/bip32/lib/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@cashu/crypto/node_modules/@scure/bip32/lib/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HDKey = exports.HARDENED_OFFSET = void 0;\n/**\n * @module BIP32 hierarchical deterministic (HD) wallets over secp256k1.\n * @example\n * ```js\n * import { HDKey } from \"@scure/bip32\";\n * const hdkey1 = HDKey.fromMasterSeed(seed);\n * const hdkey2 = HDKey.fromExtendedKey(base58key);\n * const hdkey3 = HDKey.fromJSON({ xpriv: string });\n *\n * // props\n * [hdkey1.depth, hdkey1.index, hdkey1.chainCode];\n * console.log(hdkey2.privateKey, hdkey2.publicKey);\n * console.log(hdkey3.derive(\"m/0/2147483647'/1\"));\n * const sig = hdkey3.sign(hash);\n * hdkey3.verify(hash, sig);\n * ```\n */\n/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nconst hmac_1 = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/@noble/hashes/hmac.js\");\nconst ripemd160_1 = __webpack_require__(/*! @noble/hashes/ripemd160 */ \"(ssr)/./node_modules/@noble/hashes/ripemd160.js\");\nconst sha256_1 = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/sha256.js\");\nconst sha512_1 = __webpack_require__(/*! @noble/hashes/sha512 */ \"(ssr)/./node_modules/@noble/hashes/sha512.js\");\nconst _assert_1 = __webpack_require__(/*! @noble/hashes/_assert */ \"(ssr)/./node_modules/@noble/hashes/_assert.js\");\nconst utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/utils.js\");\nconst secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/secp256k1.js\");\nconst modular_1 = __webpack_require__(/*! @noble/curves/abstract/modular */ \"(ssr)/./node_modules/@noble/curves/abstract/modular.js\");\nconst base_1 = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@scure/base/lib/index.js\");\nconst Point = secp256k1_1.secp256k1.ProjectivePoint;\nconst base58check = (0, base_1.createBase58check)(sha256_1.sha256);\nfunction bytesToNumber(bytes) {\n    (0, _assert_1.abytes)(bytes);\n    const h = bytes.length === 0 ? '0' : (0, utils_1.bytesToHex)(bytes);\n    return BigInt('0x' + h);\n}\nfunction numberToBytes(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('bigint expected');\n    return (0, utils_1.hexToBytes)(num.toString(16).padStart(64, '0'));\n}\nconst MASTER_SECRET = (0, utils_1.utf8ToBytes)('Bitcoin seed');\n// Bitcoin hardcoded by default\nconst BITCOIN_VERSIONS = { private: 0x0488ade4, public: 0x0488b21e };\nexports.HARDENED_OFFSET = 0x80000000;\nconst hash160 = (data) => (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(data));\nconst fromU32 = (data) => (0, utils_1.createView)(data).getUint32(0, false);\nconst toU32 = (n) => {\n    if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n        throw new Error('invalid number, should be from 0 to 2**32-1, got ' + n);\n    }\n    const buf = new Uint8Array(4);\n    (0, utils_1.createView)(buf).setUint32(0, n, false);\n    return buf;\n};\nclass HDKey {\n    get fingerprint() {\n        if (!this.pubHash) {\n            throw new Error('No publicKey set!');\n        }\n        return fromU32(this.pubHash);\n    }\n    get identifier() {\n        return this.pubHash;\n    }\n    get pubKeyHash() {\n        return this.pubHash;\n    }\n    get privateKey() {\n        return this.privKeyBytes || null;\n    }\n    get publicKey() {\n        return this.pubKey || null;\n    }\n    get privateExtendedKey() {\n        const priv = this.privateKey;\n        if (!priv) {\n            throw new Error('No private key');\n        }\n        return base58check.encode(this.serialize(this.versions.private, (0, utils_1.concatBytes)(new Uint8Array([0]), priv)));\n    }\n    get publicExtendedKey() {\n        if (!this.pubKey) {\n            throw new Error('No public key');\n        }\n        return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n    }\n    static fromMasterSeed(seed, versions = BITCOIN_VERSIONS) {\n        (0, _assert_1.abytes)(seed);\n        if (8 * seed.length < 128 || 8 * seed.length > 512) {\n            throw new Error('HDKey: seed length must be between 128 and 512 bits; 256 bits is advised, got ' +\n                seed.length);\n        }\n        const I = (0, hmac_1.hmac)(sha512_1.sha512, MASTER_SECRET, seed);\n        return new HDKey({\n            versions,\n            chainCode: I.slice(32),\n            privateKey: I.slice(0, 32),\n        });\n    }\n    static fromExtendedKey(base58key, versions = BITCOIN_VERSIONS) {\n        // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n        const keyBuffer = base58check.decode(base58key);\n        const keyView = (0, utils_1.createView)(keyBuffer);\n        const version = keyView.getUint32(0, false);\n        const opt = {\n            versions,\n            depth: keyBuffer[4],\n            parentFingerprint: keyView.getUint32(5, false),\n            index: keyView.getUint32(9, false),\n            chainCode: keyBuffer.slice(13, 45),\n        };\n        const key = keyBuffer.slice(45);\n        const isPriv = key[0] === 0;\n        if (version !== versions[isPriv ? 'private' : 'public']) {\n            throw new Error('Version mismatch');\n        }\n        if (isPriv) {\n            return new HDKey({ ...opt, privateKey: key.slice(1) });\n        }\n        else {\n            return new HDKey({ ...opt, publicKey: key });\n        }\n    }\n    static fromJSON(json) {\n        return HDKey.fromExtendedKey(json.xpriv);\n    }\n    constructor(opt) {\n        this.depth = 0;\n        this.index = 0;\n        this.chainCode = null;\n        this.parentFingerprint = 0;\n        if (!opt || typeof opt !== 'object') {\n            throw new Error('HDKey.constructor must not be called directly');\n        }\n        this.versions = opt.versions || BITCOIN_VERSIONS;\n        this.depth = opt.depth || 0;\n        this.chainCode = opt.chainCode || null;\n        this.index = opt.index || 0;\n        this.parentFingerprint = opt.parentFingerprint || 0;\n        if (!this.depth) {\n            if (this.parentFingerprint || this.index) {\n                throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n            }\n        }\n        if (opt.publicKey && opt.privateKey) {\n            throw new Error('HDKey: publicKey and privateKey at same time.');\n        }\n        if (opt.privateKey) {\n            if (!secp256k1_1.secp256k1.utils.isValidPrivateKey(opt.privateKey)) {\n                throw new Error('Invalid private key');\n            }\n            this.privKey =\n                typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n            this.privKeyBytes = numberToBytes(this.privKey);\n            this.pubKey = secp256k1_1.secp256k1.getPublicKey(opt.privateKey, true);\n        }\n        else if (opt.publicKey) {\n            this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\n        }\n        else {\n            throw new Error('HDKey: no public or private key provided');\n        }\n        this.pubHash = hash160(this.pubKey);\n    }\n    derive(path) {\n        if (!/^[mM]'?/.test(path)) {\n            throw new Error('Path must start with \"m\" or \"M\"');\n        }\n        if (/^[mM]'?$/.test(path)) {\n            return this;\n        }\n        const parts = path.replace(/^[mM]'?\\//, '').split('/');\n        // tslint:disable-next-line\n        let child = this;\n        for (const c of parts) {\n            const m = /^(\\d+)('?)$/.exec(c);\n            const m1 = m && m[1];\n            if (!m || m.length !== 3 || typeof m1 !== 'string')\n                throw new Error('invalid child index: ' + c);\n            let idx = +m1;\n            if (!Number.isSafeInteger(idx) || idx >= exports.HARDENED_OFFSET) {\n                throw new Error('Invalid index');\n            }\n            // hardened key\n            if (m[2] === \"'\") {\n                idx += exports.HARDENED_OFFSET;\n            }\n            child = child.deriveChild(idx);\n        }\n        return child;\n    }\n    deriveChild(index) {\n        if (!this.pubKey || !this.chainCode) {\n            throw new Error('No publicKey or chainCode set');\n        }\n        let data = toU32(index);\n        if (index >= exports.HARDENED_OFFSET) {\n            // Hardened\n            const priv = this.privateKey;\n            if (!priv) {\n                throw new Error('Could not derive hardened child key');\n            }\n            // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n            data = (0, utils_1.concatBytes)(new Uint8Array([0]), priv, data);\n        }\n        else {\n            // Normal child: serP(point(kpar)) || ser32(index)\n            data = (0, utils_1.concatBytes)(this.pubKey, data);\n        }\n        const I = (0, hmac_1.hmac)(sha512_1.sha512, this.chainCode, data);\n        const childTweak = bytesToNumber(I.slice(0, 32));\n        const chainCode = I.slice(32);\n        if (!secp256k1_1.secp256k1.utils.isValidPrivateKey(childTweak)) {\n            throw new Error('Tweak bigger than curve order');\n        }\n        const opt = {\n            versions: this.versions,\n            chainCode,\n            depth: this.depth + 1,\n            parentFingerprint: this.fingerprint,\n            index,\n        };\n        try {\n            // Private parent key -> private child key\n            if (this.privateKey) {\n                const added = (0, modular_1.mod)(this.privKey + childTweak, secp256k1_1.secp256k1.CURVE.n);\n                if (!secp256k1_1.secp256k1.utils.isValidPrivateKey(added)) {\n                    throw new Error('The tweak was out of range or the resulted private key is invalid');\n                }\n                opt.privateKey = added;\n            }\n            else {\n                const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\n                // Cryptographically impossible: hmac-sha512 preimage would need to be found\n                if (added.equals(Point.ZERO)) {\n                    throw new Error('The tweak was equal to negative P, which made the result key invalid');\n                }\n                opt.publicKey = added.toRawBytes(true);\n            }\n            return new HDKey(opt);\n        }\n        catch (err) {\n            return this.deriveChild(index + 1);\n        }\n    }\n    sign(hash) {\n        if (!this.privateKey) {\n            throw new Error('No privateKey set!');\n        }\n        (0, _assert_1.abytes)(hash, 32);\n        return secp256k1_1.secp256k1.sign(hash, this.privKey).toCompactRawBytes();\n    }\n    verify(hash, signature) {\n        (0, _assert_1.abytes)(hash, 32);\n        (0, _assert_1.abytes)(signature, 64);\n        if (!this.publicKey) {\n            throw new Error('No publicKey set!');\n        }\n        let sig;\n        try {\n            sig = secp256k1_1.secp256k1.Signature.fromCompact(signature);\n        }\n        catch (error) {\n            return false;\n        }\n        return secp256k1_1.secp256k1.verify(sig, hash, this.publicKey);\n    }\n    wipePrivateData() {\n        this.privKey = undefined;\n        if (this.privKeyBytes) {\n            this.privKeyBytes.fill(0);\n            this.privKeyBytes = undefined;\n        }\n        return this;\n    }\n    toJSON() {\n        return {\n            xpriv: this.privateExtendedKey,\n            xpub: this.publicExtendedKey,\n        };\n    }\n    serialize(version, key) {\n        if (!this.chainCode) {\n            throw new Error('No chainCode set');\n        }\n        (0, _assert_1.abytes)(key, 33);\n        // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n        return (0, utils_1.concatBytes)(toU32(version), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);\n    }\n}\nexports.HDKey = HDKey;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/crypto/node_modules/@scure/bip32/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cashu/crypto/node_modules/@scure/bip39/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@cashu/crypto/node_modules/@scure/bip39/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Audited & minimal JS implementation of\n * [BIP39 mnemonic phrases](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n * @module\n * @example\n```js\nimport * as bip39 from '@scure/bip39';\nimport { wordlist } from '@scure/bip39/wordlists/english';\nconst mn = bip39.generateMnemonic(wordlist);\nconsole.log(mn);\nconst ent = bip39.mnemonicToEntropy(mn, wordlist)\nbip39.entropyToMnemonic(ent, wordlist);\nbip39.validateMnemonic(mn, wordlist);\nawait bip39.mnemonicToSeed(mn, 'password');\nbip39.mnemonicToSeedSync(mn, 'password');\n\n// Wordlists\nimport { wordlist as czech } from '@scure/bip39/wordlists/czech';\nimport { wordlist as english } from '@scure/bip39/wordlists/english';\nimport { wordlist as french } from '@scure/bip39/wordlists/french';\nimport { wordlist as italian } from '@scure/bip39/wordlists/italian';\nimport { wordlist as japanese } from '@scure/bip39/wordlists/japanese';\nimport { wordlist as korean } from '@scure/bip39/wordlists/korean';\nimport { wordlist as portuguese } from '@scure/bip39/wordlists/portuguese';\nimport { wordlist as simplifiedChinese } from '@scure/bip39/wordlists/simplified-chinese';\nimport { wordlist as spanish } from '@scure/bip39/wordlists/spanish';\nimport { wordlist as traditionalChinese } from '@scure/bip39/wordlists/traditional-chinese';\n```\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.generateMnemonic = generateMnemonic;\nexports.mnemonicToEntropy = mnemonicToEntropy;\nexports.entropyToMnemonic = entropyToMnemonic;\nexports.validateMnemonic = validateMnemonic;\nexports.mnemonicToSeed = mnemonicToSeed;\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\n/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nconst _assert_1 = __webpack_require__(/*! @noble/hashes/_assert */ \"(ssr)/./node_modules/@noble/hashes/_assert.js\");\nconst pbkdf2_1 = __webpack_require__(/*! @noble/hashes/pbkdf2 */ \"(ssr)/./node_modules/@noble/hashes/pbkdf2.js\");\nconst sha256_1 = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/sha256.js\");\nconst sha512_1 = __webpack_require__(/*! @noble/hashes/sha512 */ \"(ssr)/./node_modules/@noble/hashes/sha512.js\");\nconst utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/utils.js\");\nconst base_1 = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@scure/base/lib/index.js\");\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\n// https://tonsky.me/blog/unicode/#why-is-a----\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError('invalid mnemonic type: ' + typeof str);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction aentropy(ent) {\n    (0, _assert_1.abytes)(ent, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction generateMnemonic(wordlist, strength = 128) {\n    (0, _assert_1.anumber)(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic((0, utils_1.randomBytes)(strength / 8), wordlist);\n}\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([((0, sha256_1.sha256)(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string')\n        throw new Error('Wordlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error('wordlist: non-string element: ' + i);\n    });\n    return base_1.utils.chain(base_1.utils.checksum(1, calcChecksum), base_1.utils.radix2(11, true), base_1.utils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    aentropy(entropy);\n    return entropy;\n}\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction entropyToMnemonic(entropy, wordlist) {\n    aentropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nconst psalt = (passphrase) => nfkd('mnemonic' + passphrase);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeed(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2Async)(sha512_1.sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\n}\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2)(sha512_1.sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/crypto/node_modules/@scure/bip39/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cashu/crypto/node_modules/@scure/bip39/wordlists/english.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@cashu/crypto/node_modules/@scure/bip39/wordlists/english.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wordlist = void 0;\nexports.wordlist = `abandon\nability\nable\nabout\nabove\nabsent\nabsorb\nabstract\nabsurd\nabuse\naccess\naccident\naccount\naccuse\nachieve\nacid\nacoustic\nacquire\nacross\nact\naction\nactor\nactress\nactual\nadapt\nadd\naddict\naddress\nadjust\nadmit\nadult\nadvance\nadvice\naerobic\naffair\nafford\nafraid\nagain\nage\nagent\nagree\nahead\naim\nair\nairport\naisle\nalarm\nalbum\nalcohol\nalert\nalien\nall\nalley\nallow\nalmost\nalone\nalpha\nalready\nalso\nalter\nalways\namateur\namazing\namong\namount\namused\nanalyst\nanchor\nancient\nanger\nangle\nangry\nanimal\nankle\nannounce\nannual\nanother\nanswer\nantenna\nantique\nanxiety\nany\napart\napology\nappear\napple\napprove\napril\narch\narctic\narea\narena\nargue\narm\narmed\narmor\narmy\naround\narrange\narrest\narrive\narrow\nart\nartefact\nartist\nartwork\nask\naspect\nassault\nasset\nassist\nassume\nasthma\nathlete\natom\nattack\nattend\nattitude\nattract\nauction\naudit\naugust\naunt\nauthor\nauto\nautumn\naverage\navocado\navoid\nawake\naware\naway\nawesome\nawful\nawkward\naxis\nbaby\nbachelor\nbacon\nbadge\nbag\nbalance\nbalcony\nball\nbamboo\nbanana\nbanner\nbar\nbarely\nbargain\nbarrel\nbase\nbasic\nbasket\nbattle\nbeach\nbean\nbeauty\nbecause\nbecome\nbeef\nbefore\nbegin\nbehave\nbehind\nbelieve\nbelow\nbelt\nbench\nbenefit\nbest\nbetray\nbetter\nbetween\nbeyond\nbicycle\nbid\nbike\nbind\nbiology\nbird\nbirth\nbitter\nblack\nblade\nblame\nblanket\nblast\nbleak\nbless\nblind\nblood\nblossom\nblouse\nblue\nblur\nblush\nboard\nboat\nbody\nboil\nbomb\nbone\nbonus\nbook\nboost\nborder\nboring\nborrow\nboss\nbottom\nbounce\nbox\nboy\nbracket\nbrain\nbrand\nbrass\nbrave\nbread\nbreeze\nbrick\nbridge\nbrief\nbright\nbring\nbrisk\nbroccoli\nbroken\nbronze\nbroom\nbrother\nbrown\nbrush\nbubble\nbuddy\nbudget\nbuffalo\nbuild\nbulb\nbulk\nbullet\nbundle\nbunker\nburden\nburger\nburst\nbus\nbusiness\nbusy\nbutter\nbuyer\nbuzz\ncabbage\ncabin\ncable\ncactus\ncage\ncake\ncall\ncalm\ncamera\ncamp\ncan\ncanal\ncancel\ncandy\ncannon\ncanoe\ncanvas\ncanyon\ncapable\ncapital\ncaptain\ncar\ncarbon\ncard\ncargo\ncarpet\ncarry\ncart\ncase\ncash\ncasino\ncastle\ncasual\ncat\ncatalog\ncatch\ncategory\ncattle\ncaught\ncause\ncaution\ncave\nceiling\ncelery\ncement\ncensus\ncentury\ncereal\ncertain\nchair\nchalk\nchampion\nchange\nchaos\nchapter\ncharge\nchase\nchat\ncheap\ncheck\ncheese\nchef\ncherry\nchest\nchicken\nchief\nchild\nchimney\nchoice\nchoose\nchronic\nchuckle\nchunk\nchurn\ncigar\ncinnamon\ncircle\ncitizen\ncity\ncivil\nclaim\nclap\nclarify\nclaw\nclay\nclean\nclerk\nclever\nclick\nclient\ncliff\nclimb\nclinic\nclip\nclock\nclog\nclose\ncloth\ncloud\nclown\nclub\nclump\ncluster\nclutch\ncoach\ncoast\ncoconut\ncode\ncoffee\ncoil\ncoin\ncollect\ncolor\ncolumn\ncombine\ncome\ncomfort\ncomic\ncommon\ncompany\nconcert\nconduct\nconfirm\ncongress\nconnect\nconsider\ncontrol\nconvince\ncook\ncool\ncopper\ncopy\ncoral\ncore\ncorn\ncorrect\ncost\ncotton\ncouch\ncountry\ncouple\ncourse\ncousin\ncover\ncoyote\ncrack\ncradle\ncraft\ncram\ncrane\ncrash\ncrater\ncrawl\ncrazy\ncream\ncredit\ncreek\ncrew\ncricket\ncrime\ncrisp\ncritic\ncrop\ncross\ncrouch\ncrowd\ncrucial\ncruel\ncruise\ncrumble\ncrunch\ncrush\ncry\ncrystal\ncube\nculture\ncup\ncupboard\ncurious\ncurrent\ncurtain\ncurve\ncushion\ncustom\ncute\ncycle\ndad\ndamage\ndamp\ndance\ndanger\ndaring\ndash\ndaughter\ndawn\nday\ndeal\ndebate\ndebris\ndecade\ndecember\ndecide\ndecline\ndecorate\ndecrease\ndeer\ndefense\ndefine\ndefy\ndegree\ndelay\ndeliver\ndemand\ndemise\ndenial\ndentist\ndeny\ndepart\ndepend\ndeposit\ndepth\ndeputy\nderive\ndescribe\ndesert\ndesign\ndesk\ndespair\ndestroy\ndetail\ndetect\ndevelop\ndevice\ndevote\ndiagram\ndial\ndiamond\ndiary\ndice\ndiesel\ndiet\ndiffer\ndigital\ndignity\ndilemma\ndinner\ndinosaur\ndirect\ndirt\ndisagree\ndiscover\ndisease\ndish\ndismiss\ndisorder\ndisplay\ndistance\ndivert\ndivide\ndivorce\ndizzy\ndoctor\ndocument\ndog\ndoll\ndolphin\ndomain\ndonate\ndonkey\ndonor\ndoor\ndose\ndouble\ndove\ndraft\ndragon\ndrama\ndrastic\ndraw\ndream\ndress\ndrift\ndrill\ndrink\ndrip\ndrive\ndrop\ndrum\ndry\nduck\ndumb\ndune\nduring\ndust\ndutch\nduty\ndwarf\ndynamic\neager\neagle\nearly\nearn\nearth\neasily\neast\neasy\necho\necology\neconomy\nedge\nedit\neducate\neffort\negg\neight\neither\nelbow\nelder\nelectric\nelegant\nelement\nelephant\nelevator\nelite\nelse\nembark\nembody\nembrace\nemerge\nemotion\nemploy\nempower\nempty\nenable\nenact\nend\nendless\nendorse\nenemy\nenergy\nenforce\nengage\nengine\nenhance\nenjoy\nenlist\nenough\nenrich\nenroll\nensure\nenter\nentire\nentry\nenvelope\nepisode\nequal\nequip\nera\nerase\nerode\nerosion\nerror\nerupt\nescape\nessay\nessence\nestate\neternal\nethics\nevidence\nevil\nevoke\nevolve\nexact\nexample\nexcess\nexchange\nexcite\nexclude\nexcuse\nexecute\nexercise\nexhaust\nexhibit\nexile\nexist\nexit\nexotic\nexpand\nexpect\nexpire\nexplain\nexpose\nexpress\nextend\nextra\neye\neyebrow\nfabric\nface\nfaculty\nfade\nfaint\nfaith\nfall\nfalse\nfame\nfamily\nfamous\nfan\nfancy\nfantasy\nfarm\nfashion\nfat\nfatal\nfather\nfatigue\nfault\nfavorite\nfeature\nfebruary\nfederal\nfee\nfeed\nfeel\nfemale\nfence\nfestival\nfetch\nfever\nfew\nfiber\nfiction\nfield\nfigure\nfile\nfilm\nfilter\nfinal\nfind\nfine\nfinger\nfinish\nfire\nfirm\nfirst\nfiscal\nfish\nfit\nfitness\nfix\nflag\nflame\nflash\nflat\nflavor\nflee\nflight\nflip\nfloat\nflock\nfloor\nflower\nfluid\nflush\nfly\nfoam\nfocus\nfog\nfoil\nfold\nfollow\nfood\nfoot\nforce\nforest\nforget\nfork\nfortune\nforum\nforward\nfossil\nfoster\nfound\nfox\nfragile\nframe\nfrequent\nfresh\nfriend\nfringe\nfrog\nfront\nfrost\nfrown\nfrozen\nfruit\nfuel\nfun\nfunny\nfurnace\nfury\nfuture\ngadget\ngain\ngalaxy\ngallery\ngame\ngap\ngarage\ngarbage\ngarden\ngarlic\ngarment\ngas\ngasp\ngate\ngather\ngauge\ngaze\ngeneral\ngenius\ngenre\ngentle\ngenuine\ngesture\nghost\ngiant\ngift\ngiggle\nginger\ngiraffe\ngirl\ngive\nglad\nglance\nglare\nglass\nglide\nglimpse\nglobe\ngloom\nglory\nglove\nglow\nglue\ngoat\ngoddess\ngold\ngood\ngoose\ngorilla\ngospel\ngossip\ngovern\ngown\ngrab\ngrace\ngrain\ngrant\ngrape\ngrass\ngravity\ngreat\ngreen\ngrid\ngrief\ngrit\ngrocery\ngroup\ngrow\ngrunt\nguard\nguess\nguide\nguilt\nguitar\ngun\ngym\nhabit\nhair\nhalf\nhammer\nhamster\nhand\nhappy\nharbor\nhard\nharsh\nharvest\nhat\nhave\nhawk\nhazard\nhead\nhealth\nheart\nheavy\nhedgehog\nheight\nhello\nhelmet\nhelp\nhen\nhero\nhidden\nhigh\nhill\nhint\nhip\nhire\nhistory\nhobby\nhockey\nhold\nhole\nholiday\nhollow\nhome\nhoney\nhood\nhope\nhorn\nhorror\nhorse\nhospital\nhost\nhotel\nhour\nhover\nhub\nhuge\nhuman\nhumble\nhumor\nhundred\nhungry\nhunt\nhurdle\nhurry\nhurt\nhusband\nhybrid\nice\nicon\nidea\nidentify\nidle\nignore\nill\nillegal\nillness\nimage\nimitate\nimmense\nimmune\nimpact\nimpose\nimprove\nimpulse\ninch\ninclude\nincome\nincrease\nindex\nindicate\nindoor\nindustry\ninfant\ninflict\ninform\ninhale\ninherit\ninitial\ninject\ninjury\ninmate\ninner\ninnocent\ninput\ninquiry\ninsane\ninsect\ninside\ninspire\ninstall\nintact\ninterest\ninto\ninvest\ninvite\ninvolve\niron\nisland\nisolate\nissue\nitem\nivory\njacket\njaguar\njar\njazz\njealous\njeans\njelly\njewel\njob\njoin\njoke\njourney\njoy\njudge\njuice\njump\njungle\njunior\njunk\njust\nkangaroo\nkeen\nkeep\nketchup\nkey\nkick\nkid\nkidney\nkind\nkingdom\nkiss\nkit\nkitchen\nkite\nkitten\nkiwi\nknee\nknife\nknock\nknow\nlab\nlabel\nlabor\nladder\nlady\nlake\nlamp\nlanguage\nlaptop\nlarge\nlater\nlatin\nlaugh\nlaundry\nlava\nlaw\nlawn\nlawsuit\nlayer\nlazy\nleader\nleaf\nlearn\nleave\nlecture\nleft\nleg\nlegal\nlegend\nleisure\nlemon\nlend\nlength\nlens\nleopard\nlesson\nletter\nlevel\nliar\nliberty\nlibrary\nlicense\nlife\nlift\nlight\nlike\nlimb\nlimit\nlink\nlion\nliquid\nlist\nlittle\nlive\nlizard\nload\nloan\nlobster\nlocal\nlock\nlogic\nlonely\nlong\nloop\nlottery\nloud\nlounge\nlove\nloyal\nlucky\nluggage\nlumber\nlunar\nlunch\nluxury\nlyrics\nmachine\nmad\nmagic\nmagnet\nmaid\nmail\nmain\nmajor\nmake\nmammal\nman\nmanage\nmandate\nmango\nmansion\nmanual\nmaple\nmarble\nmarch\nmargin\nmarine\nmarket\nmarriage\nmask\nmass\nmaster\nmatch\nmaterial\nmath\nmatrix\nmatter\nmaximum\nmaze\nmeadow\nmean\nmeasure\nmeat\nmechanic\nmedal\nmedia\nmelody\nmelt\nmember\nmemory\nmention\nmenu\nmercy\nmerge\nmerit\nmerry\nmesh\nmessage\nmetal\nmethod\nmiddle\nmidnight\nmilk\nmillion\nmimic\nmind\nminimum\nminor\nminute\nmiracle\nmirror\nmisery\nmiss\nmistake\nmix\nmixed\nmixture\nmobile\nmodel\nmodify\nmom\nmoment\nmonitor\nmonkey\nmonster\nmonth\nmoon\nmoral\nmore\nmorning\nmosquito\nmother\nmotion\nmotor\nmountain\nmouse\nmove\nmovie\nmuch\nmuffin\nmule\nmultiply\nmuscle\nmuseum\nmushroom\nmusic\nmust\nmutual\nmyself\nmystery\nmyth\nnaive\nname\nnapkin\nnarrow\nnasty\nnation\nnature\nnear\nneck\nneed\nnegative\nneglect\nneither\nnephew\nnerve\nnest\nnet\nnetwork\nneutral\nnever\nnews\nnext\nnice\nnight\nnoble\nnoise\nnominee\nnoodle\nnormal\nnorth\nnose\nnotable\nnote\nnothing\nnotice\nnovel\nnow\nnuclear\nnumber\nnurse\nnut\noak\nobey\nobject\noblige\nobscure\nobserve\nobtain\nobvious\noccur\nocean\noctober\nodor\noff\noffer\noffice\noften\noil\nokay\nold\nolive\nolympic\nomit\nonce\none\nonion\nonline\nonly\nopen\nopera\nopinion\noppose\noption\norange\norbit\norchard\norder\nordinary\norgan\norient\noriginal\norphan\nostrich\nother\noutdoor\nouter\noutput\noutside\noval\noven\nover\nown\nowner\noxygen\noyster\nozone\npact\npaddle\npage\npair\npalace\npalm\npanda\npanel\npanic\npanther\npaper\nparade\nparent\npark\nparrot\nparty\npass\npatch\npath\npatient\npatrol\npattern\npause\npave\npayment\npeace\npeanut\npear\npeasant\npelican\npen\npenalty\npencil\npeople\npepper\nperfect\npermit\nperson\npet\nphone\nphoto\nphrase\nphysical\npiano\npicnic\npicture\npiece\npig\npigeon\npill\npilot\npink\npioneer\npipe\npistol\npitch\npizza\nplace\nplanet\nplastic\nplate\nplay\nplease\npledge\npluck\nplug\nplunge\npoem\npoet\npoint\npolar\npole\npolice\npond\npony\npool\npopular\nportion\nposition\npossible\npost\npotato\npottery\npoverty\npowder\npower\npractice\npraise\npredict\nprefer\nprepare\npresent\npretty\nprevent\nprice\npride\nprimary\nprint\npriority\nprison\nprivate\nprize\nproblem\nprocess\nproduce\nprofit\nprogram\nproject\npromote\nproof\nproperty\nprosper\nprotect\nproud\nprovide\npublic\npudding\npull\npulp\npulse\npumpkin\npunch\npupil\npuppy\npurchase\npurity\npurpose\npurse\npush\nput\npuzzle\npyramid\nquality\nquantum\nquarter\nquestion\nquick\nquit\nquiz\nquote\nrabbit\nraccoon\nrace\nrack\nradar\nradio\nrail\nrain\nraise\nrally\nramp\nranch\nrandom\nrange\nrapid\nrare\nrate\nrather\nraven\nraw\nrazor\nready\nreal\nreason\nrebel\nrebuild\nrecall\nreceive\nrecipe\nrecord\nrecycle\nreduce\nreflect\nreform\nrefuse\nregion\nregret\nregular\nreject\nrelax\nrelease\nrelief\nrely\nremain\nremember\nremind\nremove\nrender\nrenew\nrent\nreopen\nrepair\nrepeat\nreplace\nreport\nrequire\nrescue\nresemble\nresist\nresource\nresponse\nresult\nretire\nretreat\nreturn\nreunion\nreveal\nreview\nreward\nrhythm\nrib\nribbon\nrice\nrich\nride\nridge\nrifle\nright\nrigid\nring\nriot\nripple\nrisk\nritual\nrival\nriver\nroad\nroast\nrobot\nrobust\nrocket\nromance\nroof\nrookie\nroom\nrose\nrotate\nrough\nround\nroute\nroyal\nrubber\nrude\nrug\nrule\nrun\nrunway\nrural\nsad\nsaddle\nsadness\nsafe\nsail\nsalad\nsalmon\nsalon\nsalt\nsalute\nsame\nsample\nsand\nsatisfy\nsatoshi\nsauce\nsausage\nsave\nsay\nscale\nscan\nscare\nscatter\nscene\nscheme\nschool\nscience\nscissors\nscorpion\nscout\nscrap\nscreen\nscript\nscrub\nsea\nsearch\nseason\nseat\nsecond\nsecret\nsection\nsecurity\nseed\nseek\nsegment\nselect\nsell\nseminar\nsenior\nsense\nsentence\nseries\nservice\nsession\nsettle\nsetup\nseven\nshadow\nshaft\nshallow\nshare\nshed\nshell\nsheriff\nshield\nshift\nshine\nship\nshiver\nshock\nshoe\nshoot\nshop\nshort\nshoulder\nshove\nshrimp\nshrug\nshuffle\nshy\nsibling\nsick\nside\nsiege\nsight\nsign\nsilent\nsilk\nsilly\nsilver\nsimilar\nsimple\nsince\nsing\nsiren\nsister\nsituate\nsix\nsize\nskate\nsketch\nski\nskill\nskin\nskirt\nskull\nslab\nslam\nsleep\nslender\nslice\nslide\nslight\nslim\nslogan\nslot\nslow\nslush\nsmall\nsmart\nsmile\nsmoke\nsmooth\nsnack\nsnake\nsnap\nsniff\nsnow\nsoap\nsoccer\nsocial\nsock\nsoda\nsoft\nsolar\nsoldier\nsolid\nsolution\nsolve\nsomeone\nsong\nsoon\nsorry\nsort\nsoul\nsound\nsoup\nsource\nsouth\nspace\nspare\nspatial\nspawn\nspeak\nspecial\nspeed\nspell\nspend\nsphere\nspice\nspider\nspike\nspin\nspirit\nsplit\nspoil\nsponsor\nspoon\nsport\nspot\nspray\nspread\nspring\nspy\nsquare\nsqueeze\nsquirrel\nstable\nstadium\nstaff\nstage\nstairs\nstamp\nstand\nstart\nstate\nstay\nsteak\nsteel\nstem\nstep\nstereo\nstick\nstill\nsting\nstock\nstomach\nstone\nstool\nstory\nstove\nstrategy\nstreet\nstrike\nstrong\nstruggle\nstudent\nstuff\nstumble\nstyle\nsubject\nsubmit\nsubway\nsuccess\nsuch\nsudden\nsuffer\nsugar\nsuggest\nsuit\nsummer\nsun\nsunny\nsunset\nsuper\nsupply\nsupreme\nsure\nsurface\nsurge\nsurprise\nsurround\nsurvey\nsuspect\nsustain\nswallow\nswamp\nswap\nswarm\nswear\nsweet\nswift\nswim\nswing\nswitch\nsword\nsymbol\nsymptom\nsyrup\nsystem\ntable\ntackle\ntag\ntail\ntalent\ntalk\ntank\ntape\ntarget\ntask\ntaste\ntattoo\ntaxi\nteach\nteam\ntell\nten\ntenant\ntennis\ntent\nterm\ntest\ntext\nthank\nthat\ntheme\nthen\ntheory\nthere\nthey\nthing\nthis\nthought\nthree\nthrive\nthrow\nthumb\nthunder\nticket\ntide\ntiger\ntilt\ntimber\ntime\ntiny\ntip\ntired\ntissue\ntitle\ntoast\ntobacco\ntoday\ntoddler\ntoe\ntogether\ntoilet\ntoken\ntomato\ntomorrow\ntone\ntongue\ntonight\ntool\ntooth\ntop\ntopic\ntopple\ntorch\ntornado\ntortoise\ntoss\ntotal\ntourist\ntoward\ntower\ntown\ntoy\ntrack\ntrade\ntraffic\ntragic\ntrain\ntransfer\ntrap\ntrash\ntravel\ntray\ntreat\ntree\ntrend\ntrial\ntribe\ntrick\ntrigger\ntrim\ntrip\ntrophy\ntrouble\ntruck\ntrue\ntruly\ntrumpet\ntrust\ntruth\ntry\ntube\ntuition\ntumble\ntuna\ntunnel\nturkey\nturn\nturtle\ntwelve\ntwenty\ntwice\ntwin\ntwist\ntwo\ntype\ntypical\nugly\numbrella\nunable\nunaware\nuncle\nuncover\nunder\nundo\nunfair\nunfold\nunhappy\nuniform\nunique\nunit\nuniverse\nunknown\nunlock\nuntil\nunusual\nunveil\nupdate\nupgrade\nuphold\nupon\nupper\nupset\nurban\nurge\nusage\nuse\nused\nuseful\nuseless\nusual\nutility\nvacant\nvacuum\nvague\nvalid\nvalley\nvalve\nvan\nvanish\nvapor\nvarious\nvast\nvault\nvehicle\nvelvet\nvendor\nventure\nvenue\nverb\nverify\nversion\nvery\nvessel\nveteran\nviable\nvibrant\nvicious\nvictory\nvideo\nview\nvillage\nvintage\nviolin\nvirtual\nvirus\nvisa\nvisit\nvisual\nvital\nvivid\nvocal\nvoice\nvoid\nvolcano\nvolume\nvote\nvoyage\nwage\nwagon\nwait\nwalk\nwall\nwalnut\nwant\nwarfare\nwarm\nwarrior\nwash\nwasp\nwaste\nwater\nwave\nway\nwealth\nweapon\nwear\nweasel\nweather\nweb\nwedding\nweekend\nweird\nwelcome\nwest\nwet\nwhale\nwhat\nwheat\nwheel\nwhen\nwhere\nwhip\nwhisper\nwide\nwidth\nwife\nwild\nwill\nwin\nwindow\nwine\nwing\nwink\nwinner\nwinter\nwire\nwisdom\nwise\nwish\nwitness\nwolf\nwoman\nwonder\nwood\nwool\nword\nwork\nworld\nworry\nworth\nwrap\nwreck\nwrestle\nwrist\nwrite\nwrong\nyard\nyear\nyellow\nyou\nyoung\nyouth\nzebra\nzero\nzone\nzoo`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cashu/crypto/node_modules/@scure/bip39/wordlists/english.js\n");

/***/ })

};
;