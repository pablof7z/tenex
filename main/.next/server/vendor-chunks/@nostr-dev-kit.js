"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@nostr-dev-kit";
exports.ids = ["vendor-chunks/@nostr-dev-kit"];
exports.modules = {

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/dist/index.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/dist/index.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   \"default\": () => (/* binding */ NDKCacheAdapterDexie),\n/* harmony export */   foundEvent: () => (/* binding */ foundEvent),\n/* harmony export */   foundEvents: () => (/* binding */ foundEvents)\n/* harmony export */ });\n/* harmony import */ var _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @nostr-dev-kit/ndk */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/@nostr-dev-kit/ndk/dist/index.mjs\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nostr-tools */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/lib/esm/index.js\");\n/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dexie */ \"(ssr)/./node_modules/dexie/import-wrapper.mjs\");\n/* harmony import */ var typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! typescript-lru-cache */ \"(ssr)/./node_modules/typescript-lru-cache/dist/index.js\");\n// src/index.ts\n\n\n\n\n// src/caches/event-tags.ts\nasync function eventTagsWarmUp(cacheHandler, eventTags) {\n  const array = await eventTags.limit(cacheHandler.maxSize).toArray();\n  for (const event of array) {\n    cacheHandler.add(event.tagValue, event.eventId, false);\n  }\n}\nvar eventTagsDump = (eventTags, debug) => {\n  return async (dirtyKeys, cache) => {\n    const entries = [];\n    for (const tagValue of dirtyKeys) {\n      const eventIds = cache.get(tagValue);\n      if (eventIds) {\n        for (const eventId of eventIds) entries.push({ tagValue, eventId });\n      }\n    }\n    if (entries.length > 0) {\n      debug(`Saving ${entries.length} events cache entries to database`);\n      await eventTags.bulkPut(entries);\n    }\n    dirtyKeys.clear();\n  };\n};\n\n// src/caches/events.ts\nasync function eventsWarmUp(cacheHandler, events) {\n  const array = await events.limit(cacheHandler.maxSize).toArray();\n  for (const event of array) {\n    cacheHandler.set(event.id, event, false);\n  }\n}\nvar eventsDump = (events, debug) => {\n  return async (dirtyKeys, cache) => {\n    const entries = [];\n    for (const event of dirtyKeys) {\n      const entry = cache.get(event);\n      if (entry) entries.push(entry);\n    }\n    if (entries.length > 0) {\n      debug(`Saving ${entries.length} events cache entries to database`);\n      await events.bulkPut(entries);\n    }\n    dirtyKeys.clear();\n  };\n};\n\n// src/caches/nip05.ts\nasync function nip05WarmUp(cacheHandler, nip05s) {\n  const array = await nip05s.limit(cacheHandler.maxSize).toArray();\n  for (const nip05 of array) {\n    cacheHandler.set(nip05.nip05, nip05, false);\n  }\n}\nvar nip05Dump = (nip05s, debug) => {\n  return async (dirtyKeys, cache) => {\n    const entries = [];\n    for (const nip05 of dirtyKeys) {\n      const entry = cache.get(nip05);\n      if (entry) {\n        entries.push({\n          nip05,\n          ...entry\n        });\n      }\n    }\n    if (entries.length) {\n      debug(`Saving ${entries.length} NIP-05 cache entries to database`);\n      await nip05s.bulkPut(entries);\n    }\n    dirtyKeys.clear();\n  };\n};\n\n// src/db.ts\n\nvar Database = class extends dexie__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  profiles;\n  events;\n  eventTags;\n  nip05;\n  lnurl;\n  relayStatus;\n  unpublishedEvents;\n  constructor(name) {\n    super(name);\n    this.version(15).stores({\n      profiles: \"&pubkey\",\n      events: \"&id, kind\",\n      eventTags: \"&tagValue\",\n      nip05: \"&nip05\",\n      lnurl: \"&pubkey\",\n      relayStatus: \"&url\",\n      unpublishedEvents: \"&id\"\n    });\n  }\n};\nvar db;\nfunction createDatabase(name) {\n  db = new Database(name);\n}\n\n// src/caches/profiles.ts\n\nvar d = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:dexie-adapter:profiles\");\nasync function profilesWarmUp(cacheHandler, profiles) {\n  const array = await profiles.limit(cacheHandler.maxSize).toArray();\n  for (const user of array) {\n    const obj = user;\n    cacheHandler.set(user.pubkey, obj, false);\n  }\n  d(\"Loaded %d profiles from database\", cacheHandler.size());\n}\nvar profilesDump = (profiles, debug) => {\n  return async (dirtyKeys, cache) => {\n    const entries = [];\n    for (const pubkey of dirtyKeys) {\n      const entry = cache.get(pubkey);\n      if (entry) {\n        entries.push(entry);\n      }\n    }\n    if (entries.length) {\n      debug(`Saving ${entries.length} users to database`);\n      await profiles.bulkPut(entries);\n    }\n    dirtyKeys.clear();\n  };\n};\n\n// src/caches/relay-info.ts\nasync function relayInfoWarmUp(cacheHandler, relayStatus) {\n  const array = await relayStatus.limit(cacheHandler.maxSize).toArray();\n  for (const entry of array) {\n    cacheHandler.set(\n      entry.url,\n      {\n        url: entry.url,\n        updatedAt: entry.updatedAt,\n        lastConnectedAt: entry.lastConnectedAt,\n        dontConnectBefore: entry.dontConnectBefore\n      },\n      false\n    );\n  }\n}\nvar relayInfoDump = (relayStatus, debug) => {\n  return async (dirtyKeys, cache) => {\n    const entries = [];\n    for (const url of dirtyKeys) {\n      const info = cache.get(url);\n      if (info) {\n        entries.push({\n          url,\n          updatedAt: info.updatedAt,\n          lastConnectedAt: info.lastConnectedAt,\n          dontConnectBefore: info.dontConnectBefore\n        });\n      }\n    }\n    if (entries.length > 0) {\n      debug(`Saving ${entries.length} relay status cache entries to database`);\n      await relayStatus.bulkPut(entries);\n    }\n    dirtyKeys.clear();\n  };\n};\n\n// src/caches/unpublished-events.ts\n\nvar WRITE_STATUS_THRESHOLD = 3;\nasync function unpublishedEventsWarmUp(cacheHandler, unpublishedEvents) {\n  await unpublishedEvents.each((unpublishedEvent) => {\n    cacheHandler.set(unpublishedEvent.event.id, unpublishedEvent, false);\n  });\n}\nfunction unpublishedEventsDump(unpublishedEvents, debug) {\n  return async (dirtyKeys, cache) => {\n    const entries = [];\n    for (const eventId of dirtyKeys) {\n      const entry = cache.get(eventId);\n      if (entry) {\n        entries.push(entry);\n      }\n    }\n    if (entries.length > 0) {\n      debug(`Saving ${entries.length} unpublished events cache entries to database`);\n      await unpublishedEvents.bulkPut(entries);\n    }\n    dirtyKeys.clear();\n  };\n}\nasync function discardUnpublishedEvent(unpublishedEvents, eventId) {\n  await unpublishedEvents.delete(eventId);\n}\nasync function getUnpublishedEvents(unpublishedEvents) {\n  const events = [];\n  await unpublishedEvents.each((unpublishedEvent) => {\n    events.push({\n      event: new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKEvent(void 0, unpublishedEvent.event),\n      relays: Object.keys(unpublishedEvent.relays),\n      lastTryAt: unpublishedEvent.lastTryAt\n    });\n  });\n  return events;\n}\nfunction addUnpublishedEvent(event, relays) {\n  const r = {};\n  relays.forEach((url) => r[url] = false);\n  this.unpublishedEvents.set(event.id, { id: event.id, event: event.rawEvent(), relays: r });\n  const onPublished = (relay) => {\n    const url = relay.url;\n    const existingEntry = this.unpublishedEvents.get(event.id);\n    if (!existingEntry) {\n      event.off(\"publushed\", onPublished);\n      return;\n    }\n    existingEntry.relays[url] = true;\n    this.unpublishedEvents.set(event.id, existingEntry);\n    const successWrites = Object.values(existingEntry.relays).filter((v) => v).length;\n    const unsuccessWrites = Object.values(existingEntry.relays).length - successWrites;\n    if (successWrites >= WRITE_STATUS_THRESHOLD || unsuccessWrites === 0) {\n      this.unpublishedEvents.delete(event.id);\n      event.off(\"published\", onPublished);\n    }\n  };\n  event.on(\"published\", onPublished);\n}\n\n// src/caches/zapper.ts\nasync function zapperWarmUp(cacheHandler, lnurls) {\n  const array = await lnurls.limit(cacheHandler.maxSize).toArray();\n  for (const lnurl of array) {\n    cacheHandler.set(lnurl.pubkey, { document: lnurl.document, fetchedAt: lnurl.fetchedAt }, false);\n  }\n}\nvar zapperDump = (lnurls, debug) => {\n  return async (dirtyKeys, cache) => {\n    const entries = [];\n    for (const pubkey of dirtyKeys) {\n      const entry = cache.get(pubkey);\n      if (entry) {\n        entries.push({\n          pubkey,\n          ...entry\n        });\n      }\n    }\n    if (entries.length) {\n      debug(`Saving ${entries.length} zapper cache entries to database`);\n      await lnurls.bulkPut(entries);\n    }\n    dirtyKeys.clear();\n  };\n};\n\n// src/lru-cache.ts\n\nvar CacheHandler = class {\n  cache;\n  dirtyKeys = /* @__PURE__ */ new Set();\n  options;\n  debug;\n  indexes;\n  isSet = false;\n  maxSize = 0;\n  constructor(options) {\n    this.debug = options.debug;\n    this.options = options;\n    this.maxSize = options.maxSize;\n    if (options.maxSize > 0) {\n      this.cache = new typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__.LRUCache({ maxSize: options.maxSize });\n      setInterval(() => this.dump().catch(console.error), 1e3 * 10);\n    }\n    this.indexes = /* @__PURE__ */ new Map();\n  }\n  getSet(key) {\n    return this.cache?.get(key);\n  }\n  /**\n   * Get all entries that match the filter.\n   */\n  getAllWithFilter(filter) {\n    const ret = /* @__PURE__ */ new Map();\n    this.cache?.forEach((val, key) => {\n      if (filter(key, val)) {\n        ret.set(key, val);\n      }\n    });\n    return ret;\n  }\n  get(key) {\n    return this.cache?.get(key);\n  }\n  async getWithFallback(key, table) {\n    let entry = this.get(key);\n    if (!entry) {\n      entry = await table.get(key);\n      if (entry) {\n        this.set(key, entry);\n      }\n    }\n    return entry;\n  }\n  async getManyWithFallback(keys, table) {\n    const entries = [];\n    const missingKeys = [];\n    for (const key of keys) {\n      const entry = this.get(key);\n      if (entry) entries.push(entry);\n      else missingKeys.push(key);\n    }\n    if (entries.length > 0) {\n      this.debug(`Cache hit for keys ${entries.length} and miss for ${missingKeys.length} keys`);\n    }\n    if (missingKeys.length > 0) {\n      const startTime = Date.now();\n      const missingEntries = await table.bulkGet(missingKeys);\n      const endTime = Date.now();\n      let foundKeys = 0;\n      for (const entry of missingEntries) {\n        if (entry) {\n          this.set(entry.id, entry);\n          entries.push(entry);\n          foundKeys++;\n        }\n      }\n      this.debug(\n        `Time spent querying database: ${endTime - startTime}ms for ${missingKeys.length} keys, which added ${foundKeys} entries to the cache`\n      );\n    }\n    return entries;\n  }\n  add(key, value, dirty = true) {\n    const existing = this.get(key) ?? /* @__PURE__ */ new Set();\n    existing.add(value);\n    this.cache?.set(key, existing);\n    if (dirty) this.dirtyKeys.add(key);\n  }\n  set(key, value, dirty = true) {\n    this.cache?.set(key, value);\n    if (dirty) this.dirtyKeys.add(key);\n    for (const [attribute, index] of this.indexes.entries()) {\n      const indexKey = value[attribute];\n      if (indexKey) {\n        const indexValue = index.get(indexKey) || /* @__PURE__ */ new Set();\n        indexValue.add(key);\n        index.set(indexKey, indexValue);\n      }\n    }\n  }\n  size() {\n    return this.cache?.size || 0;\n  }\n  delete(key) {\n    this.cache?.delete(key);\n    this.dirtyKeys.add(key);\n  }\n  async dump() {\n    if (this.dirtyKeys.size > 0 && this.cache) {\n      await this.options.dump(this.dirtyKeys, this.cache);\n      this.dirtyKeys.clear();\n    }\n  }\n  addIndex(attribute) {\n    this.indexes.set(attribute, new typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__.LRUCache({ maxSize: this.options.maxSize }));\n  }\n  getFromIndex(index, key) {\n    const ret = /* @__PURE__ */ new Set();\n    const indexValues = this.indexes.get(index);\n    if (indexValues) {\n      const values = indexValues.get(key);\n      if (values) {\n        for (const key2 of values.values()) {\n          const entry = this.get(key2);\n          if (entry) ret.add(entry);\n        }\n      }\n    }\n    return ret;\n  }\n};\n\n// src/index.ts\nvar INDEXABLE_TAGS_LIMIT = 10;\nvar NDKCacheAdapterDexie = class {\n  debug;\n  locking = false;\n  ready = false;\n  profiles;\n  zappers;\n  nip05s;\n  events;\n  eventTags;\n  relayInfo;\n  unpublishedEvents;\n  warmedUp = false;\n  warmUpPromise;\n  devMode = false;\n  saveSig;\n  _onReady;\n  constructor(opts = {}) {\n    createDatabase(opts.dbName || \"ndk\");\n    this.debug = opts.debug || debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:dexie-adapter\");\n    this.saveSig = opts.saveSig || false;\n    this.profiles = new CacheHandler({\n      maxSize: opts.profileCacheSize || 1e5,\n      dump: profilesDump(db.profiles, this.debug),\n      debug: this.debug\n    });\n    this.zappers = new CacheHandler({\n      maxSize: opts.zapperCacheSize || 200,\n      dump: zapperDump(db.lnurl, this.debug),\n      debug: this.debug\n    });\n    this.nip05s = new CacheHandler({\n      maxSize: opts.nip05CacheSize || 1e3,\n      dump: nip05Dump(db.nip05, this.debug),\n      debug: this.debug\n    });\n    this.events = new CacheHandler({\n      maxSize: opts.eventCacheSize || 5e4,\n      dump: eventsDump(db.events, this.debug),\n      debug: this.debug\n    });\n    this.events.addIndex(\"pubkey\");\n    this.events.addIndex(\"kind\");\n    this.eventTags = new CacheHandler({\n      maxSize: opts.eventTagsCacheSize || 1e5,\n      dump: eventTagsDump(db.eventTags, this.debug),\n      debug: this.debug\n    });\n    this.relayInfo = new CacheHandler({\n      maxSize: 500,\n      debug: this.debug,\n      dump: relayInfoDump(db.relayStatus, this.debug)\n    });\n    this.unpublishedEvents = new CacheHandler({\n      maxSize: 5e3,\n      debug: this.debug,\n      dump: unpublishedEventsDump(db.unpublishedEvents, this.debug)\n    });\n    const profile = (label, fn) => {\n      const start = Date.now();\n      return fn().then(() => {\n        const end = Date.now();\n        this.debug(label, \"took\", end - start, \"ms\");\n      });\n    };\n    const startTime = Date.now();\n    this.warmUpPromise = Promise.allSettled([\n      profile(\"profilesWarmUp\", () => profilesWarmUp(this.profiles, db.profiles)),\n      profile(\"zapperWarmUp\", () => zapperWarmUp(this.zappers, db.lnurl)),\n      profile(\"nip05WarmUp\", () => nip05WarmUp(this.nip05s, db.nip05)),\n      profile(\"relayInfoWarmUp\", () => relayInfoWarmUp(this.relayInfo, db.relayStatus)),\n      profile(\n        \"unpublishedEventsWarmUp\",\n        () => unpublishedEventsWarmUp(this.unpublishedEvents, db.unpublishedEvents)\n      ),\n      profile(\"eventsWarmUp\", () => eventsWarmUp(this.events, db.events)),\n      profile(\"eventTagsWarmUp\", () => eventTagsWarmUp(this.eventTags, db.eventTags))\n    ]);\n    this.warmUpPromise.then(() => {\n      const endTime = Date.now();\n      this.warmedUp = true;\n      this.ready = true;\n      this.locking = true;\n      this.debug(\"Warm up completed, time\", endTime - startTime, \"ms\");\n      if (this._onReady) this._onReady();\n    });\n  }\n  onReady(callback) {\n    this._onReady = callback;\n  }\n  async query(subscription) {\n    if (!this.warmedUp) {\n      const startTime2 = Date.now();\n      await this.warmUpPromise;\n      this.debug(\"froze query for\", Date.now() - startTime2, \"ms\", subscription.filters);\n    }\n    const startTime = Date.now();\n    subscription.filters.map((filter) => this.processFilter(filter, subscription));\n    const dur = Date.now() - startTime;\n    if (dur > 100) this.debug(\"query took\", dur, \"ms\", subscription.filter);\n    return [];\n  }\n  async fetchProfile(pubkey) {\n    if (!this.profiles) return null;\n    const user = await this.profiles.getWithFallback(pubkey, db.profiles);\n    return user;\n  }\n  fetchProfileSync(pubkey) {\n    if (!this.profiles) return null;\n    const user = this.profiles.get(pubkey);\n    return user;\n  }\n  async getProfiles(fn) {\n    if (!this.profiles) return;\n    return this.profiles.getAllWithFilter(fn);\n  }\n  saveProfile(pubkey, profile) {\n    const existingValue = this.profiles.get(pubkey);\n    if (existingValue?.created_at && profile.created_at && existingValue.created_at >= profile.created_at) {\n      return;\n    }\n    const cachedAt = Math.floor(Date.now() / 1e3);\n    this.profiles.set(pubkey, { pubkey, ...profile, cachedAt });\n    this.debug(\"Saved profile for pubkey\", pubkey, profile);\n  }\n  async loadNip05(nip05, maxAgeForMissing = 3600) {\n    const cache = this.nip05s?.get(nip05);\n    if (cache) {\n      if (cache.profile === null) {\n        if (cache.fetchedAt + maxAgeForMissing * 1e3 < Date.now()) return \"missing\";\n        return null;\n      }\n      try {\n        return JSON.parse(cache.profile);\n      } catch (_e) {\n        return \"missing\";\n      }\n    }\n    const nip = await db.nip05.get({ nip05 });\n    if (!nip) return \"missing\";\n    const now = Date.now();\n    if (nip.profile === null) {\n      if (nip.fetchedAt + maxAgeForMissing * 1e3 < now) return \"missing\";\n      return null;\n    }\n    try {\n      return JSON.parse(nip.profile);\n    } catch (_e) {\n      return \"missing\";\n    }\n  }\n  async saveNip05(nip05, profile) {\n    try {\n      const document = profile ? JSON.stringify(profile) : null;\n      this.nip05s.set(nip05, { profile: document, fetchedAt: Date.now() });\n    } catch (error) {\n      console.error(\"Failed to save NIP-05 profile for nip05:\", nip05, error);\n    }\n  }\n  async loadUsersLNURLDoc(pubkey, maxAgeInSecs = 86400, maxAgeForMissing = 3600) {\n    const cache = this.zappers?.get(pubkey);\n    if (cache) {\n      if (cache.document === null) {\n        if (cache.fetchedAt + maxAgeForMissing * 1e3 < Date.now()) return \"missing\";\n        return null;\n      }\n      try {\n        return JSON.parse(cache.document);\n      } catch (_e) {\n        return \"missing\";\n      }\n    }\n    const lnurl = await db.lnurl.get({ pubkey });\n    if (!lnurl) return \"missing\";\n    const now = Date.now();\n    if (lnurl.fetchedAt + maxAgeInSecs * 1e3 < now) return \"missing\";\n    if (lnurl.document === null) {\n      if (lnurl.fetchedAt + maxAgeForMissing * 1e3 < now) return \"missing\";\n      return null;\n    }\n    try {\n      return JSON.parse(lnurl.document);\n    } catch (_e) {\n      return \"missing\";\n    }\n  }\n  async saveUsersLNURLDoc(pubkey, doc) {\n    try {\n      const document = doc ? JSON.stringify(doc) : null;\n      this.zappers?.set(pubkey, { document, fetchedAt: Date.now() });\n    } catch (error) {\n      console.error(\"Failed to save LNURL document for pubkey:\", pubkey, error);\n    }\n  }\n  processFilter(filter, subscription) {\n    const _filter = { ...filter };\n    _filter.limit = void 0;\n    const filterKeys = new Set(Object.keys(_filter || {}));\n    filterKeys.delete(\"since\");\n    filterKeys.delete(\"limit\");\n    filterKeys.delete(\"until\");\n    try {\n      if (this.byNip33Query(filterKeys, filter, subscription)) return;\n      if (this.byAuthors(filter, subscription)) return;\n      if (this.byIdsQuery(filter, subscription)) return;\n      if (this.byTags(filter, subscription)) return;\n      if (this.byKinds(filterKeys, filter, subscription)) return;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async deleteEventIds(eventIds) {\n    eventIds.forEach((id) => this.events.delete(id));\n    await db.events.where({ id: eventIds }).delete();\n  }\n  addUnpublishedEvent = addUnpublishedEvent.bind(this);\n  getUnpublishedEvents = () => getUnpublishedEvents(db.unpublishedEvents);\n  discardUnpublishedEvent = (id) => discardUnpublishedEvent(db.unpublishedEvents, id);\n  async setEvent(event, _filters, relay) {\n    if (event.kind === 0) {\n      if (!this.profiles) return;\n      try {\n        const profile = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.profileFromEvent)(event);\n        this.saveProfile(event.pubkey, profile);\n      } catch {\n        this.debug(`Failed to save profile for pubkey: ${event.pubkey}`);\n      }\n    }\n    let addEvent = true;\n    if (event.isParamReplaceable()) {\n      const existingEvent = this.events.get(event.tagId());\n      if (existingEvent && event.created_at && existingEvent.createdAt > event.created_at) {\n        addEvent = false;\n      }\n    }\n    if (addEvent) {\n      const eventData = {\n        id: event.tagId(),\n        pubkey: event.pubkey,\n        kind: event.kind,\n        createdAt: event.created_at,\n        relay: relay?.url,\n        event: event.serialize(this.saveSig, true)\n      };\n      if (this.saveSig && event.sig) {\n        eventData.sig = event.sig;\n      }\n      this.events.set(event.tagId(), eventData);\n      const indexableTags = getIndexableTags(event);\n      for (const tag of indexableTags) {\n        this.eventTags.add(tag[0] + tag[1], event.tagId());\n      }\n    }\n  }\n  updateRelayStatus(url, info) {\n    const val = { url, updatedAt: Date.now(), ...info };\n    this.relayInfo.set(url, val);\n  }\n  getRelayStatus(url) {\n    const a = this.relayInfo.get(url);\n    if (a) {\n      return {\n        lastConnectedAt: a.lastConnectedAt,\n        dontConnectBefore: a.dontConnectBefore\n      };\n    }\n  }\n  /**\n   * Searches by authors\n   */\n  byAuthors(filter, subscription) {\n    if (!filter.authors) return false;\n    let _total = 0;\n    for (const pubkey of filter.authors) {\n      let events = Array.from(this.events.getFromIndex(\"pubkey\", pubkey));\n      if (filter.kinds) events = events.filter((e) => filter.kinds?.includes(e.kind));\n      foundEvents(subscription, events, filter);\n      _total += events.length;\n    }\n    return true;\n  }\n  /**\n   * Searches by ids\n   */\n  byIdsQuery(filter, subscription) {\n    if (filter.ids) {\n      for (const id of filter.ids) {\n        const event = this.events.get(id);\n        if (event) foundEvent(subscription, event, event.relay, filter);\n      }\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Searches by NIP-33\n   */\n  byNip33Query(filterKeys, filter, subscription) {\n    const f = [\"#d\", \"authors\", \"kinds\"];\n    const hasAllKeys = filterKeys.size === f.length && f.every((k) => filterKeys.has(k));\n    if (hasAllKeys && filter.kinds && filter.authors) {\n      for (const kind of filter.kinds) {\n        const replaceableKind = kind >= 3e4 && kind < 4e4;\n        if (!replaceableKind) continue;\n        for (const author of filter.authors) {\n          for (const dTag of filter[\"#d\"]) {\n            const replaceableId = `${kind}:${author}:${dTag}`;\n            const event = this.events.get(replaceableId);\n            if (event) foundEvent(subscription, event, event.relay, filter);\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Searches by tags and optionally filters by tags\n   */\n  byTags(filter, subscription) {\n    const tagFilters = Object.entries(filter).filter(([filter2]) => filter2.startsWith(\"#\") && filter2.length === 2).map(([filter2, values]) => [filter2[1], values]);\n    if (tagFilters.length === 0) return false;\n    for (const [tag, values] of tagFilters) {\n      for (const value of values) {\n        const tagValue = tag + value;\n        const eventIds = this.eventTags.getSet(tagValue);\n        if (!eventIds) continue;\n        eventIds.forEach((id) => {\n          const event = this.events.get(id);\n          if (!event) return;\n          if (!filter.kinds || filter.kinds.includes(event.kind)) {\n            foundEvent(subscription, event, event.relay, filter);\n          }\n        });\n      }\n    }\n    return true;\n  }\n  byKinds(filterKeys, filter, subscription) {\n    if (!filter.kinds || filterKeys.size !== 1 || !filterKeys.has(\"kinds\")) return false;\n    const limit = filter.limit || 500;\n    let totalEvents = 0;\n    const processedEventIds = /* @__PURE__ */ new Set();\n    const sortedKinds = [...filter.kinds].sort(\n      (a, b) => (this.events.indexes.get(\"kind\")?.get(a)?.size || 0) - (this.events.indexes.get(\"kind\")?.get(b)?.size || 0)\n    );\n    for (const kind of sortedKinds) {\n      const events = this.events.getFromIndex(\"kind\", kind);\n      for (const event of events) {\n        if (processedEventIds.has(event.id)) continue;\n        processedEventIds.add(event.id);\n        foundEvent(subscription, event, event.relay, filter);\n        totalEvents++;\n        if (totalEvents >= limit) break;\n      }\n      if (totalEvents >= limit) break;\n    }\n    return true;\n  }\n};\nfunction foundEvents(subscription, events, filter) {\n  if (filter?.limit && events.length > filter.limit) {\n    events = events.sort((a, b) => b.createdAt - a.createdAt).slice(0, filter.limit);\n  }\n  for (const event of events) {\n    foundEvent(subscription, event, event.relay, filter);\n  }\n}\nfunction foundEvent(subscription, event, relayUrl, filter) {\n  try {\n    const deserializedEvent = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.deserialize)(event.event);\n    if (filter && !(0,nostr_tools__WEBPACK_IMPORTED_MODULE_4__.matchFilter)(filter, deserializedEvent)) return;\n    const ndkEvent = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKEvent(void 0, deserializedEvent);\n    const relay = relayUrl ? subscription.pool.getRelay(relayUrl, false) : void 0;\n    ndkEvent.relay = relay;\n    subscription.eventReceived(ndkEvent, relay, true);\n  } catch (e) {\n    console.error(\"failed to deserialize event\", e);\n  }\n}\nfunction getIndexableTags(event) {\n  const indexableTags = [];\n  if (event.kind === 3) return [];\n  for (const tag of event.tags) {\n    if (tag[0].length !== 1) continue;\n    indexableTags.push(tag);\n    if (indexableTags.length >= INDEXABLE_TAGS_LIMIT) return [];\n  }\n  return indexableTags;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/@nostr-dev-kit/ndk/dist/index.mjs":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/@nostr-dev-kit/ndk/dist/index.mjs ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BECH32_REGEX: () => (/* binding */ BECH32_REGEX),\n/* harmony export */   NDKAppHandlerEvent: () => (/* binding */ NDKAppHandlerEvent),\n/* harmony export */   NDKAppSettings: () => (/* binding */ NDKAppSettings),\n/* harmony export */   NDKArticle: () => (/* binding */ NDKArticle),\n/* harmony export */   NDKCashuMintList: () => (/* binding */ NDKCashuMintList),\n/* harmony export */   NDKCashuToken: () => (/* binding */ NDKCashuToken),\n/* harmony export */   NDKCashuWalletTx: () => (/* binding */ NDKCashuWalletTx),\n/* harmony export */   NDKClassified: () => (/* binding */ NDKClassified),\n/* harmony export */   NDKDVMJobFeedback: () => (/* binding */ NDKDVMJobFeedback),\n/* harmony export */   NDKDVMJobResult: () => (/* binding */ NDKDVMJobResult),\n/* harmony export */   NDKDVMRequest: () => (/* binding */ NDKDVMRequest),\n/* harmony export */   NDKDraft: () => (/* binding */ NDKDraft),\n/* harmony export */   NDKDvmJobFeedbackStatus: () => (/* binding */ NDKDvmJobFeedbackStatus),\n/* harmony export */   NDKEvent: () => (/* binding */ NDKEvent),\n/* harmony export */   NDKHighlight: () => (/* binding */ NDKHighlight),\n/* harmony export */   NDKImage: () => (/* binding */ NDKImage),\n/* harmony export */   NDKKind: () => (/* binding */ NDKKind),\n/* harmony export */   NDKList: () => (/* binding */ NDKList),\n/* harmony export */   NDKListKinds: () => (/* binding */ NDKListKinds),\n/* harmony export */   NDKNip07Signer: () => (/* binding */ NDKNip07Signer),\n/* harmony export */   NDKNip46Backend: () => (/* binding */ NDKNip46Backend),\n/* harmony export */   NDKNip46Signer: () => (/* binding */ NDKNip46Signer),\n/* harmony export */   NDKNostrRpc: () => (/* binding */ NDKNostrRpc),\n/* harmony export */   NDKNutzap: () => (/* binding */ NDKNutzap),\n/* harmony export */   NDKPool: () => (/* binding */ NDKPool),\n/* harmony export */   NDKPrivateKeySigner: () => (/* binding */ NDKPrivateKeySigner),\n/* harmony export */   NDKPublishError: () => (/* binding */ NDKPublishError),\n/* harmony export */   NDKRelay: () => (/* binding */ NDKRelay),\n/* harmony export */   NDKRelayAuthPolicies: () => (/* binding */ NDKRelayAuthPolicies),\n/* harmony export */   NDKRelayList: () => (/* binding */ NDKRelayList),\n/* harmony export */   NDKRelaySet: () => (/* binding */ NDKRelaySet),\n/* harmony export */   NDKRelayStatus: () => (/* binding */ NDKRelayStatus),\n/* harmony export */   NDKRepost: () => (/* binding */ NDKRepost),\n/* harmony export */   NDKSimpleGroup: () => (/* binding */ NDKSimpleGroup),\n/* harmony export */   NDKSimpleGroupMemberList: () => (/* binding */ NDKSimpleGroupMemberList),\n/* harmony export */   NDKSimpleGroupMetadata: () => (/* binding */ NDKSimpleGroupMetadata),\n/* harmony export */   NDKStory: () => (/* binding */ NDKStory),\n/* harmony export */   NDKStorySticker: () => (/* binding */ NDKStorySticker),\n/* harmony export */   NDKStoryStickerType: () => (/* binding */ NDKStoryStickerType),\n/* harmony export */   NDKSubscription: () => (/* binding */ NDKSubscription),\n/* harmony export */   NDKSubscriptionCacheUsage: () => (/* binding */ NDKSubscriptionCacheUsage),\n/* harmony export */   NDKSubscriptionReceipt: () => (/* binding */ NDKSubscriptionReceipt),\n/* harmony export */   NDKSubscriptionStart: () => (/* binding */ NDKSubscriptionStart),\n/* harmony export */   NDKSubscriptionTier: () => (/* binding */ NDKSubscriptionTier),\n/* harmony export */   NDKTranscriptionDVM: () => (/* binding */ NDKTranscriptionDVM),\n/* harmony export */   NDKUser: () => (/* binding */ NDKUser),\n/* harmony export */   NDKVideo: () => (/* binding */ NDKVideo),\n/* harmony export */   NDKWiki: () => (/* binding */ NDKWiki),\n/* harmony export */   NDKWikiMergeRequest: () => (/* binding */ NDKWikiMergeRequest),\n/* harmony export */   NDKZapper: () => (/* binding */ NDKZapper),\n/* harmony export */   NIP33_A_REGEX: () => (/* binding */ NIP33_A_REGEX),\n/* harmony export */   NdkNutzapStatus: () => (/* binding */ NdkNutzapStatus),\n/* harmony export */   calculateRelaySetFromEvent: () => (/* binding */ calculateRelaySetFromEvent),\n/* harmony export */   calculateTermDurationInSeconds: () => (/* binding */ calculateTermDurationInSeconds),\n/* harmony export */   cashuPubkeyToNostrPubkey: () => (/* binding */ cashuPubkeyToNostrPubkey),\n/* harmony export */   compareFilter: () => (/* binding */ compareFilter),\n/* harmony export */   \"default\": () => (/* binding */ NDK),\n/* harmony export */   defaultOpts: () => (/* binding */ defaultOpts),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   dvmSchedule: () => (/* binding */ dvmSchedule),\n/* harmony export */   eventHasETagMarkers: () => (/* binding */ eventHasETagMarkers),\n/* harmony export */   eventIsPartOfThread: () => (/* binding */ eventIsPartOfThread),\n/* harmony export */   eventIsReply: () => (/* binding */ eventIsReply),\n/* harmony export */   eventReplies: () => (/* binding */ eventReplies),\n/* harmony export */   eventThreadIds: () => (/* binding */ eventThreadIds),\n/* harmony export */   eventThreads: () => (/* binding */ eventThreads),\n/* harmony export */   eventsBySameAuthor: () => (/* binding */ eventsBySameAuthor),\n/* harmony export */   filterAndRelaySetFromBech32: () => (/* binding */ filterAndRelaySetFromBech32),\n/* harmony export */   filterFingerprint: () => (/* binding */ filterFingerprint),\n/* harmony export */   filterForEventsTaggingId: () => (/* binding */ filterForEventsTaggingId),\n/* harmony export */   filterFromId: () => (/* binding */ filterFromId),\n/* harmony export */   generateContentTags: () => (/* binding */ generateContentTags),\n/* harmony export */   generateHashtags: () => (/* binding */ generateHashtags),\n/* harmony export */   generateSubId: () => (/* binding */ generateSubId),\n/* harmony export */   generateZapRequest: () => (/* binding */ generateZapRequest),\n/* harmony export */   getEventReplyId: () => (/* binding */ getEventReplyId),\n/* harmony export */   getNip57ZapSpecFromLud: () => (/* binding */ getNip57ZapSpecFromLud),\n/* harmony export */   getRelayListForUser: () => (/* binding */ getRelayListForUser),\n/* harmony export */   getRelayListForUsers: () => (/* binding */ getRelayListForUsers),\n/* harmony export */   getReplyTag: () => (/* binding */ getReplyTag),\n/* harmony export */   getRootEventId: () => (/* binding */ getRootEventId),\n/* harmony export */   getRootTag: () => (/* binding */ getRootTag),\n/* harmony export */   giftUnwrap: () => (/* binding */ giftUnwrap),\n/* harmony export */   giftWrap: () => (/* binding */ giftWrap),\n/* harmony export */   imetaTagToTag: () => (/* binding */ imetaTagToTag),\n/* harmony export */   isEventOriginalPost: () => (/* binding */ isEventOriginalPost),\n/* harmony export */   isNip33AValue: () => (/* binding */ isNip33AValue),\n/* harmony export */   mapImetaTag: () => (/* binding */ mapImetaTag),\n/* harmony export */   matchFilter: () => (/* binding */ matchFilter),\n/* harmony export */   mergeFilters: () => (/* binding */ mergeFilters),\n/* harmony export */   mergeTags: () => (/* binding */ mergeTags),\n/* harmony export */   ndkSignerFromPayload: () => (/* binding */ ndkSignerFromPayload),\n/* harmony export */   newAmount: () => (/* binding */ newAmount),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeRelayUrl: () => (/* binding */ normalizeRelayUrl),\n/* harmony export */   normalizeUrl: () => (/* binding */ normalizeUrl),\n/* harmony export */   parseTagToSubscriptionAmount: () => (/* binding */ parseTagToSubscriptionAmount),\n/* harmony export */   pinEvent: () => (/* binding */ pinEvent),\n/* harmony export */   possibleIntervalFrequencies: () => (/* binding */ possibleIntervalFrequencies),\n/* harmony export */   profileFromEvent: () => (/* binding */ profileFromEvent),\n/* harmony export */   proofP2pk: () => (/* binding */ proofP2pk),\n/* harmony export */   proofP2pkNostr: () => (/* binding */ proofP2pkNostr),\n/* harmony export */   proofsTotalBalance: () => (/* binding */ proofsTotalBalance),\n/* harmony export */   queryFullyFilled: () => (/* binding */ queryFullyFilled),\n/* harmony export */   relayListFromKind3: () => (/* binding */ relayListFromKind3),\n/* harmony export */   relaysFromBech32: () => (/* binding */ relaysFromBech32),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serializeProfile: () => (/* binding */ serializeProfile),\n/* harmony export */   signerRegistry: () => (/* binding */ signerRegistry),\n/* harmony export */   strToDimension: () => (/* binding */ strToDimension),\n/* harmony export */   strToPosition: () => (/* binding */ strToPosition),\n/* harmony export */   tryNormalizeRelayUrl: () => (/* binding */ tryNormalizeRelayUrl),\n/* harmony export */   uniqueTag: () => (/* binding */ uniqueTag),\n/* harmony export */   wrapEvent: () => (/* binding */ wrapEvent),\n/* harmony export */   zapInvoiceFromEvent: () => (/* binding */ zapInvoiceFromEvent)\n/* harmony export */ });\n/* harmony import */ var tseep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tseep */ \"(ssr)/./node_modules/tseep/lib/index.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! nostr-tools */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! typescript-lru-cache */ \"(ssr)/./node_modules/typescript-lru-cache/dist/index.js\");\n/* harmony import */ var light_bolt11_decoder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! light-bolt11-decoder */ \"(ssr)/./node_modules/light-bolt11-decoder/bolt11.js\");\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@scure/base/lib/esm/index.js\");\n// src/types.ts\nvar NdkNutzapStatus = /* @__PURE__ */ ((NdkNutzapStatus2) => {\n  NdkNutzapStatus2[\"INITIAL\"] = \"initial\";\n  NdkNutzapStatus2[\"PROCESSING\"] = \"processing\";\n  NdkNutzapStatus2[\"REDEEMED\"] = \"redeemed\";\n  NdkNutzapStatus2[\"SPENT\"] = \"spent\";\n  NdkNutzapStatus2[\"MISSING_PRIVKEY\"] = \"missing_privkey\";\n  NdkNutzapStatus2[\"TEMPORARY_ERROR\"] = \"temporary_error\";\n  NdkNutzapStatus2[\"PERMANENT_ERROR\"] = \"permanent_error\";\n  NdkNutzapStatus2[\"INVALID_NUTZAP\"] = \"invalid_nutzap\";\n  return NdkNutzapStatus2;\n})(NdkNutzapStatus || {});\n\n// src/events/kinds/index.ts\nvar NDKKind = /* @__PURE__ */ ((NDKKind2) => {\n  NDKKind2[NDKKind2[\"Metadata\"] = 0] = \"Metadata\";\n  NDKKind2[NDKKind2[\"Text\"] = 1] = \"Text\";\n  NDKKind2[NDKKind2[\"RecommendRelay\"] = 2] = \"RecommendRelay\";\n  NDKKind2[NDKKind2[\"Contacts\"] = 3] = \"Contacts\";\n  NDKKind2[NDKKind2[\"EncryptedDirectMessage\"] = 4] = \"EncryptedDirectMessage\";\n  NDKKind2[NDKKind2[\"EventDeletion\"] = 5] = \"EventDeletion\";\n  NDKKind2[NDKKind2[\"Repost\"] = 6] = \"Repost\";\n  NDKKind2[NDKKind2[\"Reaction\"] = 7] = \"Reaction\";\n  NDKKind2[NDKKind2[\"BadgeAward\"] = 8] = \"BadgeAward\";\n  NDKKind2[NDKKind2[\"GroupChat\"] = 9] = \"GroupChat\";\n  NDKKind2[NDKKind2[\"GroupNote\"] = 11] = \"GroupNote\";\n  NDKKind2[NDKKind2[\"GroupReply\"] = 12] = \"GroupReply\";\n  NDKKind2[NDKKind2[\"GiftWrapSeal\"] = 13] = \"GiftWrapSeal\";\n  NDKKind2[NDKKind2[\"PrivateDirectMessage\"] = 14] = \"PrivateDirectMessage\";\n  NDKKind2[NDKKind2[\"Image\"] = 20] = \"Image\";\n  NDKKind2[NDKKind2[\"Video\"] = 21] = \"Video\";\n  NDKKind2[NDKKind2[\"ShortVideo\"] = 22] = \"ShortVideo\";\n  NDKKind2[NDKKind2[\"Story\"] = 23] = \"Story\";\n  NDKKind2[NDKKind2[\"Vanish\"] = 62] = \"Vanish\";\n  NDKKind2[NDKKind2[\"CashuWalletBackup\"] = 375] = \"CashuWalletBackup\";\n  NDKKind2[NDKKind2[\"GiftWrap\"] = 1059] = \"GiftWrap\";\n  NDKKind2[NDKKind2[\"GenericRepost\"] = 16] = \"GenericRepost\";\n  NDKKind2[NDKKind2[\"ChannelCreation\"] = 40] = \"ChannelCreation\";\n  NDKKind2[NDKKind2[\"ChannelMetadata\"] = 41] = \"ChannelMetadata\";\n  NDKKind2[NDKKind2[\"ChannelMessage\"] = 42] = \"ChannelMessage\";\n  NDKKind2[NDKKind2[\"ChannelHideMessage\"] = 43] = \"ChannelHideMessage\";\n  NDKKind2[NDKKind2[\"ChannelMuteUser\"] = 44] = \"ChannelMuteUser\";\n  NDKKind2[NDKKind2[\"WikiMergeRequest\"] = 818] = \"WikiMergeRequest\";\n  NDKKind2[NDKKind2[\"GenericReply\"] = 1111] = \"GenericReply\";\n  NDKKind2[NDKKind2[\"Media\"] = 1063] = \"Media\";\n  NDKKind2[NDKKind2[\"Report\"] = 1984] = \"Report\";\n  NDKKind2[NDKKind2[\"Label\"] = 1985] = \"Label\";\n  NDKKind2[NDKKind2[\"DVMReqTextExtraction\"] = 5e3] = \"DVMReqTextExtraction\";\n  NDKKind2[NDKKind2[\"DVMReqTextSummarization\"] = 5001] = \"DVMReqTextSummarization\";\n  NDKKind2[NDKKind2[\"DVMReqTextTranslation\"] = 5002] = \"DVMReqTextTranslation\";\n  NDKKind2[NDKKind2[\"DVMReqTextGeneration\"] = 5050] = \"DVMReqTextGeneration\";\n  NDKKind2[NDKKind2[\"DVMReqImageGeneration\"] = 5100] = \"DVMReqImageGeneration\";\n  NDKKind2[NDKKind2[\"DVMReqTextToSpeech\"] = 5250] = \"DVMReqTextToSpeech\";\n  NDKKind2[NDKKind2[\"DVMReqDiscoveryNostrContent\"] = 5300] = \"DVMReqDiscoveryNostrContent\";\n  NDKKind2[NDKKind2[\"DVMReqDiscoveryNostrPeople\"] = 5301] = \"DVMReqDiscoveryNostrPeople\";\n  NDKKind2[NDKKind2[\"DVMReqTimestamping\"] = 5900] = \"DVMReqTimestamping\";\n  NDKKind2[NDKKind2[\"DVMEventSchedule\"] = 5905] = \"DVMEventSchedule\";\n  NDKKind2[NDKKind2[\"DVMJobFeedback\"] = 7e3] = \"DVMJobFeedback\";\n  NDKKind2[NDKKind2[\"Subscribe\"] = 7001] = \"Subscribe\";\n  NDKKind2[NDKKind2[\"Unsubscribe\"] = 7002] = \"Unsubscribe\";\n  NDKKind2[NDKKind2[\"SubscriptionReceipt\"] = 7003] = \"SubscriptionReceipt\";\n  NDKKind2[NDKKind2[\"CashuReserve\"] = 7373] = \"CashuReserve\";\n  NDKKind2[NDKKind2[\"CashuQuote\"] = 7374] = \"CashuQuote\";\n  NDKKind2[NDKKind2[\"CashuToken\"] = 7375] = \"CashuToken\";\n  NDKKind2[NDKKind2[\"CashuWalletTx\"] = 7376] = \"CashuWalletTx\";\n  NDKKind2[NDKKind2[\"GroupAdminAddUser\"] = 9e3] = \"GroupAdminAddUser\";\n  NDKKind2[NDKKind2[\"GroupAdminRemoveUser\"] = 9001] = \"GroupAdminRemoveUser\";\n  NDKKind2[NDKKind2[\"GroupAdminEditMetadata\"] = 9002] = \"GroupAdminEditMetadata\";\n  NDKKind2[NDKKind2[\"GroupAdminEditStatus\"] = 9006] = \"GroupAdminEditStatus\";\n  NDKKind2[NDKKind2[\"GroupAdminCreateGroup\"] = 9007] = \"GroupAdminCreateGroup\";\n  NDKKind2[NDKKind2[\"GroupAdminRequestJoin\"] = 9021] = \"GroupAdminRequestJoin\";\n  NDKKind2[NDKKind2[\"MuteList\"] = 1e4] = \"MuteList\";\n  NDKKind2[NDKKind2[\"PinList\"] = 10001] = \"PinList\";\n  NDKKind2[NDKKind2[\"RelayList\"] = 10002] = \"RelayList\";\n  NDKKind2[NDKKind2[\"BookmarkList\"] = 10003] = \"BookmarkList\";\n  NDKKind2[NDKKind2[\"CommunityList\"] = 10004] = \"CommunityList\";\n  NDKKind2[NDKKind2[\"PublicChatList\"] = 10005] = \"PublicChatList\";\n  NDKKind2[NDKKind2[\"BlockRelayList\"] = 10006] = \"BlockRelayList\";\n  NDKKind2[NDKKind2[\"SearchRelayList\"] = 10007] = \"SearchRelayList\";\n  NDKKind2[NDKKind2[\"SimpleGroupList\"] = 10009] = \"SimpleGroupList\";\n  NDKKind2[NDKKind2[\"InterestList\"] = 10015] = \"InterestList\";\n  NDKKind2[NDKKind2[\"CashuMintList\"] = 10019] = \"CashuMintList\";\n  NDKKind2[NDKKind2[\"EmojiList\"] = 10030] = \"EmojiList\";\n  NDKKind2[NDKKind2[\"DirectMessageReceiveRelayList\"] = 10050] = \"DirectMessageReceiveRelayList\";\n  NDKKind2[NDKKind2[\"BlossomList\"] = 10063] = \"BlossomList\";\n  NDKKind2[NDKKind2[\"NostrWaletConnectInfo\"] = 13194] = \"NostrWaletConnectInfo\";\n  NDKKind2[NDKKind2[\"TierList\"] = 17e3] = \"TierList\";\n  NDKKind2[NDKKind2[\"CashuWallet\"] = 17375] = \"CashuWallet\";\n  NDKKind2[NDKKind2[\"FollowSet\"] = 3e4] = \"FollowSet\";\n  NDKKind2[NDKKind2[\"CategorizedPeopleList\"] = 3e4 /* FollowSet */] = \"CategorizedPeopleList\";\n  NDKKind2[NDKKind2[\"CategorizedBookmarkList\"] = 30001] = \"CategorizedBookmarkList\";\n  NDKKind2[NDKKind2[\"RelaySet\"] = 30002] = \"RelaySet\";\n  NDKKind2[NDKKind2[\"CategorizedRelayList\"] = 30002 /* RelaySet */] = \"CategorizedRelayList\";\n  NDKKind2[NDKKind2[\"BookmarkSet\"] = 30003] = \"BookmarkSet\";\n  NDKKind2[NDKKind2[\"CurationSet\"] = 30004] = \"CurationSet\";\n  NDKKind2[NDKKind2[\"ArticleCurationSet\"] = 30004] = \"ArticleCurationSet\";\n  NDKKind2[NDKKind2[\"VideoCurationSet\"] = 30005] = \"VideoCurationSet\";\n  NDKKind2[NDKKind2[\"ImageCurationSet\"] = 30006] = \"ImageCurationSet\";\n  NDKKind2[NDKKind2[\"InterestSet\"] = 30015] = \"InterestSet\";\n  NDKKind2[NDKKind2[\"InterestsList\"] = 30015 /* InterestSet */] = \"InterestsList\";\n  NDKKind2[NDKKind2[\"EmojiSet\"] = 30030] = \"EmojiSet\";\n  NDKKind2[NDKKind2[\"ModularArticle\"] = 30040] = \"ModularArticle\";\n  NDKKind2[NDKKind2[\"ModularArticleItem\"] = 30041] = \"ModularArticleItem\";\n  NDKKind2[NDKKind2[\"Wiki\"] = 30818] = \"Wiki\";\n  NDKKind2[NDKKind2[\"Draft\"] = 31234] = \"Draft\";\n  NDKKind2[NDKKind2[\"SubscriptionTier\"] = 37001] = \"SubscriptionTier\";\n  NDKKind2[NDKKind2[\"EcashMintRecommendation\"] = 38e3] = \"EcashMintRecommendation\";\n  NDKKind2[NDKKind2[\"HighlightSet\"] = 39802] = \"HighlightSet\";\n  NDKKind2[NDKKind2[\"CategorizedHighlightList\"] = 39802 /* HighlightSet */] = \"CategorizedHighlightList\";\n  NDKKind2[NDKKind2[\"Nutzap\"] = 9321] = \"Nutzap\";\n  NDKKind2[NDKKind2[\"ZapRequest\"] = 9734] = \"ZapRequest\";\n  NDKKind2[NDKKind2[\"Zap\"] = 9735] = \"Zap\";\n  NDKKind2[NDKKind2[\"Highlight\"] = 9802] = \"Highlight\";\n  NDKKind2[NDKKind2[\"ClientAuth\"] = 22242] = \"ClientAuth\";\n  NDKKind2[NDKKind2[\"NostrWalletConnectReq\"] = 23194] = \"NostrWalletConnectReq\";\n  NDKKind2[NDKKind2[\"NostrWalletConnectRes\"] = 23195] = \"NostrWalletConnectRes\";\n  NDKKind2[NDKKind2[\"NostrConnect\"] = 24133] = \"NostrConnect\";\n  NDKKind2[NDKKind2[\"BlossomUpload\"] = 24242] = \"BlossomUpload\";\n  NDKKind2[NDKKind2[\"HttpAuth\"] = 27235] = \"HttpAuth\";\n  NDKKind2[NDKKind2[\"ProfileBadge\"] = 30008] = \"ProfileBadge\";\n  NDKKind2[NDKKind2[\"BadgeDefinition\"] = 30009] = \"BadgeDefinition\";\n  NDKKind2[NDKKind2[\"MarketStall\"] = 30017] = \"MarketStall\";\n  NDKKind2[NDKKind2[\"MarketProduct\"] = 30018] = \"MarketProduct\";\n  NDKKind2[NDKKind2[\"Article\"] = 30023] = \"Article\";\n  NDKKind2[NDKKind2[\"AppSpecificData\"] = 30078] = \"AppSpecificData\";\n  NDKKind2[NDKKind2[\"Classified\"] = 30402] = \"Classified\";\n  NDKKind2[NDKKind2[\"HorizontalVideo\"] = 34235] = \"HorizontalVideo\";\n  NDKKind2[NDKKind2[\"VerticalVideo\"] = 34236] = \"VerticalVideo\";\n  NDKKind2[NDKKind2[\"LegacyCashuWallet\"] = 37375] = \"LegacyCashuWallet\";\n  NDKKind2[NDKKind2[\"GroupMetadata\"] = 39e3] = \"GroupMetadata\";\n  NDKKind2[NDKKind2[\"GroupAdmins\"] = 39001] = \"GroupAdmins\";\n  NDKKind2[NDKKind2[\"GroupMembers\"] = 39002] = \"GroupMembers\";\n  NDKKind2[NDKKind2[\"AppRecommendation\"] = 31989] = \"AppRecommendation\";\n  NDKKind2[NDKKind2[\"AppHandler\"] = 31990] = \"AppHandler\";\n  return NDKKind2;\n})(NDKKind || {});\nvar NDKListKinds = [\n  1e4 /* MuteList */,\n  10001 /* PinList */,\n  10002 /* RelayList */,\n  10003 /* BookmarkList */,\n  10004 /* CommunityList */,\n  10005 /* PublicChatList */,\n  10006 /* BlockRelayList */,\n  10007 /* SearchRelayList */,\n  10015 /* InterestList */,\n  10030 /* EmojiList */,\n  10050 /* DirectMessageReceiveRelayList */,\n  3e4 /* FollowSet */,\n  30003 /* BookmarkSet */,\n  30001 /* CategorizedBookmarkList */,\n  // Backwards compatibility\n  30002 /* RelaySet */,\n  30004 /* ArticleCurationSet */,\n  30005 /* VideoCurationSet */,\n  30015 /* InterestSet */,\n  30030 /* EmojiSet */,\n  39802 /* HighlightSet */\n];\n\n// src/events/index.ts\n\n\n// src/relay/sets/calculate.ts\n\n\n// src/outbox/write.ts\nfunction getRelaysForSync(ndk, author, type = \"write\") {\n  if (!ndk.outboxTracker) return void 0;\n  const item = ndk.outboxTracker.data.get(author);\n  if (!item) return void 0;\n  if (type === \"write\") {\n    return item.writeRelays;\n  }\n  return item.readRelays;\n}\nasync function getWriteRelaysFor(ndk, author, type = \"write\") {\n  if (!ndk.outboxTracker) return void 0;\n  if (!ndk.outboxTracker.data.has(author)) {\n    await ndk.outboxTracker.trackUsers([author]);\n  }\n  return getRelaysForSync(ndk, author, type);\n}\n\n// src/outbox/relay-ranking.ts\nfunction getTopRelaysForAuthors(ndk, authors) {\n  const relaysWithCount = /* @__PURE__ */ new Map();\n  authors.forEach((author) => {\n    const writeRelays = getRelaysForSync(ndk, author);\n    if (writeRelays) {\n      writeRelays.forEach((relay) => {\n        const count = relaysWithCount.get(relay) || 0;\n        relaysWithCount.set(relay, count + 1);\n      });\n    }\n  });\n  const sortedRelays = Array.from(relaysWithCount.entries()).sort((a, b) => b[1] - a[1]);\n  return sortedRelays.map((entry) => entry[0]);\n}\n\n// src/outbox/index.ts\nfunction getAllRelaysForAllPubkeys(ndk, pubkeys, type = \"read\") {\n  const pubkeysToRelays = /* @__PURE__ */ new Map();\n  const authorsMissingRelays = /* @__PURE__ */ new Set();\n  pubkeys.forEach((pubkey) => {\n    const relays = getRelaysForSync(ndk, pubkey, type);\n    if (relays && relays.size > 0) {\n      relays.forEach((relay) => {\n        const pubkeysInRelay = pubkeysToRelays.get(relay) || /* @__PURE__ */ new Set();\n        pubkeysInRelay.add(pubkey);\n      });\n      pubkeysToRelays.set(pubkey, relays);\n    } else {\n      authorsMissingRelays.add(pubkey);\n    }\n  });\n  return { pubkeysToRelays, authorsMissingRelays };\n}\nfunction chooseRelayCombinationForPubkeys(ndk, pubkeys, type, { count, preferredRelays } = {}) {\n  count ??= 2;\n  preferredRelays ??= /* @__PURE__ */ new Set();\n  const pool = ndk.pool;\n  const connectedRelays = pool.connectedRelays();\n  connectedRelays.forEach((relay) => {\n    preferredRelays?.add(relay.url);\n  });\n  const relayToAuthorsMap = /* @__PURE__ */ new Map();\n  const { pubkeysToRelays, authorsMissingRelays } = getAllRelaysForAllPubkeys(ndk, pubkeys, type);\n  const sortedRelays = getTopRelaysForAuthors(ndk, pubkeys);\n  const addAuthorToRelay = (author, relay) => {\n    const authorsInRelay = relayToAuthorsMap.get(relay) || [];\n    authorsInRelay.push(author);\n    relayToAuthorsMap.set(relay, authorsInRelay);\n  };\n  for (const [author, authorRelays] of pubkeysToRelays.entries()) {\n    let missingRelayCount = count;\n    for (const relay of connectedRelays) {\n      if (authorRelays.has(relay.url)) {\n        addAuthorToRelay(author, relay.url);\n        missingRelayCount--;\n      }\n    }\n    for (const authorRelay of authorRelays) {\n      if (relayToAuthorsMap.has(authorRelay)) {\n        addAuthorToRelay(author, authorRelay);\n        missingRelayCount--;\n      }\n    }\n    if (missingRelayCount <= 0) continue;\n    for (const relay of sortedRelays) {\n      if (missingRelayCount <= 0) break;\n      if (authorRelays.has(relay)) {\n        addAuthorToRelay(author, relay);\n        missingRelayCount--;\n      }\n    }\n  }\n  for (const author of authorsMissingRelays) {\n    pool.permanentAndConnectedRelays().forEach((relay) => {\n      const authorsInRelay = relayToAuthorsMap.get(relay.url) || [];\n      authorsInRelay.push(author);\n      relayToAuthorsMap.set(relay.url, authorsInRelay);\n    });\n  }\n  return relayToAuthorsMap;\n}\n\n// src/outbox/read/with-authors.ts\nfunction getRelaysForFilterWithAuthors(ndk, authors, relayGoalPerAuthor = 2) {\n  return chooseRelayCombinationForPubkeys(ndk, authors, \"write\", { count: relayGoalPerAuthor });\n}\n\n// src/utils/normalize-url.ts\nfunction tryNormalizeRelayUrl(url) {\n  try {\n    return normalizeRelayUrl(url);\n  } catch {\n    return void 0;\n  }\n}\nfunction normalizeRelayUrl(url) {\n  let r = normalizeUrl(url, {\n    stripAuthentication: false,\n    stripWWW: false,\n    stripHash: true\n  });\n  if (!r.endsWith(\"/\")) {\n    r += \"/\";\n  }\n  return r;\n}\nfunction normalize(urls) {\n  const normalized = /* @__PURE__ */ new Set();\n  for (const url of urls) {\n    try {\n      normalized.add(normalizeRelayUrl(url));\n    } catch {\n    }\n  }\n  return Array.from(normalized);\n}\nvar DATA_URL_DEFAULT_MIME_TYPE = \"text/plain\";\nvar DATA_URL_DEFAULT_CHARSET = \"us-ascii\";\nvar testParameter = (name, filters) => filters.some((filter) => filter instanceof RegExp ? filter.test(name) : filter === name);\nvar supportedProtocols = /* @__PURE__ */ new Set([\"https:\", \"http:\", \"file:\"]);\nvar hasCustomProtocol = (urlString) => {\n  try {\n    const { protocol } = new URL(urlString);\n    return protocol.endsWith(\":\") && !protocol.includes(\".\") && !supportedProtocols.has(protocol);\n  } catch {\n    return false;\n  }\n};\nvar normalizeDataURL = (urlString, { stripHash }) => {\n  const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n  if (!match) {\n    throw new Error(`Invalid URL: ${urlString}`);\n  }\n  const type = match.groups?.type ?? \"\";\n  const data = match.groups?.data ?? \"\";\n  let hash = match.groups?.hash ?? \"\";\n  const mediaType = type.split(\";\");\n  hash = stripHash ? \"\" : hash;\n  let isBase64 = false;\n  if (mediaType[mediaType.length - 1] === \"base64\") {\n    mediaType.pop();\n    isBase64 = true;\n  }\n  const mimeType = mediaType.shift()?.toLowerCase() ?? \"\";\n  const attributes = mediaType.map((attribute) => {\n    let [key, value = \"\"] = attribute.split(\"=\").map((string) => string.trim());\n    if (key === \"charset\") {\n      value = value.toLowerCase();\n      if (value === DATA_URL_DEFAULT_CHARSET) {\n        return \"\";\n      }\n    }\n    return `${key}${value ? `=${value}` : \"\"}`;\n  }).filter(Boolean);\n  const normalizedMediaType = [...attributes];\n  if (isBase64) {\n    normalizedMediaType.push(\"base64\");\n  }\n  if (normalizedMediaType.length > 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {\n    normalizedMediaType.unshift(mimeType);\n  }\n  return `data:${normalizedMediaType.join(\";\")},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : \"\"}`;\n};\nfunction normalizeUrl(urlString, options = {}) {\n  options = {\n    defaultProtocol: \"http\",\n    normalizeProtocol: true,\n    forceHttp: false,\n    forceHttps: false,\n    stripAuthentication: true,\n    stripHash: false,\n    stripTextFragment: true,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeSingleSlash: true,\n    removeDirectoryIndex: false,\n    removeExplicitPort: false,\n    sortQueryParameters: true,\n    ...options\n  };\n  if (typeof options.defaultProtocol === \"string\" && !options.defaultProtocol.endsWith(\":\")) {\n    options.defaultProtocol = `${options.defaultProtocol}:`;\n  }\n  urlString = urlString.trim();\n  if (/^data:/i.test(urlString)) {\n    return normalizeDataURL(urlString, options);\n  }\n  if (hasCustomProtocol(urlString)) {\n    return urlString;\n  }\n  const hasRelativeProtocol = urlString.startsWith(\"//\");\n  const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n  if (!isRelativeUrl) {\n    urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n  }\n  const urlObject = new URL(urlString);\n  urlObject.hostname = urlObject.hostname.toLowerCase();\n  if (options.forceHttp && options.forceHttps) {\n    throw new Error(\"The `forceHttp` and `forceHttps` options cannot be used together\");\n  }\n  if (options.forceHttp && urlObject.protocol === \"https:\") {\n    urlObject.protocol = \"http:\";\n  }\n  if (options.forceHttps && urlObject.protocol === \"http:\") {\n    urlObject.protocol = \"https:\";\n  }\n  if (options.stripAuthentication) {\n    urlObject.username = \"\";\n    urlObject.password = \"\";\n  }\n  if (options.stripHash) {\n    urlObject.hash = \"\";\n  } else if (options.stripTextFragment) {\n    urlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, \"\");\n  }\n  if (urlObject.pathname) {\n    const protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\n    let lastIndex = 0;\n    let result = \"\";\n    for (; ; ) {\n      const match = protocolRegex.exec(urlObject.pathname);\n      if (!match) {\n        break;\n      }\n      const protocol = match[0];\n      const protocolAtIndex = match.index;\n      const intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\n      result += intermediate.replace(/\\/{2,}/g, \"/\");\n      result += protocol;\n      lastIndex = protocolAtIndex + protocol.length;\n    }\n    const remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\n    result += remnant.replace(/\\/{2,}/g, \"/\");\n    urlObject.pathname = result;\n  }\n  if (urlObject.pathname) {\n    try {\n      urlObject.pathname = decodeURI(urlObject.pathname);\n    } catch {\n    }\n  }\n  if (options.removeDirectoryIndex === true) {\n    options.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n  if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n    let pathComponents = urlObject.pathname.split(\"/\");\n    const lastComponent = pathComponents[pathComponents.length - 1];\n    if (testParameter(lastComponent, options.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, -1);\n      urlObject.pathname = `${pathComponents.slice(1).join(\"/\")}/`;\n    }\n  }\n  if (urlObject.hostname) {\n    urlObject.hostname = urlObject.hostname.replace(/\\.$/, \"\");\n    if (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\n      urlObject.hostname = urlObject.hostname.replace(/^www\\./, \"\");\n    }\n  }\n  if (Array.isArray(options.removeQueryParameters)) {\n    for (const key of [...urlObject.searchParams.keys()]) {\n      if (testParameter(key, options.removeQueryParameters)) {\n        urlObject.searchParams.delete(key);\n      }\n    }\n  }\n  if (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\n    urlObject.search = \"\";\n  }\n  if (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\n    for (const key of [...urlObject.searchParams.keys()]) {\n      if (!testParameter(key, options.keepQueryParameters)) {\n        urlObject.searchParams.delete(key);\n      }\n    }\n  }\n  if (options.sortQueryParameters) {\n    urlObject.searchParams.sort();\n    try {\n      urlObject.search = decodeURIComponent(urlObject.search);\n    } catch {\n    }\n  }\n  if (options.removeTrailingSlash) {\n    urlObject.pathname = urlObject.pathname.replace(/\\/$/, \"\");\n  }\n  if (options.removeExplicitPort && urlObject.port) {\n    urlObject.port = \"\";\n  }\n  const oldUrlString = urlString;\n  urlString = urlObject.toString();\n  if (!options.removeSingleSlash && urlObject.pathname === \"/\" && !oldUrlString.endsWith(\"/\") && urlObject.hash === \"\") {\n    urlString = urlString.replace(/\\/$/, \"\");\n  }\n  if ((options.removeTrailingSlash || urlObject.pathname === \"/\") && urlObject.hash === \"\" && options.removeSingleSlash) {\n    urlString = urlString.replace(/\\/$/, \"\");\n  }\n  if (hasRelativeProtocol && !options.normalizeProtocol) {\n    urlString = urlString.replace(/^http:\\/\\//, \"//\");\n  }\n  if (options.stripProtocol) {\n    urlString = urlString.replace(/^(?:https?:)?\\/\\//, \"\");\n  }\n  return urlString;\n}\n\n// src/relay/index.ts\n\n\n\n// src/relay/connectivity.ts\nvar MAX_RECONNECT_ATTEMPTS = 5;\nvar FLAPPING_THRESHOLD_MS = 1e3;\nvar NDKRelayConnectivity = class {\n  ndkRelay;\n  ws;\n  _status;\n  timeoutMs;\n  connectedAt;\n  _connectionStats = {\n    attempts: 0,\n    success: 0,\n    durations: []\n  };\n  debug;\n  netDebug;\n  connectTimeout;\n  reconnectTimeout;\n  ndk;\n  openSubs = /* @__PURE__ */ new Map();\n  openCountRequests = /* @__PURE__ */ new Map();\n  openEventPublishes = /* @__PURE__ */ new Map();\n  serial = 0;\n  baseEoseTimeout = 4400;\n  constructor(ndkRelay, ndk) {\n    this.ndkRelay = ndkRelay;\n    this._status = 1 /* DISCONNECTED */;\n    const rand = Math.floor(Math.random() * 1e3);\n    this.debug = this.ndkRelay.debug.extend(`connectivity${rand}`);\n    this.ndk = ndk;\n  }\n  /**\n   * Connects to the NDK relay and handles the connection lifecycle.\n   *\n   * This method attempts to establish a WebSocket connection to the NDK relay specified in the `ndkRelay` object.\n   * If the connection is successful, it updates the connection statistics, sets the connection status to `CONNECTED`,\n   * and emits `connect` and `ready` events on the `ndkRelay` object.\n   *\n   * If the connection attempt fails, it handles the error by either initiating a reconnection attempt or emitting a\n   * `delayed-connect` event on the `ndkRelay` object, depending on the `reconnect` parameter.\n   *\n   * @param timeoutMs - The timeout in milliseconds for the connection attempt. If not provided, the default timeout from the `ndkRelay` object is used.\n   * @param reconnect - Indicates whether a reconnection should be attempted if the connection fails. Defaults to `true`.\n   * @returns A Promise that resolves when the connection is established, or rejects if the connection fails.\n   */\n  async connect(timeoutMs, reconnect = true) {\n    if (this._status !== 2 /* RECONNECTING */ && this._status !== 1 /* DISCONNECTED */ || this.reconnectTimeout) {\n      this.debug(\n        \"Relay requested to be connected but was in state %s or it had a reconnect timeout\",\n        this._status\n      );\n      return;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = void 0;\n    }\n    if (this.connectTimeout) {\n      clearTimeout(this.connectTimeout);\n      this.connectTimeout = void 0;\n    }\n    timeoutMs ??= this.timeoutMs;\n    if (!this.timeoutMs && timeoutMs) this.timeoutMs = timeoutMs;\n    if (this.timeoutMs) this.connectTimeout = setTimeout(() => this.onConnectionError(reconnect), this.timeoutMs);\n    try {\n      this.updateConnectionStats.attempt();\n      if (this._status === 1 /* DISCONNECTED */) this._status = 4 /* CONNECTING */;\n      else this._status = 2 /* RECONNECTING */;\n      this.ws = new WebSocket(this.ndkRelay.url);\n      this.ws.onopen = this.onConnect.bind(this);\n      this.ws.onclose = this.onDisconnect.bind(this);\n      this.ws.onmessage = this.onMessage.bind(this);\n      this.ws.onerror = this.onError.bind(this);\n    } catch (e) {\n      this.debug(`Failed to connect to ${this.ndkRelay.url}`, e);\n      this._status = 1 /* DISCONNECTED */;\n      if (reconnect) this.handleReconnection();\n      else this.ndkRelay.emit(\"delayed-connect\", 2 * 24 * 60 * 60 * 1e3);\n      throw e;\n    }\n  }\n  /**\n   * Disconnects the WebSocket connection to the NDK relay.\n   * This method sets the connection status to `NDKRelayStatus.DISCONNECTING`,\n   * attempts to close the WebSocket connection, and sets the status to\n   * `NDKRelayStatus.DISCONNECTED` if the disconnect operation fails.\n   */\n  disconnect() {\n    this._status = 0 /* DISCONNECTING */;\n    try {\n      this.ws?.close();\n    } catch (e) {\n      this.debug(\"Failed to disconnect\", e);\n      this._status = 1 /* DISCONNECTED */;\n    }\n  }\n  /**\n   * Handles the error that occurred when attempting to connect to the NDK relay.\n   * If `reconnect` is `true`, this method will initiate a reconnection attempt.\n   * Otherwise, it will emit a `delayed-connect` event on the `ndkRelay` object,\n   * indicating that a reconnection should be attempted after a delay.\n   *\n   * @param reconnect - Indicates whether a reconnection should be attempted.\n   */\n  onConnectionError(reconnect) {\n    this.debug(`Error connecting to ${this.ndkRelay.url}`, this.timeoutMs);\n    if (reconnect && !this.reconnectTimeout) {\n      this.handleReconnection();\n    }\n  }\n  /**\n   * Handles the connection event when the WebSocket connection is established.\n   * This method is called when the WebSocket connection is successfully opened.\n   * It clears any existing connection and reconnection timeouts, updates the connection statistics,\n   * sets the connection status to `CONNECTED`, and emits `connect` and `ready` events on the `ndkRelay` object.\n   */\n  onConnect() {\n    this.netDebug?.(\"connected\", this.ndkRelay);\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = void 0;\n    }\n    if (this.connectTimeout) {\n      clearTimeout(this.connectTimeout);\n      this.connectTimeout = void 0;\n    }\n    this.updateConnectionStats.connected();\n    this._status = 5 /* CONNECTED */;\n    this.ndkRelay.emit(\"connect\");\n    this.ndkRelay.emit(\"ready\");\n  }\n  /**\n   * Handles the disconnection event when the WebSocket connection is closed.\n   * This method is called when the WebSocket connection is successfully closed.\n   * It updates the connection statistics, sets the connection status to `DISCONNECTED`,\n   * initiates a reconnection attempt if we didn't disconnect ourselves,\n   * and emits a `disconnect` event on the `ndkRelay` object.\n   */\n  onDisconnect() {\n    this.netDebug?.(\"disconnected\", this.ndkRelay);\n    this.updateConnectionStats.disconnected();\n    if (this._status === 5 /* CONNECTED */) {\n      this.handleReconnection();\n    }\n    this._status = 1 /* DISCONNECTED */;\n    this.ndkRelay.emit(\"disconnect\");\n  }\n  /**\n   * Handles incoming messages from the NDK relay WebSocket connection.\n   * This method is called whenever a message is received from the relay.\n   * It parses the message data and dispatches the appropriate handling logic based on the message type.\n   *\n   * @param event - The MessageEvent containing the received message data.\n   */\n  onMessage(event) {\n    this.netDebug?.(event.data, this.ndkRelay, \"recv\");\n    try {\n      const data = JSON.parse(event.data);\n      const [cmd, id, ..._rest] = data;\n      switch (cmd) {\n        case \"EVENT\": {\n          const so = this.openSubs.get(id);\n          const event2 = data[2];\n          if (!so) {\n            this.debug(`Received event for unknown subscription ${id}`);\n            return;\n          }\n          so.onevent(event2);\n          return;\n        }\n        case \"COUNT\": {\n          const payload = data[2];\n          const cr = this.openCountRequests.get(id);\n          if (cr) {\n            cr.resolve(payload.count);\n            this.openCountRequests.delete(id);\n          }\n          return;\n        }\n        case \"EOSE\": {\n          const so = this.openSubs.get(id);\n          if (!so) return;\n          so.oneose(id);\n          return;\n        }\n        case \"OK\": {\n          const ok = data[2];\n          const reason = data[3];\n          const ep = this.openEventPublishes.get(id);\n          const firstEp = ep?.pop();\n          if (!ep || !firstEp) {\n            this.debug(\"Received OK for unknown event publish\", id);\n            return;\n          }\n          if (ok) firstEp.resolve(reason);\n          else firstEp.reject(new Error(reason));\n          if (ep.length === 0) {\n            this.openEventPublishes.delete(id);\n          } else {\n            this.openEventPublishes.set(id, ep);\n          }\n          return;\n        }\n        case \"CLOSED\": {\n          const so = this.openSubs.get(id);\n          if (!so) return;\n          so.onclosed(data[2]);\n          return;\n        }\n        case \"NOTICE\":\n          this.onNotice(data[1]);\n          return;\n        case \"AUTH\": {\n          this.onAuthRequested(data[1]);\n          return;\n        }\n      }\n    } catch (error) {\n      this.debug(`Error parsing message from ${this.ndkRelay.url}: ${error.message}`, error?.stack);\n      return;\n    }\n  }\n  /**\n   * Handles an authentication request from the NDK relay.\n   *\n   * If an authentication policy is configured, it will be used to authenticate the connection.\n   * Otherwise, the `auth` event will be emitted to allow the application to handle the authentication.\n   *\n   * @param challenge - The authentication challenge provided by the NDK relay.\n   */\n  async onAuthRequested(challenge) {\n    const authPolicy = this.ndkRelay.authPolicy ?? this.ndk?.relayAuthDefaultPolicy;\n    this.debug(\"Relay requested authentication\", {\n      havePolicy: !!authPolicy\n    });\n    if (this._status === 7 /* AUTHENTICATING */) {\n      this.debug(\"Already authenticating, ignoring\");\n      return;\n    }\n    this._status = 6 /* AUTH_REQUESTED */;\n    if (authPolicy) {\n      if (this._status >= 5 /* CONNECTED */) {\n        this._status = 7 /* AUTHENTICATING */;\n        let res;\n        try {\n          res = await authPolicy(this.ndkRelay, challenge);\n        } catch (e) {\n          this.debug(\"Authentication policy threw an error\", e);\n          res = false;\n        }\n        this.debug(\"Authentication policy returned\", !!res);\n        if (res instanceof NDKEvent || res === true) {\n          if (res instanceof NDKEvent) {\n            await this.auth(res);\n          }\n          const authenticate = async () => {\n            if (this._status >= 5 /* CONNECTED */ && this._status < 8 /* AUTHENTICATED */) {\n              const event = new NDKEvent(this.ndk);\n              event.kind = 22242 /* ClientAuth */;\n              event.tags = [\n                [\"relay\", this.ndkRelay.url],\n                [\"challenge\", challenge]\n              ];\n              await event.sign();\n              this.auth(event).then(() => {\n                this._status = 8 /* AUTHENTICATED */;\n                this.ndkRelay.emit(\"authed\");\n                this.debug(\"Authentication successful\");\n              }).catch((e) => {\n                this._status = 6 /* AUTH_REQUESTED */;\n                this.ndkRelay.emit(\"auth:failed\", e);\n                this.debug(\"Authentication failed\", e);\n              });\n            } else {\n              this.debug(\"Authentication failed, it changed status, status is %d\", this._status);\n            }\n          };\n          if (res === true) {\n            if (!this.ndk?.signer) {\n              this.debug(\"No signer available for authentication localhost\");\n              this.ndk?.once(\"signer:ready\", authenticate);\n            } else {\n              authenticate().catch((e) => {\n                console.error(\"Error authenticating\", e);\n              });\n            }\n          }\n          this._status = 5 /* CONNECTED */;\n          this.ndkRelay.emit(\"authed\");\n        }\n      }\n    } else {\n      this.ndkRelay.emit(\"auth\", challenge);\n    }\n  }\n  /**\n   * Handles errors that occur on the WebSocket connection to the relay.\n   * @param error - The error or event that occurred.\n   */\n  onError(error) {\n    this.debug(`WebSocket error on ${this.ndkRelay.url}:`, error);\n  }\n  /**\n   * Gets the current status of the NDK relay connection.\n   * @returns {NDKRelayStatus} The current status of the NDK relay connection.\n   */\n  get status() {\n    return this._status;\n  }\n  /**\n   * Checks if the NDK relay connection is currently available.\n   * @returns {boolean} `true` if the relay connection is in the `CONNECTED` status, `false` otherwise.\n   */\n  isAvailable() {\n    return this._status === 5 /* CONNECTED */;\n  }\n  /**\n   * Checks if the NDK relay connection is flapping, which means the connection is rapidly\n   * disconnecting and reconnecting. This is determined by analyzing the durations of the\n   * last three connection attempts. If the standard deviation of the durations is less\n   * than 1000 milliseconds, the connection is considered to be flapping.\n   *\n   * @returns {boolean} `true` if the connection is flapping, `false` otherwise.\n   */\n  isFlapping() {\n    const durations = this._connectionStats.durations;\n    if (durations.length % 3 !== 0) return false;\n    const sum = durations.reduce((a, b) => a + b, 0);\n    const avg = sum / durations.length;\n    const variance = durations.map((x) => (x - avg) ** 2).reduce((a, b) => a + b, 0) / durations.length;\n    const stdDev = Math.sqrt(variance);\n    const isFlapping = stdDev < FLAPPING_THRESHOLD_MS;\n    return isFlapping;\n  }\n  /**\n   * Handles a notice received from the NDK relay.\n   * If the notice indicates the relay is complaining (e.g. \"too many\" or \"maximum\"),\n   * the method disconnects from the relay and attempts to reconnect after a 2-second delay.\n   * A debug message is logged with the relay URL and the notice text.\n   * The \"notice\" event is emitted on the ndkRelay instance with the notice text.\n   *\n   * @param notice - The notice text received from the NDK relay.\n   */\n  async onNotice(notice) {\n    this.ndkRelay.emit(\"notice\", notice);\n  }\n  /**\n   * Attempts to reconnect to the NDK relay after a connection is lost.\n   * This function is called recursively to handle multiple reconnection attempts.\n   * It checks if the relay is flapping and emits a \"flapping\" event if so.\n   * It then calculates a delay before the next reconnection attempt based on the number of previous attempts.\n   * The function sets a timeout to execute the next reconnection attempt after the calculated delay.\n   * If the maximum number of reconnection attempts is reached, a debug message is logged.\n   *\n   * @param attempt - The current attempt number (default is 0).\n   */\n  handleReconnection(attempt = 0) {\n    if (this.reconnectTimeout) return;\n    if (this.isFlapping()) {\n      this.ndkRelay.emit(\"flapping\", this._connectionStats);\n      this._status = 3 /* FLAPPING */;\n      return;\n    }\n    const reconnectDelay = this.connectedAt ? Math.max(0, 6e4 - (Date.now() - this.connectedAt)) : 5e3 * (this._connectionStats.attempts + 1);\n    this.reconnectTimeout = setTimeout(() => {\n      this.reconnectTimeout = void 0;\n      this._status = 2 /* RECONNECTING */;\n      this.connect().catch((_err) => {\n        if (attempt < MAX_RECONNECT_ATTEMPTS) {\n          setTimeout(\n            () => {\n              this.handleReconnection(attempt + 1);\n            },\n            1e3 * (attempt + 1) ^ 4\n          );\n        } else {\n          this.debug(\"Reconnect failed\");\n        }\n      });\n    }, reconnectDelay);\n    this.ndkRelay.emit(\"delayed-connect\", reconnectDelay);\n    this.debug(\"Reconnecting in\", reconnectDelay);\n    this._connectionStats.nextReconnectAt = Date.now() + reconnectDelay;\n  }\n  /**\n   * Sends a message to the NDK relay if the connection is in the CONNECTED state and the WebSocket is open.\n   * If the connection is not in the CONNECTED state or the WebSocket is not open, logs a debug message and throws an error.\n   *\n   * @param message - The message to send to the NDK relay.\n   * @throws {Error} If attempting to send on a closed relay connection.\n   */\n  async send(message) {\n    if (this._status >= 5 /* CONNECTED */ && this.ws?.readyState === WebSocket.OPEN) {\n      this.ws?.send(message);\n      this.netDebug?.(message, this.ndkRelay, \"send\");\n    } else {\n      this.debug(`Not connected to ${this.ndkRelay.url} (%d), not sending message ${message}`, this._status);\n    }\n  }\n  /**\n   * Authenticates the NDK event by sending it to the NDK relay and returning a promise that resolves with the result.\n   *\n   * @param event - The NDK event to authenticate.\n   * @returns A promise that resolves with the authentication result.\n   */\n  async auth(event) {\n    const ret = new Promise((resolve, reject) => {\n      const val = this.openEventPublishes.get(event.id) ?? [];\n      val.push({ resolve, reject });\n      this.openEventPublishes.set(event.id, val);\n    });\n    this.send(`[\"AUTH\",${JSON.stringify(event.rawEvent())}]`);\n    return ret;\n  }\n  /**\n   * Publishes an NDK event to the relay and returns a promise that resolves with the result.\n   *\n   * @param event - The NDK event to publish.\n   * @returns A promise that resolves with the result of the event publication.\n   * @throws {Error} If attempting to publish on a closed relay connection.\n   */\n  async publish(event) {\n    const ret = new Promise((resolve, reject) => {\n      const val = this.openEventPublishes.get(event.id) ?? [];\n      if (val.length > 0) {\n        console.warn(`Duplicate event publishing detected, you are publishing event ${event.id} twice`);\n      }\n      val.push({ resolve, reject });\n      this.openEventPublishes.set(event.id, val);\n    });\n    this.send(`[\"EVENT\",${JSON.stringify(event)}]`);\n    return ret;\n  }\n  /**\n   * Counts the number of events that match the provided filters.\n   *\n   * @param filters - The filters to apply to the count request.\n   * @param params - An optional object containing a custom id for the count request.\n   * @returns A promise that resolves with the number of matching events.\n   * @throws {Error} If attempting to send the count request on a closed relay connection.\n   */\n  async count(filters, params) {\n    this.serial++;\n    const id = params?.id || `count:${this.serial}`;\n    const ret = new Promise((resolve, reject) => {\n      this.openCountRequests.set(id, { resolve, reject });\n    });\n    this.send(`[\"COUNT\",\"${id}\",${JSON.stringify(filters).substring(1)}`);\n    return ret;\n  }\n  close(subId, reason) {\n    this.send(`[\"CLOSE\",\"${subId}\"]`);\n    const sub = this.openSubs.get(subId);\n    this.openSubs.delete(subId);\n    if (sub) sub.onclose(reason);\n  }\n  /**\n   * Subscribes to the NDK relay with the provided filters and parameters.\n   *\n   * @param filters - The filters to apply to the subscription.\n   * @param params - The subscription parameters, including an optional custom id.\n   * @returns A new NDKRelaySubscription instance.\n   */\n  req(relaySub) {\n    `${this.send(`[\"REQ\",\"${relaySub.subId}\",${JSON.stringify(relaySub.executeFilters).substring(1)}`)}]`;\n    this.openSubs.set(relaySub.subId, relaySub);\n  }\n  /**\n   * Utility functions to update the connection stats.\n   */\n  updateConnectionStats = {\n    connected: () => {\n      this._connectionStats.success++;\n      this._connectionStats.connectedAt = Date.now();\n    },\n    disconnected: () => {\n      if (this._connectionStats.connectedAt) {\n        this._connectionStats.durations.push(Date.now() - this._connectionStats.connectedAt);\n        if (this._connectionStats.durations.length > 100) {\n          this._connectionStats.durations.shift();\n        }\n      }\n      this._connectionStats.connectedAt = void 0;\n    },\n    attempt: () => {\n      this._connectionStats.attempts++;\n      this._connectionStats.connectedAt = Date.now();\n    }\n  };\n  /** Returns the connection stats. */\n  get connectionStats() {\n    return this._connectionStats;\n  }\n  /** Returns the relay URL */\n  get url() {\n    return this.ndkRelay.url;\n  }\n  get connected() {\n    return this._status >= 5 /* CONNECTED */ && this.ws?.readyState === WebSocket.OPEN;\n  }\n};\n\n// src/relay/publisher.ts\nvar NDKRelayPublisher = class {\n  ndkRelay;\n  debug;\n  constructor(ndkRelay) {\n    this.ndkRelay = ndkRelay;\n    this.debug = ndkRelay.debug.extend(\"publisher\");\n  }\n  /**\n   * Published an event to the relay; if the relay is not connected, it will\n   * wait for the relay to connect before publishing the event.\n   *\n   * If the relay does not connect within the timeout, the publish operation\n   * will fail.\n   * @param event  The event to publish\n   * @param timeoutMs  The timeout for the publish operation in milliseconds\n   * @returns A promise that resolves when the event has been published or rejects if the operation times out\n   */\n  async publish(event, timeoutMs = 2500) {\n    let timeout;\n    const publishConnected = () => {\n      return new Promise((resolve, reject) => {\n        try {\n          this.publishEvent(event).then((_result) => {\n            this.ndkRelay.emit(\"published\", event);\n            event.emit(\"relay:published\", this.ndkRelay);\n            resolve(true);\n          }).catch(reject);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    };\n    const timeoutPromise = new Promise((_, reject) => {\n      timeout = setTimeout(() => {\n        timeout = void 0;\n        reject(new Error(`Timeout: ${timeoutMs}ms`));\n      }, timeoutMs);\n    });\n    const onConnectHandler = () => {\n      publishConnected().then((result) => connectResolve(result)).catch((err) => connectReject(err));\n    };\n    let connectResolve;\n    let connectReject;\n    const onError = (err) => {\n      this.ndkRelay.debug(\"Publish failed\", err, event.id);\n      this.ndkRelay.emit(\"publish:failed\", event, err);\n      event.emit(\"relay:publish:failed\", this.ndkRelay, err);\n      throw err;\n    };\n    const onFinally = () => {\n      if (timeout) clearTimeout(timeout);\n      this.ndkRelay.removeListener(\"connect\", onConnectHandler);\n    };\n    if (this.ndkRelay.status >= 5 /* CONNECTED */) {\n      return Promise.race([publishConnected(), timeoutPromise]).catch(onError).finally(onFinally);\n    }\n    if (this.ndkRelay.status <= 1 /* DISCONNECTED */) {\n      console.warn(\"Relay is disconnected, trying to connect to publish an event\", this.ndkRelay.url);\n      this.ndkRelay.connect();\n    } else {\n      console.warn(\"Relay not connected, waiting for connection to publish an event\", this.ndkRelay.url);\n    }\n    return Promise.race([\n      new Promise((resolve, reject) => {\n        connectResolve = resolve;\n        connectReject = reject;\n        this.ndkRelay.once(\"connect\", onConnectHandler);\n      }),\n      timeoutPromise\n    ]).catch(onError).finally(onFinally);\n  }\n  async publishEvent(event) {\n    return this.ndkRelay.connectivity.publish(event.rawEvent());\n  }\n};\n\n// src/subscription/grouping.ts\nfunction filterFingerprint(filters, closeOnEose) {\n  const elements = [];\n  for (const filter of filters) {\n    const keys = Object.entries(filter || {}).map(([key, values]) => {\n      if ([\"since\", \"until\"].includes(key)) {\n        return `${key}:${values}`;\n      }\n      return key;\n    }).sort().join(\"-\");\n    elements.push(keys);\n  }\n  let id = closeOnEose ? \"+\" : \"\";\n  id += elements.join(\"|\");\n  return id;\n}\nfunction mergeFilters(filters) {\n  const result = [];\n  const lastResult = {};\n  filters.filter((f) => !!f.limit).forEach((filterWithLimit) => result.push(filterWithLimit));\n  filters = filters.filter((f) => !f.limit);\n  if (filters.length === 0) return result;\n  filters.forEach((filter) => {\n    Object.entries(filter).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        if (lastResult[key] === void 0) {\n          lastResult[key] = [...value];\n        } else {\n          lastResult[key] = Array.from(/* @__PURE__ */ new Set([...lastResult[key], ...value]));\n        }\n      } else {\n        lastResult[key] = value;\n      }\n    });\n  });\n  return [...result, lastResult];\n}\n\n// src/relay/subscription.ts\nvar NDKRelaySubscription = class {\n  fingerprint;\n  items = /* @__PURE__ */ new Map();\n  topSubManager;\n  debug;\n  /**\n   * Tracks the status of this REQ.\n   */\n  status = 0 /* INITIAL */;\n  onClose;\n  relay;\n  /**\n   * Whether this subscription has reached EOSE.\n   */\n  eosed = false;\n  /**\n   * Timeout at which this subscription will\n   * start executing.\n   */\n  executionTimer;\n  /**\n   * Track the time at which this subscription will fire.\n   */\n  fireTime;\n  /**\n   * The delay type that the current fireTime was calculated with.\n   */\n  delayType;\n  /**\n   * The filters that have been executed.\n   */\n  executeFilters;\n  id = Math.random().toString(36).substring(7);\n  /**\n   *\n   * @param fingerprint The fingerprint of this subscription.\n   */\n  constructor(relay, fingerprint, topSubManager) {\n    this.relay = relay;\n    this.topSubManager = topSubManager;\n    this.debug = relay.debug.extend(`sub[${this.id}]`);\n    this.fingerprint = fingerprint || Math.random().toString(36).substring(7);\n  }\n  _subId;\n  get subId() {\n    if (this._subId) return this._subId;\n    this._subId = this.fingerprint.slice(0, 15);\n    return this._subId;\n  }\n  subIdParts = /* @__PURE__ */ new Set();\n  addSubIdPart(part) {\n    this.subIdParts.add(part);\n  }\n  addItem(subscription, filters) {\n    this.debug(\"Adding item\", {\n      filters,\n      internalId: subscription.internalId,\n      status: this.status,\n      fingerprint: this.fingerprint,\n      id: this.subId,\n      items: this.items,\n      itemsSize: this.items.size\n    });\n    if (this.items.has(subscription.internalId)) return;\n    subscription.on(\"close\", this.removeItem.bind(this, subscription));\n    this.items.set(subscription.internalId, { subscription, filters });\n    if (this.status !== 3 /* RUNNING */) {\n      if (subscription.subId && (!this._subId || this._subId.length < 48)) {\n        if (this.status === 0 /* INITIAL */ || this.status === 1 /* PENDING */) {\n          this.addSubIdPart(subscription.subId);\n        }\n      }\n    }\n    switch (this.status) {\n      case 0 /* INITIAL */:\n        this.evaluateExecutionPlan(subscription);\n        break;\n      case 3 /* RUNNING */:\n        break;\n      case 1 /* PENDING */:\n        this.evaluateExecutionPlan(subscription);\n        break;\n      case 4 /* CLOSED */:\n        this.debug(\"Subscription is closed, cannot add new items %o (%o)\", subscription, filters);\n        throw new Error(\"Cannot add new items to a closed subscription\");\n    }\n  }\n  /**\n   * A subscription has been closed, remove it from the list of items.\n   * @param subscription\n   */\n  removeItem(subscription) {\n    this.items.delete(subscription.internalId);\n    if (this.items.size === 0) {\n      if (!this.eosed) return;\n      this.close();\n      this.cleanup();\n    }\n  }\n  close() {\n    if (this.status === 4 /* CLOSED */) return;\n    const prevStatus = this.status;\n    this.status = 4 /* CLOSED */;\n    if (prevStatus === 3 /* RUNNING */) {\n      try {\n        this.relay.close(this.subId);\n      } catch (e) {\n        this.debug(\"Error closing subscription\", e, this);\n      }\n    } else {\n      this.debug(\"Subscription wanted to close but it wasn't running, this is probably ok\", {\n        subId: this.subId,\n        prevStatus,\n        sub: this\n      });\n    }\n    this.cleanup();\n  }\n  cleanup() {\n    if (this.executionTimer) clearTimeout(this.executionTimer);\n    this.relay.off(\"ready\", this.executeOnRelayReady);\n    this.relay.off(\"authed\", this.reExecuteAfterAuth);\n    if (this.onClose) this.onClose(this);\n  }\n  evaluateExecutionPlan(subscription) {\n    if (!subscription.isGroupable()) {\n      this.status = 1 /* PENDING */;\n      this.execute();\n      return;\n    }\n    if (subscription.filters.find((filter) => !!filter.limit)) {\n      this.executeFilters = this.compileFilters();\n      if (this.executeFilters.length >= 10) {\n        this.status = 1 /* PENDING */;\n        this.execute();\n        return;\n      }\n    }\n    const delay = subscription.groupableDelay;\n    const delayType = subscription.groupableDelayType;\n    if (!delay) throw new Error(\"Cannot group a subscription without a delay\");\n    if (this.status === 0 /* INITIAL */) {\n      this.schedule(delay, delayType);\n    } else {\n      const existingDelayType = this.delayType;\n      const timeUntilFire = this.fireTime - Date.now();\n      if (existingDelayType === \"at-least\" && delayType === \"at-least\") {\n        if (timeUntilFire < delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else if (existingDelayType === \"at-least\" && delayType === \"at-most\") {\n        if (timeUntilFire > delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else if (existingDelayType === \"at-most\" && delayType === \"at-most\") {\n        if (timeUntilFire > delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else if (existingDelayType === \"at-most\" && delayType === \"at-least\") {\n        if (timeUntilFire > delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else {\n        throw new Error(`Unknown delay type combination ${existingDelayType} ${delayType}`);\n      }\n    }\n  }\n  schedule(delay, delayType) {\n    this.status = 1 /* PENDING */;\n    const currentTime = Date.now();\n    this.fireTime = currentTime + delay;\n    this.delayType = delayType;\n    const timer = setTimeout(this.execute.bind(this), delay);\n    if (delayType === \"at-least\") {\n      this.executionTimer = timer;\n    }\n  }\n  executeOnRelayReady = () => {\n    if (this.status !== 2 /* WAITING */) return;\n    if (this.items.size === 0) {\n      this.debug(\"No items to execute; this relay was probably too slow to respond and the caller gave up\", {\n        status: this.status,\n        fingerprint: this.fingerprint,\n        items: this.items,\n        itemsSize: this.items.size,\n        id: this.id,\n        subId: this.subId\n      });\n      this.cleanup();\n      return;\n    }\n    this.debug(\"Executing on relay ready\", {\n      status: this.status,\n      fingerprint: this.fingerprint,\n      items: this.items,\n      itemsSize: this.items.size\n    });\n    this.status = 1 /* PENDING */;\n    this.execute();\n  };\n  finalizeSubId() {\n    if (this.subIdParts.size > 0) {\n      this._subId = Array.from(this.subIdParts).join(\"-\");\n    } else {\n      this._subId = this.fingerprint.slice(0, 15);\n    }\n    this._subId += `-${Math.random().toString(36).substring(2, 7)}`;\n  }\n  // we do it this way so that we can remove the listener\n  reExecuteAfterAuth = (() => {\n    const oldSubId = this.subId;\n    this.debug(\"Re-executing after auth\", this.items.size);\n    if (this.eosed) {\n      this.relay.close(this.subId);\n    } else {\n      this.debug(\"We are abandoning an opened subscription, once it EOSE's, the handler will close it\", {\n        oldSubId\n      });\n    }\n    this._subId = void 0;\n    this.status = 1 /* PENDING */;\n    this.execute();\n    this.debug(\"Re-executed after auth %s \\u{1F449} %s\", oldSubId, this.subId);\n  }).bind(this);\n  execute() {\n    if (this.status !== 1 /* PENDING */) {\n      return;\n    }\n    if (!this.relay.connected) {\n      this.status = 2 /* WAITING */;\n      this.debug(\"Waiting for relay to be ready\", {\n        status: this.status,\n        id: this.subId,\n        fingerprint: this.fingerprint,\n        items: this.items,\n        itemsSize: this.items.size\n      });\n      this.relay.once(\"ready\", this.executeOnRelayReady);\n      return;\n    }\n    if (this.relay.status < 8 /* AUTHENTICATED */) {\n      this.relay.once(\"authed\", this.reExecuteAfterAuth);\n    }\n    this.status = 3 /* RUNNING */;\n    this.finalizeSubId();\n    this.executeFilters = this.compileFilters();\n    this.relay.req(this);\n  }\n  onstart() {\n  }\n  onevent(event) {\n    this.topSubManager.dispatchEvent(event, this.relay);\n  }\n  oneose(subId) {\n    this.eosed = true;\n    if (subId !== this.subId) {\n      this.debug(\"Received EOSE for an abandoned subscription\", subId, this.subId);\n      this.relay.close(subId);\n      return;\n    }\n    if (this.items.size === 0) {\n      this.close();\n    }\n    for (const { subscription } of this.items.values()) {\n      subscription.eoseReceived(this.relay);\n      if (subscription.closeOnEose) {\n        this.debug(\"Removing item because of EOSE\", {\n          filters: subscription.filters,\n          internalId: subscription.internalId,\n          status: this.status,\n          fingerprint: this.fingerprint,\n          items: this.items,\n          itemsSize: this.items.size\n        });\n        this.removeItem(subscription);\n      }\n    }\n  }\n  onclose(_reason) {\n    this.status = 4 /* CLOSED */;\n  }\n  onclosed(reason) {\n    if (!reason) return;\n    for (const { subscription } of this.items.values()) {\n      subscription.closedReceived(this.relay, reason);\n    }\n  }\n  /**\n   * Grabs the filters from all the subscriptions\n   * and merges them into a single filter.\n   */\n  compileFilters() {\n    const mergedFilters = [];\n    const filters = Array.from(this.items.values()).map((item) => item.filters);\n    if (!filters[0]) {\n      this.debug(\"\\u{1F440} No filters to merge\", this.items);\n      console.error(\"BUG: No filters to merge!\", this.items);\n      return [];\n    }\n    const filterCount = filters[0].length;\n    for (let i = 0; i < filterCount; i++) {\n      const allFiltersAtIndex = filters.map((filter) => filter[i]);\n      mergedFilters.push(...mergeFilters(allFiltersAtIndex));\n    }\n    return mergedFilters;\n  }\n};\n\n// src/relay/sub-manager.ts\nvar NDKRelaySubscriptionManager = class {\n  relay;\n  subscriptions;\n  generalSubManager;\n  /**\n   * @param relay - The relay instance.\n   * @param generalSubManager - The subscription manager instance.\n   */\n  constructor(relay, generalSubManager) {\n    this.relay = relay;\n    this.subscriptions = /* @__PURE__ */ new Map();\n    this.generalSubManager = generalSubManager;\n  }\n  /**\n   * Adds a subscription to the manager.\n   */\n  addSubscription(sub, filters) {\n    let relaySub;\n    if (!sub.isGroupable()) {\n      relaySub = this.createSubscription(sub, filters);\n    } else {\n      const filterFp = filterFingerprint(filters, sub.closeOnEose);\n      if (filterFp) {\n        const existingSubs = this.subscriptions.get(filterFp);\n        relaySub = (existingSubs || []).find((sub2) => sub2.status < 3 /* RUNNING */);\n      }\n      relaySub ??= this.createSubscription(sub, filters, filterFp);\n    }\n    relaySub.addItem(sub, filters);\n  }\n  createSubscription(_sub, _filters, fingerprint) {\n    const relaySub = new NDKRelaySubscription(this.relay, fingerprint || null, this.generalSubManager);\n    relaySub.onClose = this.onRelaySubscriptionClose.bind(this);\n    const currentVal = this.subscriptions.get(relaySub.fingerprint) ?? [];\n    this.subscriptions.set(relaySub.fingerprint, [...currentVal, relaySub]);\n    return relaySub;\n  }\n  onRelaySubscriptionClose(sub) {\n    let currentVal = this.subscriptions.get(sub.fingerprint) ?? [];\n    if (!currentVal) {\n      console.warn(\"Unexpectedly did not find a subscription with fingerprint\", sub.fingerprint);\n    } else if (currentVal.length === 1) {\n      this.subscriptions.delete(sub.fingerprint);\n    } else {\n      currentVal = currentVal.filter((s) => s.id !== sub.id);\n      this.subscriptions.set(sub.fingerprint, currentVal);\n    }\n  }\n};\n\n// src/relay/index.ts\nvar NDKRelayStatus = /* @__PURE__ */ ((NDKRelayStatus2) => {\n  NDKRelayStatus2[NDKRelayStatus2[\"DISCONNECTING\"] = 0] = \"DISCONNECTING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n  NDKRelayStatus2[NDKRelayStatus2[\"RECONNECTING\"] = 2] = \"RECONNECTING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"FLAPPING\"] = 3] = \"FLAPPING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"CONNECTING\"] = 4] = \"CONNECTING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"CONNECTED\"] = 5] = \"CONNECTED\";\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTH_REQUESTED\"] = 6] = \"AUTH_REQUESTED\";\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTHENTICATING\"] = 7] = \"AUTHENTICATING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTHENTICATED\"] = 8] = \"AUTHENTICATED\";\n  return NDKRelayStatus2;\n})(NDKRelayStatus || {});\nvar NDKRelay = class _NDKRelay extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  url;\n  scores;\n  connectivity;\n  subs;\n  publisher;\n  authPolicy;\n  /**\n   * The lowest validation ratio this relay can reach.\n   */\n  lowestValidationRatio;\n  /**\n   * Current validation ratio this relay is targeting.\n   */\n  targetValidationRatio;\n  validationRatioFn;\n  /**\n   * This tracks events that have been seen by this relay\n   * with a valid signature.\n   */\n  validatedEventCount = 0;\n  /**\n   * This tracks events that have been seen by this relay\n   * but have not been validated.\n   */\n  nonValidatedEventCount = 0;\n  /**\n   * Whether this relay is trusted.\n   *\n   * Trusted relay's events do not get their signature verified.\n   */\n  trusted = false;\n  complaining = false;\n  debug;\n  static defaultValidationRatioUpdateFn = (relay, validatedCount, _nonValidatedCount) => {\n    if (relay.lowestValidationRatio === void 0 || relay.targetValidationRatio === void 0) return 1;\n    let newRatio = relay.validationRatio;\n    if (relay.validationRatio > relay.targetValidationRatio) {\n      const factor = validatedCount / 100;\n      newRatio = Math.max(relay.lowestValidationRatio, relay.validationRatio - factor);\n    }\n    if (newRatio < relay.validationRatio) {\n      return newRatio;\n    }\n    return relay.validationRatio;\n  };\n  constructor(url, authPolicy, ndk) {\n    super();\n    this.url = normalizeRelayUrl(url);\n    this.scores = /* @__PURE__ */ new Map();\n    this.debug = debug__WEBPACK_IMPORTED_MODULE_1__(`ndk:relay:${url}`);\n    this.connectivity = new NDKRelayConnectivity(this, ndk);\n    this.connectivity.netDebug = ndk?.netDebug;\n    this.req = this.connectivity.req.bind(this.connectivity);\n    this.close = this.connectivity.close.bind(this.connectivity);\n    this.subs = new NDKRelaySubscriptionManager(this, ndk.subManager);\n    this.publisher = new NDKRelayPublisher(this);\n    this.authPolicy = authPolicy;\n    this.targetValidationRatio = ndk?.initialValidationRatio;\n    this.lowestValidationRatio = ndk?.lowestValidationRatio;\n    this.validationRatioFn = (ndk?.validationRatioFn ?? _NDKRelay.defaultValidationRatioUpdateFn).bind(this);\n    this.updateValidationRatio();\n    if (!ndk) {\n      console.trace(\"relay created without ndk\");\n    }\n  }\n  updateValidationRatio() {\n    setTimeout(() => {\n      this.updateValidationRatio();\n    }, 3e4);\n  }\n  get status() {\n    return this.connectivity.status;\n  }\n  get connectionStats() {\n    return this.connectivity.connectionStats;\n  }\n  /**\n   * Connects to the relay.\n   */\n  async connect(timeoutMs, reconnect = true) {\n    return this.connectivity.connect(timeoutMs, reconnect);\n  }\n  /**\n   * Disconnects from the relay.\n   */\n  disconnect() {\n    if (this.status === 1 /* DISCONNECTED */) {\n      return;\n    }\n    this.connectivity.disconnect();\n  }\n  /**\n   * Queues or executes the subscription of a specific set of filters\n   * within this relay.\n   *\n   * @param subscription NDKSubscription this filters belong to.\n   * @param filters Filters to execute\n   */\n  subscribe(subscription, filters) {\n    this.subs.addSubscription(subscription, filters);\n  }\n  /**\n   * Publishes an event to the relay with an optional timeout.\n   *\n   * If the relay is not connected, the event will be published when the relay connects,\n   * unless the timeout is reached before the relay connects.\n   *\n   * @param event The event to publish\n   * @param timeoutMs The timeout for the publish operation in milliseconds\n   * @returns A promise that resolves when the event has been published or rejects if the operation times out\n   */\n  async publish(event, timeoutMs = 2500) {\n    return this.publisher.publish(event, timeoutMs);\n  }\n  referenceTags() {\n    return [[\"r\", this.url]];\n  }\n  addValidatedEvent() {\n    this.validatedEventCount++;\n  }\n  addNonValidatedEvent() {\n    this.nonValidatedEventCount++;\n  }\n  /**\n   * The current validation ratio this relay has achieved.\n   */\n  get validationRatio() {\n    if (this.nonValidatedEventCount === 0) {\n      return 1;\n    }\n    return this.validatedEventCount / (this.validatedEventCount + this.nonValidatedEventCount);\n  }\n  shouldValidateEvent() {\n    if (this.trusted) {\n      return false;\n    }\n    if (this.targetValidationRatio === void 0) {\n      return true;\n    }\n    return this.validationRatio < this.targetValidationRatio;\n  }\n  get connected() {\n    return this.connectivity.connected;\n  }\n  req;\n  close;\n};\n\n// src/relay/sets/index.ts\nvar NDKPublishError = class extends Error {\n  errors;\n  publishedToRelays;\n  /**\n   * Intended relay set where the publishing was intended to happen.\n   */\n  intendedRelaySet;\n  constructor(message, errors, publishedToRelays, intendedRelaySet) {\n    super(message);\n    this.errors = errors;\n    this.publishedToRelays = publishedToRelays;\n    this.intendedRelaySet = intendedRelaySet;\n  }\n  get relayErrors() {\n    const errors = [];\n    for (const [relay, err] of this.errors) {\n      errors.push(`${relay.url}: ${err}`);\n    }\n    return errors.join(\"\\n\");\n  }\n};\nvar NDKRelaySet = class _NDKRelaySet {\n  relays;\n  debug;\n  ndk;\n  pool;\n  constructor(relays, ndk, pool) {\n    this.relays = relays;\n    this.ndk = ndk;\n    this.pool = pool ?? ndk.pool;\n    this.debug = ndk.debug.extend(\"relayset\");\n  }\n  /**\n   * Adds a relay to this set.\n   */\n  addRelay(relay) {\n    this.relays.add(relay);\n  }\n  get relayUrls() {\n    return Array.from(this.relays).map((r) => r.url);\n  }\n  /**\n   * Creates a relay set from a list of relay URLs.\n   *\n   * If no connection to the relay is found in the pool it will temporarily\n   * connect to it.\n   *\n   * @param relayUrls - list of relay URLs to include in this set\n   * @param ndk\n   * @param connect - whether to connect to the relay immediately if it was already in the pool but not connected\n   * @returns NDKRelaySet\n   */\n  static fromRelayUrls(relayUrls, ndk, connect = true, pool) {\n    pool = pool ?? ndk.pool;\n    if (!pool) throw new Error(\"No pool provided\");\n    const relays = /* @__PURE__ */ new Set();\n    for (const url of relayUrls) {\n      const relay = pool.relays.get(normalizeRelayUrl(url));\n      if (relay) {\n        if (relay.status < 5 /* CONNECTED */ && connect) {\n          relay.connect();\n        }\n        relays.add(relay);\n      } else {\n        const temporaryRelay = new NDKRelay(normalizeRelayUrl(url), ndk?.relayAuthDefaultPolicy, ndk);\n        pool.useTemporaryRelay(temporaryRelay, void 0, `requested from fromRelayUrls ${relayUrls}`);\n        relays.add(temporaryRelay);\n      }\n    }\n    return new _NDKRelaySet(new Set(relays), ndk, pool);\n  }\n  /**\n   * Publish an event to all relays in this relay set.\n   *\n   * This method implements a robust mechanism for publishing events to multiple relays with\n   * built-in handling for race conditions, timeouts, and partial failures. The implementation\n   * uses a dual-tracking mechanism to ensure accurate reporting of which relays successfully\n   * received an event.\n   *\n   * Key aspects of this implementation:\n   *\n   * 1. DUAL-TRACKING MECHANISM:\n   *    - Promise-based tracking: Records successes/failures from the promises returned by relay.publish()\n   *    - Event-based tracking: Listens for 'relay:published' events that indicate successful publishing\n   *    This approach ensures we don't miss successful publishes even if there are subsequent errors in\n   *    the promise chain.\n   *\n   * 2. RACE CONDITION HANDLING:\n   *    - If a relay emits a success event but later fails in the promise chain, we still count it as a success\n   *    - If a relay times out after successfully publishing, we still count it as a success\n   *    - All relay operations happen in parallel, with proper tracking regardless of completion order\n   *\n   * 3. TIMEOUT MANAGEMENT:\n   *    - Individual timeouts for each relay operation\n   *    - Proper cleanup of timeouts to prevent memory leaks\n   *    - Clear timeout error reporting\n   *\n   * 4. ERROR HANDLING:\n   *    - Detailed tracking of specific errors for each failed relay\n   *    - Special handling for ephemeral events (which don't expect acknowledgement)\n   *    - RequiredRelayCount parameter to control the minimum success threshold\n   *\n   * @param event Event to publish\n   * @param timeoutMs Timeout in milliseconds for each relay publish operation\n   * @param requiredRelayCount The minimum number of relays we expect the event to be published to\n   * @returns A set of relays the event was published to\n   * @throws {NDKPublishError} If the event could not be published to at least `requiredRelayCount` relays\n   * @example\n   * ```typescript\n   * const relaySet = new NDKRelaySet(new Set([relay1, relay2]), ndk);\n   * const publishedToRelays = await relaySet.publish(event);\n   * // publishedToRelays can contain relay1, relay2, both, or none\n   * // depending on which relays the event was successfully published to\n   * if (publishedToRelays.size > 0) {\n   *   console.log(\"Event published to at least one relay\");\n   * }\n   * ```\n   */\n  async publish(event, timeoutMs, requiredRelayCount = 1) {\n    const publishedToRelays = /* @__PURE__ */ new Set();\n    const errors = /* @__PURE__ */ new Map();\n    const isEphemeral2 = event.isEphemeral();\n    event.publishStatus = \"pending\";\n    const relayPublishedHandler = (relay) => {\n      publishedToRelays.add(relay);\n    };\n    event.on(\"relay:published\", relayPublishedHandler);\n    try {\n      const promises = Array.from(this.relays).map((relay) => {\n        return new Promise((resolve) => {\n          const timeoutId = timeoutMs ? setTimeout(() => {\n            if (!publishedToRelays.has(relay)) {\n              errors.set(relay, new Error(`Publish timeout after ${timeoutMs}ms`));\n              resolve(false);\n            }\n          }, timeoutMs) : null;\n          relay.publish(event, timeoutMs).then((success) => {\n            if (timeoutId) clearTimeout(timeoutId);\n            if (success) {\n              publishedToRelays.add(relay);\n              resolve(true);\n            } else {\n              resolve(false);\n            }\n          }).catch((err) => {\n            if (timeoutId) clearTimeout(timeoutId);\n            if (!isEphemeral2) {\n              errors.set(relay, err);\n            }\n            resolve(false);\n          });\n        });\n      });\n      await Promise.all(promises);\n      if (publishedToRelays.size < requiredRelayCount) {\n        if (!isEphemeral2) {\n          const error = new NDKPublishError(\n            \"Not enough relays received the event\",\n            errors,\n            publishedToRelays,\n            this\n          );\n          event.publishStatus = \"error\";\n          event.publishError = error;\n          this.ndk?.emit(\"event:publish-failed\", event, error, this.relayUrls);\n          throw error;\n        }\n      } else {\n        event.publishStatus = \"success\";\n        event.emit(\"published\", { relaySet: this, publishedToRelays });\n      }\n      return publishedToRelays;\n    } finally {\n      event.off(\"relay:published\", relayPublishedHandler);\n    }\n  }\n  get size() {\n    return this.relays.size;\n  }\n};\n\n// src/relay/sets/calculate.ts\nvar d = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:outbox:calculate\");\nasync function calculateRelaySetFromEvent(ndk, event) {\n  const relays = /* @__PURE__ */ new Set();\n  const authorWriteRelays = await getWriteRelaysFor(ndk, event.pubkey);\n  if (authorWriteRelays) {\n    authorWriteRelays.forEach((relayUrl) => {\n      const relay = ndk.pool?.getRelay(relayUrl);\n      if (relay) relays.add(relay);\n    });\n  }\n  let relayHints = event.tags.filter((tag) => [\"a\", \"e\"].includes(tag[0])).map((tag) => tag[2]).filter((url) => url?.startsWith(\"wss://\")).filter((url) => {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }).map((url) => normalizeRelayUrl(url));\n  relayHints = Array.from(new Set(relayHints)).slice(0, 5);\n  relayHints.forEach((relayUrl) => {\n    const relay = ndk.pool?.getRelay(relayUrl, true, true);\n    if (relay) {\n      d(\"Adding relay hint %s\", relayUrl);\n      relays.add(relay);\n    }\n  });\n  const pTags = event.getMatchingTags(\"p\").map((tag) => tag[1]);\n  if (pTags.length < 5) {\n    const pTaggedRelays = Array.from(\n      chooseRelayCombinationForPubkeys(ndk, pTags, \"read\", {\n        preferredRelays: new Set(authorWriteRelays)\n      }).keys()\n    );\n    pTaggedRelays.forEach((relayUrl) => {\n      const relay = ndk.pool?.getRelay(relayUrl, false, true);\n      if (relay) {\n        d(\"Adding p-tagged relay %s\", relayUrl);\n        relays.add(relay);\n      }\n    });\n  } else {\n    d(\"Too many p-tags to consider %d\", pTags.length);\n  }\n  ndk.pool?.permanentAndConnectedRelays().forEach((relay) => relays.add(relay));\n  return new NDKRelaySet(relays, ndk);\n}\nfunction calculateRelaySetsFromFilter(ndk, filters, pool) {\n  const result = /* @__PURE__ */ new Map();\n  const authors = /* @__PURE__ */ new Set();\n  filters.forEach((filter) => {\n    if (filter.authors) {\n      filter.authors.forEach((author) => authors.add(author));\n    }\n  });\n  if (authors.size > 0) {\n    const authorToRelaysMap = getRelaysForFilterWithAuthors(ndk, Array.from(authors));\n    for (const relayUrl of authorToRelaysMap.keys()) {\n      result.set(relayUrl, []);\n    }\n    for (const filter of filters) {\n      if (filter.authors) {\n        for (const [relayUrl, authors2] of authorToRelaysMap.entries()) {\n          const authorFilterAndRelayPubkeyIntersection = filter.authors.filter(\n            (author) => authors2.includes(author)\n          );\n          result.set(relayUrl, [\n            ...result.get(relayUrl),\n            {\n              ...filter,\n              // Overwrite authors sent to this relay with the authors that were\n              // present in the filter and are also present in the relay\n              authors: authorFilterAndRelayPubkeyIntersection\n            }\n          ]);\n        }\n      } else {\n        for (const relayUrl of authorToRelaysMap.keys()) {\n          result.set(relayUrl, [...result.get(relayUrl), filter]);\n        }\n      }\n    }\n  } else {\n    if (ndk.explicitRelayUrls) {\n      ndk.explicitRelayUrls.forEach((relayUrl) => {\n        result.set(relayUrl, filters);\n      });\n    }\n  }\n  if (result.size === 0) {\n    pool.permanentAndConnectedRelays().slice(0, 5).forEach((relay) => {\n      result.set(relay.url, filters);\n    });\n  }\n  return result;\n}\nfunction calculateRelaySetsFromFilters(ndk, filters, pool) {\n  const a = calculateRelaySetsFromFilter(ndk, filters, pool);\n  return a;\n}\n\n// src/events/content-tagger.ts\n\nfunction mergeTags(tags1, tags2) {\n  const tagMap = /* @__PURE__ */ new Map();\n  const generateKey = (tag) => tag.join(\",\");\n  const isContained = (smaller, larger) => {\n    return smaller.every((value, index) => value === larger[index]);\n  };\n  const processTag = (tag) => {\n    for (const [key, existingTag] of tagMap) {\n      if (isContained(existingTag, tag) || isContained(tag, existingTag)) {\n        if (tag.length >= existingTag.length) {\n          tagMap.set(key, tag);\n        }\n        return;\n      }\n    }\n    tagMap.set(generateKey(tag), tag);\n  };\n  tags1.concat(tags2).forEach(processTag);\n  return Array.from(tagMap.values());\n}\nfunction uniqueTag(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  const sameLength = aLength === bLength;\n  if (sameLength) {\n    if (a.every((v, i) => v === b[i])) {\n      return [a];\n    }\n    return [a, b];\n  }\n  if (aLength > bLength && a.every((v, i) => v === b[i])) {\n    return [a];\n  }\n  if (bLength > aLength && b.every((v, i) => v === a[i])) {\n    return [b];\n  }\n  return [a, b];\n}\nvar hashtagRegex = /(?<=\\s|^)(#[^\\s!@#$%^&*()=+./,[{\\]};:'\"?><]+)/g;\nfunction generateHashtags(content) {\n  const hashtags = content.match(hashtagRegex);\n  const tagIds = /* @__PURE__ */ new Set();\n  const tag = /* @__PURE__ */ new Set();\n  if (hashtags) {\n    for (const hashtag of hashtags) {\n      if (tagIds.has(hashtag.slice(1))) continue;\n      tag.add(hashtag.slice(1));\n      tagIds.add(hashtag.slice(1));\n    }\n  }\n  return Array.from(tag);\n}\nasync function generateContentTags(content, tags = []) {\n  const tagRegex = /(@|nostr:)(npub|nprofile|note|nevent|naddr)[a-zA-Z0-9]+/g;\n  const promises = [];\n  const addTagIfNew = (t) => {\n    if (!tags.find((t2) => [\"q\", t[0]].includes(t2[0]) && t2[1] === t[1])) {\n      tags.push(t);\n    }\n  };\n  content = content.replace(tagRegex, (tag) => {\n    try {\n      const entity = tag.split(/(@|nostr:)/)[2];\n      const { type, data } = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(entity);\n      let t;\n      switch (type) {\n        case \"npub\":\n          t = [\"p\", data];\n          break;\n        case \"nprofile\":\n          t = [\"p\", data.pubkey];\n          break;\n        case \"note\":\n          promises.push(\n            new Promise(async (resolve) => {\n              addTagIfNew([\"q\", data, await maybeGetEventRelayUrl(entity)]);\n              resolve();\n            })\n          );\n          break;\n        case \"nevent\":\n          promises.push(\n            new Promise(async (resolve) => {\n              const { id, author } = data;\n              let { relays } = data;\n              if (!relays || relays.length === 0) {\n                relays = [await maybeGetEventRelayUrl(entity)];\n              }\n              addTagIfNew([\"q\", id, relays[0]]);\n              if (author) addTagIfNew([\"p\", author]);\n              resolve();\n            })\n          );\n          break;\n        case \"naddr\":\n          promises.push(\n            new Promise(async (resolve) => {\n              const id = [data.kind, data.pubkey, data.identifier].join(\":\");\n              let relays = data.relays ?? [];\n              if (relays.length === 0) {\n                relays = [await maybeGetEventRelayUrl(entity)];\n              }\n              addTagIfNew([\"q\", id, relays[0]]);\n              addTagIfNew([\"p\", data.pubkey]);\n              resolve();\n            })\n          );\n          break;\n        default:\n          return tag;\n      }\n      if (t) addTagIfNew(t);\n      return `nostr:${entity}`;\n    } catch (_error) {\n      return tag;\n    }\n  });\n  await Promise.all(promises);\n  const newTags = generateHashtags(content).map((hashtag) => [\"t\", hashtag]);\n  tags = mergeTags(tags, newTags);\n  return { content, tags };\n}\nasync function maybeGetEventRelayUrl(_nip19Id) {\n  return \"\";\n}\n\n// src/events/encryption.ts\nasync function encrypt(recipient, signer, scheme = \"nip44\") {\n  let encrypted;\n  if (!this.ndk) throw new Error(\"No NDK instance found!\");\n  let currentSigner = signer;\n  if (!currentSigner) {\n    this.ndk.assertSigner();\n    currentSigner = this.ndk.signer;\n  }\n  if (!currentSigner) throw new Error(\"no NDK signer\");\n  const currentRecipient = recipient || (() => {\n    const pTags = this.getMatchingTags(\"p\");\n    if (pTags.length !== 1) {\n      throw new Error(\"No recipient could be determined and no explicit recipient was provided\");\n    }\n    return this.ndk.getUser({ pubkey: pTags[0][1] });\n  })();\n  if (scheme === \"nip44\" && await isEncryptionEnabled(currentSigner, \"nip44\")) {\n    encrypted = await currentSigner.encrypt(currentRecipient, this.content, \"nip44\");\n  }\n  if ((!encrypted || scheme === \"nip04\") && await isEncryptionEnabled(currentSigner, \"nip04\")) {\n    encrypted = await currentSigner.encrypt(currentRecipient, this.content, \"nip04\");\n  }\n  if (!encrypted) throw new Error(\"Failed to encrypt event.\");\n  this.content = encrypted;\n}\nasync function decrypt(sender, signer, scheme) {\n  if (this.ndk?.cacheAdapter?.getDecryptedEvent) {\n    let cachedEvent = null;\n    if (typeof this.ndk.cacheAdapter.getDecryptedEvent === \"function\") {\n      cachedEvent = this.ndk.cacheAdapter.getDecryptedEvent(this.id);\n    }\n    if (cachedEvent) {\n      this.content = cachedEvent.content;\n      return;\n    }\n  }\n  let decrypted;\n  if (!this.ndk) throw new Error(\"No NDK instance found!\");\n  let currentSigner = signer;\n  if (!currentSigner) {\n    this.ndk.assertSigner();\n    currentSigner = this.ndk.signer;\n  }\n  if (!currentSigner) throw new Error(\"no NDK signer\");\n  const currentSender = sender || this.author;\n  if (!currentSender) throw new Error(\"No sender provided and no author available\");\n  const currentScheme = scheme || (this.content.match(/\\\\?iv=/) ? \"nip04\" : \"nip44\");\n  if ((currentScheme === \"nip04\" || this.kind === 4) && await isEncryptionEnabled(currentSigner, \"nip04\") && this.content.search(\"\\\\?iv=\")) {\n    decrypted = await currentSigner.decrypt(currentSender, this.content, \"nip04\");\n  }\n  if (!decrypted && currentScheme === \"nip44\" && await isEncryptionEnabled(currentSigner, \"nip44\")) {\n    decrypted = await currentSigner.decrypt(currentSender, this.content, \"nip44\");\n  }\n  if (!decrypted) throw new Error(\"Failed to decrypt event.\");\n  this.content = decrypted;\n  if (this.ndk?.cacheAdapter?.addDecryptedEvent) {\n    this.ndk.cacheAdapter.addDecryptedEvent(this);\n  }\n}\nasync function isEncryptionEnabled(signer, scheme) {\n  if (!signer.encryptionEnabled) return false;\n  if (!scheme) return true;\n  return Boolean(await signer.encryptionEnabled(scheme));\n}\n\n// src/thread/index.ts\nfunction eventsBySameAuthor(op, events) {\n  const eventsByAuthor = /* @__PURE__ */ new Map();\n  eventsByAuthor.set(op.id, op);\n  events.forEach((event) => {\n    if (event.pubkey === op.pubkey) {\n      eventsByAuthor.set(event.id, event);\n    }\n  });\n  return eventsByAuthor;\n}\nvar hasMarkers = (event, tagType) => {\n  return event.getMatchingTags(tagType).some((tag) => tag[3] && tag[3] !== \"\");\n};\nfunction eventIsReply(op, event, threadIds = /* @__PURE__ */ new Set(), tagType) {\n  tagType ??= op.tagType();\n  const tags = event.getMatchingTags(tagType);\n  threadIds.add(op.tagId());\n  if (threadIds.has(event.tagId())) return false;\n  const heedExplicitReplyMarker = () => {\n    let eventIsTagged = false;\n    for (const tag of tags) {\n      if (tag[3] === \"reply\") return threadIds.has(tag[1]);\n      const markerIsEmpty = tag[3] === \"\" || tag[3] === void 0;\n      const markerIsRoot = tag[3] === \"root\";\n      if (tag[1] === op.tagId() && (markerIsEmpty || markerIsRoot)) {\n        eventIsTagged = markerIsRoot ? \"root\" : true;\n      }\n    }\n    if (!eventIsTagged) return false;\n    if (eventIsTagged === \"root\") return true;\n  };\n  const explicitReplyMarker = heedExplicitReplyMarker();\n  if (explicitReplyMarker !== void 0) return explicitReplyMarker;\n  if (hasMarkers(event, tagType)) return false;\n  const expectedTags = op.getMatchingTags(\"e\").map((tag) => tag[1]);\n  expectedTags.push(op.id);\n  return event.getMatchingTags(\"e\").every((tag) => expectedTags.includes(tag[1]));\n}\nfunction eventThreads(op, events) {\n  const eventsByAuthor = eventsBySameAuthor(op, events);\n  const threadEvents = events.filter((event) => eventIsPartOfThread(op, event, eventsByAuthor));\n  return threadEvents.sort((a, b) => a.created_at - b.created_at);\n}\nfunction getEventReplyId(event) {\n  const replyTag = getReplyTag(event);\n  if (replyTag) return replyTag[1];\n  const rootTag = getRootTag(event);\n  if (rootTag) return rootTag[1];\n}\nfunction isEventOriginalPost(event) {\n  return getEventReplyId(event) === void 0;\n}\nfunction eventThreadIds(op, events) {\n  const threadIds = /* @__PURE__ */ new Map();\n  const threadEvents = eventThreads(op, events);\n  threadEvents.forEach((event) => threadIds.set(event.id, event));\n  return threadIds;\n}\nfunction eventReplies(op, events, threadEventIds) {\n  threadEventIds ??= new Set(eventThreadIds(op, events).keys());\n  return events.filter((event) => eventIsReply(op, event, threadEventIds));\n}\nfunction eventIsPartOfThread(op, event, eventsByAuthor) {\n  if (op.pubkey !== event.pubkey) return false;\n  const taggedEventIds = event.getMatchingTags(\"e\").map((tag) => tag[1]);\n  const allTaggedEventsAreByOriginalAuthor = taggedEventIds.every((id) => eventsByAuthor.has(id));\n  return allTaggedEventsAreByOriginalAuthor;\n}\nfunction eventHasETagMarkers(event) {\n  for (const tag of event.tags) {\n    if (tag[0] === \"e\" && (tag[3] ?? \"\").length > 0) return true;\n  }\n  return false;\n}\nfunction getRootEventId(event, searchTag) {\n  searchTag ??= event.tagType();\n  const rootEventTag = getRootTag(event, searchTag);\n  if (rootEventTag) return rootEventTag[1];\n  const replyTag = getReplyTag(event, searchTag);\n  return replyTag?.[1];\n}\nfunction getRootTag(event, searchTag) {\n  searchTag ??= event.tagType();\n  const rootEventTag = event.tags.find(isTagRootTag);\n  if (!rootEventTag) {\n    if (eventHasETagMarkers(event)) return;\n    const matchingTags = event.getMatchingTags(searchTag);\n    if (matchingTags.length < 3) return matchingTags[0];\n  }\n  return rootEventTag;\n}\nvar nip22RootTags = /* @__PURE__ */ new Set([\"A\", \"E\", \"I\"]);\nvar nip22ReplyTags = /* @__PURE__ */ new Set([\"a\", \"e\", \"i\"]);\nfunction getReplyTag(event, searchTag) {\n  if (event.kind === 1111 /* GenericReply */) {\n    let replyTag2;\n    for (const tag of event.tags) {\n      if (nip22RootTags.has(tag[0])) replyTag2 = tag;\n      else if (nip22ReplyTags.has(tag[0])) {\n        replyTag2 = tag;\n        break;\n      }\n    }\n    return replyTag2;\n  }\n  searchTag ??= event.tagType();\n  let hasMarkers2 = false;\n  let replyTag;\n  for (const tag of event.tags) {\n    if (tag[0] !== searchTag) continue;\n    if ((tag[3] ?? \"\").length > 0) hasMarkers2 = true;\n    if (hasMarkers2 && tag[3] === \"reply\") return tag;\n    if (hasMarkers2 && tag[3] === \"root\") replyTag = tag;\n    if (!hasMarkers2) replyTag = tag;\n  }\n  return replyTag;\n}\nfunction isTagRootTag(tag) {\n  return tag[0] === \"E\" || tag[3] === \"root\";\n}\n\n// src/events/fetch-tagged-event.ts\nasync function fetchTaggedEvent(tag, marker) {\n  if (!this.ndk) throw new Error(\"NDK instance not found\");\n  const t = this.getMatchingTags(tag, marker);\n  if (t.length === 0) return void 0;\n  const [_, id, hint] = t[0];\n  let relay = hint !== \"\" ? this.ndk.pool.getRelay(hint) : void 0;\n  const event = await this.ndk.fetchEvent(id, {}, relay);\n  return event;\n}\nasync function fetchRootEvent(subOpts) {\n  if (!this.ndk) throw new Error(\"NDK instance not found\");\n  const rootTag = getRootTag(this);\n  if (!rootTag) return void 0;\n  return this.ndk.fetchEventFromTag(rootTag, this, subOpts);\n}\nasync function fetchReplyEvent(subOpts) {\n  if (!this.ndk) throw new Error(\"NDK instance not found\");\n  const replyTag = getReplyTag(this);\n  if (!replyTag) return void 0;\n  return this.ndk.fetchEventFromTag(replyTag, this, subOpts);\n}\n\n// src/events/kind.ts\nfunction isReplaceable() {\n  if (this.kind === void 0) throw new Error(\"Kind not set\");\n  return [0, 3].includes(this.kind) || this.kind >= 1e4 && this.kind < 2e4 || this.kind >= 3e4 && this.kind < 4e4;\n}\nfunction isEphemeral() {\n  if (this.kind === void 0) throw new Error(\"Kind not set\");\n  return this.kind >= 2e4 && this.kind < 3e4;\n}\nfunction isParamReplaceable() {\n  if (this.kind === void 0) throw new Error(\"Kind not set\");\n  return this.kind >= 3e4 && this.kind < 4e4;\n}\n\n// src/events/nip19.ts\n\nvar DEFAULT_RELAY_COUNT = 2;\nfunction encode(maxRelayCount = DEFAULT_RELAY_COUNT) {\n  let relays = [];\n  if (this.onRelays.length > 0) {\n    relays = this.onRelays.map((relay) => relay.url);\n  } else if (this.relay) {\n    relays = [this.relay.url];\n  }\n  if (relays.length > maxRelayCount) {\n    relays = relays.slice(0, maxRelayCount);\n  }\n  if (this.isParamReplaceable()) {\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.naddrEncode({\n      kind: this.kind,\n      pubkey: this.pubkey,\n      identifier: this.replaceableDTag(),\n      relays\n    });\n  }\n  if (relays.length > 0) {\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.neventEncode({\n      id: this.tagId(),\n      relays,\n      author: this.pubkey\n    });\n  }\n  return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.noteEncode(this.tagId());\n}\n\n// src/events/repost.ts\nasync function repost(publish = true, signer) {\n  if (!signer && publish) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    signer = this.ndk.signer;\n  }\n  const e = new NDKEvent(this.ndk, {\n    kind: getKind(this)\n  });\n  if (!this.isProtected) e.content = JSON.stringify(this.rawEvent());\n  e.tag(this);\n  if (this.kind !== 1 /* Text */) {\n    e.tags.push([\"k\", `${this.kind}`]);\n  }\n  if (signer) await e.sign(signer);\n  if (publish) await e.publish();\n  return e;\n}\nfunction getKind(event) {\n  if (event.kind === 1) {\n    return 6 /* Repost */;\n  }\n  return 16 /* GenericRepost */;\n}\n\n// src/events/serializer.ts\nfunction serialize(includeSig = false, includeId = false) {\n  const payload = [0, this.pubkey, this.created_at, this.kind, this.tags, this.content];\n  if (includeSig) payload.push(this.sig);\n  if (includeId) payload.push(this.id);\n  return JSON.stringify(payload);\n}\nfunction deserialize(serializedEvent) {\n  const eventArray = JSON.parse(serializedEvent);\n  const ret = {\n    pubkey: eventArray[1],\n    created_at: eventArray[2],\n    kind: eventArray[3],\n    tags: eventArray[4],\n    content: eventArray[5]\n  };\n  if (eventArray.length >= 7) {\n    const first = eventArray[6];\n    const second = eventArray[7];\n    if (first && first.length === 128) {\n      ret.sig = first;\n      if (second && second.length === 64) {\n        ret.id = second;\n      }\n    } else if (first && first.length === 64) {\n      ret.id = first;\n      if (second && second.length === 128) {\n        ret.sig = second;\n      }\n    }\n  }\n  return ret;\n}\n\n// src/events/validation.ts\n\n\n\n\n\n// src/events/signature.ts\nvar worker;\nvar processingQueue = {};\nfunction signatureVerificationInit(w) {\n  worker = w;\n  worker.onmessage = (msg) => {\n    const [eventId, result] = msg.data;\n    const record = processingQueue[eventId];\n    if (!record) {\n      console.error(\"No record found for event\", eventId);\n      return;\n    }\n    delete processingQueue[eventId];\n    for (const resolve of record.resolves) {\n      resolve(result);\n    }\n  };\n}\nasync function verifySignatureAsync(event, _persist) {\n  const promise = new Promise((resolve) => {\n    const serialized = event.serialize();\n    let enqueue = false;\n    if (!processingQueue[event.id]) {\n      processingQueue[event.id] = { event, resolves: [] };\n      enqueue = true;\n    }\n    processingQueue[event.id].resolves.push(resolve);\n    if (!enqueue) return;\n    worker?.postMessage({\n      serialized,\n      id: event.id,\n      sig: event.sig,\n      pubkey: event.pubkey\n    });\n  });\n  return promise;\n}\n\n// src/events/validation.ts\nvar PUBKEY_REGEX = /^[a-f0-9]{64}$/;\nfunction validate() {\n  if (typeof this.kind !== \"number\") return false;\n  if (typeof this.content !== \"string\") return false;\n  if (typeof this.created_at !== \"number\") return false;\n  if (typeof this.pubkey !== \"string\") return false;\n  if (!this.pubkey.match(PUBKEY_REGEX)) return false;\n  if (!Array.isArray(this.tags)) return false;\n  for (let i = 0; i < this.tags.length; i++) {\n    const tag = this.tags[i];\n    if (!Array.isArray(tag)) return false;\n    for (let j = 0; j < tag.length; j++) {\n      if (typeof tag[j] === \"object\") return false;\n    }\n  }\n  return true;\n}\nvar verifiedSignatures = new typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__.LRUCache({\n  maxSize: 1e3,\n  entryExpirationTimeInMS: 6e4\n});\nfunction verifySignature(persist) {\n  if (typeof this.signatureVerified === \"boolean\") return this.signatureVerified;\n  const prevVerification = verifiedSignatures.get(this.id);\n  if (prevVerification !== null) {\n    this.signatureVerified = !!prevVerification;\n    return this.signatureVerified;\n  }\n  try {\n    if (this.ndk?.asyncSigVerification) {\n      verifySignatureAsync(this, persist).then((result) => {\n        if (persist) {\n          this.signatureVerified = result;\n          if (result) verifiedSignatures.set(this.id, this.sig);\n        }\n        if (!result) {\n          this.ndk?.emit(\"event:invalid-sig\", this);\n          verifiedSignatures.set(this.id, false);\n        }\n      });\n    } else {\n      const hash = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(new TextEncoder().encode(this.serialize()));\n      const res = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__.schnorr.verify(this.sig, hash, this.pubkey);\n      if (res) verifiedSignatures.set(this.id, this.sig);\n      else verifiedSignatures.set(this.id, false);\n      this.signatureVerified = res;\n      return res;\n    }\n  } catch (_err) {\n    this.signatureVerified = false;\n    return false;\n  }\n}\nfunction getEventHash() {\n  return getEventHashFromSerializedEvent(this.serialize());\n}\nfunction getEventHashFromSerializedEvent(serializedEvent) {\n  const eventHash = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(new TextEncoder().encode(serializedEvent));\n  return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(eventHash);\n}\n\n// src/events/index.ts\nvar skipClientTagOnKinds = /* @__PURE__ */ new Set([\n  0 /* Metadata */,\n  4 /* EncryptedDirectMessage */,\n  1059 /* GiftWrap */,\n  13 /* GiftWrapSeal */,\n  3 /* Contacts */,\n  9734 /* ZapRequest */,\n  5 /* EventDeletion */\n]);\nvar NDKEvent = class _NDKEvent extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  ndk;\n  created_at;\n  content = \"\";\n  tags = [];\n  kind;\n  id = \"\";\n  sig;\n  pubkey = \"\";\n  signatureVerified;\n  _author = void 0;\n  /**\n   * The relay that this event was first received from.\n   */\n  relay;\n  /**\n   * The relays that this event was received from and/or successfully published to.\n   */\n  get onRelays() {\n    let res = [];\n    if (!this.ndk) {\n      if (this.relay) res.push(this.relay);\n    } else {\n      res = this.ndk.subManager.seenEvents.get(this.id) || [];\n    }\n    return res;\n  }\n  /**\n   * The status of the publish operation.\n   */\n  publishStatus = \"success\";\n  publishError;\n  constructor(ndk, event) {\n    super();\n    this.ndk = ndk;\n    this.created_at = event?.created_at;\n    this.content = event?.content || \"\";\n    this.tags = event?.tags || [];\n    this.id = event?.id || \"\";\n    this.sig = event?.sig;\n    this.pubkey = event?.pubkey || \"\";\n    this.kind = event?.kind;\n    if (event instanceof _NDKEvent) {\n      if (this.relay) {\n        this.relay = event.relay;\n        this.ndk?.subManager.seenEvent(event.id, this.relay);\n      }\n      this.publishStatus = event.publishStatus;\n      this.publishError = event.publishError;\n    }\n  }\n  /**\n   * Deserialize an NDKEvent from a serialized payload.\n   * @param ndk\n   * @param event\n   * @returns\n   */\n  static deserialize(ndk, event) {\n    return new _NDKEvent(ndk, deserialize(event));\n  }\n  /**\n   * Returns the event as is.\n   */\n  rawEvent() {\n    return {\n      created_at: this.created_at,\n      content: this.content,\n      tags: this.tags,\n      kind: this.kind,\n      pubkey: this.pubkey,\n      id: this.id,\n      sig: this.sig\n    };\n  }\n  set author(user) {\n    this.pubkey = user.pubkey;\n    this._author = user;\n    this._author.ndk ??= this.ndk;\n  }\n  /**\n   * Returns an NDKUser for the author of the event.\n   */\n  get author() {\n    if (this._author) return this._author;\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    const user = this.ndk.getUser({ pubkey: this.pubkey });\n    this._author = user;\n    return user;\n  }\n  /**\n   * NIP-73 tagging of external entities\n   * @param entity to be tagged\n   * @param type of the entity\n   * @param markerUrl to be used as the marker URL\n   *\n   * @example\n   * ```typescript\n   * event.tagExternal(\"https://example.com/article/123#nostr\", \"url\");\n   * event.tags => [[\"i\", \"https://example.com/123\"], [\"k\", \"https://example.com\"]]\n   * ```\n   *\n   * @example tag a podcast:item:guid\n   * ```typescript\n   * event.tagExternal(\"e32b4890-b9ea-4aef-a0bf-54b787833dc5\", \"podcast:item:guid\");\n   * event.tags => [[\"i\", \"podcast:item:guid:e32b4890-b9ea-4aef-a0bf-54b787833dc5\"], [\"k\", \"podcast:item:guid\"]]\n   * ```\n   *\n   * @see https://github.com/nostr-protocol/nips/blob/master/73.md\n   */\n  tagExternal(entity, type, markerUrl) {\n    const iTag = [\"i\"];\n    const kTag = [\"k\"];\n    switch (type) {\n      case \"url\": {\n        const url = new URL(entity);\n        url.hash = \"\";\n        iTag.push(url.toString());\n        kTag.push(`${url.protocol}//${url.host}`);\n        break;\n      }\n      case \"hashtag\":\n        iTag.push(`#${entity.toLowerCase()}`);\n        kTag.push(\"#\");\n        break;\n      case \"geohash\":\n        iTag.push(`geo:${entity.toLowerCase()}`);\n        kTag.push(\"geo\");\n        break;\n      case \"isbn\":\n        iTag.push(`isbn:${entity.replace(/-/g, \"\")}`);\n        kTag.push(\"isbn\");\n        break;\n      case \"podcast:guid\":\n        iTag.push(`podcast:guid:${entity}`);\n        kTag.push(\"podcast:guid\");\n        break;\n      case \"podcast:item:guid\":\n        iTag.push(`podcast:item:guid:${entity}`);\n        kTag.push(\"podcast:item:guid\");\n        break;\n      case \"podcast:publisher:guid\":\n        iTag.push(`podcast:publisher:guid:${entity}`);\n        kTag.push(\"podcast:publisher:guid\");\n        break;\n      case \"isan\":\n        iTag.push(`isan:${entity.split(\"-\").slice(0, 4).join(\"-\")}`);\n        kTag.push(\"isan\");\n        break;\n      case \"doi\":\n        iTag.push(`doi:${entity.toLowerCase()}`);\n        kTag.push(\"doi\");\n        break;\n      default:\n        throw new Error(`Unsupported NIP-73 entity type: ${type}`);\n    }\n    if (markerUrl) {\n      iTag.push(markerUrl);\n    }\n    this.tags.push(iTag);\n    this.tags.push(kTag);\n  }\n  /**\n   * Tag a user with an optional marker.\n   * @param target What is to be tagged. Can be an NDKUser, NDKEvent, or an NDKTag.\n   * @param marker The marker to use in the tag.\n   * @param skipAuthorTag Whether to explicitly skip adding the author tag of the event.\n   * @param forceTag Force a specific tag to be used instead of the default \"e\" or \"a\" tag.\n   * @example\n   * ```typescript\n   * reply.tag(opEvent, \"reply\");\n   * // reply.tags => [[\"e\", <id>, <relay>, \"reply\"]]\n   * ```\n   */\n  tag(target, marker, skipAuthorTag, forceTag) {\n    let tags = [];\n    const isNDKUser = target.fetchProfile !== void 0;\n    if (isNDKUser) {\n      forceTag ??= \"p\";\n      const tag = [forceTag, target.pubkey];\n      if (marker) tag.push(...[\"\", marker]);\n      tags.push(tag);\n    } else if (target instanceof _NDKEvent) {\n      const event = target;\n      skipAuthorTag ??= event?.pubkey === this.pubkey;\n      tags = event.referenceTags(marker, skipAuthorTag, forceTag);\n      for (const pTag of event.getMatchingTags(\"p\")) {\n        if (pTag[1] === this.pubkey) continue;\n        if (this.tags.find((t) => t[0] === \"p\" && t[1] === pTag[1])) continue;\n        this.tags.push([\"p\", pTag[1]]);\n      }\n    } else if (Array.isArray(target)) {\n      tags = [target];\n    } else {\n      throw new Error(\"Invalid argument\", target);\n    }\n    this.tags = mergeTags(this.tags, tags);\n  }\n  /**\n   * Return a NostrEvent object, trying to fill in missing fields\n   * when possible, adding tags when necessary.\n   * @param pubkey {string} The pubkey of the user who the event belongs to.\n   * @returns {Promise<NostrEvent>} A promise that resolves to a NostrEvent.\n   */\n  async toNostrEvent(pubkey) {\n    if (!pubkey && this.pubkey === \"\") {\n      const user = await this.ndk?.signer?.user();\n      this.pubkey = user?.pubkey || \"\";\n    }\n    if (!this.created_at) {\n      this.created_at = Math.floor(Date.now() / 1e3);\n    }\n    const { content, tags } = await this.generateTags();\n    this.content = content || \"\";\n    this.tags = tags;\n    try {\n      this.id = this.getEventHash();\n    } catch (_e) {\n    }\n    return this.rawEvent();\n  }\n  serialize = serialize.bind(this);\n  getEventHash = getEventHash.bind(this);\n  validate = validate.bind(this);\n  verifySignature = verifySignature.bind(this);\n  /**\n   * Is this event replaceable (whether parameterized or not)?\n   *\n   * This will return true for kind 0, 3, 10k-20k and 30k-40k\n   */\n  isReplaceable = isReplaceable.bind(this);\n  isEphemeral = isEphemeral.bind(this);\n  isDvm = () => this.kind && this.kind >= 5e3 && this.kind <= 7e3;\n  /**\n   * Is this event parameterized replaceable?\n   *\n   * This will return true for kind 30k-40k\n   */\n  isParamReplaceable = isParamReplaceable.bind(this);\n  /**\n   * Encodes a bech32 id.\n   *\n   * @param relays {string[]} The relays to encode in the id\n   * @returns {string} - Encoded naddr, note or nevent.\n   */\n  encode = encode.bind(this);\n  encrypt = encrypt.bind(this);\n  decrypt = decrypt.bind(this);\n  /**\n   * Get all tags with the given name\n   * @param tagName {string} The name of the tag to search for\n   * @returns {NDKTag[]} An array of the matching tags\n   */\n  getMatchingTags(tagName, marker) {\n    const t = this.tags.filter((tag) => tag[0] === tagName);\n    if (marker === void 0) return t;\n    return t.filter((tag) => tag[3] === marker);\n  }\n  /**\n   * Check if the event has a tag with the given name\n   * @param tagName\n   * @param marker\n   * @returns\n   */\n  hasTag(tagName, marker) {\n    return this.tags.some((tag) => tag[0] === tagName && (!marker || tag[3] === marker));\n  }\n  /**\n   * Get the first tag with the given name\n   * @param tagName Tag name to search for\n   * @returns The value of the first tag with the given name, or undefined if no such tag exists\n   */\n  tagValue(tagName, marker) {\n    const tags = this.getMatchingTags(tagName, marker);\n    if (tags.length === 0) return void 0;\n    return tags[0][1];\n  }\n  /**\n   * Gets the NIP-31 \"alt\" tag of the event.\n   */\n  get alt() {\n    return this.tagValue(\"alt\");\n  }\n  /**\n   * Sets the NIP-31 \"alt\" tag of the event. Use this to set an alt tag so\n   * clients that don't handle a particular event kind can display something\n   * useful for users.\n   */\n  set alt(alt) {\n    this.removeTag(\"alt\");\n    if (alt) this.tags.push([\"alt\", alt]);\n  }\n  /**\n   * Gets the NIP-33 \"d\" tag of the event.\n   */\n  get dTag() {\n    return this.tagValue(\"d\");\n  }\n  /**\n   * Sets the NIP-33 \"d\" tag of the event.\n   */\n  set dTag(value) {\n    this.removeTag(\"d\");\n    if (value) this.tags.push([\"d\", value]);\n  }\n  /**\n   * Remove all tags with the given name (e.g. \"d\", \"a\", \"p\")\n   * @param tagName Tag name(s) to search for and remove\n   * @param marker Optional marker to check for too\n   *\n   * @example\n   * Remove a tags with a \"defer\" marker\n   * ```typescript\n   * event.tags = [\n   *   [\"a\", \"....\", \"defer\"],\n   *   [\"a\", \"....\", \"no-defer\"],\n   * ]\n   *\n   * event.removeTag(\"a\", \"defer\");\n   *\n   * // event.tags => [[\"a\", \"....\", \"no-defer\"]]\n   *\n   * @returns {void}\n   */\n  removeTag(tagName, marker) {\n    const tagNames = Array.isArray(tagName) ? tagName : [tagName];\n    this.tags = this.tags.filter((tag) => {\n      const include = tagNames.includes(tag[0]);\n      const hasMarker = marker ? tag[3] === marker : true;\n      return !(include && hasMarker);\n    });\n  }\n  /**\n   * Replace a tag with a new value. If not found, it will be added.\n   * @param tag The tag to replace.\n   * @param value The new value for the tag.\n   */\n  replaceTag(tag) {\n    this.removeTag(tag[0]);\n    this.tags.push(tag);\n  }\n  /**\n   * Sign the event if a signer is present.\n   *\n   * It will generate tags.\n   * Repleacable events will have their created_at field set to the current time.\n   * @param signer {NDKSigner} The NDKSigner to use to sign the event\n   * @returns {Promise<string>} A Promise that resolves to the signature of the signed event.\n   */\n  async sign(signer) {\n    if (!signer) {\n      this.ndk?.assertSigner();\n      signer = this.ndk?.signer;\n    } else {\n      this.author = await signer.user();\n    }\n    const nostrEvent = await this.toNostrEvent();\n    this.sig = await signer.sign(nostrEvent);\n    return this.sig;\n  }\n  /**\n   *\n   * @param relaySet\n   * @param timeoutMs\n   * @param requiredRelayCount\n   * @returns\n   */\n  async publishReplaceable(relaySet, timeoutMs, requiredRelayCount) {\n    this.id = \"\";\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.sig = \"\";\n    return this.publish(relaySet, timeoutMs, requiredRelayCount);\n  }\n  /**\n   * Attempt to sign and then publish an NDKEvent to a given relaySet.\n   * If no relaySet is provided, the relaySet will be calculated by NDK.\n   * @param relaySet {NDKRelaySet} The relaySet to publish the even to.\n   * @param timeoutM {number} The timeout for the publish operation in milliseconds.\n   * @param requiredRelayCount The number of relays that must receive the event for the publish to be considered successful.\n   * @returns A promise that resolves to the relays the event was published to.\n   */\n  async publish(relaySet, timeoutMs, requiredRelayCount) {\n    if (!this.sig) await this.sign();\n    if (!this.ndk) throw new Error(\"NDKEvent must be associated with an NDK instance to publish\");\n    if (!relaySet || relaySet.size === 0) {\n      relaySet = this.ndk.devWriteRelaySet || await calculateRelaySetFromEvent(this.ndk, this);\n    }\n    if (this.kind === 5 /* EventDeletion */ && this.ndk.cacheAdapter?.deleteEventIds) {\n      const eTags = this.getMatchingTags(\"e\").map((tag) => tag[1]);\n      this.ndk.cacheAdapter.deleteEventIds(eTags);\n    }\n    const rawEvent = this.rawEvent();\n    if (this.ndk.cacheAdapter?.addUnpublishedEvent && shouldTrackUnpublishedEvent(this)) {\n      try {\n        this.ndk.cacheAdapter.addUnpublishedEvent(this, relaySet.relayUrls);\n      } catch (e) {\n        console.error(\"Error adding unpublished event to cache\", e);\n      }\n    }\n    if (this.kind === 5 /* EventDeletion */ && this.ndk.cacheAdapter?.deleteEventIds) {\n      this.ndk.cacheAdapter.deleteEventIds(this.getMatchingTags(\"e\").map((tag) => tag[1]));\n    }\n    this.ndk.subManager.dispatchEvent(rawEvent, void 0, true);\n    const relays = await relaySet.publish(this, timeoutMs, requiredRelayCount);\n    relays.forEach((relay) => this.ndk?.subManager.seenEvent(this.id, relay));\n    return relays;\n  }\n  /**\n   * Generates tags for users, notes, and other events tagged in content.\n   * Will also generate random \"d\" tag for parameterized replaceable events where needed.\n   * @returns {ContentTag} The tags and content of the event.\n   */\n  async generateTags() {\n    let tags = [];\n    const g = await generateContentTags(this.content, this.tags);\n    const content = g.content;\n    tags = g.tags;\n    if (this.kind && this.isParamReplaceable()) {\n      const dTag = this.getMatchingTags(\"d\")[0];\n      if (!dTag) {\n        const title = this.tagValue(\"title\");\n        const randLength = title ? 6 : 16;\n        let str = [...Array(randLength)].map(() => Math.random().toString(36)[2]).join(\"\");\n        if (title && title.length > 0) {\n          str = `${title.replace(/[^a-z0-9]+/gi, \"-\").replace(/^-|-$/g, \"\")}-${str}`;\n        }\n        tags.push([\"d\", str]);\n      }\n    }\n    if (this.shouldAddClientTag) {\n      const clientTag = [\"client\", this.ndk?.clientName ?? \"\"];\n      if (this.ndk?.clientNip89) clientTag.push(this.ndk?.clientNip89);\n      tags.push(clientTag);\n    } else if (this.shouldStripClientTag) {\n      tags = tags.filter((tag) => tag[0] !== \"client\");\n    }\n    return { content: content || \"\", tags };\n  }\n  get shouldAddClientTag() {\n    if (!this.ndk?.clientName && !this.ndk?.clientNip89) return false;\n    if (skipClientTagOnKinds.has(this.kind)) return false;\n    if (this.isEphemeral()) return false;\n    if (this.isReplaceable() && !this.isParamReplaceable()) return false;\n    if (this.isDvm()) return false;\n    if (this.hasTag(\"client\")) return false;\n    return true;\n  }\n  get shouldStripClientTag() {\n    return skipClientTagOnKinds.has(this.kind);\n  }\n  muted() {\n    const authorMutedEntry = this.ndk?.mutedIds.get(this.pubkey);\n    if (authorMutedEntry && authorMutedEntry === \"p\") return \"author\";\n    const eventTagReference = this.tagReference();\n    const eventMutedEntry = this.ndk?.mutedIds.get(eventTagReference[1]);\n    if (eventMutedEntry && eventMutedEntry === eventTagReference[0]) return \"event\";\n    return null;\n  }\n  /**\n   * Returns the \"d\" tag of a parameterized replaceable event or throws an error if the event isn't\n   * a parameterized replaceable event.\n   * @returns {string} the \"d\" tag of the event.\n   *\n   * @deprecated Use `dTag` instead.\n   */\n  replaceableDTag() {\n    if (this.kind && this.kind >= 3e4 && this.kind <= 4e4) {\n      const dTag = this.getMatchingTags(\"d\")[0];\n      const dTagId = dTag ? dTag[1] : \"\";\n      return dTagId;\n    }\n    throw new Error(\"Event is not a parameterized replaceable event\");\n  }\n  /**\n   * Provides a deduplication key for the event.\n   *\n   * For kinds 0, 3, 10k-20k this will be the event <kind>:<pubkey>\n   * For kinds 30k-40k this will be the event <kind>:<pubkey>:<d-tag>\n   * For all other kinds this will be the event id\n   */\n  deduplicationKey() {\n    if (this.kind === 0 || this.kind === 3 || this.kind && this.kind >= 1e4 && this.kind < 2e4) {\n      return `${this.kind}:${this.pubkey}`;\n    }\n    return this.tagId();\n  }\n  /**\n   * Returns the id of the event or, if it's a parameterized event, the generated id of the event using \"d\" tag, pubkey, and kind.\n   * @returns {string} The id\n   */\n  tagId() {\n    if (this.isParamReplaceable()) {\n      return this.tagAddress();\n    }\n    return this.id;\n  }\n  /**\n   * Returns a stable reference value for a replaceable event.\n   *\n   * Param replaceable events are returned in the expected format of `<kind>:<pubkey>:<d-tag>`.\n   * Kind-replaceable events are returned in the format of `<kind>:<pubkey>:`.\n   *\n   * @returns {string} A stable reference value for replaceable events\n   */\n  tagAddress() {\n    if (this.isParamReplaceable()) {\n      const dTagId = this.dTag ?? \"\";\n      return `${this.kind}:${this.pubkey}:${dTagId}`;\n    }\n    if (this.isReplaceable()) {\n      return `${this.kind}:${this.pubkey}:`;\n    }\n    throw new Error(\"Event is not a replaceable event\");\n  }\n  /**\n   * Determines the type of tag that can be used to reference this event from another event.\n   * @returns {string} The tag type\n   * @example\n   * event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   * event.tagType(); // \"a\"\n   */\n  tagType() {\n    return this.isParamReplaceable() ? \"a\" : \"e\";\n  }\n  /**\n   * Get the tag that can be used to reference this event from another event.\n   *\n   * Consider using referenceTags() instead (unless you have a good reason to use this)\n   *\n   * @example\n   *     event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   *     event.tagReference(); // [\"a\", \"30000:pubkey:d-code\"]\n   *\n   *     event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\n   *     event.tagReference(); // [\"e\", \"eventid\"]\n   * @returns {NDKTag} The NDKTag object referencing this event\n   */\n  tagReference(marker) {\n    let tag;\n    if (this.isParamReplaceable()) {\n      tag = [\"a\", this.tagAddress()];\n    } else {\n      tag = [\"e\", this.tagId()];\n    }\n    if (this.relay) {\n      tag.push(this.relay.url);\n    } else {\n      tag.push(\"\");\n    }\n    tag.push(marker ?? \"\");\n    if (!this.isParamReplaceable()) {\n      tag.push(this.pubkey);\n    }\n    return tag;\n  }\n  /**\n   * Get the tags that can be used to reference this event from another event\n   * @param marker The marker to use in the tag\n   * @param skipAuthorTag Whether to explicitly skip adding the author tag of the event\n   * @param forceTag Force a specific tag to be used instead of the default \"e\" or \"a\" tag\n   * @example\n   *     event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   *     event.referenceTags(); // [[\"a\", \"30000:pubkey:d-code\"], [\"e\", \"parent-id\"]]\n   *\n   *     event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\n   *     event.referenceTags(); // [[\"e\", \"parent-id\"]]\n   * @returns {NDKTag} The NDKTag object referencing this event\n   */\n  referenceTags(marker, skipAuthorTag, forceTag) {\n    let tags = [];\n    if (this.isParamReplaceable()) {\n      tags = [\n        [forceTag ?? \"a\", this.tagAddress()],\n        [forceTag ?? \"e\", this.id]\n      ];\n    } else {\n      tags = [[forceTag ?? \"e\", this.id]];\n    }\n    tags = tags.map((tag) => {\n      if (tag[0] === \"e\" || marker) {\n        tag.push(this.relay?.url ?? \"\");\n      } else if (this.relay?.url) {\n        tag.push(this.relay?.url);\n      }\n      return tag;\n    });\n    tags.forEach((tag) => {\n      if (tag[0] === \"e\") {\n        tag.push(marker ?? \"\");\n        tag.push(this.pubkey);\n      } else if (marker) {\n        tag.push(marker);\n      }\n    });\n    tags = [...tags, ...this.getMatchingTags(\"h\")];\n    if (!skipAuthorTag) tags.push(...this.author.referenceTags());\n    return tags;\n  }\n  /**\n   * Provides the filter that will return matching events for this event.\n   *\n   * @example\n   *    event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   *    event.filter(); // { \"#a\": [\"30000:pubkey:d-code\"] }\n   * @example\n   *    event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\n   *    event.filter(); // { \"#e\": [\"eventid\"] }\n   *\n   * @returns The filter that will return matching events for this event\n   */\n  filter() {\n    if (this.isParamReplaceable()) {\n      return { \"#a\": [this.tagId()] };\n    }\n    return { \"#e\": [this.tagId()] };\n  }\n  nip22Filter() {\n    if (this.isParamReplaceable()) {\n      return { \"#A\": [this.tagId()] };\n    }\n    return { \"#E\": [this.tagId()] };\n  }\n  /**\n   * Generates a deletion event of the current event\n   *\n   * @param reason The reason for the deletion\n   * @param publish Whether to publish the deletion event automatically\n   * @returns The deletion event\n   */\n  async delete(reason, publish = true) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    const e = new _NDKEvent(this.ndk, {\n      kind: 5 /* EventDeletion */,\n      content: reason || \"\"\n    });\n    e.tag(this, void 0, true);\n    e.tags.push([\"k\", this.kind?.toString()]);\n    if (publish) {\n      this.emit(\"deleted\");\n      await e.publish();\n    }\n    return e;\n  }\n  /**\n   * Establishes whether this is a NIP-70-protectede event.\n   * @@satisfies NIP-70\n   */\n  set isProtected(val) {\n    this.removeTag(\"-\");\n    if (val) this.tags.push([\"-\"]);\n  }\n  /**\n   * Whether this is a NIP-70-protected event.\n   * @@satisfies NIP-70\n   */\n  get isProtected() {\n    return this.hasTag(\"-\");\n  }\n  /**\n   * Fetch an event tagged with the given tag following relay hints if provided.\n   * @param tag The tag to search for\n   * @param marker The marker to use in the tag (e.g. \"root\")\n   * @returns The fetched event or null if no event was found, undefined if no matching tag was found in the event\n   * * @example\n   * const replyEvent = await ndk.fetchEvent(\"nevent1qqs8x8vnycyha73grv380gmvlury4wtmx0nr9a5ds2dngqwgu87wn6gpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3ql2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqz4cwjd\")\n   * const originalEvent = await replyEvent.fetchTaggedEvent(\"e\", \"reply\");\n   * console.log(replyEvent.encode() + \" is a reply to event \" + originalEvent?.encode());\n   */\n  fetchTaggedEvent = fetchTaggedEvent.bind(this);\n  /**\n   * Fetch the root event of the current event.\n   * @returns The fetched root event or null if no event was found\n   * @example\n   * const replyEvent = await ndk.fetchEvent(\"nevent1qqs8x8vnycyha73grv380gmvlury4wtmx0nr9a5ds2dngqwgu87wn6gpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3ql2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqz4cwjd\")\n   * const rootEvent = await replyEvent.fetchRootEvent();\n   * console.log(replyEvent.encode() + \" is a reply in the thread \" + rootEvent?.encode());\n   */\n  fetchRootEvent = fetchRootEvent.bind(this);\n  /**\n   * Fetch the event the current event is replying to.\n   * @returns The fetched reply event or null if no event was found\n   */\n  fetchReplyEvent = fetchReplyEvent.bind(this);\n  /**\n   * NIP-18 reposting event.\n   *\n   * @param publish Whether to publish the reposted event automatically @default true\n   * @param signer The signer to use for signing the reposted event\n   * @returns The reposted event\n   *\n   * @function\n   */\n  repost = repost.bind(this);\n  /**\n   * React to an existing event\n   *\n   * @param content The content of the reaction\n   */\n  async react(content, publish = true) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    const e = new _NDKEvent(this.ndk, {\n      kind: 7 /* Reaction */,\n      content\n    });\n    e.tag(this);\n    if (publish) await e.publish();\n    return e;\n  }\n  /**\n   * Checks whether the event is valid per underlying NIPs.\n   *\n   * This method is meant to be overridden by subclasses that implement specific NIPs\n   * to allow the enforcement of NIP-specific validation rules.\n   *\n   * Otherwise, it will only check for basic event properties.\n   *\n   */\n  get isValid() {\n    return this.validate();\n  }\n  get inspect() {\n    return JSON.stringify(this.rawEvent(), null, 4);\n  }\n  /**\n   * Dump the event to console for debugging purposes.\n   * Prints a JSON stringified version of rawEvent() with indentation\n   * and also lists all relay URLs for onRelays.\n   */\n  dump() {\n    console.debug(JSON.stringify(this.rawEvent(), null, 4));\n    console.debug(\"Event on relays:\", this.onRelays.map((relay) => relay.url).join(\", \"));\n  }\n  /**\n   * Creates a reply event for the current event.\n   *\n   * This function will use NIP-22 when appropriate (i.e. replies to non-kind:1 events).\n   * This function does not have side-effects; it will just return an event with the appropriate tags\n   * to generate the reply event; the caller is responsible for publishing the event.\n   */\n  reply() {\n    const reply = new _NDKEvent(this.ndk);\n    if (this.kind === 1) {\n      reply.kind = 1;\n      const opHasETag = this.hasTag(\"e\");\n      if (opHasETag) {\n        reply.tags = [\n          ...reply.tags,\n          ...this.getMatchingTags(\"e\"),\n          ...this.getMatchingTags(\"p\"),\n          ...this.getMatchingTags(\"a\"),\n          ...this.referenceTags(\"reply\")\n        ];\n      } else {\n        reply.tag(this, \"root\");\n      }\n    } else {\n      reply.kind = 1111 /* GenericReply */;\n      const carryOverTags = [\"A\", \"E\", \"I\", \"P\"];\n      const rootTags = this.tags.filter((tag) => carryOverTags.includes(tag[0]));\n      if (rootTags.length > 0) {\n        const rootKind = this.tagValue(\"K\");\n        reply.tags.push(...rootTags);\n        if (rootKind) reply.tags.push([\"K\", rootKind]);\n        const [type, id, _, ...extra] = this.tagReference();\n        const tag = [type, id, ...extra];\n        reply.tags.push(tag);\n      } else {\n        const [type, id, _, relayHint] = this.tagReference();\n        const tag = [type, id, relayHint ?? \"\"];\n        if (type === \"e\") tag.push(this.pubkey);\n        reply.tags.push(tag);\n        const uppercaseTag = [...tag];\n        uppercaseTag[0] = uppercaseTag[0].toUpperCase();\n        reply.tags.push(uppercaseTag);\n        reply.tags.push([\"K\", this.kind?.toString()]);\n        reply.tags.push([\"P\", this.pubkey]);\n      }\n      reply.tags.push([\"k\", this.kind?.toString()]);\n      reply.tags.push(...this.getMatchingTags(\"p\"));\n      reply.tags.push([\"p\", this.pubkey]);\n    }\n    return reply;\n  }\n};\nvar untrackedUnpublishedEvents = /* @__PURE__ */ new Set([\n  24133 /* NostrConnect */,\n  13194 /* NostrWaletConnectInfo */,\n  23194 /* NostrWalletConnectReq */,\n  23195 /* NostrWalletConnectRes */\n]);\nfunction shouldTrackUnpublishedEvent(event) {\n  return !untrackedUnpublishedEvents.has(event.kind);\n}\n\n// src/relay/pool/index.ts\n\nvar NDKPool = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  // TODO: This should probably be an LRU cache\n  _relays = /* @__PURE__ */ new Map();\n  status = \"idle\";\n  autoConnectRelays = /* @__PURE__ */ new Set();\n  poolBlacklistRelayUrls = /* @__PURE__ */ new Set();\n  debug;\n  temporaryRelayTimers = /* @__PURE__ */ new Map();\n  flappingRelays = /* @__PURE__ */ new Set();\n  // A map to store timeouts for each flapping relay.\n  backoffTimes = /* @__PURE__ */ new Map();\n  ndk;\n  get blacklistRelayUrls() {\n    const val = new Set(this.ndk.blacklistRelayUrls);\n    this.poolBlacklistRelayUrls.forEach((url) => val.add(url));\n    return val;\n  }\n  /**\n   * @param relayUrls - The URLs of the relays to connect to.\n   * @param blacklistedRelayUrls - URLs to blacklist for this pool IN ADDITION to those blacklisted at the ndk-level\n   * @param ndk - The NDK instance.\n   * @param opts - Options for the pool.\n   */\n  constructor(relayUrls, blacklistedRelayUrls, ndk, {\n    debug: debug8,\n    name\n  } = {}) {\n    super();\n    this.debug = debug8 ?? ndk.debug.extend(\"pool\");\n    if (name) this._name = name;\n    this.ndk = ndk;\n    this.relayUrls = relayUrls;\n    this.poolBlacklistRelayUrls = new Set(blacklistedRelayUrls);\n    this.ndk.pools.push(this);\n  }\n  get relays() {\n    return this._relays;\n  }\n  set relayUrls(urls) {\n    this._relays.clear();\n    for (const relayUrl of urls) {\n      const relay = new NDKRelay(relayUrl, void 0, this.ndk);\n      relay.connectivity.netDebug = this.ndk.netDebug;\n      this.addRelay(relay);\n    }\n  }\n  _name = \"unnamed\";\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._name = name;\n    this.debug = this.debug.extend(name);\n  }\n  /**\n   * Adds a relay to the pool, and sets a timer to remove it if it is not used within the specified time.\n   * @param relay - The relay to add to the pool.\n   * @param removeIfUnusedAfter - The time in milliseconds to wait before removing the relay from the pool after it is no longer used.\n   */\n  useTemporaryRelay(relay, removeIfUnusedAfter = 3e4, filters) {\n    const relayAlreadyInPool = this.relays.has(relay.url);\n    if (!relayAlreadyInPool) {\n      this.addRelay(relay);\n      this.debug(\"Adding temporary relay %s for filters %o\", relay.url, filters);\n    }\n    const existingTimer = this.temporaryRelayTimers.get(relay.url);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n    }\n    if (!relayAlreadyInPool || existingTimer) {\n      const timer = setTimeout(() => {\n        if (this.ndk.explicitRelayUrls?.includes(relay.url)) return;\n        this.removeRelay(relay.url);\n      }, removeIfUnusedAfter);\n      this.temporaryRelayTimers.set(relay.url, timer);\n    }\n  }\n  /**\n   * Adds a relay to the pool.\n   *\n   * @param relay - The relay to add to the pool.\n   * @param connect - Whether or not to connect to the relay.\n   */\n  addRelay(relay, connect = true) {\n    const isAlreadyInPool = this.relays.has(relay.url);\n    const isBlacklisted = this.blacklistRelayUrls?.has(relay.url);\n    const isCustomRelayUrl = relay.url.includes(\"/npub1\");\n    let reconnect = true;\n    const relayUrl = relay.url;\n    if (isAlreadyInPool) return;\n    if (isBlacklisted) {\n      this.debug(`Refusing to add relay ${relayUrl}: blacklisted`);\n      return;\n    }\n    if (isCustomRelayUrl) {\n      this.debug(`Refusing to add relay ${relayUrl}: is a filter relay`);\n      return;\n    }\n    if (this.ndk.cacheAdapter?.getRelayStatus) {\n      const info = this.ndk.cacheAdapter.getRelayStatus(relayUrl);\n      if (info?.dontConnectBefore) {\n        if (info.dontConnectBefore > Date.now()) {\n          const delay = info.dontConnectBefore - Date.now();\n          this.debug(`Refusing to add relay ${relayUrl}: delayed connect for ${delay}ms`);\n          setTimeout(() => {\n            this.addRelay(relay, connect);\n          }, delay);\n          return;\n        }\n        reconnect = false;\n      }\n    }\n    const noticeHandler = (notice) => this.emit(\"notice\", relay, notice);\n    const connectHandler = () => this.handleRelayConnect(relayUrl);\n    const readyHandler = () => this.handleRelayReady(relay);\n    const disconnectHandler = () => this.emit(\"relay:disconnect\", relay);\n    const flappingHandler = () => this.handleFlapping(relay);\n    const authHandler = (challenge) => this.emit(\"relay:auth\", relay, challenge);\n    const authedHandler = () => this.emit(\"relay:authed\", relay);\n    relay.off(\"notice\", noticeHandler);\n    relay.off(\"connect\", connectHandler);\n    relay.off(\"ready\", readyHandler);\n    relay.off(\"disconnect\", disconnectHandler);\n    relay.off(\"flapping\", flappingHandler);\n    relay.off(\"auth\", authHandler);\n    relay.off(\"authed\", authedHandler);\n    relay.on(\"notice\", noticeHandler);\n    relay.on(\"connect\", connectHandler);\n    relay.on(\"ready\", readyHandler);\n    relay.on(\"disconnect\", disconnectHandler);\n    relay.on(\"flapping\", flappingHandler);\n    relay.on(\"auth\", authHandler);\n    relay.on(\"authed\", authedHandler);\n    relay.on(\"delayed-connect\", (delay) => {\n      if (this.ndk.cacheAdapter?.updateRelayStatus) {\n        this.ndk.cacheAdapter.updateRelayStatus(relay.url, {\n          dontConnectBefore: Date.now() + delay\n        });\n      }\n    });\n    this._relays.set(relayUrl, relay);\n    if (connect) this.autoConnectRelays.add(relayUrl);\n    if (connect && this.status === \"active\") {\n      this.emit(\"relay:connecting\", relay);\n      relay.connect(void 0, reconnect).catch((e) => {\n        this.debug(`Failed to connect to relay ${relayUrl}`, e);\n      });\n    }\n  }\n  /**\n   * Removes a relay from the pool.\n   * @param relayUrl - The URL of the relay to remove.\n   * @returns {boolean} True if the relay was removed, false if it was not found.\n   */\n  removeRelay(relayUrl) {\n    const relay = this.relays.get(relayUrl);\n    if (relay) {\n      relay.disconnect();\n      this.relays.delete(relayUrl);\n      this.autoConnectRelays.delete(relayUrl);\n      this.emit(\"relay:disconnect\", relay);\n      return true;\n    }\n    const existingTimer = this.temporaryRelayTimers.get(relayUrl);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n      this.temporaryRelayTimers.delete(relayUrl);\n    }\n    return false;\n  }\n  /**\n   * Checks whether a relay is already connected in the pool.\n   */\n  isRelayConnected(url) {\n    const normalizedUrl = normalizeRelayUrl(url);\n    const relay = this.relays.get(normalizedUrl);\n    if (!relay) return false;\n    return relay.status === 5 /* CONNECTED */;\n  }\n  /**\n   * Fetches a relay from the pool, or creates a new one if it does not exist.\n   *\n   * New relays will be attempted to be connected.\n   */\n  getRelay(url, connect = true, temporary = false, filters) {\n    let relay = this.relays.get(normalizeRelayUrl(url));\n    if (!relay) {\n      relay = new NDKRelay(url, void 0, this.ndk);\n      relay.connectivity.netDebug = this.ndk.netDebug;\n      if (temporary) {\n        this.useTemporaryRelay(relay, 3e4, filters);\n      } else {\n        this.addRelay(relay, connect);\n      }\n    }\n    return relay;\n  }\n  handleRelayConnect(relayUrl) {\n    const relay = this.relays.get(relayUrl);\n    if (!relay) {\n      console.error(\"NDK BUG: relay not found in pool\", { relayUrl });\n      return;\n    }\n    this.emit(\"relay:connect\", relay);\n    if (this.stats().connected === this.relays.size) {\n      this.emit(\"connect\");\n    }\n  }\n  handleRelayReady(relay) {\n    this.emit(\"relay:ready\", relay);\n  }\n  /**\n   * Attempts to establish a connection to each relay in the pool.\n   *\n   * @async\n   * @param {number} [timeoutMs] - Optional timeout in milliseconds for each connection attempt.\n   * @returns {Promise<void>} A promise that resolves when all connection attempts have completed.\n   * @throws {Error} If any of the connection attempts result in an error or timeout.\n   */\n  async connect(timeoutMs) {\n    const promises = [];\n    this.status = \"active\";\n    this.debug(`Connecting to ${this.relays.size} relays${timeoutMs ? `, timeout ${timeoutMs}...` : \"\"}`);\n    const relaysToConnect = new Set(this.autoConnectRelays.keys());\n    for (const relayUrl of relaysToConnect) {\n      const relay = this.relays.get(relayUrl);\n      if (!relay) {\n        continue;\n      }\n      const connectPromise = new Promise((resolve, reject) => {\n        this.emit(\"relay:connecting\", relay);\n        return relay.connect(timeoutMs).then(resolve).catch(reject);\n      });\n      if (timeoutMs) {\n        const timeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => reject(`Timed out after ${timeoutMs}ms`), timeoutMs);\n        });\n        promises.push(\n          Promise.race([connectPromise, timeoutPromise]).catch((e) => {\n            this.debug(`Failed to connect to relay ${relay.url}: ${e ?? \"No reason specified\"}`);\n          })\n        );\n      } else {\n        promises.push(connectPromise);\n      }\n    }\n    const maybeEmitConnect = () => {\n      const allConnected = this.stats().connected === this.relays.size;\n      const someConnected = this.stats().connected > 0;\n      if (!allConnected && someConnected) {\n        this.emit(\"connect\");\n      }\n    };\n    if (timeoutMs) setTimeout(maybeEmitConnect, timeoutMs);\n    await Promise.all(promises);\n    maybeEmitConnect();\n  }\n  checkOnFlappingRelays() {\n    const flappingRelaysCount = this.flappingRelays.size;\n    const totalRelays = this.relays.size;\n    if (flappingRelaysCount / totalRelays >= 0.8) {\n      for (const relayUrl of this.flappingRelays) {\n        this.backoffTimes.set(relayUrl, 0);\n      }\n    }\n  }\n  handleFlapping(relay) {\n    this.debug(`Relay ${relay.url} is flapping`);\n    let currentBackoff = this.backoffTimes.get(relay.url) || 5e3;\n    currentBackoff = currentBackoff * 2;\n    this.backoffTimes.set(relay.url, currentBackoff);\n    this.debug(`Backoff time for ${relay.url} is ${currentBackoff}ms`);\n    setTimeout(() => {\n      this.debug(`Attempting to reconnect to ${relay.url}`);\n      this.emit(\"relay:connecting\", relay);\n      relay.connect();\n      this.checkOnFlappingRelays();\n    }, currentBackoff);\n    relay.disconnect();\n    this.emit(\"flapping\", relay);\n  }\n  size() {\n    return this.relays.size;\n  }\n  /**\n   * Returns the status of each relay in the pool.\n   * @returns {NDKPoolStats} An object containing the number of relays in each status.\n   */\n  stats() {\n    const stats = {\n      total: 0,\n      connected: 0,\n      disconnected: 0,\n      connecting: 0\n    };\n    for (const relay of this.relays.values()) {\n      stats.total++;\n      if (relay.status === 5 /* CONNECTED */) {\n        stats.connected++;\n      } else if (relay.status === 1 /* DISCONNECTED */) {\n        stats.disconnected++;\n      } else if (relay.status === 4 /* CONNECTING */) {\n        stats.connecting++;\n      }\n    }\n    return stats;\n  }\n  connectedRelays() {\n    return Array.from(this.relays.values()).filter((relay) => relay.status >= 5 /* CONNECTED */);\n  }\n  permanentAndConnectedRelays() {\n    return Array.from(this.relays.values()).filter(\n      (relay) => relay.status >= 5 /* CONNECTED */ && !this.temporaryRelayTimers.has(relay.url)\n    );\n  }\n  /**\n   * Get a list of all relay urls in the pool.\n   */\n  urls() {\n    return Array.from(this.relays.keys());\n  }\n};\n\n// src/user/index.ts\n\n\n// src/events/kinds/nutzap/mint-list.ts\nvar NDKCashuMintList = class _NDKCashuMintList extends NDKEvent {\n  static kind = 10019 /* CashuMintList */;\n  static kinds = [10019 /* CashuMintList */];\n  _p2pk;\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 10019 /* CashuMintList */;\n  }\n  static from(event) {\n    return new _NDKCashuMintList(event.ndk, event);\n  }\n  set relays(urls) {\n    this.tags = this.tags.filter((t) => t[0] !== \"relay\");\n    for (const url of urls) {\n      this.tags.push([\"relay\", url]);\n    }\n  }\n  get relays() {\n    const r = [];\n    for (const tag of this.tags) {\n      if (tag[0] === \"relay\") {\n        r.push(tag[1]);\n      }\n    }\n    return r;\n  }\n  set mints(urls) {\n    this.tags = this.tags.filter((t) => t[0] !== \"mint\");\n    for (const url of urls) {\n      this.tags.push([\"mint\", url]);\n    }\n  }\n  get mints() {\n    const r = [];\n    for (const tag of this.tags) {\n      if (tag[0] === \"mint\") {\n        r.push(tag[1]);\n      }\n    }\n    return Array.from(new Set(r));\n  }\n  get p2pk() {\n    if (this._p2pk) {\n      return this._p2pk;\n    }\n    this._p2pk = this.tagValue(\"pubkey\") ?? this.pubkey;\n    return this._p2pk;\n  }\n  set p2pk(pubkey) {\n    this._p2pk = pubkey;\n    this.removeTag(\"pubkey\");\n    if (pubkey) {\n      this.tags.push([\"pubkey\", pubkey]);\n    }\n  }\n  get relaySet() {\n    return NDKRelaySet.fromRelayUrls(this.relays, this.ndk);\n  }\n};\n\n// src/subscription/index.ts\n\n\n// src/events/kinds/article.ts\nvar NDKArticle = class _NDKArticle extends NDKEvent {\n  static kind = 30023 /* Article */;\n  static kinds = [30023 /* Article */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30023 /* Article */;\n  }\n  /**\n   * Creates a NDKArticle from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKArticle from.\n   * @returns NDKArticle\n   */\n  static from(event) {\n    return new _NDKArticle(event.ndk, event);\n  }\n  /**\n   * Getter for the article title.\n   *\n   * @returns {string | undefined} - The article title if available, otherwise undefined.\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the article title.\n   *\n   * @param {string | undefined} title - The title to set for the article.\n   */\n  set title(title) {\n    this.removeTag(\"title\");\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Getter for the article image.\n   *\n   * @returns {string | undefined} - The article image if available, otherwise undefined.\n   */\n  get image() {\n    return this.tagValue(\"image\");\n  }\n  /**\n   * Setter for the article image.\n   *\n   * @param {string | undefined} image - The image to set for the article.\n   */\n  set image(image) {\n    this.removeTag(\"image\");\n    if (image) this.tags.push([\"image\", image]);\n  }\n  get summary() {\n    return this.tagValue(\"summary\");\n  }\n  set summary(summary) {\n    this.removeTag(\"summary\");\n    if (summary) this.tags.push([\"summary\", summary]);\n  }\n  /**\n   * Getter for the article's publication timestamp.\n   *\n   * @returns {number | undefined} - The Unix timestamp of when the article was published or undefined.\n   */\n  get published_at() {\n    const tag = this.tagValue(\"published_at\");\n    if (tag) {\n      let val = Number.parseInt(tag);\n      if (val > 1e12) {\n        val = Math.floor(val / 1e3);\n      }\n      return val;\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the article's publication timestamp.\n   *\n   * @param {number | undefined} timestamp - The Unix timestamp to set for the article's publication date.\n   */\n  set published_at(timestamp) {\n    this.removeTag(\"published_at\");\n    if (timestamp !== void 0) {\n      this.tags.push([\"published_at\", timestamp.toString()]);\n    }\n  }\n  /**\n   * Generates content tags for the article.\n   *\n   * This method first checks and sets the publication date if not available,\n   * and then generates content tags based on the base NDKEvent class.\n   *\n   * @returns {ContentTag} - The generated content tags.\n   */\n  async generateTags() {\n    super.generateTags();\n    if (!this.published_at) {\n      this.published_at = this.created_at;\n    }\n    return super.generateTags();\n  }\n  /**\n   * Getter for the article's URL.\n   *\n   * @returns {string | undefined} - The article's URL if available, otherwise undefined.\n   */\n  get url() {\n    return this.tagValue(\"url\");\n  }\n  /**\n   * Setter for the article's URL.\n   *\n   * @param {string | undefined} url - The URL to set for the article.\n   */\n  set url(url) {\n    if (url) {\n      this.tags.push([\"url\", url]);\n    } else {\n      this.removeTag(\"url\");\n    }\n  }\n};\n\n// src/events/kinds/cashu/token.ts\nfunction proofsTotalBalance(proofs) {\n  return proofs.reduce((acc, proof) => {\n    if (proof.amount < 0) {\n      throw new Error(\"proof amount is negative\");\n    }\n    return acc + proof.amount;\n  }, 0);\n}\nvar NDKCashuToken = class _NDKCashuToken extends NDKEvent {\n  _proofs = [];\n  _mint;\n  static kind = 7375 /* CashuToken */;\n  static kinds = [7375 /* CashuToken */];\n  /**\n   * Tokens that this token superseeds\n   */\n  _deletes = [];\n  original;\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 7375 /* CashuToken */;\n  }\n  static async from(event) {\n    const token = new _NDKCashuToken(event.ndk, event);\n    token.original = event;\n    try {\n      await token.decrypt();\n    } catch {\n      token.content = token.original.content;\n    }\n    try {\n      const content = JSON.parse(token.content);\n      token.proofs = content.proofs;\n      token.mint = content.mint ?? token.tagValue(\"mint\");\n      token.deletedTokens = content.del ?? [];\n      if (!Array.isArray(token.proofs)) return;\n    } catch (_e) {\n      return;\n    }\n    return token;\n  }\n  get proofs() {\n    return this._proofs;\n  }\n  set proofs(proofs) {\n    const cs = /* @__PURE__ */ new Set();\n    this._proofs = proofs.filter((proof) => {\n      if (cs.has(proof.C)) {\n        console.warn(\"Passed in proofs had duplicates, ignoring\", proof.C);\n        return false;\n      }\n      if (proof.amount < 0) {\n        console.warn(\"Invalid proof with negative amount\", proof);\n        return false;\n      }\n      cs.add(proof.C);\n      return true;\n    }).map(this.cleanProof);\n  }\n  /**\n   * Returns a minimal proof object with only essential properties\n   */\n  cleanProof(proof) {\n    return {\n      id: proof.id,\n      amount: proof.amount,\n      C: proof.C,\n      secret: proof.secret\n    };\n  }\n  async toNostrEvent(pubkey) {\n    if (!this.ndk) throw new Error(\"no ndk\");\n    if (!this.ndk.signer) throw new Error(\"no signer\");\n    const payload = {\n      proofs: this.proofs.map(this.cleanProof),\n      mint: this.mint,\n      del: this.deletedTokens ?? []\n    };\n    this.content = JSON.stringify(payload);\n    const user = await this.ndk.signer.user();\n    await this.encrypt(user, void 0, \"nip44\");\n    return super.toNostrEvent(pubkey);\n  }\n  set mint(mint) {\n    this._mint = mint;\n  }\n  get mint() {\n    return this._mint;\n  }\n  /**\n   * Tokens that were deleted by the creation of this token.\n   */\n  get deletedTokens() {\n    return this._deletes;\n  }\n  /**\n   * Marks tokens that were deleted by the creation of this token.\n   */\n  set deletedTokens(tokenIds) {\n    this._deletes = tokenIds;\n  }\n  get amount() {\n    return proofsTotalBalance(this.proofs);\n  }\n  async publish(relaySet, timeoutMs, requiredRelayCount) {\n    if (this.original) {\n      return this.original.publish(relaySet, timeoutMs, requiredRelayCount);\n    }\n    return super.publish(relaySet, timeoutMs, requiredRelayCount);\n  }\n};\n\n// src/events/kinds/highlight.ts\n\nvar NDKHighlight = class _NDKHighlight extends NDKEvent {\n  _article;\n  static kind = 9802 /* Highlight */;\n  static kinds = [9802 /* Highlight */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 9802 /* Highlight */;\n  }\n  static from(event) {\n    return new _NDKHighlight(event.ndk, event);\n  }\n  get url() {\n    return this.tagValue(\"r\");\n  }\n  /**\n   * Context tag.\n   */\n  set context(context) {\n    if (context === void 0) {\n      this.tags = this.tags.filter(([tag, _value]) => tag !== \"context\");\n    } else {\n      this.tags = this.tags.filter(([tag, _value]) => tag !== \"context\");\n      this.tags.push([\"context\", context]);\n    }\n  }\n  get context() {\n    return this.tags.find(([tag, _value]) => tag === \"context\")?.[1] ?? void 0;\n  }\n  /**\n   * Will return the article URL or NDKEvent if they have already been\n   * set (it won't attempt to load remote events)\n   */\n  get article() {\n    return this._article;\n  }\n  /**\n   * Article the highlight is coming from.\n   *\n   * @param article Article URL or NDKEvent.\n   */\n  set article(article) {\n    this._article = article;\n    if (typeof article === \"string\") {\n      this.tags.push([\"r\", article]);\n    } else {\n      this.tag(article);\n    }\n  }\n  getArticleTag() {\n    return this.getMatchingTags(\"a\")[0] || this.getMatchingTags(\"e\")[0] || this.getMatchingTags(\"r\")[0];\n  }\n  async getArticle() {\n    if (this._article !== void 0) return this._article;\n    let taggedBech32;\n    const articleTag = this.getArticleTag();\n    if (!articleTag) return void 0;\n    switch (articleTag[0]) {\n      case \"a\": {\n        const [kind, pubkey, identifier] = articleTag[1].split(\":\");\n        taggedBech32 = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.naddrEncode({\n          kind: Number.parseInt(kind),\n          pubkey,\n          identifier\n        });\n        break;\n      }\n      case \"e\":\n        taggedBech32 = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.noteEncode(articleTag[1]);\n        break;\n      case \"r\":\n        this._article = articleTag[1];\n        break;\n    }\n    if (taggedBech32) {\n      let a = await this.ndk?.fetchEvent(taggedBech32);\n      if (a) {\n        if (a.kind === 30023 /* Article */) {\n          a = NDKArticle.from(a);\n        }\n        this._article = a;\n      }\n    }\n    return this._article;\n  }\n};\n\n// src/utils/imeta.ts\nfunction mapImetaTag(tag) {\n  const data = {};\n  if (tag.length === 2) {\n    const parts = tag[1].split(\" \");\n    for (let i = 0; i < parts.length; i += 2) {\n      const key = parts[i];\n      const value = parts[i + 1];\n      if (key === \"fallback\") {\n        if (!data.fallback) data.fallback = [];\n        data.fallback.push(value);\n      } else {\n        data[key] = value;\n      }\n    }\n    return data;\n  }\n  const tags = tag.slice(1);\n  for (const val of tags) {\n    const parts = val.split(\" \");\n    const key = parts[0];\n    const value = parts.slice(1).join(\" \");\n    if (key === \"fallback\") {\n      if (!data.fallback) data.fallback = [];\n      data.fallback.push(value);\n    } else {\n      data[key] = value;\n    }\n  }\n  return data;\n}\nfunction imetaTagToTag(imeta) {\n  const tag = [\"imeta\"];\n  for (const [key, value] of Object.entries(imeta)) {\n    if (Array.isArray(value)) {\n      for (const v of value) {\n        tag.push(`${key} ${v}`);\n      }\n    } else if (value) {\n      tag.push(`${key} ${value}`);\n    }\n  }\n  return tag;\n}\n\n// src/events/kinds/image.ts\nvar NDKImage = class _NDKImage extends NDKEvent {\n  static kind = 20 /* Image */;\n  static kinds = [20 /* Image */];\n  _imetas;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 20 /* Image */;\n  }\n  /**\n   * Creates a NDKImage from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKImage from.\n   * @returns NDKImage\n   */\n  static from(event) {\n    return new _NDKImage(event.ndk, event.rawEvent());\n  }\n  get isValid() {\n    return this.imetas.length > 0;\n  }\n  get imetas() {\n    if (this._imetas) return this._imetas;\n    this._imetas = this.tags.filter((tag) => tag[0] === \"imeta\").map(mapImetaTag).filter((imeta) => !!imeta.url);\n    return this._imetas;\n  }\n  set imetas(tags) {\n    this._imetas = tags;\n    this.tags = this.tags.filter((tag) => tag[0] !== \"imeta\");\n    this.tags.push(...tags.map(imetaTagToTag));\n  }\n};\n\n// src/events/kinds/lists/index.ts\nvar NDKList = class _NDKList extends NDKEvent {\n  _encryptedTags;\n  static kinds = [\n    10063 /* BlossomList */,\n    30001 /* CategorizedBookmarkList */,\n    10004 /* CommunityList */,\n    10050 /* DirectMessageReceiveRelayList */,\n    10030 /* EmojiList */,\n    10015 /* InterestList */,\n    10001 /* PinList */,\n    10002 /* RelayList */,\n    10007 /* SearchRelayList */,\n    10006 /* BlockRelayList */,\n    10003 /* BookmarkList */\n  ];\n  /**\n   * Stores the number of bytes the content was before decryption\n   * to expire the cache when the content changes.\n   */\n  encryptedTagsLength;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30001 /* CategorizedBookmarkList */;\n  }\n  /**\n   * Wrap a NDKEvent into a NDKList\n   */\n  static from(ndkEvent) {\n    return new _NDKList(ndkEvent.ndk, ndkEvent);\n  }\n  /**\n   * Returns the title of the list. Falls back on fetching the name tag value.\n   */\n  get title() {\n    const titleTag = this.tagValue(\"title\") || this.tagValue(\"name\");\n    if (titleTag) return titleTag;\n    if (this.kind === 3 /* Contacts */) {\n      return \"Contacts\";\n    }\n    if (this.kind === 1e4 /* MuteList */) {\n      return \"Mute\";\n    }\n    if (this.kind === 10001 /* PinList */) {\n      return \"Pinned Notes\";\n    }\n    if (this.kind === 10002 /* RelayList */) {\n      return \"Relay Metadata\";\n    }\n    if (this.kind === 10003 /* BookmarkList */) {\n      return \"Bookmarks\";\n    }\n    if (this.kind === 10004 /* CommunityList */) {\n      return \"Communities\";\n    }\n    if (this.kind === 10005 /* PublicChatList */) {\n      return \"Public Chats\";\n    }\n    if (this.kind === 10006 /* BlockRelayList */) {\n      return \"Blocked Relays\";\n    }\n    if (this.kind === 10007 /* SearchRelayList */) {\n      return \"Search Relays\";\n    }\n    if (this.kind === 10050 /* DirectMessageReceiveRelayList */) {\n      return \"Direct Message Receive Relays\";\n    }\n    if (this.kind === 10015 /* InterestList */) {\n      return \"Interests\";\n    }\n    if (this.kind === 10030 /* EmojiList */) {\n      return \"Emojis\";\n    }\n    return this.tagValue(\"d\");\n  }\n  /**\n   * Sets the title of the list.\n   */\n  set title(title) {\n    this.removeTag([\"title\", \"name\"]);\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Returns the name of the list.\n   * @deprecated Please use \"title\" instead.\n   */\n  get name() {\n    return this.title;\n  }\n  /**\n   * Sets the name of the list.\n   * @deprecated Please use \"title\" instead. This method will use the `title` tag instead.\n   */\n  set name(name) {\n    this.title = name;\n  }\n  /**\n   * Returns the description of the list.\n   */\n  get description() {\n    return this.tagValue(\"description\");\n  }\n  /**\n   * Sets the description of the list.\n   */\n  set description(name) {\n    this.removeTag(\"description\");\n    if (name) this.tags.push([\"description\", name]);\n  }\n  /**\n   * Returns the image of the list.\n   */\n  get image() {\n    return this.tagValue(\"image\");\n  }\n  /**\n   * Sets the image of the list.\n   */\n  set image(name) {\n    this.removeTag(\"image\");\n    if (name) this.tags.push([\"image\", name]);\n  }\n  isEncryptedTagsCacheValid() {\n    return !!(this._encryptedTags && this.encryptedTagsLength === this.content.length);\n  }\n  /**\n   * Returns the decrypted content of the list.\n   */\n  async encryptedTags(useCache = true) {\n    if (useCache && this.isEncryptedTagsCacheValid()) return this._encryptedTags;\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    const user = await this.ndk.signer.user();\n    try {\n      if (this.content.length > 0) {\n        try {\n          const decryptedContent = await this.ndk.signer.decrypt(user, this.content);\n          const a = JSON.parse(decryptedContent);\n          if (a?.[0]) {\n            this.encryptedTagsLength = this.content.length;\n            return this._encryptedTags = a;\n          }\n          this.encryptedTagsLength = this.content.length;\n          return this._encryptedTags = [];\n        } catch (_e) {\n        }\n      }\n    } catch (_e) {\n    }\n    return [];\n  }\n  /**\n   * This method can be overriden to validate that a tag is valid for this list.\n   *\n   * (i.e. the NDKPersonList can validate that items are NDKUser instances)\n   */\n  validateTag(_tagValue) {\n    return true;\n  }\n  getItems(type) {\n    return this.tags.filter((tag) => tag[0] === type);\n  }\n  /**\n   * Returns the unecrypted items in this list.\n   */\n  get items() {\n    return this.tags.filter((t) => {\n      return ![\n        \"d\",\n        \"L\",\n        \"l\",\n        \"title\",\n        \"name\",\n        \"description\",\n        \"published_at\",\n        \"summary\",\n        \"image\",\n        \"thumb\",\n        \"alt\",\n        \"expiration\",\n        \"subject\",\n        \"client\"\n      ].includes(t[0]);\n    });\n  }\n  /**\n   * Adds a new item to the list.\n   * @param relay Relay to add\n   * @param mark Optional mark to add to the item\n   * @param encrypted Whether to encrypt the item\n   * @param position Where to add the item in the list (top or bottom)\n   */\n  async addItem(item, mark = void 0, encrypted = false, position = \"bottom\") {\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    let tags;\n    if (item instanceof NDKEvent) {\n      tags = [item.tagReference(mark)];\n    } else if (item instanceof NDKUser) {\n      tags = item.referenceTags();\n    } else if (item instanceof NDKRelay) {\n      tags = item.referenceTags();\n    } else if (Array.isArray(item)) {\n      tags = [item];\n    } else {\n      throw new Error(\"Invalid object type\");\n    }\n    if (mark) tags[0].push(mark);\n    if (encrypted) {\n      const user = await this.ndk.signer.user();\n      const currentList = await this.encryptedTags();\n      if (position === \"top\") currentList.unshift(...tags);\n      else currentList.push(...tags);\n      this._encryptedTags = currentList;\n      this.encryptedTagsLength = this.content.length;\n      this.content = JSON.stringify(currentList);\n      await this.encrypt(user);\n    } else {\n      if (position === \"top\") this.tags.unshift(...tags);\n      else this.tags.push(...tags);\n    }\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.emit(\"change\");\n  }\n  /**\n   * Removes an item from the list from both the encrypted and unencrypted lists.\n   * @param value value of item to remove from the list\n   * @param publish whether to publish the change\n   * @returns\n   */\n  async removeItemByValue(value, publish = true) {\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    const index = this.tags.findIndex((tag) => tag[1] === value);\n    if (index >= 0) {\n      this.tags.splice(index, 1);\n    }\n    const user = await this.ndk.signer.user();\n    const encryptedTags = await this.encryptedTags();\n    const encryptedIndex = encryptedTags.findIndex((tag) => tag[1] === value);\n    if (encryptedIndex >= 0) {\n      encryptedTags.splice(encryptedIndex, 1);\n      this._encryptedTags = encryptedTags;\n      this.encryptedTagsLength = this.content.length;\n      this.content = JSON.stringify(encryptedTags);\n      await this.encrypt(user);\n    }\n    if (publish) {\n      return this.publishReplaceable();\n    }\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.emit(\"change\");\n  }\n  /**\n   * Removes an item from the list.\n   *\n   * @param index The index of the item to remove.\n   * @param encrypted Whether to remove from the encrypted list or not.\n   */\n  async removeItem(index, encrypted) {\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    if (encrypted) {\n      const user = await this.ndk.signer.user();\n      const currentList = await this.encryptedTags();\n      currentList.splice(index, 1);\n      this._encryptedTags = currentList;\n      this.encryptedTagsLength = this.content.length;\n      this.content = JSON.stringify(currentList);\n      await this.encrypt(user);\n    } else {\n      this.tags.splice(index, 1);\n    }\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.emit(\"change\");\n    return this;\n  }\n  has(item) {\n    return this.items.some((tag) => tag[1] === item);\n  }\n  /**\n   * Creates a filter that will result in fetching\n   * the items of this list\n   * @example\n   * const list = new NDKList(...);\n   * const filters = list.filterForItems();\n   * const events = await ndk.fetchEvents(filters);\n   */\n  filterForItems() {\n    const ids = /* @__PURE__ */ new Set();\n    const nip33Queries = /* @__PURE__ */ new Map();\n    const filters = [];\n    for (const tag of this.items) {\n      if (tag[0] === \"e\" && tag[1]) {\n        ids.add(tag[1]);\n      } else if (tag[0] === \"a\" && tag[1]) {\n        const [kind, pubkey, dTag] = tag[1].split(\":\");\n        if (!kind || !pubkey) continue;\n        const key = `${kind}:${pubkey}`;\n        const item = nip33Queries.get(key) || [];\n        item.push(dTag || \"\");\n        nip33Queries.set(key, item);\n      }\n    }\n    if (ids.size > 0) {\n      filters.push({ ids: Array.from(ids) });\n    }\n    if (nip33Queries.size > 0) {\n      for (const [key, values] of nip33Queries.entries()) {\n        const [kind, pubkey] = key.split(\":\");\n        filters.push({\n          kinds: [Number.parseInt(kind)],\n          authors: [pubkey],\n          \"#d\": values\n        });\n      }\n    }\n    return filters;\n  }\n};\nvar lists_default = NDKList;\n\n// src/events/kinds/nutzap/index.ts\n\nvar NDKNutzap = class _NDKNutzap extends NDKEvent {\n  debug;\n  _proofs = [];\n  static kind = 9321 /* Nutzap */;\n  static kinds = [_NDKNutzap.kind];\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 9321 /* Nutzap */;\n    this.debug = ndk?.debug.extend(\"nutzap\") ?? debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:nutzap\");\n    if (!this.alt) this.alt = \"This is a nutzap\";\n    try {\n      const proofTags = this.getMatchingTags(\"proof\");\n      if (proofTags.length) {\n        this._proofs = proofTags.map((tag) => JSON.parse(tag[1]));\n      } else {\n        this._proofs = JSON.parse(this.content);\n      }\n    } catch {\n      return;\n    }\n  }\n  static from(event) {\n    const e = new _NDKNutzap(event.ndk, event);\n    if (!e._proofs || !e._proofs.length) return;\n    return e;\n  }\n  set comment(comment) {\n    this.content = comment ?? \"\";\n  }\n  get comment() {\n    const c = this.tagValue(\"comment\");\n    if (c) return c;\n    return this.content;\n  }\n  set proofs(proofs) {\n    this._proofs = proofs;\n    this.tags = this.tags.filter((tag) => tag[0] !== \"proof\");\n    for (const proof of proofs) {\n      this.tags.push([\"proof\", JSON.stringify(proof)]);\n    }\n  }\n  get proofs() {\n    return this._proofs;\n  }\n  get rawP2pk() {\n    const firstProof = this.proofs[0];\n    try {\n      const secret = JSON.parse(firstProof.secret);\n      let payload;\n      if (typeof secret === \"string\") {\n        payload = JSON.parse(secret);\n        this.debug(\"stringified payload\", firstProof.secret);\n      } else if (typeof secret === \"object\") {\n        payload = secret;\n      }\n      if (Array.isArray(payload) && payload[0] === \"P2PK\" && payload.length > 1 && typeof payload[1] === \"object\" && payload[1] !== null) {\n        return payload[1].data;\n      }\n      if (typeof payload === \"object\" && payload !== null && typeof payload[1]?.data === \"string\") {\n        return payload[1].data;\n      }\n    } catch (e) {\n      this.debug(\"error parsing p2pk pubkey\", e, this.proofs[0]);\n    }\n    return void 0;\n  }\n  /**\n   * Gets the p2pk pubkey that is embedded in the first proof.\n   *\n   * Note that this returns a nostr pubkey, not a cashu pubkey (no \"02\" prefix)\n   */\n  get p2pk() {\n    const rawP2pk = this.rawP2pk;\n    if (!rawP2pk) return;\n    return rawP2pk.startsWith(\"02\") ? rawP2pk.slice(2) : rawP2pk;\n  }\n  /**\n   * Get the mint where this nutzap proofs exist\n   */\n  get mint() {\n    return this.tagValue(\"u\");\n  }\n  set mint(value) {\n    this.replaceTag([\"u\", value]);\n  }\n  get unit() {\n    let _unit = this.tagValue(\"unit\") ?? \"sat\";\n    if (_unit?.startsWith(\"msat\")) _unit = \"sat\";\n    return _unit;\n  }\n  set unit(value) {\n    this.removeTag(\"unit\");\n    if (value?.startsWith(\"msat\")) throw new Error(\"msat is not allowed, use sat denomination instead\");\n    if (value) this.tag([\"unit\", value]);\n  }\n  get amount() {\n    const amount = this.proofs.reduce((total, proof) => total + proof.amount, 0);\n    return amount;\n  }\n  sender = this.author;\n  /**\n   * Set the target of the nutzap\n   * @param target The target of the nutzap (a user or an event)\n   */\n  set target(target) {\n    this.tags = this.tags.filter((t) => t[0] !== \"p\");\n    if (target instanceof NDKEvent) {\n      this.tags.push(target.tagReference());\n    }\n  }\n  set recipientPubkey(pubkey) {\n    this.removeTag(\"p\");\n    this.tag([\"p\", pubkey]);\n  }\n  get recipientPubkey() {\n    return this.tagValue(\"p\");\n  }\n  get recipient() {\n    const pubkey = this.recipientPubkey;\n    if (this.ndk) return this.ndk.getUser({ pubkey });\n    return new NDKUser({ pubkey });\n  }\n  async toNostrEvent() {\n    if (this.unit === \"msat\") {\n      this.unit = \"sat\";\n    }\n    this.removeTag(\"amount\");\n    this.tags.push([\"amount\", this.amount.toString()]);\n    const event = await super.toNostrEvent();\n    event.content = this.comment;\n    return event;\n  }\n  /**\n   * Validates that the nutzap conforms to NIP-61\n   */\n  get isValid() {\n    let eTagCount = 0;\n    let pTagCount = 0;\n    let mintTagCount = 0;\n    for (const tag of this.tags) {\n      if (tag[0] === \"e\") eTagCount++;\n      if (tag[0] === \"p\") pTagCount++;\n      if (tag[0] === \"u\") mintTagCount++;\n    }\n    return (\n      // exactly one recipient and mint\n      pTagCount === 1 && mintTagCount === 1 && // must have at most one e tag\n      eTagCount <= 1 && // must have at least one proof\n      this.proofs.length > 0\n    );\n  }\n};\nfunction proofP2pk(proof) {\n  try {\n    const secret = JSON.parse(proof.secret);\n    let payload = {};\n    if (typeof secret === \"string\") {\n      payload = JSON.parse(secret);\n    } else if (typeof secret === \"object\") {\n      payload = secret;\n    }\n    const isP2PKLocked = payload[0] === \"P2PK\" && payload[1]?.data;\n    if (isP2PKLocked) {\n      return payload[1].data;\n    }\n  } catch (e) {\n    console.error(\"error parsing p2pk pubkey\", e, proof);\n  }\n}\nfunction proofP2pkNostr(proof) {\n  const p2pk = proofP2pk(proof);\n  if (!p2pk) return;\n  if (p2pk.startsWith(\"02\") && p2pk.length === 66) return p2pk.slice(2);\n  return p2pk;\n}\nfunction cashuPubkeyToNostrPubkey(cashuPubkey) {\n  if (cashuPubkey.startsWith(\"02\") && cashuPubkey.length === 66) return cashuPubkey.slice(2);\n  return void 0;\n}\n\n// src/events/kinds/simple-group/member-list.ts\nvar NDKSimpleGroupMemberList = class _NDKSimpleGroupMemberList extends NDKEvent {\n  relaySet;\n  memberSet = /* @__PURE__ */ new Set();\n  static kind = 39002 /* GroupMembers */;\n  static kinds = [39002 /* GroupMembers */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 39002 /* GroupMembers */;\n    this.memberSet = new Set(this.members);\n  }\n  static from(event) {\n    return new _NDKSimpleGroupMemberList(event.ndk, event);\n  }\n  get members() {\n    return this.getMatchingTags(\"p\").map((tag) => tag[1]);\n  }\n  hasMember(member) {\n    return this.memberSet.has(member);\n  }\n  async publish(relaySet, timeoutMs, requiredRelayCount) {\n    relaySet ??= this.relaySet;\n    return super.publishReplaceable(relaySet, timeoutMs, requiredRelayCount);\n  }\n};\n\n// src/events/kinds/simple-group/metadata.ts\nvar NDKSimpleGroupMetadata = class _NDKSimpleGroupMetadata extends NDKEvent {\n  static kind = 39e3 /* GroupMetadata */;\n  static kinds = [39e3 /* GroupMetadata */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 39e3 /* GroupMetadata */;\n  }\n  static from(event) {\n    return new _NDKSimpleGroupMetadata(event.ndk, event);\n  }\n  get name() {\n    return this.tagValue(\"name\");\n  }\n  get picture() {\n    return this.tagValue(\"picture\");\n  }\n  get about() {\n    return this.tagValue(\"about\");\n  }\n  get scope() {\n    if (this.getMatchingTags(\"public\").length > 0) return \"public\";\n    if (this.getMatchingTags(\"public\").length > 0) return \"private\";\n    return void 0;\n  }\n  set scope(scope) {\n    this.removeTag(\"public\");\n    this.removeTag(\"private\");\n    if (scope === \"public\") {\n      this.tags.push([\"public\", \"\"]);\n    } else if (scope === \"private\") {\n      this.tags.push([\"private\", \"\"]);\n    }\n  }\n  get access() {\n    if (this.getMatchingTags(\"open\").length > 0) return \"open\";\n    if (this.getMatchingTags(\"closed\").length > 0) return \"closed\";\n    return void 0;\n  }\n  set access(access) {\n    this.removeTag(\"open\");\n    this.removeTag(\"closed\");\n    if (access === \"open\") {\n      this.tags.push([\"open\", \"\"]);\n    } else if (access === \"closed\") {\n      this.tags.push([\"closed\", \"\"]);\n    }\n  }\n};\n\n// src/events/kinds/story.ts\nvar NDKStoryStickerType = /* @__PURE__ */ ((NDKStoryStickerType2) => {\n  NDKStoryStickerType2[\"Pubkey\"] = \"pubkey\";\n  NDKStoryStickerType2[\"Event\"] = \"event\";\n  NDKStoryStickerType2[\"Prompt\"] = \"prompt\";\n  NDKStoryStickerType2[\"Text\"] = \"text\";\n  NDKStoryStickerType2[\"Countdown\"] = \"countdown\";\n  return NDKStoryStickerType2;\n})(NDKStoryStickerType || {});\nfunction strToPosition(positionStr) {\n  const [x, y] = positionStr.split(\",\").map(Number);\n  return { x, y };\n}\nfunction strToDimension(dimensionStr) {\n  const [width, height] = dimensionStr.split(\"x\").map(Number);\n  return { width, height };\n}\nvar NDKStorySticker = class _NDKStorySticker {\n  static Text = \"text\" /* Text */;\n  static Pubkey = \"pubkey\" /* Pubkey */;\n  static Event = \"event\" /* Event */;\n  static Prompt = \"prompt\" /* Prompt */;\n  static Countdown = \"countdown\" /* Countdown */;\n  type;\n  value;\n  position;\n  dimension;\n  properties;\n  constructor(arg) {\n    if (Array.isArray(arg)) {\n      const tag = arg;\n      if (tag[0] !== \"sticker\" || tag.length < 5) {\n        throw new Error(\"Invalid sticker tag\");\n      }\n      this.type = tag[1];\n      this.value = tag[2];\n      this.position = strToPosition(tag[3]);\n      this.dimension = strToDimension(tag[4]);\n      const props = {};\n      for (let i = 5; i < tag.length; i++) {\n        const [key, ...rest] = tag[i].split(\" \");\n        props[key] = rest.join(\" \");\n      }\n      if (Object.keys(props).length > 0) {\n        this.properties = props;\n      }\n    } else {\n      this.type = arg;\n      this.value = void 0;\n      this.position = { x: 0, y: 0 };\n      this.dimension = { width: 0, height: 0 };\n    }\n  }\n  static fromTag(tag) {\n    try {\n      return new _NDKStorySticker(tag);\n    } catch {\n      return null;\n    }\n  }\n  get style() {\n    return this.properties?.style;\n  }\n  set style(style) {\n    if (style) this.properties = { ...this.properties, style };\n    else delete this.properties?.style;\n  }\n  get rotation() {\n    return this.properties?.rot ? Number.parseFloat(this.properties.rot) : void 0;\n  }\n  set rotation(rotation) {\n    if (rotation !== void 0) {\n      this.properties = { ...this.properties, rot: rotation.toString() };\n    } else {\n      delete this.properties?.rot;\n    }\n  }\n  /**\n   * Checks if the sticker is valid.\n   *\n   * @returns {boolean} - True if the sticker is valid, false otherwise.\n   */\n  get isValid() {\n    return this.hasValidDimensions() && this.hasValidPosition();\n  }\n  hasValidDimensions = () => {\n    return typeof this.dimension.width === \"number\" && typeof this.dimension.height === \"number\" && !Number.isNaN(this.dimension.width) && !Number.isNaN(this.dimension.height);\n  };\n  hasValidPosition = () => {\n    return typeof this.position.x === \"number\" && typeof this.position.y === \"number\" && !Number.isNaN(this.position.x) && !Number.isNaN(this.position.y);\n  };\n  toTag() {\n    if (!this.isValid) {\n      const errors = [\n        !this.hasValidDimensions() ? \"dimensions is invalid\" : void 0,\n        !this.hasValidPosition() ? \"position is invalid\" : void 0\n      ].filter(Boolean);\n      throw new Error(`Invalid sticker: ${errors.join(\", \")}`);\n    }\n    let value;\n    switch (this.type) {\n      case \"event\" /* Event */:\n        value = this.value.tagId();\n        break;\n      case \"pubkey\" /* Pubkey */:\n        value = this.value.pubkey;\n        break;\n      default:\n        value = this.value;\n    }\n    const tag = [\"sticker\", this.type, value, coordinates(this.position), dimension(this.dimension)];\n    if (this.properties) {\n      for (const [key, propValue] of Object.entries(this.properties)) {\n        tag.push(`${key} ${propValue}`);\n      }\n    }\n    return tag;\n  }\n};\nvar NDKStory = class _NDKStory extends NDKEvent {\n  static kind = 23 /* Story */;\n  static kinds = [23 /* Story */];\n  _imeta;\n  _dimensions;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 23 /* Story */;\n    if (rawEvent) {\n      for (const tag of rawEvent.tags) {\n        switch (tag[0]) {\n          case \"imeta\":\n            this._imeta = mapImetaTag(tag);\n            break;\n          case \"dim\":\n            this.dimensions = strToDimension(tag[1]);\n            break;\n        }\n      }\n    }\n  }\n  /**\n   * Creates a NDKStory from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKStory from.\n   * @returns NDKStory\n   */\n  static from(event) {\n    return new _NDKStory(event.ndk, event);\n  }\n  /**\n   * Checks if the story is valid (has exactly one imeta tag).\n   */\n  get isValid() {\n    return !!this.imeta;\n  }\n  /**\n   * Gets the first imeta tag (there should only be one).\n   */\n  get imeta() {\n    return this._imeta;\n  }\n  /**\n   * Sets a single imeta tag, replacing any existing ones.\n   */\n  set imeta(tag) {\n    this._imeta = tag;\n    this.tags = this.tags.filter((t) => t[0] !== \"imeta\");\n    if (tag) {\n      this.tags.push(imetaTagToTag(tag));\n    }\n  }\n  /**\n   * Getter for the story dimensions.\n   *\n   * @returns {NDKStoryDimension | undefined} - The story dimensions if available, otherwise undefined.\n   */\n  get dimensions() {\n    const dimTag = this.tagValue(\"dim\");\n    if (!dimTag) return void 0;\n    return strToDimension(dimTag);\n  }\n  /**\n   * Setter for the story dimensions.\n   *\n   * @param {NDKStoryDimension | undefined} dimensions - The dimensions to set for the story.\n   */\n  set dimensions(dimensions) {\n    this.removeTag(\"dim\");\n    if (dimensions) {\n      this.tags.push([\"dim\", `${dimensions.width}x${dimensions.height}`]);\n    }\n  }\n  /**\n   * Getter for the story duration.\n   *\n   * @returns {number | undefined} - The story duration in seconds if available, otherwise undefined.\n   */\n  get duration() {\n    const durTag = this.tagValue(\"dur\");\n    if (!durTag) return void 0;\n    return Number.parseInt(durTag);\n  }\n  /**\n   * Setter for the story duration.\n   *\n   * @param {number | undefined} duration - The duration in seconds to set for the story.\n   */\n  set duration(duration) {\n    this.removeTag(\"dur\");\n    if (duration !== void 0) {\n      this.tags.push([\"dur\", duration.toString()]);\n    }\n  }\n  /**\n   * Gets all stickers from the story.\n   *\n   * @returns {NDKStorySticker[]} - Array of stickers in the story.\n   */\n  get stickers() {\n    const stickers = [];\n    for (const tag of this.tags) {\n      if (tag[0] !== \"sticker\" || tag.length < 5) continue;\n      const sticker = NDKStorySticker.fromTag(tag);\n      if (sticker) stickers.push(sticker);\n    }\n    return stickers;\n  }\n  /**\n   * Adds a sticker to the story.\n   *\n   * @param {NDKStorySticker|StorySticker} sticker - The sticker to add.\n   */\n  addSticker(sticker) {\n    let stickerToAdd;\n    if (sticker instanceof NDKStorySticker) {\n      stickerToAdd = sticker;\n    } else {\n      const tag = [\n        \"sticker\",\n        sticker.type,\n        typeof sticker.value === \"string\" ? sticker.value : \"\",\n        coordinates(sticker.position),\n        dimension(sticker.dimension)\n      ];\n      if (sticker.properties) {\n        for (const [key, value] of Object.entries(sticker.properties)) {\n          tag.push(`${key} ${value}`);\n        }\n      }\n      stickerToAdd = new NDKStorySticker(tag);\n      stickerToAdd.value = sticker.value;\n    }\n    if (stickerToAdd.type === \"pubkey\" /* Pubkey */) {\n      this.tag(stickerToAdd.value);\n    } else if (stickerToAdd.type === \"event\" /* Event */) {\n      this.tag(stickerToAdd.value);\n    }\n    this.tags.push(stickerToAdd.toTag());\n  }\n  /**\n   * Removes a sticker from the story.\n   *\n   * @param {number} index - The index of the sticker to remove.\n   */\n  removeSticker(index) {\n    const stickers = this.stickers;\n    if (index < 0 || index >= stickers.length) return;\n    let stickerCount = 0;\n    for (let i = 0; i < this.tags.length; i++) {\n      if (this.tags[i][0] === \"sticker\") {\n        if (stickerCount === index) {\n          this.tags.splice(i, 1);\n          break;\n        }\n        stickerCount++;\n      }\n    }\n  }\n};\nvar coordinates = (position) => `${position.x},${position.y}`;\nvar dimension = (dimension2) => `${dimension2.width}x${dimension2.height}`;\n\n// src/events/kinds/subscriptions/amount.ts\nvar possibleIntervalFrequencies = [\n  \"daily\",\n  \"weekly\",\n  \"monthly\",\n  \"quarterly\",\n  \"yearly\"\n];\nfunction calculateTermDurationInSeconds(term) {\n  switch (term) {\n    case \"daily\":\n      return 24 * 60 * 60;\n    case \"weekly\":\n      return 7 * 24 * 60 * 60;\n    case \"monthly\":\n      return 30 * 24 * 60 * 60;\n    case \"quarterly\":\n      return 3 * 30 * 24 * 60 * 60;\n    case \"yearly\":\n      return 365 * 24 * 60 * 60;\n  }\n}\nfunction newAmount(amount, currency, term) {\n  return [\"amount\", amount.toString(), currency, term];\n}\nfunction parseTagToSubscriptionAmount(tag) {\n  const amount = Number.parseInt(tag[1]);\n  if (Number.isNaN(amount) || amount === void 0 || amount === null || amount <= 0) return void 0;\n  const currency = tag[2];\n  if (currency === void 0 || currency === \"\") return void 0;\n  const term = tag[3];\n  if (term === void 0) return void 0;\n  if (!possibleIntervalFrequencies.includes(term)) return void 0;\n  return {\n    amount,\n    currency,\n    term\n  };\n}\n\n// src/events/kinds/subscriptions/tier.ts\nvar NDKSubscriptionTier = class _NDKSubscriptionTier extends NDKArticle {\n  static kind = 37001 /* SubscriptionTier */;\n  static kinds = [37001 /* SubscriptionTier */];\n  constructor(ndk, rawEvent) {\n    const k = rawEvent?.kind ?? 37001 /* SubscriptionTier */;\n    super(ndk, rawEvent);\n    this.kind = k;\n  }\n  /**\n   * Creates a new NDKSubscriptionTier from an event\n   * @param event\n   * @returns NDKSubscriptionTier\n   */\n  static from(event) {\n    return new _NDKSubscriptionTier(event.ndk, event);\n  }\n  /**\n   * Returns perks for this tier\n   */\n  get perks() {\n    return this.getMatchingTags(\"perk\").map((tag) => tag[1]).filter((perk) => perk !== void 0);\n  }\n  /**\n   * Adds a perk to this tier\n   */\n  addPerk(perk) {\n    this.tags.push([\"perk\", perk]);\n  }\n  /**\n   * Returns the amount for this tier\n   */\n  get amounts() {\n    return this.getMatchingTags(\"amount\").map((tag) => parseTagToSubscriptionAmount(tag)).filter((a) => a !== void 0);\n  }\n  /**\n   * Adds an amount to this tier\n   * @param amount Amount in the smallest unit of the currency (e.g. cents, msats)\n   * @param currency Currency code. Use msat for millisatoshis\n   * @param term One of daily, weekly, monthly, quarterly, yearly\n   */\n  addAmount(amount, currency, term) {\n    this.tags.push(newAmount(amount, currency, term));\n  }\n  /**\n   * Sets a relay where content related to this tier can be found\n   * @param relayUrl URL of the relay\n   */\n  set relayUrl(relayUrl) {\n    this.tags.push([\"r\", relayUrl]);\n  }\n  /**\n   * Returns the relay URLs for this tier\n   */\n  get relayUrls() {\n    return this.getMatchingTags(\"r\").map((tag) => tag[1]).filter((relay) => relay !== void 0);\n  }\n  /**\n   * Gets the verifier pubkey for this tier. This is the pubkey that will generate\n   * subscription payment receipts\n   */\n  get verifierPubkey() {\n    return this.tagValue(\"p\");\n  }\n  /**\n   * Sets the verifier pubkey for this tier.\n   */\n  set verifierPubkey(pubkey) {\n    this.removeTag(\"p\");\n    if (pubkey) this.tags.push([\"p\", pubkey]);\n  }\n  /**\n   * Checks if this tier is valid\n   */\n  get isValid() {\n    return this.title !== void 0 && // Must have a title\n    this.amounts.length > 0;\n  }\n};\n\n// src/events/kinds/video.ts\nvar NDKVideo = class _NDKVideo extends NDKEvent {\n  static kind = 21 /* Video */;\n  static kinds = [34235 /* HorizontalVideo */, 34236 /* VerticalVideo */, 22 /* ShortVideo */, 21 /* Video */];\n  _imetas;\n  /**\n   * Creates a NDKArticle from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKArticle from.\n   * @returns NDKArticle\n   */\n  static from(event) {\n    return new _NDKVideo(event.ndk, event.rawEvent());\n  }\n  /**\n   * Getter for the article title.\n   *\n   * @returns {string | undefined} - The article title if available, otherwise undefined.\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the article title.\n   *\n   * @param {string | undefined} title - The title to set for the article.\n   */\n  set title(title) {\n    this.removeTag(\"title\");\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Getter for the article thumbnail.\n   *\n   * @returns {string | undefined} - The article thumbnail if available, otherwise undefined.\n   */\n  get thumbnail() {\n    let thumbnail;\n    if (this.imetas && this.imetas.length > 0) {\n      thumbnail = this.imetas[0].image?.[0];\n    }\n    return thumbnail ?? this.tagValue(\"thumb\");\n  }\n  get imetas() {\n    if (this._imetas) return this._imetas;\n    this._imetas = this.tags.filter((tag) => tag[0] === \"imeta\").map(mapImetaTag);\n    return this._imetas;\n  }\n  set imetas(tags) {\n    this._imetas = tags;\n    this.tags = this.tags.filter((tag) => tag[0] !== \"imeta\");\n    this.tags.push(...tags.map(imetaTagToTag));\n  }\n  get url() {\n    if (this.imetas && this.imetas.length > 0) {\n      return this.imetas[0].url;\n    }\n    return this.tagValue(\"url\");\n  }\n  /**\n   * Getter for the article's publication timestamp.\n   *\n   * @returns {number | undefined} - The Unix timestamp of when the article was published or undefined.\n   */\n  get published_at() {\n    const tag = this.tagValue(\"published_at\");\n    if (tag) {\n      return Number.parseInt(tag);\n    }\n    return void 0;\n  }\n  /**\n   * Generates content tags for the article.\n   *\n   * This method first checks and sets the publication date if not available,\n   * and then generates content tags based on the base NDKEvent class.\n   *\n   * @returns {ContentTag} - The generated content tags.\n   */\n  async generateTags() {\n    super.generateTags();\n    if (!this.kind) {\n      if (this.imetas?.[0]?.dim) {\n        const [width, height] = this.imetas[0].dim.split(\"x\");\n        const isPortrait = width && height && Number.parseInt(width) < Number.parseInt(height);\n        const isShort = this.duration && this.duration < 120;\n        if (isShort && isPortrait) this.kind = 22 /* ShortVideo */;\n        else this.kind = 21 /* Video */;\n      }\n    }\n    return super.generateTags();\n  }\n  get duration() {\n    const tag = this.tagValue(\"duration\");\n    if (tag) {\n      return Number.parseInt(tag);\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the video's duration\n   *\n   * @param {number | undefined} duration - The duration to set for the video (in seconds)\n   */\n  set duration(dur) {\n    this.removeTag(\"duration\");\n    if (dur !== void 0) {\n      this.tags.push([\"duration\", Math.floor(dur).toString()]);\n    }\n  }\n};\n\n// src/events/kinds/wiki.ts\nvar NDKWiki = class _NDKWiki extends NDKArticle {\n  static kind = 30818 /* Wiki */;\n  static kinds = [30818 /* Wiki */];\n  static from(event) {\n    return new _NDKWiki(event.ndk, event.rawEvent());\n  }\n  get isDefered() {\n    return this.hasTag(\"a\", \"defer\");\n  }\n  get deferedId() {\n    return this.tagValue(\"a\", \"defer\");\n  }\n  /**\n   * Defers the author's wiki event to another wiki event.\n   *\n   * Wiki-events can tag other wiki-events with a `defer` marker to indicate that it considers someone else's entry as a \"better\" version of itself. If using a `defer` marker both `a` and `e` tags SHOULD be used.\n   *\n   * @example\n   * myWiki.defer = betterWikiEntryOnTheSameTopic;\n   * myWiki.publishReplaceable()\n   */\n  set defer(deferedTo) {\n    this.removeTag(\"a\", \"defer\");\n    this.tag(deferedTo, \"defer\");\n  }\n};\nvar NDKWikiMergeRequest = class _NDKWikiMergeRequest extends NDKEvent {\n  static kind = 818 /* WikiMergeRequest */;\n  static kinds = [818 /* WikiMergeRequest */];\n  static from(event) {\n    return new _NDKWikiMergeRequest(event.ndk, event.rawEvent());\n  }\n  /**\n   * The target ID (<kind:pubkey:d-tag>) of the wiki event to merge into.\n   */\n  get targetId() {\n    return this.tagValue(\"a\");\n  }\n  /**\n   * Sets the target ID (<kind:pubkey:d-tag>) of the wiki event to merge into.\n   */\n  set target(targetEvent) {\n    this.tags = this.tags.filter((tag) => {\n      if (tag[0] === \"a\") return true;\n      if (tag[0] === \"e\" && tag[3] !== \"source\") return true;\n    });\n    this.tag(targetEvent);\n  }\n  /**\n   * The source ID of the wiki event to merge from.\n   */\n  get sourceId() {\n    return this.tagValue(\"e\", \"source\");\n  }\n  /**\n   * Sets the event we are asking to get merged into the target.\n   */\n  set source(sourceEvent) {\n    this.removeTag(\"e\", \"source\");\n    this.tag(sourceEvent, \"source\", false, \"e\");\n  }\n};\n\n// src/events/wrap.ts\nfunction wrapEvent(event) {\n  const eventWrappingMap = /* @__PURE__ */ new Map();\n  for (const klass2 of [\n    NDKImage,\n    NDKVideo,\n    NDKCashuMintList,\n    NDKArticle,\n    NDKHighlight,\n    NDKWiki,\n    NDKNutzap,\n    NDKSimpleGroupMemberList,\n    NDKSimpleGroupMetadata,\n    NDKSubscriptionTier,\n    NDKCashuToken,\n    NDKList,\n    NDKStory\n  ]) {\n    for (const kind of klass2.kinds) {\n      eventWrappingMap.set(kind, klass2);\n    }\n  }\n  const klass = eventWrappingMap.get(event.kind);\n  if (klass) return klass.from(event);\n  return event;\n}\n\n// src/subscription/utils.ts\n\nvar MAX_SUBID_LENGTH = 20;\nfunction queryFullyFilled(subscription) {\n  if (filterIncludesIds(subscription.filter)) {\n    if (resultHasAllRequestedIds(subscription)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction compareFilter(filter1, filter2) {\n  if (Object.keys(filter1).length !== Object.keys(filter2).length) return false;\n  for (const [key, value] of Object.entries(filter1)) {\n    const valuesInFilter2 = filter2[key];\n    if (!valuesInFilter2) return false;\n    if (Array.isArray(value) && Array.isArray(valuesInFilter2)) {\n      const v = value;\n      for (const valueInFilter2 of valuesInFilter2) {\n        const val = valueInFilter2;\n        if (!v.includes(val)) {\n          return false;\n        }\n      }\n    } else {\n      if (valuesInFilter2 !== value) return false;\n    }\n  }\n  return true;\n}\nfunction filterIncludesIds(filter) {\n  return !!filter.ids;\n}\nfunction resultHasAllRequestedIds(subscription) {\n  const ids = subscription.filter.ids;\n  return !!ids && ids.length === subscription.eventFirstSeen.size;\n}\nfunction generateSubId(subscriptions, filters) {\n  const subIds = subscriptions.map((sub) => sub.subId).filter(Boolean);\n  const subIdParts = [];\n  const filterNonKindKeys = /* @__PURE__ */ new Set();\n  const filterKinds = /* @__PURE__ */ new Set();\n  if (subIds.length > 0) {\n    subIdParts.push(Array.from(new Set(subIds)).join(\",\"));\n  } else {\n    for (const filter of filters) {\n      for (const key of Object.keys(filter)) {\n        if (key === \"kinds\") {\n          filter.kinds?.forEach((k) => filterKinds.add(k));\n        } else {\n          filterNonKindKeys.add(key);\n        }\n      }\n    }\n    if (filterKinds.size > 0) {\n      subIdParts.push(`kinds:${Array.from(filterKinds).join(\",\")}`);\n    }\n    if (filterNonKindKeys.size > 0) {\n      subIdParts.push(Array.from(filterNonKindKeys).join(\",\"));\n    }\n  }\n  let subId = subIdParts.join(\"-\");\n  if (subId.length > MAX_SUBID_LENGTH) subId = subId.substring(0, MAX_SUBID_LENGTH);\n  subId += `-${Math.floor(Math.random() * 999).toString()}`;\n  return subId;\n}\nfunction filterForEventsTaggingId(id) {\n  try {\n    const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(id);\n    switch (decoded.type) {\n      case \"naddr\":\n        return {\n          \"#a\": [`${decoded.data.kind}:${decoded.data.pubkey}:${decoded.data.identifier}`]\n        };\n      case \"nevent\":\n        return { \"#e\": [decoded.data.id] };\n      case \"note\":\n        return { \"#e\": [decoded.data] };\n      case \"nprofile\":\n        return { \"#p\": [decoded.data.pubkey] };\n      case \"npub\":\n        return { \"#p\": [decoded.data] };\n    }\n  } catch {\n  }\n}\nfunction filterAndRelaySetFromBech32(beche2, ndk) {\n  const filter = filterFromId(beche2);\n  const relays = relaysFromBech32(beche2, ndk);\n  if (relays.length === 0) return { filter };\n  return {\n    filter,\n    relaySet: new NDKRelaySet(new Set(relays), ndk)\n  };\n}\nfunction filterFromId(id) {\n  let decoded;\n  if (id.match(NIP33_A_REGEX)) {\n    const [kind, pubkey, identifier] = id.split(\":\");\n    const filter = {\n      authors: [pubkey],\n      kinds: [Number.parseInt(kind)]\n    };\n    if (identifier) {\n      filter[\"#d\"] = [identifier];\n    }\n    return filter;\n  }\n  if (id.match(BECH32_REGEX)) {\n    try {\n      decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(id);\n      switch (decoded.type) {\n        case \"nevent\": {\n          const filter = { ids: [decoded.data.id] };\n          if (decoded.data.author) filter.authors = [decoded.data.author];\n          if (decoded.data.kind) filter.kinds = [decoded.data.kind];\n          return filter;\n        }\n        case \"note\":\n          return { ids: [decoded.data] };\n        case \"naddr\": {\n          const filter = {\n            authors: [decoded.data.pubkey],\n            kinds: [decoded.data.kind]\n          };\n          if (decoded.data.identifier) filter[\"#d\"] = [decoded.data.identifier];\n          return filter;\n        }\n      }\n    } catch (e) {\n      console.error(\"Error decoding\", id, e);\n    }\n  }\n  return { ids: [id] };\n}\nfunction isNip33AValue(value) {\n  return value.match(NIP33_A_REGEX) !== null;\n}\nvar NIP33_A_REGEX = /^(\\d+):([0-9A-Fa-f]+)(?::(.*))?$/;\nvar BECH32_REGEX = /^n(event|ote|profile|pub|addr)1[\\d\\w]+$/;\nfunction relaysFromBech32(bech322, ndk) {\n  try {\n    const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(bech322);\n    if ([\"naddr\", \"nevent\"].includes(decoded?.type)) {\n      const data = decoded.data;\n      if (data?.relays) {\n        return data.relays.map((r) => new NDKRelay(r, ndk.relayAuthDefaultPolicy, ndk));\n      }\n    }\n  } catch (_e) {\n  }\n  return [];\n}\n\n// src/subscription/index.ts\nvar NDKSubscriptionCacheUsage = /* @__PURE__ */ ((NDKSubscriptionCacheUsage2) => {\n  NDKSubscriptionCacheUsage2[\"ONLY_CACHE\"] = \"ONLY_CACHE\";\n  NDKSubscriptionCacheUsage2[\"CACHE_FIRST\"] = \"CACHE_FIRST\";\n  NDKSubscriptionCacheUsage2[\"PARALLEL\"] = \"PARALLEL\";\n  NDKSubscriptionCacheUsage2[\"ONLY_RELAY\"] = \"ONLY_RELAY\";\n  return NDKSubscriptionCacheUsage2;\n})(NDKSubscriptionCacheUsage || {});\nvar defaultOpts = {\n  closeOnEose: false,\n  cacheUsage: \"CACHE_FIRST\" /* CACHE_FIRST */,\n  dontSaveToCache: false,\n  groupable: true,\n  groupableDelay: 100,\n  groupableDelayType: \"at-most\",\n  cacheUnconstrainFilter: [\"limit\", \"since\", \"until\"]\n};\nvar NDKSubscription = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  subId;\n  filters;\n  opts;\n  pool;\n  skipVerification = false;\n  skipValidation = false;\n  /**\n   * Tracks the filters as they are executed on each relay\n   */\n  relayFilters;\n  relaySet;\n  ndk;\n  debug;\n  /**\n   * Events that have been seen by the subscription, with the time they were first seen.\n   */\n  eventFirstSeen = /* @__PURE__ */ new Map();\n  /**\n   * Relays that have sent an EOSE.\n   */\n  eosesSeen = /* @__PURE__ */ new Set();\n  /**\n   * The time the last event was received by the subscription.\n   * This is used to calculate when EOSE should be emitted.\n   */\n  lastEventReceivedAt;\n  /**\n   * The most recent event timestamp from cache results.\n   * This is used for addSinceFromCache functionality.\n   */\n  mostRecentCacheEventTimestamp;\n  internalId;\n  /**\n   * Whether the subscription should close when all relays have reached the end of the event stream.\n   */\n  closeOnEose;\n  /**\n   * Pool monitor callback\n   */\n  poolMonitor;\n  skipOptimisticPublishEvent = false;\n  /**\n   * Filters to remove when querying the cache.\n   */\n  cacheUnconstrainFilter;\n  constructor(ndk, filters, opts, subId) {\n    super();\n    this.ndk = ndk;\n    this.opts = { ...defaultOpts, ...opts || {} };\n    this.pool = this.opts.pool || ndk.pool;\n    this.filters = Array.isArray(filters) ? filters : [filters];\n    this.subId = subId || this.opts.subId;\n    this.internalId = Math.random().toString(36).substring(7);\n    this.debug = ndk.debug.extend(`subscription[${this.opts.subId ?? this.internalId}]`);\n    if (this.opts.relaySet) {\n      this.relaySet = this.opts.relaySet;\n    } else if (this.opts.relayUrls) {\n      this.relaySet = NDKRelaySet.fromRelayUrls(this.opts.relayUrls, this.ndk);\n    }\n    this.skipVerification = this.opts.skipVerification || false;\n    this.skipValidation = this.opts.skipValidation || false;\n    this.closeOnEose = this.opts.closeOnEose || false;\n    this.skipOptimisticPublishEvent = this.opts.skipOptimisticPublishEvent || false;\n    this.cacheUnconstrainFilter = this.opts.cacheUnconstrainFilter;\n  }\n  /**\n   * Returns the relays that have not yet sent an EOSE.\n   */\n  relaysMissingEose() {\n    if (!this.relayFilters) return [];\n    const relaysMissingEose = Array.from(this.relayFilters?.keys()).filter(\n      (url) => !this.eosesSeen.has(this.pool.getRelay(url, false, false))\n    );\n    return relaysMissingEose;\n  }\n  /**\n   * Provides access to the first filter of the subscription for\n   * backwards compatibility.\n   */\n  get filter() {\n    return this.filters[0];\n  }\n  get groupableDelay() {\n    if (!this.isGroupable()) return void 0;\n    return this.opts?.groupableDelay;\n  }\n  get groupableDelayType() {\n    return this.opts?.groupableDelayType || \"at-most\";\n  }\n  isGroupable() {\n    return this.opts?.groupable || false;\n  }\n  shouldQueryCache() {\n    if (this.opts.addSinceFromCache) return true;\n    if (this.opts?.cacheUsage === \"ONLY_RELAY\" /* ONLY_RELAY */) return false;\n    const hasNonEphemeralKind = this.filters.some((f) => f.kinds?.some((k) => kindIsEphemeral(k)));\n    if (hasNonEphemeralKind) return true;\n    return true;\n  }\n  shouldQueryRelays() {\n    return this.opts?.cacheUsage !== \"ONLY_CACHE\" /* ONLY_CACHE */;\n  }\n  shouldWaitForCache() {\n    if (this.opts.addSinceFromCache) return true;\n    return (\n      // Must want to close on EOSE; subscriptions\n      // that want to receive further updates must\n      // always hit the relay\n      !!this.opts.closeOnEose && // Cache adapter must claim to be fast\n      !!this.ndk.cacheAdapter?.locking && // If explicitly told to run in parallel, then\n      // we should not wait for the cache\n      this.opts.cacheUsage !== \"PARALLEL\" /* PARALLEL */\n    );\n  }\n  /**\n   * Start the subscription. This is the main method that should be called\n   * after creating a subscription.\n   *\n   * @param emitCachedEvents - Whether to emit events coming from a synchronous cache\n   *\n   * When using a synchronous cache, the events will be returned immediately\n   * by this function. If you will use those returned events, you should\n   * set emitCachedEvents to false to prevent seeing them as duplicate events.\n   */\n  start(emitCachedEvents = true) {\n    let cacheResult;\n    const updateStateFromCacheResults = (events) => {\n      if (emitCachedEvents) {\n        for (const event of events) {\n          if (!this.mostRecentCacheEventTimestamp || event.created_at > this.mostRecentCacheEventTimestamp) {\n            this.mostRecentCacheEventTimestamp = event.created_at;\n          }\n          this.eventReceived(event, void 0, true, false);\n        }\n      } else {\n        cacheResult = [];\n        for (const event of events) {\n          if (!this.mostRecentCacheEventTimestamp || event.created_at > this.mostRecentCacheEventTimestamp) {\n            this.mostRecentCacheEventTimestamp = event.created_at;\n          }\n          event.ndk = this.ndk;\n          const e = this.opts.wrap ? wrapEvent(event) : event;\n          if (!e) break;\n          if (e instanceof Promise) {\n            e.then((wrappedEvent) => {\n              this.emitEvent(false, wrappedEvent, void 0, true, false);\n            });\n            break;\n          }\n          this.eventFirstSeen.set(e.id, Date.now());\n          cacheResult.push(e);\n        }\n      }\n    };\n    const loadFromRelays = () => {\n      if (this.shouldQueryRelays()) {\n        this.startWithRelays();\n        this.startPoolMonitor();\n      } else {\n        this.emit(\"eose\", this);\n      }\n    };\n    if (this.shouldQueryCache()) {\n      cacheResult = this.startWithCache();\n      if (cacheResult instanceof Promise) {\n        if (this.shouldWaitForCache()) {\n          cacheResult.then((events) => {\n            updateStateFromCacheResults(events);\n            if (queryFullyFilled(this)) {\n              this.emit(\"eose\", this);\n              return;\n            }\n            loadFromRelays();\n          });\n          return null;\n        }\n        cacheResult.then((events) => {\n          updateStateFromCacheResults(events);\n        });\n        loadFromRelays();\n        return null;\n      }\n      updateStateFromCacheResults(cacheResult);\n      if (queryFullyFilled(this)) {\n        this.emit(\"eose\", this);\n      } else {\n        loadFromRelays();\n      }\n      return cacheResult;\n    }\n    loadFromRelays();\n    return null;\n  }\n  /**\n   * We want to monitor for new relays that are coming online, in case\n   * they should be part of this subscription.\n   */\n  startPoolMonitor() {\n    const _d = this.debug.extend(\"pool-monitor\");\n    this.poolMonitor = (relay) => {\n      if (this.relayFilters?.has(relay.url)) return;\n      const calc = calculateRelaySetsFromFilters(this.ndk, this.filters, this.pool);\n      if (calc.get(relay.url)) {\n        this.relayFilters?.set(relay.url, this.filters);\n        relay.subscribe(this, this.filters);\n      }\n    };\n    this.pool.on(\"relay:connect\", this.poolMonitor);\n  }\n  onStopped;\n  stop() {\n    this.emit(\"close\", this);\n    this.poolMonitor && this.pool.off(\"relay:connect\", this.poolMonitor);\n    this.onStopped?.();\n  }\n  /**\n   * @returns Whether the subscription has an authors filter.\n   */\n  hasAuthorsFilter() {\n    return this.filters.some((f) => f.authors?.length);\n  }\n  startWithCache() {\n    if (this.ndk.cacheAdapter?.query) {\n      return this.ndk.cacheAdapter.query(this);\n    }\n    return [];\n  }\n  /**\n   * Find available relays that should be part of this subscription and execute in them.\n   *\n   * Note that this is executed in addition to using the pool monitor, so even if the relay set\n   * that is computed (i.e. we don't have any relays available), when relays come online, we will\n   * check if we need to execute in them.\n   */\n  startWithRelays() {\n    let filters = this.filters;\n    if (this.opts.addSinceFromCache && this.mostRecentCacheEventTimestamp) {\n      const sinceTimestamp = this.mostRecentCacheEventTimestamp + 1;\n      filters = filters.map((filter) => ({\n        ...filter,\n        since: Math.max(filter.since || 0, sinceTimestamp)\n      }));\n    }\n    if (!this.relaySet || this.relaySet.relays.size === 0) {\n      this.relayFilters = calculateRelaySetsFromFilters(this.ndk, filters, this.pool);\n    } else {\n      this.relayFilters = /* @__PURE__ */ new Map();\n      for (const relay of this.relaySet.relays) {\n        this.relayFilters.set(relay.url, filters);\n      }\n    }\n    for (const [relayUrl, filters2] of this.relayFilters) {\n      const relay = this.pool.getRelay(relayUrl, true, true, filters2);\n      relay.subscribe(this, filters2);\n    }\n  }\n  // EVENT handling\n  /**\n   * Called when an event is received from a relay or the cache\n   * @param event\n   * @param relay\n   * @param fromCache Whether the event was received from the cache\n   * @param optimisticPublish Whether this event is coming from an optimistic publish\n   */\n  eventReceived(event, relay, fromCache = false, optimisticPublish = false) {\n    const eventId = event.id;\n    const eventAlreadySeen = this.eventFirstSeen.has(eventId);\n    let ndkEvent;\n    if (event instanceof NDKEvent) ndkEvent = event;\n    if (!eventAlreadySeen) {\n      ndkEvent ??= new NDKEvent(this.ndk, event);\n      ndkEvent.ndk = this.ndk;\n      ndkEvent.relay = relay;\n      if (!fromCache && !optimisticPublish) {\n        if (!this.skipValidation) {\n          if (!ndkEvent.isValid) {\n            this.debug(\"Event failed validation %s from relay %s\", eventId, relay?.url);\n            return;\n          }\n        }\n        if (relay) {\n          if (relay?.shouldValidateEvent() !== false) {\n            if (!this.skipVerification) {\n              if (!ndkEvent.verifySignature(true) && !this.ndk.asyncSigVerification) {\n                this.debug(\"Event failed signature validation\", event);\n                return;\n              }\n              if (relay) {\n                relay.addValidatedEvent();\n              }\n            }\n          } else {\n            relay.addNonValidatedEvent();\n          }\n        }\n        if (this.ndk.cacheAdapter && !this.opts.dontSaveToCache) {\n          this.ndk.cacheAdapter.setEvent(ndkEvent, this.filters, relay);\n        }\n      }\n      if (!optimisticPublish || this.skipOptimisticPublishEvent !== true) {\n        this.emitEvent(this.opts?.wrap ?? false, ndkEvent, relay, fromCache, optimisticPublish);\n        this.eventFirstSeen.set(eventId, Date.now());\n      }\n    } else {\n      const timeSinceFirstSeen = Date.now() - (this.eventFirstSeen.get(eventId) || 0);\n      this.emit(\"event:dup\", event, relay, timeSinceFirstSeen, this, fromCache, optimisticPublish);\n      if (relay) {\n        const signature = verifiedSignatures.get(eventId);\n        if (signature && typeof signature === \"string\") {\n          if (event.sig === signature) {\n            relay.addValidatedEvent();\n          }\n        }\n      }\n    }\n    this.lastEventReceivedAt = Date.now();\n  }\n  /**\n   * Optionally wraps, sync or async, and emits the event (if one comes back from the wrapper)\n   */\n  emitEvent(wrap, evt, relay, fromCache, optimisticPublish) {\n    const wrapped = wrap ? wrapEvent(evt) : evt;\n    if (wrapped instanceof Promise) {\n      wrapped.then((e) => this.emitEvent(false, e, relay, fromCache, optimisticPublish));\n    } else if (wrapped) {\n      this.emit(\"event\", wrapped, relay, this, fromCache, optimisticPublish);\n    }\n  }\n  closedReceived(relay, reason) {\n    this.emit(\"closed\", relay, reason);\n  }\n  // EOSE handling\n  eoseTimeout;\n  eosed = false;\n  eoseReceived(relay) {\n    this.debug(\"EOSE received from %s\", relay.url);\n    this.eosesSeen.add(relay);\n    let lastEventSeen = this.lastEventReceivedAt ? Date.now() - this.lastEventReceivedAt : void 0;\n    const hasSeenAllEoses = this.eosesSeen.size === this.relayFilters?.size;\n    const queryFilled = queryFullyFilled(this);\n    const performEose = (reason) => {\n      this.debug(\"Performing EOSE: %s %d\", reason, this.eosed);\n      if (this.eosed) return;\n      if (this.eoseTimeout) clearTimeout(this.eoseTimeout);\n      this.emit(\"eose\", this);\n      this.eosed = true;\n      if (this.opts?.closeOnEose) this.stop();\n    };\n    if (queryFilled || hasSeenAllEoses) {\n      performEose(\"query filled or seen all\");\n    } else if (this.relayFilters) {\n      let timeToWaitForNextEose = 1e3;\n      const connectedRelays = new Set(this.pool.connectedRelays().map((r) => r.url));\n      const connectedRelaysWithFilters = Array.from(this.relayFilters.keys()).filter(\n        (url) => connectedRelays.has(url)\n      );\n      if (connectedRelaysWithFilters.length === 0) {\n        this.debug(\n          \"No connected relays, waiting for all relays to connect\",\n          Array.from(this.relayFilters.keys()).join(\", \")\n        );\n        return;\n      }\n      const percentageOfRelaysThatHaveSentEose = this.eosesSeen.size / connectedRelaysWithFilters.length;\n      this.debug(\"Percentage of relays that have sent EOSE\", {\n        subId: this.subId,\n        percentageOfRelaysThatHaveSentEose,\n        seen: this.eosesSeen.size,\n        total: connectedRelaysWithFilters.length\n      });\n      if (this.eosesSeen.size >= 2 && percentageOfRelaysThatHaveSentEose >= 0.5) {\n        timeToWaitForNextEose = timeToWaitForNextEose * (1 - percentageOfRelaysThatHaveSentEose);\n        if (timeToWaitForNextEose === 0) {\n          performEose(\"time to wait was 0\");\n          return;\n        }\n        if (this.eoseTimeout) clearTimeout(this.eoseTimeout);\n        const sendEoseTimeout = () => {\n          lastEventSeen = this.lastEventReceivedAt ? Date.now() - this.lastEventReceivedAt : void 0;\n          if (lastEventSeen !== void 0 && lastEventSeen < 20) {\n            this.eoseTimeout = setTimeout(sendEoseTimeout, timeToWaitForNextEose);\n          } else {\n            performEose(`send eose timeout: ${timeToWaitForNextEose}`);\n          }\n        };\n        this.eoseTimeout = setTimeout(sendEoseTimeout, timeToWaitForNextEose);\n      }\n    }\n  }\n};\nvar kindIsEphemeral = (kind) => kind >= 2e4 && kind < 3e4;\n\n// src/user/follows.ts\nasync function follows(opts, outbox, kind = 3 /* Contacts */) {\n  if (!this.ndk) throw new Error(\"NDK not set\");\n  const contactListEvent = await this.ndk.fetchEvent(\n    { kinds: [kind], authors: [this.pubkey] },\n    opts || { groupable: false }\n  );\n  if (contactListEvent) {\n    const pubkeys = /* @__PURE__ */ new Set();\n    contactListEvent.tags.forEach((tag) => {\n      if (tag[0] === \"p\") pubkeys.add(tag[1]);\n    });\n    if (outbox) {\n      this.ndk?.outboxTracker?.trackUsers(Array.from(pubkeys));\n    }\n    return [...pubkeys].reduce((acc, pubkey) => {\n      const user = new NDKUser({ pubkey });\n      user.ndk = this.ndk;\n      acc.add(user);\n      return acc;\n    }, /* @__PURE__ */ new Set());\n  }\n  return /* @__PURE__ */ new Set();\n}\n\n// src/user/nip05.ts\nvar NIP05_REGEX = /^(?:([\\w.+-]+)@)?([\\w.-]+)$/;\nasync function getNip05For(ndk, fullname, _fetch = fetch, fetchOpts = {}) {\n  return await ndk.queuesNip05.add({\n    id: fullname,\n    func: async () => {\n      if (ndk.cacheAdapter?.loadNip05) {\n        const profile = await ndk.cacheAdapter.loadNip05(fullname);\n        if (profile !== \"missing\") {\n          if (profile) {\n            const user = new NDKUser({\n              pubkey: profile.pubkey,\n              relayUrls: profile.relays,\n              nip46Urls: profile.nip46\n            });\n            user.ndk = ndk;\n            return user;\n          }\n          if (fetchOpts.cache !== \"no-cache\") {\n            return null;\n          }\n        }\n      }\n      const match = fullname.match(NIP05_REGEX);\n      if (!match) return null;\n      const [_, name = \"_\", domain] = match;\n      try {\n        const res = await _fetch(`https://${domain}/.well-known/nostr.json?name=${name}`, fetchOpts);\n        const { names, relays, nip46 } = parseNIP05Result(await res.json());\n        const pubkey = names[name.toLowerCase()];\n        let profile = null;\n        if (pubkey) {\n          profile = { pubkey, relays: relays?.[pubkey], nip46: nip46?.[pubkey] };\n        }\n        if (ndk?.cacheAdapter?.saveNip05) {\n          ndk.cacheAdapter.saveNip05(fullname, profile);\n        }\n        return profile;\n      } catch (_e) {\n        if (ndk?.cacheAdapter?.saveNip05) {\n          ndk?.cacheAdapter.saveNip05(fullname, null);\n        }\n        console.error(\"Failed to fetch NIP05 for\", fullname, _e);\n        return null;\n      }\n    }\n  });\n}\nfunction parseNIP05Result(json) {\n  const result = {\n    names: {}\n  };\n  for (const [name, pubkey] of Object.entries(json.names)) {\n    if (typeof name === \"string\" && typeof pubkey === \"string\") {\n      result.names[name.toLowerCase()] = pubkey;\n    }\n  }\n  if (json.relays) {\n    result.relays = {};\n    for (const [pubkey, relays] of Object.entries(json.relays)) {\n      if (typeof pubkey === \"string\" && Array.isArray(relays)) {\n        result.relays[pubkey] = relays.filter((relay) => typeof relay === \"string\");\n      }\n    }\n  }\n  if (json.nip46) {\n    result.nip46 = {};\n    for (const [pubkey, nip46] of Object.entries(json.nip46)) {\n      if (typeof pubkey === \"string\" && Array.isArray(nip46)) {\n        result.nip46[pubkey] = nip46.filter((relay) => typeof relay === \"string\");\n      }\n    }\n  }\n  return result;\n}\n\n// src/user/profile.ts\nfunction profileFromEvent(event) {\n  const profile = {};\n  let payload;\n  try {\n    payload = JSON.parse(event.content);\n  } catch (error) {\n    throw new Error(`Failed to parse profile event: ${error}`);\n  }\n  profile.profileEvent = JSON.stringify(event.rawEvent());\n  for (const key of Object.keys(payload)) {\n    switch (key) {\n      case \"name\":\n        profile.name = payload.name;\n        break;\n      case \"display_name\":\n        profile.displayName = payload.display_name;\n        break;\n      case \"image\":\n      case \"picture\":\n        profile.picture = payload.picture || payload.image;\n        profile.image = profile.picture;\n        break;\n      case \"banner\":\n        profile.banner = payload.banner;\n        break;\n      case \"bio\":\n        profile.bio = payload.bio;\n        break;\n      case \"nip05\":\n        profile.nip05 = payload.nip05;\n        break;\n      case \"lud06\":\n        profile.lud06 = payload.lud06;\n        break;\n      case \"lud16\":\n        profile.lud16 = payload.lud16;\n        break;\n      case \"about\":\n        profile.about = payload.about;\n        break;\n      case \"website\":\n        profile.website = payload.website;\n        break;\n      default:\n        profile[key] = payload[key];\n        break;\n    }\n  }\n  profile.created_at = event.created_at;\n  return profile;\n}\nfunction serializeProfile(profile) {\n  const payload = {};\n  for (const [key, val] of Object.entries(profile)) {\n    switch (key) {\n      case \"username\":\n      case \"name\":\n        payload.name = val;\n        break;\n      case \"displayName\":\n        payload.display_name = val;\n        break;\n      case \"image\":\n      case \"picture\":\n        payload.picture = val;\n        break;\n      case \"bio\":\n      case \"about\":\n        payload.about = val;\n        break;\n      default:\n        payload[key] = val;\n        break;\n    }\n  }\n  return JSON.stringify(payload);\n}\n\n// src/user/index.ts\nvar NDKUser = class _NDKUser {\n  ndk;\n  profile;\n  profileEvent;\n  _npub;\n  _pubkey;\n  relayUrls = [];\n  nip46Urls = [];\n  constructor(opts) {\n    if (opts.npub) this._npub = opts.npub;\n    if (opts.hexpubkey) this._pubkey = opts.hexpubkey;\n    if (opts.pubkey) this._pubkey = opts.pubkey;\n    if (opts.relayUrls) this.relayUrls = opts.relayUrls;\n    if (opts.nip46Urls) this.nip46Urls = opts.nip46Urls;\n    if (opts.nprofile) {\n      try {\n        const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(opts.nprofile);\n        if (decoded.type === \"nprofile\") {\n          this._pubkey = decoded.data.pubkey;\n          if (decoded.data.relays && decoded.data.relays.length > 0) {\n            this.relayUrls.push(...decoded.data.relays);\n          }\n        }\n      } catch (e) {\n        console.error(\"Failed to decode nprofile\", e);\n      }\n    }\n  }\n  get npub() {\n    if (!this._npub) {\n      if (!this._pubkey) throw new Error(\"pubkey not set\");\n      this._npub = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.npubEncode(this.pubkey);\n    }\n    return this._npub;\n  }\n  get nprofile() {\n    const relays = this.profileEvent?.onRelays?.map((r) => r.url);\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.nprofileEncode({\n      pubkey: this.pubkey,\n      relays\n    });\n  }\n  set npub(npub2) {\n    this._npub = npub2;\n  }\n  /**\n   * Get the user's pubkey\n   * @returns {string} The user's pubkey\n   */\n  get pubkey() {\n    if (!this._pubkey) {\n      if (!this._npub) throw new Error(\"npub not set\");\n      this._pubkey = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(this.npub).data;\n    }\n    return this._pubkey;\n  }\n  /**\n   * Set the user's pubkey\n   * @param pubkey {string} The user's pubkey\n   */\n  set pubkey(pubkey) {\n    this._pubkey = pubkey;\n  }\n  /**\n   * Equivalent to NDKEvent.filters().\n   * @returns {NDKFilter}\n   */\n  filter() {\n    return { \"#p\": [this.pubkey] };\n  }\n  /**\n   * Gets NIP-57 and NIP-61 information that this user has signaled\n   *\n   * @param getAll {boolean} Whether to get all zap info or just the first one\n   */\n  async getZapInfo(timeoutMs) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    const promiseWithTimeout = async (promise) => {\n      if (!timeoutMs) return promise;\n      let timeoutId;\n      const timeoutPromise = new Promise((_, reject) => {\n        timeoutId = setTimeout(() => reject(new Error(\"Timeout\")), timeoutMs);\n      });\n      try {\n        const result = await Promise.race([promise, timeoutPromise]);\n        if (timeoutId) clearTimeout(timeoutId);\n        return result;\n      } catch (e) {\n        if (e instanceof Error && e.message === \"Timeout\") {\n          try {\n            const result = await promise;\n            return result;\n          } catch (_originalError) {\n            return void 0;\n          }\n        }\n        return void 0;\n      }\n    };\n    const [userProfile, mintListEvent] = await Promise.all([\n      promiseWithTimeout(this.fetchProfile()),\n      promiseWithTimeout(this.ndk.fetchEvent({ kinds: [10019 /* CashuMintList */], authors: [this.pubkey] }))\n    ]);\n    const res = /* @__PURE__ */ new Map();\n    if (mintListEvent) {\n      const mintList = NDKCashuMintList.from(mintListEvent);\n      if (mintList.mints.length > 0) {\n        res.set(\"nip61\", {\n          mints: mintList.mints,\n          relays: mintList.relays,\n          p2pk: mintList.p2pk\n        });\n      }\n    }\n    if (userProfile) {\n      const { lud06, lud16 } = userProfile;\n      res.set(\"nip57\", { lud06, lud16 });\n    }\n    return res;\n  }\n  /**\n   * Instantiate an NDKUser from a NIP-05 string\n   * @param nip05Id {string} The user's NIP-05\n   * @param ndk {NDK} An NDK instance\n   * @param skipCache {boolean} Whether to skip the cache or not\n   * @returns {NDKUser | undefined} An NDKUser if one is found for the given NIP-05, undefined otherwise.\n   */\n  static async fromNip05(nip05Id, ndk, skipCache = false) {\n    if (!ndk) throw new Error(\"No NDK instance found\");\n    const opts = {};\n    if (skipCache) opts.cache = \"no-cache\";\n    const profile = await getNip05For(ndk, nip05Id, ndk?.httpFetch, opts);\n    if (profile) {\n      const user = new _NDKUser({\n        pubkey: profile.pubkey,\n        relayUrls: profile.relays,\n        nip46Urls: profile.nip46\n      });\n      user.ndk = ndk;\n      return user;\n    }\n  }\n  /**\n   * Fetch a user's profile\n   * @param opts {NDKSubscriptionOptions} A set of NDKSubscriptionOptions\n   * @param storeProfileEvent {boolean} Whether to store the profile event or not\n   * @returns User Profile\n   */\n  async fetchProfile(opts, storeProfileEvent = false) {\n    if (!this.ndk) throw new Error(\"NDK not set\");\n    let setMetadataEvent = null;\n    if (this.ndk.cacheAdapter && (this.ndk.cacheAdapter.fetchProfile || this.ndk.cacheAdapter.fetchProfileSync) && opts?.cacheUsage !== \"ONLY_RELAY\" /* ONLY_RELAY */) {\n      let profile = null;\n      if (this.ndk.cacheAdapter.fetchProfileSync) {\n        profile = this.ndk.cacheAdapter.fetchProfileSync(this.pubkey);\n      } else if (this.ndk.cacheAdapter.fetchProfile) {\n        profile = await this.ndk.cacheAdapter.fetchProfile(this.pubkey);\n      }\n      if (profile) {\n        this.profile = profile;\n        return profile;\n      }\n    }\n    opts ??= {};\n    opts.cacheUsage ??= \"ONLY_RELAY\" /* ONLY_RELAY */;\n    opts.closeOnEose ??= true;\n    opts.groupable ??= true;\n    opts.groupableDelay ??= 250;\n    if (!setMetadataEvent) {\n      setMetadataEvent = await this.ndk.fetchEvent({ kinds: [0], authors: [this.pubkey] }, opts);\n    }\n    if (!setMetadataEvent) return null;\n    this.profile = profileFromEvent(setMetadataEvent);\n    if (storeProfileEvent && this.profile && this.ndk.cacheAdapter && this.ndk.cacheAdapter.saveProfile) {\n      this.ndk.cacheAdapter.saveProfile(this.pubkey, this.profile);\n    }\n    return this.profile;\n  }\n  /**\n   * Returns a set of users that this user follows.\n   *\n   * @deprecated Use followSet instead\n   */\n  follows = follows.bind(this);\n  /**\n   * Returns a set of pubkeys that this user follows.\n   *\n   * @param opts - NDKSubscriptionOptions\n   * @param outbox - boolean\n   * @param kind - number\n   */\n  async followSet(opts, outbox, kind = 3 /* Contacts */) {\n    const follows2 = await this.follows(opts, outbox, kind);\n    return new Set(Array.from(follows2).map((f) => f.pubkey));\n  }\n  /** @deprecated Use referenceTags instead. */\n  /**\n   * Get the tag that can be used to reference this user in an event\n   * @returns {NDKTag} an NDKTag\n   */\n  tagReference() {\n    return [\"p\", this.pubkey];\n  }\n  /**\n   * Get the tags that can be used to reference this user in an event\n   * @returns {NDKTag[]} an array of NDKTag\n   */\n  referenceTags(marker) {\n    const tag = [[\"p\", this.pubkey]];\n    if (!marker) return tag;\n    tag[0].push(\"\", marker);\n    return tag;\n  }\n  /**\n   * Publishes the current profile.\n   */\n  async publish() {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    if (!this.profile) throw new Error(\"No profile available\");\n    this.ndk.assertSigner();\n    const event = new NDKEvent(this.ndk, {\n      kind: 0,\n      content: serializeProfile(this.profile)\n    });\n    await event.publish();\n  }\n  /**\n   * Add a follow to this user's contact list\n   *\n   * @param newFollow {NDKUser} The user to follow\n   * @param currentFollowList {Set<NDKUser>} The current follow list\n   * @param kind {NDKKind} The kind to use for this contact list (defaults to `3`)\n   * @returns {Promise<boolean>} True if the follow was added, false if the follow already exists\n   */\n  async follow(newFollow, currentFollowList, kind = 3 /* Contacts */) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    if (!currentFollowList) {\n      currentFollowList = await this.follows(void 0, void 0, kind);\n    }\n    if (currentFollowList.has(newFollow)) {\n      return false;\n    }\n    currentFollowList.add(newFollow);\n    const event = new NDKEvent(this.ndk, { kind });\n    for (const follow of currentFollowList) {\n      event.tag(follow);\n    }\n    await event.publish();\n    return true;\n  }\n  /**\n   * Remove a follow from this user's contact list\n   *\n   * @param user {NDKUser} The user to unfollow\n   * @param currentFollowList {Set<NDKUser>} The current follow list\n   * @param kind {NDKKind} The kind to use for this contact list (defaults to `3`)\n   * @returns The relays were the follow list was published or false if the user wasn't found\n   */\n  async unfollow(user, currentFollowList, kind = 3 /* Contacts */) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    if (!currentFollowList) {\n      currentFollowList = await this.follows(void 0, void 0, kind);\n    }\n    const newUserFollowList = /* @__PURE__ */ new Set();\n    let foundUser = false;\n    for (const follow of currentFollowList) {\n      if (follow.pubkey !== user.pubkey) {\n        newUserFollowList.add(follow);\n      } else {\n        foundUser = true;\n      }\n    }\n    if (!foundUser) return false;\n    const event = new NDKEvent(this.ndk, { kind });\n    for (const follow of newUserFollowList) {\n      event.tag(follow);\n    }\n    return await event.publish();\n  }\n  /**\n   * Validate a user's NIP-05 identifier (usually fetched from their kind:0 profile data)\n   *\n   * @param nip05Id The NIP-05 string to validate\n   * @returns {Promise<boolean | null>} True if the NIP-05 is found and matches this user's pubkey,\n   * False if the NIP-05 is found but doesn't match this user's pubkey,\n   * null if the NIP-05 isn't found on the domain or we're unable to verify (because of network issues, etc.)\n   */\n  async validateNip05(nip05Id) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    const profilePointer = await getNip05For(this.ndk, nip05Id);\n    if (profilePointer === null) return null;\n    return profilePointer.pubkey === this.pubkey;\n  }\n};\n\n// src/user/pin.ts\nasync function pinEvent(user, event, pinEvent2, publish) {\n  const kind = 10001 /* PinList */;\n  if (!user.ndk) throw new Error(\"No NDK instance found\");\n  user.ndk.assertSigner();\n  if (!pinEvent2) {\n    const events = await user.ndk.fetchEvents(\n      { kinds: [kind], authors: [user.pubkey] },\n      { cacheUsage: \"ONLY_RELAY\" /* ONLY_RELAY */ }\n    );\n    if (events.size > 0) {\n      pinEvent2 = lists_default.from(Array.from(events)[0]);\n    } else {\n      pinEvent2 = new NDKEvent(user.ndk, {\n        kind\n      });\n    }\n  }\n  pinEvent2.tag(event);\n  if (publish) {\n    await pinEvent2.publish();\n  }\n  return pinEvent2;\n}\n\n// src/events/kinds/classified.ts\nvar NDKClassified = class _NDKClassified extends NDKEvent {\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30402 /* Classified */;\n  }\n  /**\n   * Creates a NDKClassified from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKClassified from.\n   * @returns NDKClassified\n   */\n  static from(event) {\n    return new _NDKClassified(event.ndk, event);\n  }\n  /**\n   * Getter for the classified title.\n   *\n   * @returns {string | undefined} - The classified title if available, otherwise undefined.\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the classified title.\n   *\n   * @param {string | undefined} title - The title to set for the classified.\n   */\n  set title(title) {\n    this.removeTag(\"title\");\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Getter for the classified summary.\n   *\n   * @returns {string | undefined} - The classified summary if available, otherwise undefined.\n   */\n  get summary() {\n    return this.tagValue(\"summary\");\n  }\n  /**\n   * Setter for the classified summary.\n   *\n   * @param {string | undefined} summary - The summary to set for the classified.\n   */\n  set summary(summary) {\n    this.removeTag(\"summary\");\n    if (summary) this.tags.push([\"summary\", summary]);\n  }\n  /**\n   * Getter for the classified's publication timestamp.\n   *\n   * @returns {number | undefined} - The Unix timestamp of when the classified was published or undefined.\n   */\n  get published_at() {\n    const tag = this.tagValue(\"published_at\");\n    if (tag) {\n      return Number.parseInt(tag);\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the classified's publication timestamp.\n   *\n   * @param {number | undefined} timestamp - The Unix timestamp to set for the classified's publication date.\n   */\n  set published_at(timestamp) {\n    this.removeTag(\"published_at\");\n    if (timestamp !== void 0) {\n      this.tags.push([\"published_at\", timestamp.toString()]);\n    }\n  }\n  /**\n   * Getter for the classified location.\n   *\n   * @returns {string | undefined} - The classified location if available, otherwise undefined.\n   */\n  get location() {\n    return this.tagValue(\"location\");\n  }\n  /**\n   * Setter for the classified location.\n   *\n   * @param {string | undefined} location - The location to set for the classified.\n   */\n  set location(location) {\n    this.removeTag(\"location\");\n    if (location) this.tags.push([\"location\", location]);\n  }\n  /**\n   * Getter for the classified price.\n   *\n   * @returns {NDKClassifiedPriceTag | undefined} - The classified price if available, otherwise undefined.\n   */\n  get price() {\n    const priceTag = this.tags.find((tag) => tag[0] === \"price\");\n    if (priceTag) {\n      return {\n        amount: Number.parseFloat(priceTag[1]),\n        currency: priceTag[2],\n        frequency: priceTag[3]\n      };\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the classified price.\n   *\n   * @param price - The price to set for the classified.\n   */\n  set price(priceTag) {\n    if (typeof priceTag === \"string\") {\n      priceTag = {\n        amount: Number.parseFloat(priceTag)\n      };\n    }\n    if (priceTag?.amount) {\n      const tag = [\"price\", priceTag.amount.toString()];\n      if (priceTag.currency) tag.push(priceTag.currency);\n      if (priceTag.frequency) tag.push(priceTag.frequency);\n      this.tags.push(tag);\n    } else {\n      this.removeTag(\"price\");\n    }\n  }\n  /**\n   * Generates content tags for the classified.\n   *\n   * This method first checks and sets the publication date if not available,\n   * and then generates content tags based on the base NDKEvent class.\n   *\n   * @returns {ContentTag} - The generated content tags.\n   */\n  async generateTags() {\n    super.generateTags();\n    if (!this.published_at) {\n      this.published_at = this.created_at;\n    }\n    return super.generateTags();\n  }\n};\n\n// src/events/kinds/drafts.ts\nvar NDKDraft = class _NDKDraft extends NDKEvent {\n  _event;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 31234 /* Draft */;\n  }\n  static from(event) {\n    return new _NDKDraft(event.ndk, event);\n  }\n  /**\n   * Sets an identifier (i.e. d-tag)\n   */\n  set identifier(id) {\n    this.removeTag(\"d\");\n    this.tags.push([\"d\", id]);\n  }\n  get identifier() {\n    return this.dTag;\n  }\n  /**\n   * Event that is to be saved.\n   */\n  set event(e) {\n    if (e instanceof NDKEvent) this._event = e.rawEvent();\n    else this._event = e;\n    this.prepareEvent();\n  }\n  /**\n   * Gets the event.\n   * @param param0\n   * @returns NDKEvent of the draft event or null if the draft event has been deleted (emptied).\n   */\n  async getEvent(signer) {\n    if (this._event) return new NDKEvent(this.ndk, this._event);\n    signer ??= this.ndk?.signer;\n    if (!signer) throw new Error(\"No signer available\");\n    const user = await signer.user();\n    if (this.content && this.content.length > 0) {\n      try {\n        await this.decrypt(user, signer);\n        const payload = JSON.parse(this.content);\n        this._event = payload;\n        return new NDKEvent(this.ndk, payload);\n      } catch (e) {\n        console.error(e);\n        return void 0;\n      }\n    } else {\n      return null;\n    }\n  }\n  prepareEvent() {\n    if (!this._event) throw new Error(\"No event has been provided\");\n    this.removeTag(\"k\");\n    if (this._event.kind) this.tags.push([\"k\", this._event.kind.toString()]);\n    this.content = JSON.stringify(this._event);\n  }\n  /**\n   * Generates draft event.\n   *\n   * @param signer: Optional signer to encrypt with\n   * @param publish: Whether to publish, optionally specifying relaySet to publish to\n   */\n  async save({ signer, publish, relaySet }) {\n    signer ??= this.ndk?.signer;\n    if (!signer) throw new Error(\"No signer available\");\n    const user = await signer.user();\n    await this.encrypt(user, signer);\n    if (publish === false) return;\n    return this.publish(relaySet);\n  }\n};\n\n// src/events/kinds/dvm/feedback.ts\nvar NDKDvmJobFeedbackStatus = /* @__PURE__ */ ((NDKDvmJobFeedbackStatus2) => {\n  NDKDvmJobFeedbackStatus2[\"Processing\"] = \"processing\";\n  NDKDvmJobFeedbackStatus2[\"Success\"] = \"success\";\n  NDKDvmJobFeedbackStatus2[\"Scheduled\"] = \"scheduled\";\n  NDKDvmJobFeedbackStatus2[\"PayReq\"] = \"payment_required\";\n  return NDKDvmJobFeedbackStatus2;\n})(NDKDvmJobFeedbackStatus || {});\nvar NDKDVMJobFeedback = class _NDKDVMJobFeedback extends NDKEvent {\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 7e3 /* DVMJobFeedback */;\n  }\n  static async from(event) {\n    const e = new _NDKDVMJobFeedback(event.ndk, event.rawEvent());\n    if (e.encrypted) await e.dvmDecrypt();\n    return e;\n  }\n  get status() {\n    return this.tagValue(\"status\");\n  }\n  set status(status) {\n    this.removeTag(\"status\");\n    if (status !== void 0) {\n      this.tags.push([\"status\", status]);\n    }\n  }\n  get encrypted() {\n    return !!this.getMatchingTags(\"encrypted\")[0];\n  }\n  async dvmDecrypt() {\n    await this.decrypt();\n    const decryptedContent = JSON.parse(this.content);\n    this.tags.push(...decryptedContent);\n  }\n};\n\n// src/events/kinds/dvm/request.ts\nvar NDKDVMRequest = class _NDKDVMRequest extends NDKEvent {\n  static from(event) {\n    return new _NDKDVMRequest(event.ndk, event.rawEvent());\n  }\n  set bid(msatAmount) {\n    if (msatAmount === void 0) {\n      this.removeTag(\"bid\");\n    } else {\n      this.tags.push([\"bid\", msatAmount.toString()]);\n    }\n  }\n  get bid() {\n    const v = this.tagValue(\"bid\");\n    if (v === void 0) return void 0;\n    return Number.parseInt(v);\n  }\n  /**\n   * Adds a new input to the job\n   * @param args The arguments to the input\n   */\n  addInput(...args) {\n    this.tags.push([\"i\", ...args]);\n  }\n  /**\n   * Adds a new parameter to the job\n   */\n  addParam(...args) {\n    this.tags.push([\"param\", ...args]);\n  }\n  set output(output) {\n    if (output === void 0) {\n      this.removeTag(\"output\");\n    } else {\n      if (typeof output === \"string\") output = [output];\n      this.tags.push([\"output\", ...output]);\n    }\n  }\n  get output() {\n    const outputTag = this.getMatchingTags(\"output\")[0];\n    return outputTag ? outputTag.slice(1) : void 0;\n  }\n  get params() {\n    const paramTags = this.getMatchingTags(\"param\");\n    return paramTags.map((t) => t.slice(1));\n  }\n  getParam(name) {\n    const paramTag = this.getMatchingTags(\"param\").find((t) => t[1] === name);\n    return paramTag ? paramTag[2] : void 0;\n  }\n  createFeedback(status) {\n    const feedback = new NDKDVMJobFeedback(this.ndk);\n    feedback.tag(this, \"job\");\n    feedback.status = status;\n    return feedback;\n  }\n  /**\n   * Enables job encryption for this event\n   * @param dvm DVM that will receive the event\n   * @param signer Signer to use for encryption\n   */\n  async encryption(dvm, signer) {\n    const dvmTags = [\"i\", \"param\", \"output\", \"relays\", \"bid\"];\n    const tags = this.tags.filter((t) => dvmTags.includes(t[0]));\n    this.tags = this.tags.filter((t) => !dvmTags.includes(t[0]));\n    this.content = JSON.stringify(tags);\n    this.tag(dvm);\n    this.tags.push([\"encrypted\"]);\n    await this.encrypt(dvm, signer);\n  }\n  /**\n   * Sets the DVM that will receive the event\n   */\n  set dvm(dvm) {\n    this.removeTag(\"p\");\n    if (dvm) this.tag(dvm);\n  }\n};\n\n// src/events/kinds/dvm/NDKTranscriptionDVM.ts\nvar NDKTranscriptionDVM = class _NDKTranscriptionDVM extends NDKDVMRequest {\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind = 5e3 /* DVMReqTextExtraction */;\n  }\n  static from(event) {\n    return new _NDKTranscriptionDVM(event.ndk, event.rawEvent());\n  }\n  /**\n   * Returns the original source of the transcription\n   */\n  get url() {\n    const inputTags = this.getMatchingTags(\"i\");\n    if (inputTags.length !== 1) {\n      return void 0;\n    }\n    return inputTags[0][1];\n  }\n  /**\n   * Getter for the title tag\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the title tag\n   */\n  set title(value) {\n    this.removeTag(\"title\");\n    if (value) {\n      this.tags.push([\"title\", value]);\n    }\n  }\n  /**\n   * Getter for the image tag\n   */\n  get image() {\n    return this.tagValue(\"image\");\n  }\n  /**\n   * Setter for the image tag\n   */\n  set image(value) {\n    this.removeTag(\"image\");\n    if (value) {\n      this.tags.push([\"image\", value]);\n    }\n  }\n};\n\n// src/events/kinds/dvm/result.ts\nvar NDKDVMJobResult = class _NDKDVMJobResult extends NDKEvent {\n  static from(event) {\n    return new _NDKDVMJobResult(event.ndk, event.rawEvent());\n  }\n  setAmount(msat, invoice) {\n    this.removeTag(\"amount\");\n    const tag = [\"amount\", msat.toString()];\n    if (invoice) tag.push(invoice);\n    this.tags.push(tag);\n  }\n  set result(result) {\n    if (result === void 0) {\n      this.content = \"\";\n    } else {\n      this.content = result;\n    }\n  }\n  get result() {\n    if (this.content === \"\") {\n      return void 0;\n    }\n    return this.content;\n  }\n  set status(status) {\n    this.removeTag(\"status\");\n    if (status !== void 0) {\n      this.tags.push([\"status\", status]);\n    }\n  }\n  get status() {\n    return this.tagValue(\"status\");\n  }\n  get jobRequestId() {\n    for (const eTag of this.getMatchingTags(\"e\")) {\n      if (eTag[2] === \"job\") return eTag[1];\n    }\n    if (this.jobRequest) return this.jobRequest.id;\n    return this.tagValue(\"e\");\n  }\n  set jobRequest(event) {\n    this.removeTag(\"request\");\n    if (event) {\n      this.kind = event.kind + 1e3;\n      this.tags.push([\"request\", JSON.stringify(event.rawEvent())]);\n      this.tag(event);\n    }\n  }\n  get jobRequest() {\n    const tag = this.tagValue(\"request\");\n    if (tag === void 0) {\n      return void 0;\n    }\n    return new NDKEvent(this.ndk, JSON.parse(tag));\n  }\n};\n\n// src/events/kinds/cashu/tx.ts\nvar MARKERS = {\n  REDEEMED: \"redeemed\",\n  CREATED: \"created\",\n  DESTROYED: \"destroyed\",\n  RESERVED: \"reserved\"\n};\nvar NDKCashuWalletTx = class _NDKCashuWalletTx extends NDKEvent {\n  static MARKERS = MARKERS;\n  static kind = 7376 /* CashuWalletTx */;\n  static kinds = [7376 /* CashuWalletTx */];\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 7376 /* CashuWalletTx */;\n  }\n  static async from(event) {\n    const walletChange = new _NDKCashuWalletTx(event.ndk, event);\n    const prevContent = walletChange.content;\n    try {\n      await walletChange.decrypt();\n    } catch (_e) {\n      walletChange.content ??= prevContent;\n    }\n    try {\n      const contentTags = JSON.parse(walletChange.content);\n      walletChange.tags = [...contentTags, ...walletChange.tags];\n    } catch (_e) {\n      return;\n    }\n    return walletChange;\n  }\n  set direction(direction) {\n    this.removeTag(\"direction\");\n    if (direction) this.tags.push([\"direction\", direction]);\n  }\n  get direction() {\n    return this.tagValue(\"direction\");\n  }\n  set amount(amount) {\n    this.removeTag(\"amount\");\n    this.tags.push([\"amount\", amount.toString()]);\n  }\n  get amount() {\n    const val = this.tagValue(\"amount\");\n    if (val === void 0) return void 0;\n    return Number(val);\n  }\n  set fee(fee) {\n    this.removeTag(\"fee\");\n    this.tags.push([\"fee\", fee.toString()]);\n  }\n  get fee() {\n    const val = this.tagValue(\"fee\");\n    if (val === void 0) return void 0;\n    return Number(val);\n  }\n  set unit(unit) {\n    this.removeTag(\"unit\");\n    if (unit) this.tags.push([\"unit\", unit.toString()]);\n  }\n  get unit() {\n    return this.tagValue(\"unit\");\n  }\n  set description(description) {\n    this.removeTag(\"description\");\n    if (description) this.tags.push([\"description\", description.toString()]);\n  }\n  get description() {\n    return this.tagValue(\"description\");\n  }\n  set mint(mint) {\n    this.removeTag(\"mint\");\n    if (mint) this.tags.push([\"mint\", mint.toString()]);\n  }\n  get mint() {\n    return this.tagValue(\"mint\");\n  }\n  /**\n   * Tags tokens that were created in this history event\n   */\n  set destroyedTokens(events) {\n    for (const event of events) {\n      this.tags.push(event.tagReference(MARKERS.DESTROYED));\n    }\n  }\n  set destroyedTokenIds(ids) {\n    for (const id of ids) {\n      this.tags.push([\"e\", id, \"\", MARKERS.DESTROYED]);\n    }\n  }\n  /**\n   * Tags tokens that were created in this history event\n   */\n  set createdTokens(events) {\n    for (const event of events) {\n      this.tags.push(event.tagReference(MARKERS.CREATED));\n    }\n  }\n  set reservedTokens(events) {\n    for (const event of events) {\n      this.tags.push(event.tagReference(MARKERS.RESERVED));\n    }\n  }\n  addRedeemedNutzap(event) {\n    this.tag(event, MARKERS.REDEEMED);\n  }\n  async toNostrEvent(pubkey) {\n    const encryptedTags = [];\n    const unencryptedTags = [];\n    for (const tag of this.tags) {\n      if (!this.shouldEncryptTag(tag)) {\n        unencryptedTags.push(tag);\n      } else {\n        encryptedTags.push(tag);\n      }\n    }\n    this.tags = unencryptedTags.filter((t) => t[0] !== \"client\");\n    this.content = JSON.stringify(encryptedTags);\n    const user = await this.ndk?.signer?.user();\n    await this.encrypt(user, void 0, \"nip44\");\n    return super.toNostrEvent(pubkey);\n  }\n  /**\n   * Whether this entry includes a redemption of a Nutzap\n   */\n  get hasNutzapRedemption() {\n    return this.getMatchingTags(\"e\", MARKERS.REDEEMED).length > 0;\n  }\n  shouldEncryptTag(tag) {\n    const unencryptedTagNames = [\"client\"];\n    if (unencryptedTagNames.includes(tag[0])) {\n      return false;\n    }\n    if (tag[0] === \"e\" && tag[3] === MARKERS.REDEEMED) {\n      return false;\n    }\n    if (tag[0] === \"p\") return false;\n    return true;\n  }\n};\n\n// src/events/kinds/NDKRelayList.ts\nvar READ_MARKER = \"read\";\nvar WRITE_MARKER = \"write\";\nvar NDKRelayList = class _NDKRelayList extends NDKEvent {\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 10002 /* RelayList */;\n  }\n  static from(ndkEvent) {\n    return new _NDKRelayList(ndkEvent.ndk, ndkEvent.rawEvent());\n  }\n  get readRelayUrls() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2] || tag[2] && tag[2] === READ_MARKER).map((tag) => tryNormalizeRelayUrl(tag[1])).filter((url) => !!url);\n  }\n  set readRelayUrls(relays) {\n    for (const relay of relays) {\n      this.tags.push([\"r\", relay, READ_MARKER]);\n    }\n  }\n  get writeRelayUrls() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2] || tag[2] && tag[2] === WRITE_MARKER).map((tag) => tryNormalizeRelayUrl(tag[1])).filter((url) => !!url);\n  }\n  set writeRelayUrls(relays) {\n    for (const relay of relays) {\n      this.tags.push([\"r\", relay, WRITE_MARKER]);\n    }\n  }\n  get bothRelayUrls() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2]).map((tag) => tag[1]);\n  }\n  set bothRelayUrls(relays) {\n    for (const relay of relays) {\n      this.tags.push([\"r\", relay]);\n    }\n  }\n  get relays() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").map((tag) => tag[1]);\n  }\n  /**\n   * Provides a relaySet for the relays in this list.\n   */\n  get relaySet() {\n    if (!this.ndk) throw new Error(\"NDKRelayList has no NDK instance\");\n    return new NDKRelaySet(\n      new Set(this.relays.map((u) => this.ndk?.pool.getRelay(u)).filter((r) => !!r)),\n      this.ndk\n    );\n  }\n};\nfunction relayListFromKind3(ndk, contactList) {\n  try {\n    const content = JSON.parse(contactList.content);\n    const relayList = new NDKRelayList(ndk);\n    const readRelays = /* @__PURE__ */ new Set();\n    const writeRelays = /* @__PURE__ */ new Set();\n    for (let [key, config] of Object.entries(content)) {\n      try {\n        key = normalizeRelayUrl(key);\n      } catch {\n        continue;\n      }\n      if (!config) {\n        readRelays.add(key);\n        writeRelays.add(key);\n      } else {\n        const relayConfig = config;\n        if (relayConfig.write) writeRelays.add(key);\n        if (relayConfig.read) readRelays.add(key);\n      }\n    }\n    relayList.readRelayUrls = Array.from(readRelays);\n    relayList.writeRelayUrls = Array.from(writeRelays);\n    return relayList;\n  } catch {\n  }\n  return void 0;\n}\n\n// src/events/kinds/nip89/app-handler.ts\nvar NDKAppHandlerEvent = class _NDKAppHandlerEvent extends NDKEvent {\n  profile;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 31990 /* AppHandler */;\n  }\n  static from(ndkEvent) {\n    const event = new _NDKAppHandlerEvent(ndkEvent.ndk, ndkEvent.rawEvent());\n    if (event.isValid) {\n      return event;\n    }\n    return null;\n  }\n  get isValid() {\n    const combinations = /* @__PURE__ */ new Map();\n    const combinationFromTag = (tag) => [tag[0], tag[2]].join(\":\").toLowerCase();\n    const tagsToInspect = [\"web\", \"android\", \"ios\"];\n    for (const tag of this.tags) {\n      if (tagsToInspect.includes(tag[0])) {\n        const combination = combinationFromTag(tag);\n        if (combinations.has(combination)) {\n          if (combinations.get(combination) !== tag[1].toLowerCase()) {\n            return false;\n          }\n        }\n        combinations.set(combination, tag[1].toLowerCase());\n      }\n    }\n    return true;\n  }\n  /**\n   * Fetches app handler information\n   * If no app information is available on the kind:31990,\n   * we fetch the event's author's profile and return that instead.\n   */\n  async fetchProfile() {\n    if (this.profile === void 0 && this.content.length > 0) {\n      try {\n        const profile = JSON.parse(this.content);\n        if (profile?.name) {\n          return profile;\n        }\n        this.profile = null;\n      } catch (_e) {\n        this.profile = null;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      const author = this.author;\n      author.fetchProfile().then(() => {\n        resolve(author.profile);\n      }).catch(reject);\n    });\n  }\n};\n\n// src/events/kinds/repost.ts\nvar NDKRepost = class _NDKRepost extends NDKEvent {\n  _repostedEvents;\n  static from(event) {\n    return new _NDKRepost(event.ndk, event.rawEvent());\n  }\n  /**\n   * Returns all reposted events by the current event.\n   *\n   * @param klass Optional class to convert the events to.\n   * @returns\n   */\n  async repostedEvents(klass, opts) {\n    const items = [];\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (this._repostedEvents !== void 0) return this._repostedEvents;\n    for (const eventId of this.repostedEventIds()) {\n      const filter = filterForId(eventId);\n      const event = await this.ndk.fetchEvent(filter, opts);\n      if (event) {\n        items.push(klass ? klass.from(event) : event);\n      }\n    }\n    return items;\n  }\n  /**\n   * Returns the reposted event IDs.\n   */\n  repostedEventIds() {\n    return this.tags.filter((t) => t[0] === \"e\" || t[0] === \"a\").map((t) => t[1]);\n  }\n};\nfunction filterForId(id) {\n  if (id.match(/:/)) {\n    const [kind, pubkey, identifier] = id.split(\":\");\n    return {\n      kinds: [Number.parseInt(kind)],\n      authors: [pubkey],\n      \"#d\": [identifier]\n    };\n  }\n  return { ids: [id] };\n}\n\n// src/events/kinds/subscriptions/receipt.ts\n\nvar NDKSubscriptionReceipt = class _NDKSubscriptionReceipt extends NDKEvent {\n  debug;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 7003 /* SubscriptionReceipt */;\n    this.debug = ndk?.debug.extend(\"subscription-start\") ?? debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:subscription-start\");\n  }\n  static from(event) {\n    return new _NDKSubscriptionReceipt(event.ndk, event.rawEvent());\n  }\n  /**\n   * This is the person being subscribed to\n   */\n  get recipient() {\n    const pTag = this.getMatchingTags(\"p\")?.[0];\n    if (!pTag) return void 0;\n    const user = new NDKUser({ pubkey: pTag[1] });\n    return user;\n  }\n  set recipient(user) {\n    this.removeTag(\"p\");\n    if (!user) return;\n    this.tags.push([\"p\", user.pubkey]);\n  }\n  /**\n   * This is the person subscribing\n   */\n  get subscriber() {\n    const PTag = this.getMatchingTags(\"P\")?.[0];\n    if (!PTag) return void 0;\n    const user = new NDKUser({ pubkey: PTag[1] });\n    return user;\n  }\n  set subscriber(user) {\n    this.removeTag(\"P\");\n    if (!user) return;\n    this.tags.push([\"P\", user.pubkey]);\n  }\n  set subscriptionStart(event) {\n    this.debug(`before setting subscription start: ${this.rawEvent}`);\n    this.removeTag(\"e\");\n    this.tag(event, \"subscription\", true);\n    this.debug(`after setting subscription start: ${this.rawEvent}`);\n  }\n  get tierName() {\n    const tag = this.getMatchingTags(\"tier\")?.[0];\n    return tag?.[1];\n  }\n  get isValid() {\n    const period = this.validPeriod;\n    if (!period) {\n      return false;\n    }\n    if (period.start > period.end) {\n      return false;\n    }\n    const pTags = this.getMatchingTags(\"p\");\n    const PTags = this.getMatchingTags(\"P\");\n    if (pTags.length !== 1 || PTags.length !== 1) {\n      return false;\n    }\n    return true;\n  }\n  get validPeriod() {\n    const tag = this.getMatchingTags(\"valid\")?.[0];\n    if (!tag) return void 0;\n    try {\n      return {\n        start: new Date(Number.parseInt(tag[1]) * 1e3),\n        end: new Date(Number.parseInt(tag[2]) * 1e3)\n      };\n    } catch {\n      return void 0;\n    }\n  }\n  set validPeriod(period) {\n    this.removeTag(\"valid\");\n    if (!period) return;\n    this.tags.push([\n      \"valid\",\n      Math.floor(period.start.getTime() / 1e3).toString(),\n      Math.floor(period.end.getTime() / 1e3).toString()\n    ]);\n  }\n  get startPeriod() {\n    return this.validPeriod?.start;\n  }\n  get endPeriod() {\n    return this.validPeriod?.end;\n  }\n  /**\n   * Whether the subscription is currently active\n   */\n  isActive(time) {\n    time ??= /* @__PURE__ */ new Date();\n    const period = this.validPeriod;\n    if (!period) return false;\n    if (time < period.start) return false;\n    if (time > period.end) return false;\n    return true;\n  }\n};\n\n// src/events/kinds/subscriptions/subscription-start.ts\n\nvar NDKSubscriptionStart = class _NDKSubscriptionStart extends NDKEvent {\n  debug;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 7001 /* Subscribe */;\n    this.debug = ndk?.debug.extend(\"subscription-start\") ?? debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:subscription-start\");\n  }\n  static from(event) {\n    return new _NDKSubscriptionStart(event.ndk, event.rawEvent());\n  }\n  /**\n   * Recipient of the subscription. I.e. The author of this event subscribes to this user.\n   */\n  get recipient() {\n    const pTag = this.getMatchingTags(\"p\")?.[0];\n    if (!pTag) return void 0;\n    const user = new NDKUser({ pubkey: pTag[1] });\n    return user;\n  }\n  set recipient(user) {\n    this.removeTag(\"p\");\n    if (!user) return;\n    this.tags.push([\"p\", user.pubkey]);\n  }\n  /**\n   * The amount of the subscription.\n   */\n  get amount() {\n    const amountTag = this.getMatchingTags(\"amount\")?.[0];\n    if (!amountTag) return void 0;\n    return parseTagToSubscriptionAmount(amountTag);\n  }\n  set amount(amount) {\n    this.removeTag(\"amount\");\n    if (!amount) return;\n    this.tags.push(newAmount(amount.amount, amount.currency, amount.term));\n  }\n  /**\n   * The event id or NIP-33 tag id of the tier that the user is subscribing to.\n   */\n  get tierId() {\n    const eTag = this.getMatchingTags(\"e\")?.[0];\n    const aTag = this.getMatchingTags(\"a\")?.[0];\n    if (!eTag || !aTag) return void 0;\n    return eTag[1] ?? aTag[1];\n  }\n  set tier(tier) {\n    this.removeTag(\"e\");\n    this.removeTag(\"a\");\n    this.removeTag(\"event\");\n    if (!tier) return;\n    this.tag(tier);\n    this.removeTag(\"p\");\n    this.tags.push([\"p\", tier.pubkey]);\n    this.tags.push([\"event\", JSON.stringify(tier.rawEvent())]);\n  }\n  /**\n   * Fetches the tier that the user is subscribing to.\n   */\n  async fetchTier() {\n    const eventTag = this.tagValue(\"event\");\n    if (eventTag) {\n      try {\n        const parsedEvent = JSON.parse(eventTag);\n        return new NDKSubscriptionTier(this.ndk, parsedEvent);\n      } catch {\n        this.debug(\"Failed to parse event tag\");\n      }\n    }\n    const tierId = this.tierId;\n    if (!tierId) return void 0;\n    const e = await this.ndk?.fetchEvent(tierId);\n    if (!e) return void 0;\n    return NDKSubscriptionTier.from(e);\n  }\n  get isValid() {\n    if (this.getMatchingTags(\"amount\").length !== 1) {\n      this.debug(\"Invalid # of amount tag\");\n      return false;\n    }\n    if (!this.amount) {\n      this.debug(\"Invalid amount tag\");\n      return false;\n    }\n    if (this.getMatchingTags(\"p\").length !== 1) {\n      this.debug(\"Invalid # of p tag\");\n      return false;\n    }\n    if (!this.recipient) {\n      this.debug(\"Invalid p tag\");\n      return false;\n    }\n    return true;\n  }\n};\n\n// src/events/gift-wrapping.ts\n\n\n// src/signers/private-key/index.ts\n\n\n\nvar NDKPrivateKeySigner = class _NDKPrivateKeySigner {\n  _user;\n  _privateKey;\n  _pubkey;\n  /**\n   * Create a new signer from a private key.\n   * @param privateKey - The private key to use in hex form or nsec.\n   * @param ndk - The NDK instance to use.\n   */\n  constructor(privateKeyOrNsec, ndk) {\n    if (typeof privateKeyOrNsec === \"string\") {\n      if (privateKeyOrNsec.startsWith(\"nsec1\")) {\n        const { type, data } = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(privateKeyOrNsec);\n        if (type === \"nsec\") this._privateKey = data;\n        else throw new Error(\"Invalid private key provided.\");\n      } else if (privateKeyOrNsec.length === 64) {\n        this._privateKey = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(privateKeyOrNsec);\n      } else {\n        throw new Error(\"Invalid private key provided.\");\n      }\n    } else {\n      this._privateKey = privateKeyOrNsec;\n    }\n    this._pubkey = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.getPublicKey)(this._privateKey);\n    if (ndk) this._user = ndk.getUser({ pubkey: this._pubkey });\n    this._user ??= new NDKUser({ pubkey: this._pubkey });\n  }\n  /**\n   * Get the private key in hex form.\n   */\n  get privateKey() {\n    if (!this._privateKey) throw new Error(\"Not ready\");\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(this._privateKey);\n  }\n  /**\n   * Get the public key in hex form.\n   */\n  get pubkey() {\n    if (!this._pubkey) throw new Error(\"Not ready\");\n    return this._pubkey;\n  }\n  /**\n   * Get the private key in nsec form.\n   */\n  get nsec() {\n    if (!this._privateKey) throw new Error(\"Not ready\");\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.nsecEncode(this._privateKey);\n  }\n  /**\n   * Get the public key in npub form.\n   */\n  get npub() {\n    if (!this._pubkey) throw new Error(\"Not ready\");\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.npubEncode(this._pubkey);\n  }\n  /**\n   * Generate a new private key.\n   */\n  static generate() {\n    const privateKey = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.generateSecretKey)();\n    return new _NDKPrivateKeySigner(privateKey);\n  }\n  /**\n   * Noop in NDKPrivateKeySigner.\n   */\n  async blockUntilReady() {\n    return this._user;\n  }\n  /**\n   * Get the user.\n   */\n  async user() {\n    return this._user;\n  }\n  /**\n   * Get the user.\n   */\n  get userSync() {\n    return this._user;\n  }\n  async sign(event) {\n    if (!this._privateKey) {\n      throw Error(\"Attempted to sign without a private key\");\n    }\n    return (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.finalizeEvent)(event, this._privateKey).sig;\n  }\n  async encryptionEnabled(scheme) {\n    const enabled = [];\n    if (!scheme || scheme === \"nip04\") enabled.push(\"nip04\");\n    if (!scheme || scheme === \"nip44\") enabled.push(\"nip44\");\n    return enabled;\n  }\n  async encrypt(recipient, value, scheme) {\n    if (!this._privateKey || !this.privateKey) {\n      throw Error(\"Attempted to encrypt without a private key\");\n    }\n    const recipientHexPubKey = recipient.pubkey;\n    if (scheme === \"nip44\") {\n      const conversationKey = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.utils.getConversationKey(this._privateKey, recipientHexPubKey);\n      return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.encrypt(value, conversationKey);\n    }\n    return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip04.encrypt(this._privateKey, recipientHexPubKey, value);\n  }\n  async decrypt(sender, value, scheme) {\n    if (!this._privateKey || !this.privateKey) {\n      throw Error(\"Attempted to decrypt without a private key\");\n    }\n    const senderHexPubKey = sender.pubkey;\n    if (scheme === \"nip44\") {\n      const conversationKey = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.utils.getConversationKey(this._privateKey, senderHexPubKey);\n      return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.decrypt(value, conversationKey);\n    }\n    return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip04.decrypt(this._privateKey, senderHexPubKey, value);\n  }\n  /**\n   * Serializes the signer's private key into a storable format.\n   * @returns A JSON string containing the type and the hex private key.\n   */\n  toPayload() {\n    if (!this._privateKey) throw new Error(\"Private key not available\");\n    const payload = {\n      type: \"private-key\",\n      payload: this.privateKey\n      // Use the hex private key\n    };\n    return JSON.stringify(payload);\n  }\n  /**\n   * Deserializes the signer from a payload string.\n   * @param payloadString The JSON string obtained from toPayload().\n   * @param ndk Optional NDK instance.\n   * @returns An instance of NDKPrivateKeySigner.\n   */\n  static async fromPayload(payloadString, ndk) {\n    const payload = JSON.parse(payloadString);\n    if (payload.type !== \"private-key\") {\n      throw new Error(`Invalid payload type: expected 'private-key', got ${payload.type}`);\n    }\n    if (!payload.payload || typeof payload.payload !== \"string\") {\n      throw new Error(\"Invalid payload content for private-key signer\");\n    }\n    return new _NDKPrivateKeySigner(payload.payload, ndk);\n  }\n};\n\n// src/events/gift-wrapping.ts\nasync function giftWrap(event, recipient, signer, params = {}) {\n  let _signer = signer;\n  params.scheme ??= \"nip44\";\n  if (!_signer) {\n    if (!event.ndk) throw new Error(\"no signer available for giftWrap\");\n    _signer = event.ndk.signer;\n  }\n  if (!_signer) throw new Error(\"no signer\");\n  if (!_signer.encryptionEnabled || !_signer.encryptionEnabled(params.scheme))\n    throw new Error(\"signer is not able to giftWrap\");\n  const rumor = getRumorEvent(event, params?.rumorKind);\n  const seal = await getSealEvent(rumor, recipient, _signer, params.scheme);\n  const wrap = await getWrapEvent(seal, recipient, params);\n  return new NDKEvent(event.ndk, wrap);\n}\nasync function giftUnwrap(event, sender, signer, scheme = \"nip44\") {\n  const _sender = sender || new NDKUser({ pubkey: event.pubkey });\n  let _signer = signer;\n  if (!_signer) {\n    if (!event.ndk) throw new Error(\"no signer available for giftUnwrap\");\n    _signer = event.ndk.signer;\n  }\n  if (!signer) throw new Error(\"no signer\");\n  try {\n    const seal = JSON.parse(await signer.decrypt(_sender, event.content, scheme));\n    if (!seal) throw new Error(\"Failed to decrypt wrapper\");\n    if (!new NDKEvent(void 0, seal).verifySignature(false))\n      throw new Error(\"GiftSeal signature verification failed!\");\n    const rumorSender = new NDKUser({ pubkey: seal.pubkey });\n    const rumor = JSON.parse(await signer.decrypt(rumorSender, seal.content, scheme));\n    if (!rumor) throw new Error(\"Failed to decrypt seal\");\n    if (rumor.pubkey !== seal.pubkey) throw new Error(\"Invalid GiftWrap, sender validation failed!\");\n    return new NDKEvent(event.ndk, rumor);\n  } catch (_e) {\n    return Promise.reject(\"Got error unwrapping event! See console log.\");\n  }\n}\nfunction getRumorEvent(event, kind) {\n  const rumor = event.rawEvent();\n  rumor.kind = kind || rumor.kind || 14 /* PrivateDirectMessage */;\n  rumor.sig = void 0;\n  rumor.id = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.getEventHash)(rumor);\n  return new NDKEvent(event.ndk, rumor);\n}\nasync function getSealEvent(rumor, recipient, signer, scheme = \"nip44\") {\n  const seal = new NDKEvent(rumor.ndk);\n  seal.kind = 13 /* GiftWrapSeal */;\n  seal.created_at = approximateNow(5);\n  seal.content = JSON.stringify(rumor.rawEvent());\n  await seal.encrypt(recipient, signer, scheme);\n  await seal.sign(signer);\n  return seal;\n}\nasync function getWrapEvent(sealed, recipient, params, scheme = \"nip44\") {\n  const signer = NDKPrivateKeySigner.generate();\n  const wrap = new NDKEvent(sealed.ndk);\n  wrap.kind = 1059 /* GiftWrap */;\n  wrap.created_at = approximateNow(5);\n  if (params?.wrapTags) wrap.tags = params.wrapTags;\n  wrap.tag(recipient);\n  wrap.content = JSON.stringify(sealed.rawEvent());\n  await wrap.encrypt(recipient, signer, scheme);\n  await wrap.sign(signer);\n  return wrap;\n}\nfunction approximateNow(drift = 0) {\n  return Math.round(Date.now() / 1e3 - Math.random() * 10 ** drift);\n}\n\n// src/events/kinds/simple-group/index.ts\nvar NDKSimpleGroup = class _NDKSimpleGroup {\n  ndk;\n  groupId;\n  relaySet;\n  fetchingMetadata;\n  metadata;\n  memberList;\n  adminList;\n  constructor(ndk, relaySet, groupId) {\n    this.ndk = ndk;\n    this.groupId = groupId ?? randomId(24);\n    this.relaySet = relaySet;\n  }\n  get id() {\n    return this.groupId;\n  }\n  relayUrls() {\n    return this.relaySet?.relayUrls;\n  }\n  get name() {\n    return this.metadata?.name;\n  }\n  get about() {\n    return this.metadata?.about;\n  }\n  get picture() {\n    return this.metadata?.picture;\n  }\n  get members() {\n    return this.memberList?.members ?? [];\n  }\n  get admins() {\n    return this.adminList?.members ?? [];\n  }\n  async getMetadata() {\n    await this.ensureMetadataEvent();\n    return this.metadata;\n  }\n  /**\n   * Creates the group by publishing a kind:9007 event.\n   * @param signer\n   * @returns\n   */\n  async createGroup(signer) {\n    signer ??= this.ndk.signer;\n    if (!signer) throw new Error(\"No signer available\");\n    const user = await signer.user();\n    if (!user) throw new Error(\"No user available\");\n    const event = new NDKEvent(this.ndk);\n    event.kind = 9007 /* GroupAdminCreateGroup */;\n    event.tags.push([\"h\", this.groupId]);\n    await event.sign(signer);\n    return event.publish(this.relaySet);\n  }\n  async setMetadata({ name, about, picture }) {\n    const event = new NDKEvent(this.ndk);\n    event.kind = 9002 /* GroupAdminEditMetadata */;\n    event.tags.push([\"h\", this.groupId]);\n    if (name) event.tags.push([\"name\", name]);\n    if (about) event.tags.push([\"about\", about]);\n    if (picture) event.tags.push([\"picture\", picture]);\n    await event.sign();\n    return event.publish(this.relaySet);\n  }\n  /**\n   * Adds a user to the group using a kind:9000 event\n   * @param user user to add\n   * @param opts options\n   */\n  async addUser(user) {\n    const addUserEvent = _NDKSimpleGroup.generateAddUserEvent(user.pubkey, this.groupId);\n    addUserEvent.ndk = this.ndk;\n    return addUserEvent;\n  }\n  async getMemberListEvent() {\n    const memberList = await this.ndk.fetchEvent(\n      {\n        kinds: [39002 /* GroupMembers */],\n        \"#d\": [this.groupId]\n      },\n      void 0,\n      this.relaySet\n    );\n    if (!memberList) return null;\n    return NDKSimpleGroupMemberList.from(memberList);\n  }\n  /**\n   * Gets a list of users that belong to this group\n   */\n  async getMembers() {\n    const members = [];\n    const memberPubkeys = /* @__PURE__ */ new Set();\n    const memberListEvent = await this.getMemberListEvent();\n    if (!memberListEvent) return [];\n    for (const pTag of memberListEvent.getMatchingTags(\"p\")) {\n      const pubkey = pTag[1];\n      if (memberPubkeys.has(pubkey)) continue;\n      memberPubkeys.add(pubkey);\n      try {\n        members.push(this.ndk.getUser({ pubkey }));\n      } catch {\n      }\n    }\n    return members;\n  }\n  /**\n   * Generates an event that lists the members of a group.\n   * @param groupId\n   * @returns\n   */\n  static generateUserListEvent(groupId) {\n    const event = new NDKEvent(void 0, {\n      kind: 39002 /* GroupMembers */,\n      tags: [\n        [\"h\", groupId],\n        [\"alt\", \"Group Member List\"]\n      ]\n    });\n    return event;\n  }\n  /**\n   * Generates an event that adds a user to a group.\n   * @param userPubkey pubkey of the user to add\n   * @param groupId group to add the user to\n   * @returns\n   */\n  static generateAddUserEvent(userPubkey, groupId) {\n    const event = new NDKEvent(void 0, {\n      kind: 9e3 /* GroupAdminAddUser */,\n      tags: [[\"h\", groupId]]\n    });\n    event.tags.push([\"p\", userPubkey]);\n    return event;\n  }\n  async requestToJoin(_pubkey, content) {\n    const event = new NDKEvent(this.ndk, {\n      kind: 9021 /* GroupAdminRequestJoin */,\n      content: content ?? \"\",\n      tags: [[\"h\", this.groupId]]\n    });\n    return event.publish(this.relaySet);\n  }\n  /**\n   * Makes sure that a metadata event exists locally\n   */\n  async ensureMetadataEvent() {\n    if (this.metadata) return;\n    if (this.fetchingMetadata) return this.fetchingMetadata;\n    this.fetchingMetadata = this.ndk.fetchEvent(\n      {\n        kinds: [39e3 /* GroupMetadata */],\n        \"#d\": [this.groupId]\n      },\n      void 0,\n      this.relaySet\n    ).then((event) => {\n      if (event) {\n        this.metadata = NDKSimpleGroupMetadata.from(event);\n      } else {\n        this.metadata = new NDKSimpleGroupMetadata(this.ndk);\n        this.metadata.dTag = this.groupId;\n      }\n    }).finally(() => {\n      this.fetchingMetadata = void 0;\n    }).catch(() => {\n      throw new Error(`Failed to fetch metadata for group ${this.groupId}`);\n    });\n    return this.fetchingMetadata;\n  }\n};\nfunction randomId(length) {\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charsLength = chars.length;\n  let result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * charsLength));\n  }\n  return result;\n}\n\n// src/app-settings/index.ts\nvar NDKAppSettings = class _NDKAppSettings extends NDKEvent {\n  appName;\n  settings = {};\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30078 /* AppSpecificData */;\n    this.dTag ??= this.appName;\n    if (this.content.length > 0) {\n      try {\n        this.settings = JSON.parse(this.content);\n      } catch (error) {\n        console.error(\"Error parsing app settings\", error);\n      }\n    }\n  }\n  static from(event) {\n    return new _NDKAppSettings(event.ndk, event);\n  }\n  /**\n   * Set a value for a given key.\n   *\n   * @param key\n   * @param value\n   */\n  set(key, value) {\n    this.settings[key] = value;\n  }\n  /**\n   * Get a value for a given key.\n   *\n   * @param key\n   * @returns\n   */\n  get(key) {\n    return this.settings[key];\n  }\n  async publishReplaceable(relaySet, timeoutMs, requiredRelayCount) {\n    this.content = JSON.stringify(this.settings);\n    return super.publishReplaceable(relaySet, timeoutMs, requiredRelayCount);\n  }\n};\n\n// src/relay/auth-policies.ts\n\nfunction disconnect(pool, debug8) {\n  debug8 ??= debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:relay:auth-policies:disconnect\");\n  return async (relay) => {\n    debug8?.(`Relay ${relay.url} requested authentication, disconnecting`);\n    pool.removeRelay(relay.url);\n  };\n}\nasync function signAndAuth(event, relay, signer, debug8, resolve, reject) {\n  try {\n    await event.sign(signer);\n    resolve(event);\n  } catch (e) {\n    debug8?.(`Failed to publish auth event to relay ${relay.url}`, e);\n    reject(event);\n  }\n}\nfunction signIn({ ndk, signer, debug: debug8 } = {}) {\n  debug8 ??= debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:auth-policies:signIn\");\n  return async (relay, challenge) => {\n    debug8?.(`Relay ${relay.url} requested authentication, signing in`);\n    const event = new NDKEvent(ndk);\n    event.kind = 22242 /* ClientAuth */;\n    event.tags = [\n      [\"relay\", relay.url],\n      [\"challenge\", challenge]\n    ];\n    signer ??= ndk?.signer;\n    return new Promise(async (resolve, reject) => {\n      if (signer) {\n        await signAndAuth(event, relay, signer, debug8, resolve, reject);\n      } else {\n        ndk?.once(\"signer:ready\", async (signer2) => {\n          await signAndAuth(event, relay, signer2, debug8, resolve, reject);\n        });\n      }\n    });\n  };\n}\nvar NDKRelayAuthPolicies = {\n  disconnect,\n  signIn\n};\n\n// src/signers/nip07/index.ts\n\nvar NDKNip07Signer = class _NDKNip07Signer {\n  _userPromise;\n  encryptionQueue = [];\n  encryptionProcessing = false;\n  debug;\n  waitTimeout;\n  _pubkey;\n  ndk;\n  _user;\n  /**\n   * @param waitTimeout - The timeout in milliseconds to wait for the NIP-07 to become available\n   */\n  constructor(waitTimeout = 1e3, ndk) {\n    this.debug = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:nip07\");\n    this.waitTimeout = waitTimeout;\n    this.ndk = ndk;\n  }\n  get pubkey() {\n    if (!this._pubkey) throw new Error(\"Not ready\");\n    return this._pubkey;\n  }\n  async blockUntilReady() {\n    await this.waitForExtension();\n    const pubkey = await window.nostr?.getPublicKey();\n    if (!pubkey) {\n      throw new Error(\"User rejected access\");\n    }\n    this._pubkey = pubkey;\n    let user;\n    if (this.ndk) user = this.ndk.getUser({ pubkey });\n    else user = new NDKUser({ pubkey });\n    this._user = user;\n    return user;\n  }\n  /**\n   * Getter for the user property.\n   * @returns The NDKUser instance.\n   */\n  async user() {\n    if (!this._userPromise) {\n      this._userPromise = this.blockUntilReady();\n    }\n    return this._userPromise;\n  }\n  get userSync() {\n    if (!this._user) throw new Error(\"User not ready\");\n    return this._user;\n  }\n  /**\n   * Signs the given Nostr event.\n   * @param event - The Nostr event to be signed.\n   * @returns The signature of the signed event.\n   * @throws Error if the NIP-07 is not available on the window object.\n   */\n  async sign(event) {\n    await this.waitForExtension();\n    const signedEvent = await window.nostr?.signEvent(event);\n    if (!signedEvent) throw new Error(\"Failed to sign event\");\n    return signedEvent.sig;\n  }\n  async relays(ndk) {\n    await this.waitForExtension();\n    const relays = await window.nostr?.getRelays?.() || {};\n    const activeRelays = [];\n    for (const url of Object.keys(relays)) {\n      if (relays[url].read && relays[url].write) {\n        activeRelays.push(url);\n      }\n    }\n    return activeRelays.map((url) => new NDKRelay(url, ndk?.relayAuthDefaultPolicy, ndk));\n  }\n  async encryptionEnabled(nip) {\n    const enabled = [];\n    if ((!nip || nip === \"nip04\") && Boolean(window.nostr?.nip04)) enabled.push(\"nip04\");\n    if ((!nip || nip === \"nip44\") && Boolean(window.nostr?.nip44)) enabled.push(\"nip44\");\n    return enabled;\n  }\n  async encrypt(recipient, value, nip = \"nip04\") {\n    if (!await this.encryptionEnabled(nip))\n      throw new Error(`${nip}encryption is not available from your browser extension`);\n    await this.waitForExtension();\n    const recipientHexPubKey = recipient.pubkey;\n    return this.queueEncryption(nip, \"encrypt\", recipientHexPubKey, value);\n  }\n  async decrypt(sender, value, nip = \"nip04\") {\n    if (!await this.encryptionEnabled(nip))\n      throw new Error(`${nip}encryption is not available from your browser extension`);\n    await this.waitForExtension();\n    const senderHexPubKey = sender.pubkey;\n    return this.queueEncryption(nip, \"decrypt\", senderHexPubKey, value);\n  }\n  async queueEncryption(scheme, method, counterpartyHexpubkey, value) {\n    return new Promise((resolve, reject) => {\n      this.encryptionQueue.push({\n        scheme,\n        method,\n        counterpartyHexpubkey,\n        value,\n        resolve,\n        reject\n      });\n      if (!this.encryptionProcessing) {\n        this.processEncryptionQueue();\n      }\n    });\n  }\n  async processEncryptionQueue(item, retries = 0) {\n    if (!item && this.encryptionQueue.length === 0) {\n      this.encryptionProcessing = false;\n      return;\n    }\n    this.encryptionProcessing = true;\n    const currentItem = item || this.encryptionQueue.shift();\n    if (!currentItem) {\n      this.encryptionProcessing = false;\n      return;\n    }\n    const { scheme, method, counterpartyHexpubkey, value, resolve, reject } = currentItem;\n    this.debug(\"Processing encryption queue item\", {\n      method,\n      counterpartyHexpubkey,\n      value\n    });\n    try {\n      const result = await window.nostr?.[scheme]?.[method](counterpartyHexpubkey, value);\n      if (!result) throw new Error(\"Failed to encrypt/decrypt\");\n      resolve(result);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      if (errorMessage.includes(\"call already executing\") && retries < 5) {\n        this.debug(\"Retrying encryption queue item\", {\n          method,\n          counterpartyHexpubkey,\n          value,\n          retries\n        });\n        setTimeout(() => {\n          this.processEncryptionQueue(currentItem, retries + 1);\n        }, 50 * retries);\n        return;\n      }\n      reject(error instanceof Error ? error : new Error(errorMessage));\n    }\n    this.processEncryptionQueue();\n  }\n  waitForExtension() {\n    return new Promise((resolve, reject) => {\n      if (window.nostr) {\n        resolve();\n        return;\n      }\n      let timerId;\n      const intervalId = setInterval(() => {\n        if (window.nostr) {\n          clearTimeout(timerId);\n          clearInterval(intervalId);\n          resolve();\n        }\n      }, 100);\n      timerId = setTimeout(() => {\n        clearInterval(intervalId);\n        reject(new Error(\"NIP-07 extension not available\"));\n      }, this.waitTimeout);\n    });\n  }\n  /**\n   * Serializes the signer type into a storable format.\n   * NIP-07 signers don't have persistent state to serialize beyond their type.\n   * @returns A JSON string containing the type.\n   */\n  toPayload() {\n    const payload = {\n      type: \"nip07\",\n      payload: \"\"\n      // No specific payload needed for NIP-07\n    };\n    return JSON.stringify(payload);\n  }\n  /**\n   * Deserializes the signer from a payload string.\n   * Creates a new NDKNip07Signer instance.\n   * @param payloadString The JSON string obtained from toPayload().\n   * @param ndk Optional NDK instance.\n   * @returns An instance of NDKNip07Signer.\n   */\n  static async fromPayload(payloadString, ndk) {\n    const payload = JSON.parse(payloadString);\n    if (payload.type !== \"nip07\") {\n      throw new Error(`Invalid payload type: expected 'nip07', got ${payload.type}`);\n    }\n    return new _NDKNip07Signer(void 0, ndk);\n  }\n};\n\n// src/signers/nip46/backend/index.ts\n\n\n// src/signers/nip46/rpc.ts\n\nvar NDKNostrRpc = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  ndk;\n  signer;\n  relaySet;\n  debug;\n  encryptionType = \"nip04\";\n  pool;\n  constructor(ndk, signer, debug8, relayUrls) {\n    super();\n    this.ndk = ndk;\n    this.signer = signer;\n    if (relayUrls) {\n      this.pool = new NDKPool(relayUrls, [], ndk, {\n        debug: debug8.extend(\"rpc-pool\"),\n        name: \"Nostr RPC\"\n      });\n      this.relaySet = new NDKRelaySet(/* @__PURE__ */ new Set(), ndk, this.pool);\n      for (const url of relayUrls) {\n        const relay = this.pool.getRelay(url, false, false);\n        relay.authPolicy = NDKRelayAuthPolicies.signIn({ ndk, signer, debug: debug8 });\n        this.relaySet.addRelay(relay);\n        relay.connect();\n      }\n    }\n    this.debug = debug8.extend(\"rpc\");\n  }\n  /**\n   * Subscribe to a filter. This function will resolve once the subscription is ready.\n   */\n  subscribe(filter) {\n    const sub = this.ndk.subscribe(\n      filter,\n      {\n        closeOnEose: false,\n        groupable: false,\n        cacheUsage: \"ONLY_RELAY\" /* ONLY_RELAY */,\n        pool: this.pool,\n        relaySet: this.relaySet\n      },\n      false\n    );\n    sub.on(\"event\", async (event) => {\n      try {\n        const parsedEvent = await this.parseEvent(event);\n        if (parsedEvent.method) {\n          this.emit(\"request\", parsedEvent);\n        } else {\n          this.emit(`response-${parsedEvent.id}`, parsedEvent);\n        }\n      } catch (e) {\n        this.debug(\"error parsing event\", e, event.rawEvent());\n      }\n    });\n    return new Promise((resolve) => {\n      sub.on(\"eose\", () => {\n        this.debug(\"eosed\");\n        resolve(sub);\n      });\n      sub.start();\n    });\n  }\n  async parseEvent(event) {\n    if (this.encryptionType === \"nip44\" && event.content.includes(\"?iv=\")) {\n      this.encryptionType = \"nip04\";\n    } else if (this.encryptionType === \"nip04\" && !event.content.includes(\"?iv=\")) {\n      this.encryptionType = \"nip44\";\n    }\n    const remoteUser = this.ndk.getUser({ pubkey: event.pubkey });\n    remoteUser.ndk = this.ndk;\n    let decryptedContent;\n    try {\n      decryptedContent = await this.signer.decrypt(remoteUser, event.content, this.encryptionType);\n    } catch (_e) {\n      const otherEncryptionType = this.encryptionType === \"nip04\" ? \"nip44\" : \"nip04\";\n      decryptedContent = await this.signer.decrypt(remoteUser, event.content, otherEncryptionType);\n      this.encryptionType = otherEncryptionType;\n    }\n    const parsedContent = JSON.parse(decryptedContent);\n    const { id, method, params, result, error } = parsedContent;\n    if (method) {\n      return { id, pubkey: event.pubkey, method, params, event };\n    }\n    return { id, result, error, event };\n  }\n  async sendResponse(id, remotePubkey, result, kind = 24133 /* NostrConnect */, error) {\n    const res = { id, result };\n    if (error) {\n      res.error = error;\n    }\n    const localUser = await this.signer.user();\n    const remoteUser = this.ndk.getUser({ pubkey: remotePubkey });\n    const event = new NDKEvent(this.ndk, {\n      kind,\n      content: JSON.stringify(res),\n      tags: [[\"p\", remotePubkey]],\n      pubkey: localUser.pubkey\n    });\n    event.content = await this.signer.encrypt(remoteUser, event.content, this.encryptionType);\n    await event.sign(this.signer);\n    await event.publish(this.relaySet);\n  }\n  /**\n   * Sends a request.\n   * @param remotePubkey\n   * @param method\n   * @param params\n   * @param kind\n   * @param id\n   */\n  async sendRequest(remotePubkey, method, params = [], kind = 24133, cb) {\n    const id = Math.random().toString(36).substring(7);\n    const localUser = await this.signer.user();\n    const remoteUser = this.ndk.getUser({ pubkey: remotePubkey });\n    const request = { id, method, params };\n    const promise = new Promise(() => {\n      const responseHandler = (response) => {\n        if (response.result === \"auth_url\") {\n          this.once(`response-${id}`, responseHandler);\n          this.emit(\"authUrl\", response.error);\n        } else if (cb) {\n          cb(response);\n        }\n      };\n      this.once(`response-${id}`, responseHandler);\n    });\n    const event = new NDKEvent(this.ndk, {\n      kind,\n      content: JSON.stringify(request),\n      tags: [[\"p\", remotePubkey]],\n      pubkey: localUser.pubkey\n    });\n    event.content = await this.signer.encrypt(remoteUser, event.content, this.encryptionType);\n    await event.sign(this.signer);\n    await event.publish(this.relaySet);\n    return promise;\n  }\n};\n\n// src/signers/nip46/backend/connect.ts\nvar ConnectEventHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [_, token] = params;\n    const debug8 = backend.debug.extend(\"connect\");\n    debug8(`connection request from ${remotePubkey}`);\n    if (token && backend.applyToken) {\n      debug8(\"applying token\");\n      await backend.applyToken(remotePubkey, token);\n    }\n    if (await backend.pubkeyAllowed({\n      id,\n      pubkey: remotePubkey,\n      method: \"connect\",\n      params: token\n    })) {\n      debug8(`connection request from ${remotePubkey} allowed`);\n      return \"ack\";\n    }\n    debug8(`connection request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n};\n\n// src/signers/nip46/backend/get-public-key.ts\nvar GetPublicKeyHandlingStrategy = class {\n  async handle(backend, _id, _remotePubkey, _params) {\n    return backend.localUser?.pubkey;\n  }\n};\n\n// src/signers/nip46/backend/nip04-decrypt.ts\nvar Nip04DecryptHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [senderPubkey, payload] = params;\n    const senderUser = new NDKUser({ pubkey: senderPubkey });\n    const decryptedPayload = await decrypt2(backend, id, remotePubkey, senderUser, payload);\n    return decryptedPayload;\n  }\n};\nasync function decrypt2(backend, id, remotePubkey, senderUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip04_decrypt\",\n    params: payload\n  })) {\n    backend.debug(`decrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.decrypt(senderUser, payload, \"nip04\");\n}\n\n// src/signers/nip46/backend/nip04-encrypt.ts\nvar Nip04EncryptHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [recipientPubkey, payload] = params;\n    const recipientUser = new NDKUser({ pubkey: recipientPubkey });\n    const encryptedPayload = await encrypt2(backend, id, remotePubkey, recipientUser, payload);\n    return encryptedPayload;\n  }\n};\nasync function encrypt2(backend, id, remotePubkey, recipientUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip04_encrypt\",\n    params: payload\n  })) {\n    backend.debug(`encrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.encrypt(recipientUser, payload, \"nip04\");\n}\n\n// src/signers/nip46/backend/nip44-decrypt.ts\nvar Nip04DecryptHandlingStrategy2 = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [senderPubkey, payload] = params;\n    const senderUser = new NDKUser({ pubkey: senderPubkey });\n    const decryptedPayload = await decrypt3(backend, id, remotePubkey, senderUser, payload);\n    return decryptedPayload;\n  }\n};\nasync function decrypt3(backend, id, remotePubkey, senderUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip44_decrypt\",\n    params: payload\n  })) {\n    backend.debug(`decrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.decrypt(senderUser, payload, \"nip44\");\n}\n\n// src/signers/nip46/backend/nip44-encrypt.ts\nvar Nip04EncryptHandlingStrategy2 = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [recipientPubkey, payload] = params;\n    const recipientUser = new NDKUser({ pubkey: recipientPubkey });\n    const encryptedPayload = await encrypt3(backend, id, remotePubkey, recipientUser, payload);\n    return encryptedPayload;\n  }\n};\nasync function encrypt3(backend, id, remotePubkey, recipientUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip44_encrypt\",\n    params: payload\n  })) {\n    backend.debug(`encrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.encrypt(recipientUser, payload, \"nip44\");\n}\n\n// src/signers/nip46/backend/ping.ts\nvar PingEventHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, _params) {\n    const debug8 = backend.debug.extend(\"ping\");\n    debug8(`ping request from ${remotePubkey}`);\n    if (await backend.pubkeyAllowed({ id, pubkey: remotePubkey, method: \"ping\" })) {\n      debug8(`connection request from ${remotePubkey} allowed`);\n      return \"pong\";\n    }\n    debug8(`connection request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n};\n\n// src/signers/nip46/backend/sign-event.ts\nvar SignEventHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const event = await signEvent(backend, id, remotePubkey, params);\n    if (!event) return void 0;\n    return JSON.stringify(await event.toNostrEvent());\n  }\n};\nasync function signEvent(backend, id, remotePubkey, params) {\n  const [eventString] = params;\n  backend.debug(`sign event request from ${remotePubkey}`);\n  const event = new NDKEvent(backend.ndk, JSON.parse(eventString));\n  backend.debug(\"event to sign\", event.rawEvent());\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"sign_event\",\n    params: event\n  })) {\n    backend.debug(`sign event request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  backend.debug(`sign event request from ${remotePubkey} allowed`);\n  await event.sign(backend.signer);\n  return event;\n}\n\n// src/signers/nip46/backend/index.ts\nvar NDKNip46Backend = class {\n  ndk;\n  signer;\n  localUser;\n  debug;\n  rpc;\n  permitCallback;\n  relayUrls;\n  /**\n   * @param ndk The NDK instance to use\n   * @param privateKeyOrSigner The private key or signer of the npub that wants to be published as\n   * @param permitCallback Callback executed when permission is requested\n   */\n  constructor(ndk, privateKeyOrSigner, permitCallback, relayUrls) {\n    this.ndk = ndk;\n    if (privateKeyOrSigner instanceof Uint8Array) {\n      this.signer = new NDKPrivateKeySigner(privateKeyOrSigner);\n    } else if (privateKeyOrSigner instanceof String) {\n      this.signer = new NDKPrivateKeySigner((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(privateKeyOrSigner));\n    } else if (privateKeyOrSigner instanceof NDKPrivateKeySigner) {\n      this.signer = privateKeyOrSigner;\n    } else {\n      throw new Error(\"Invalid signer\");\n    }\n    this.debug = ndk.debug.extend(\"nip46:backend\");\n    this.relayUrls = relayUrls ?? Array.from(ndk.pool.relays.keys());\n    this.rpc = new NDKNostrRpc(ndk, this.signer, this.debug, this.relayUrls);\n    this.permitCallback = permitCallback;\n  }\n  /**\n   * This method starts the backend, which will start listening for incoming\n   * requests.\n   */\n  async start() {\n    this.localUser = await this.signer.user();\n    const sub = this.ndk.subscribe(\n      {\n        kinds: [24133],\n        \"#p\": [this.localUser.pubkey]\n      },\n      { closeOnEose: false }\n    );\n    sub.on(\"event\", (e) => this.handleIncomingEvent(e));\n  }\n  handlers = {\n    connect: new ConnectEventHandlingStrategy(),\n    sign_event: new SignEventHandlingStrategy(),\n    nip04_encrypt: new Nip04EncryptHandlingStrategy(),\n    nip04_decrypt: new Nip04DecryptHandlingStrategy(),\n    nip44_encrypt: new Nip04EncryptHandlingStrategy2(),\n    nip44_decrypt: new Nip04DecryptHandlingStrategy2(),\n    get_public_key: new GetPublicKeyHandlingStrategy(),\n    ping: new PingEventHandlingStrategy()\n  };\n  /**\n   * Enables the user to set a custom strategy for handling incoming events.\n   * @param method - The method to set the strategy for\n   * @param strategy - The strategy to set\n   */\n  setStrategy(method, strategy) {\n    this.handlers[method] = strategy;\n  }\n  /**\n   * Overload this method to apply tokens, which can\n   * wrap permission sets to be applied to a pubkey.\n   * @param pubkey public key to apply token to\n   * @param token token to apply\n   */\n  async applyToken(_pubkey, _token) {\n    throw new Error(\"connection token not supported\");\n  }\n  async handleIncomingEvent(event) {\n    const { id, method, params } = await this.rpc.parseEvent(event);\n    const remotePubkey = event.pubkey;\n    let response;\n    this.debug(\"incoming event\", { id, method, params });\n    if (!event.verifySignature(false)) {\n      this.debug(\"invalid signature\", event.rawEvent());\n      return;\n    }\n    const strategy = this.handlers[method];\n    if (strategy) {\n      try {\n        response = await strategy.handle(this, id, remotePubkey, params);\n      } catch (e) {\n        this.debug(\"error handling event\", e, { id, method, params });\n        this.rpc.sendResponse(id, remotePubkey, \"error\", void 0, e.message);\n      }\n    } else {\n      this.debug(\"unsupported method\", { method, params });\n    }\n    if (response) {\n      this.debug(`sending response to ${remotePubkey}`, response);\n      this.rpc.sendResponse(id, remotePubkey, response);\n    } else {\n      this.rpc.sendResponse(id, remotePubkey, \"error\", void 0, \"Not authorized\");\n    }\n  }\n  /**\n   * This method should be overriden by the user to allow or reject incoming\n   * connections.\n   */\n  async pubkeyAllowed(params) {\n    return this.permitCallback(params);\n  }\n};\n\n// src/signers/nip46/index.ts\n\n\n// src/signers/deserialization.ts\nvar signerRegistry = /* @__PURE__ */ new Map();\nsignerRegistry.set(\"private-key\", NDKPrivateKeySigner);\nsignerRegistry.set(\"nip07\", NDKNip07Signer);\nsignerRegistry.set(\"nip46\", NDKNip46Signer);\nasync function ndkSignerFromPayload(payloadString, ndk) {\n  let parsed;\n  try {\n    parsed = JSON.parse(payloadString);\n  } catch (e) {\n    throw new Error(`Failed to parse signer payload: ${e instanceof Error ? e.message : String(e)}`);\n  }\n  const SignerClass = signerRegistry.get(parsed.type);\n  if (!SignerClass) {\n    throw new Error(`Unknown signer type: ${parsed.type}`);\n  }\n  try {\n    return await SignerClass.fromPayload(payloadString, ndk);\n  } catch (e) {\n    const errorMsg = e instanceof Error ? e.message : String(e);\n    throw new Error(`Failed to deserialize signer type ${parsed.type}: ${errorMsg}`);\n  }\n}\n\n// src/signers/nip46/index.ts\nvar NDKNip46Signer = class _NDKNip46Signer extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  ndk;\n  _user;\n  /**\n   * The pubkey of the bunker that will be providing signatures\n   */\n  bunkerPubkey;\n  /**\n   * The pubkey of the user that events will be published as\n   */\n  userPubkey;\n  get pubkey() {\n    if (!this.userPubkey) throw new Error(\"Not ready\");\n    return this.userPubkey;\n  }\n  /**\n   * An optional secret value provided to connect to the bunker\n   */\n  secret;\n  localSigner;\n  nip05;\n  rpc;\n  debug;\n  relayUrls;\n  subscription;\n  /**\n   * @param ndk - The NDK instance to use\n   * @param userOrConnectionToken - The public key, or a connection token, of the npub that wants to be published as\n   * @param localSigner - The signer that will be used to request events to be signed\n   */\n  constructor(ndk, userOrConnectionToken, localSigner) {\n    super();\n    this.ndk = ndk;\n    this.debug = ndk.debug.extend(\"nip46:signer\");\n    if (userOrConnectionToken.startsWith(\"bunker://\")) {\n      this.connectionTokenInit(userOrConnectionToken);\n    } else {\n      this.nip05Init(userOrConnectionToken);\n    }\n    if (!localSigner) {\n      this.localSigner = NDKPrivateKeySigner.generate();\n    } else {\n      this.localSigner = localSigner;\n    }\n    this.rpc = new NDKNostrRpc(this.ndk, this.localSigner, this.debug, this.relayUrls);\n  }\n  connectionTokenInit(connectionToken) {\n    const bunkerUrl = new URL(connectionToken);\n    const bunkerPubkey = bunkerUrl.hostname || bunkerUrl.pathname.replace(/^\\/\\//, \"\");\n    const userPubkey = bunkerUrl.searchParams.get(\"pubkey\");\n    const relayUrls = bunkerUrl.searchParams.getAll(\"relay\");\n    const secret = bunkerUrl.searchParams.get(\"secret\");\n    this.bunkerPubkey = bunkerPubkey;\n    this.userPubkey = userPubkey;\n    this.relayUrls = relayUrls;\n    this.secret = secret;\n  }\n  nip05Init(nip05) {\n    this.nip05 = nip05;\n  }\n  /**\n   * We start listening for events from the bunker\n   */\n  async startListening() {\n    if (this.subscription) return;\n    const localUser = await this.localSigner.user();\n    if (!localUser) throw new Error(\"Local signer not ready\");\n    this.subscription = await this.rpc.subscribe({\n      kinds: [24133 /* NostrConnect */],\n      \"#p\": [localUser.pubkey]\n    });\n  }\n  /**\n   * Get the user that is being published as\n   */\n  async user() {\n    if (this._user) return this._user;\n    return this.blockUntilReady();\n  }\n  get userSync() {\n    if (!this._user) throw new Error(\"Remote user not ready synchronously\");\n    return this._user;\n  }\n  async blockUntilReady() {\n    if (this.nip05 && !this.userPubkey) {\n      const user = await NDKUser.fromNip05(this.nip05, this.ndk);\n      if (user) {\n        this._user = user;\n        this.userPubkey = user.pubkey;\n        this.relayUrls = user.nip46Urls;\n        this.rpc = new NDKNostrRpc(this.ndk, this.localSigner, this.debug, this.relayUrls);\n      }\n    }\n    if (!this.bunkerPubkey && this.userPubkey) {\n      this.bunkerPubkey = this.userPubkey;\n    } else if (!this.bunkerPubkey) {\n      throw new Error(\"Bunker pubkey not set\");\n    }\n    await this.startListening();\n    this.rpc.on(\"authUrl\", (...props) => {\n      this.emit(\"authUrl\", ...props);\n    });\n    return new Promise((resolve, reject) => {\n      const connectParams = [this.userPubkey ?? \"\"];\n      if (this.secret) connectParams.push(this.secret);\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(this.bunkerPubkey, \"connect\", connectParams, 24133, (response) => {\n        if (response.result === \"ack\") {\n          this.getPublicKey().then((pubkey) => {\n            this.userPubkey = pubkey;\n            this._user = this.ndk.getUser({ pubkey });\n            resolve(this._user);\n          });\n        } else {\n          reject(response.error);\n        }\n      });\n    });\n  }\n  async getPublicKey() {\n    if (this.userPubkey) return this.userPubkey;\n    return new Promise((resolve, _reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(this.bunkerPubkey, \"get_public_key\", [], 24133, (response) => {\n        resolve(response.result);\n      });\n    });\n  }\n  async encryptionEnabled(scheme) {\n    if (scheme) return [scheme];\n    return Promise.resolve([\"nip04\", \"nip44\"]);\n  }\n  async encrypt(recipient, value, scheme = \"nip04\") {\n    return this.encryption(recipient, value, scheme, \"encrypt\");\n  }\n  async decrypt(sender, value, scheme = \"nip04\") {\n    return this.encryption(sender, value, scheme, \"decrypt\");\n  }\n  async encryption(peer, value, scheme, method) {\n    const promise = new Promise((resolve, reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(\n        this.bunkerPubkey,\n        `${scheme}_${method}`,\n        [peer.pubkey, value],\n        24133,\n        (response) => {\n          if (!response.error) {\n            resolve(response.result);\n          } else {\n            reject(response.error);\n          }\n        }\n      );\n    });\n    return promise;\n  }\n  async sign(event) {\n    const promise = new Promise((resolve, reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(\n        this.bunkerPubkey,\n        \"sign_event\",\n        [JSON.stringify(event)],\n        24133,\n        (response) => {\n          if (!response.error) {\n            const json = JSON.parse(response.result);\n            resolve(json.sig);\n          } else {\n            reject(response.error);\n          }\n        }\n      );\n    });\n    return promise;\n  }\n  /**\n   * Allows creating a new account on the remote server.\n   * @param username Desired username for the NIP-05\n   * @param domain Desired domain for the NIP-05\n   * @param email Email address to associate with this account -- Remote servers may use this for recovery\n   * @returns The public key of the newly created account\n   */\n  async createAccount(username, domain, email) {\n    await this.startListening();\n    const req = [];\n    if (username) req.push(username);\n    if (domain) req.push(domain);\n    if (email) req.push(email);\n    return new Promise((resolve, reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(\n        this.bunkerPubkey,\n        \"create_account\",\n        req,\n        24133 /* NostrConnect */,\n        (response) => {\n          if (!response.error) {\n            const pubkey = response.result;\n            resolve(pubkey);\n          } else {\n            reject(response.error);\n          }\n        }\n      );\n    });\n  }\n  /**\n   * Serializes the signer's connection details and local signer state.\n   * @returns A JSON string containing the type, connection info, and local signer payload.\n   */\n  toPayload() {\n    if (!this.bunkerPubkey || !this.userPubkey) {\n      throw new Error(\"NIP-46 signer is not fully initialized for serialization\");\n    }\n    const payload = {\n      type: \"nip46\",\n      payload: {\n        bunkerPubkey: this.bunkerPubkey,\n        userPubkey: this.userPubkey,\n        relayUrls: this.relayUrls,\n        secret: this.secret,\n        localSignerPayload: this.localSigner.toPayload(),\n        // Store nip05 if it was used for initialization, otherwise null\n        nip05: this.nip05 || null\n      }\n    };\n    return JSON.stringify(payload);\n  }\n  /**\n   * Deserializes the signer from a payload string.\n   * @param payloadString The JSON string obtained from toPayload().\n   * @param ndk The NDK instance, required for NIP-46.\n   * @returns An instance of NDKNip46Signer.\n   */\n  static async fromPayload(payloadString, ndk) {\n    if (!ndk) {\n      throw new Error(\"NDK instance is required to deserialize NIP-46 signer\");\n    }\n    const parsed = JSON.parse(payloadString);\n    if (parsed.type !== \"nip46\") {\n      throw new Error(`Invalid payload type: expected 'nip46', got ${parsed.type}`);\n    }\n    const payload = parsed.payload;\n    if (!payload || typeof payload !== \"object\" || !payload.localSignerPayload) {\n      throw new Error(\"Invalid payload content for nip46 signer\");\n    }\n    const localSigner = await ndkSignerFromPayload(payload.localSignerPayload, ndk);\n    if (!localSigner) {\n      throw new Error(\"Failed to deserialize local signer for NIP-46\");\n    }\n    let signer;\n    if (payload.nip05) {\n      signer = new _NDKNip46Signer(ndk, payload.nip05, localSigner);\n      signer.userPubkey = payload.userPubkey;\n      signer.bunkerPubkey = payload.bunkerPubkey;\n      signer.relayUrls = payload.relayUrls;\n      signer.secret = payload.secret;\n    } else {\n      signer = new _NDKNip46Signer(ndk, payload.userPubkey, localSigner);\n      signer.bunkerPubkey = payload.bunkerPubkey;\n      signer.relayUrls = payload.relayUrls;\n      signer.secret = payload.secret;\n    }\n    return signer;\n  }\n};\n\n// src/dvm/schedule.ts\nfunction addRelays(event, relays) {\n  const tags = [];\n  if (!relays || relays.length === 0) {\n    const poolRelays = event.ndk?.pool.relays;\n    relays = poolRelays ? Object.keys(poolRelays) : void 0;\n  }\n  if (relays && relays.length > 0) tags.push([\"relays\", ...relays]);\n  return tags;\n}\nasync function dvmSchedule(events, dvm, relays, encrypted = true, waitForConfirmationForMs) {\n  if (!Array.isArray(events)) {\n    events = [events];\n  }\n  const ndk = events[0].ndk;\n  if (!ndk) throw new Error(\"NDK not set\");\n  for (const event of events) {\n    if (!event.sig) throw new Error(\"Event not signed\");\n    if (!event.created_at) throw new Error(\"Event has no date\");\n    if (!dvm) throw new Error(\"No DVM specified\");\n    if (event.created_at <= Date.now() / 1e3) throw new Error(\"Event needs to be in the future\");\n  }\n  const scheduleEvent = new NDKDVMRequest(ndk, {\n    kind: 5905 /* DVMEventSchedule */\n  });\n  for (const event of events) {\n    scheduleEvent.addInput(JSON.stringify(event.rawEvent()), \"text\");\n  }\n  scheduleEvent.tags.push(...addRelays(events[0], relays));\n  if (encrypted) {\n    await scheduleEvent.encryption(dvm);\n  } else {\n    scheduleEvent.dvm = dvm;\n  }\n  await scheduleEvent.sign();\n  let res;\n  if (waitForConfirmationForMs) {\n    res = ndk.subscribe(\n      {\n        kinds: [5905 /* DVMEventSchedule */ + 1e3, 7e3 /* DVMJobFeedback */],\n        ...scheduleEvent.filter()\n      },\n      { groupable: false, closeOnEose: false }\n    );\n  }\n  const timeoutPromise = new Promise((reject) => {\n    setTimeout(() => {\n      res?.stop();\n      reject(\"Timeout waiting for an answer from the DVM\");\n    }, waitForConfirmationForMs);\n  });\n  const schedulePromise = new Promise((resolve, reject) => {\n    if (waitForConfirmationForMs) {\n      res?.on(\"event\", async (e) => {\n        res?.stop();\n        if (e.kind === 7e3 /* DVMJobFeedback */) {\n          const feedback = await NDKDVMJobFeedback.from(e);\n          if (feedback.status === \"error\") {\n            const statusTag = feedback.getMatchingTags(\"status\");\n            reject(statusTag?.[2] ?? feedback);\n          } else {\n            resolve(feedback);\n          }\n        }\n        resolve(e);\n      });\n    }\n    scheduleEvent.publish().then(() => {\n      if (!waitForConfirmationForMs) resolve(void 0);\n    });\n  });\n  return new Promise((resolve, reject) => {\n    if (waitForConfirmationForMs) {\n      Promise.race([timeoutPromise, schedulePromise]).then((e) => {\n        resolve(e);\n      }).catch(reject);\n    } else {\n      schedulePromise.then(resolve);\n    }\n  });\n}\n\n// src/ndk/index.ts\n\n\n\n// src/events/dedup.ts\nfunction dedup(event1, event2) {\n  if (event1.created_at > event2.created_at) {\n    return event1;\n  }\n  return event2;\n}\n\n// src/outbox/tracker.ts\n\n\n\n// src/utils/get-users-relay-list.ts\nasync function getRelayListForUser(pubkey, ndk) {\n  const list = await getRelayListForUsers([pubkey], ndk);\n  return list.get(pubkey);\n}\nasync function getRelayListForUsers(pubkeys, ndk, skipCache = false, timeout = 1e3) {\n  const pool = ndk.outboxPool || ndk.pool;\n  const set = /* @__PURE__ */ new Set();\n  for (const relay of pool.relays.values()) set.add(relay);\n  const relayLists = /* @__PURE__ */ new Map();\n  const fromContactList = /* @__PURE__ */ new Map();\n  const relaySet = new NDKRelaySet(set, ndk);\n  if (ndk.cacheAdapter?.locking && !skipCache) {\n    const cachedList = await ndk.fetchEvents(\n      { kinds: [3, 10002], authors: Array.from(new Set(pubkeys)) },\n      { cacheUsage: \"ONLY_CACHE\" /* ONLY_CACHE */, subId: \"ndk-relay-list-fetch\" }\n    );\n    for (const relayList of cachedList) {\n      if (relayList.kind === 10002) relayLists.set(relayList.pubkey, NDKRelayList.from(relayList));\n    }\n    for (const relayList of cachedList) {\n      if (relayList.kind === 3) {\n        if (relayLists.has(relayList.pubkey)) continue;\n        const list = relayListFromKind3(ndk, relayList);\n        if (list) fromContactList.set(relayList.pubkey, list);\n      }\n    }\n    pubkeys = pubkeys.filter((pubkey) => !relayLists.has(pubkey) && !fromContactList.has(pubkey));\n  }\n  if (pubkeys.length === 0) return relayLists;\n  const relayListEvents = /* @__PURE__ */ new Map();\n  const contactListEvents = /* @__PURE__ */ new Map();\n  return new Promise((resolve) => {\n    const handleSubscription = async () => {\n      const subscribeOpts = {\n        closeOnEose: true,\n        pool,\n        groupable: true,\n        subId: \"ndk-relay-list-fetch\",\n        addSinceFromCache: true,\n        relaySet\n      };\n      if (relaySet) subscribeOpts.relaySet = relaySet;\n      ndk.subscribe({ kinds: [3, 10002], authors: pubkeys }, subscribeOpts, {\n        onEvent: (event) => {\n          if (event.kind === 10002 /* RelayList */) {\n            const existingEvent = relayListEvents.get(event.pubkey);\n            if (existingEvent && existingEvent.created_at > event.created_at) return;\n            relayListEvents.set(event.pubkey, event);\n          } else if (event.kind === 3 /* Contacts */) {\n            const existingEvent = contactListEvents.get(event.pubkey);\n            if (existingEvent && existingEvent.created_at > event.created_at) return;\n            contactListEvents.set(event.pubkey, event);\n          }\n        },\n        onEose: () => {\n          for (const event of relayListEvents.values()) {\n            relayLists.set(event.pubkey, NDKRelayList.from(event));\n          }\n          for (const pubkey of pubkeys) {\n            if (relayLists.has(pubkey)) continue;\n            const contactList = contactListEvents.get(pubkey);\n            if (!contactList) continue;\n            const list = relayListFromKind3(ndk, contactList);\n            if (list) relayLists.set(pubkey, list);\n          }\n          resolve(relayLists);\n        }\n      });\n      setTimeout(() => {\n        resolve(relayLists);\n      }, timeout);\n    };\n    handleSubscription();\n  });\n}\n\n// src/outbox/tracker.ts\nvar OutboxItem = class {\n  /**\n   * Type of item\n   */\n  type;\n  /**\n   * The relay URLs that are of interest to this item\n   */\n  relayUrlScores;\n  readRelays;\n  writeRelays;\n  constructor(type) {\n    this.type = type;\n    this.relayUrlScores = /* @__PURE__ */ new Map();\n    this.readRelays = /* @__PURE__ */ new Set();\n    this.writeRelays = /* @__PURE__ */ new Set();\n  }\n};\nvar OutboxTracker = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  data;\n  ndk;\n  debug;\n  constructor(ndk) {\n    super();\n    this.ndk = ndk;\n    this.debug = ndk.debug.extend(\"outbox-tracker\");\n    this.data = new typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__.LRUCache({\n      maxSize: 1e5,\n      entryExpirationTimeInMS: 2 * 60 * 1e3\n    });\n  }\n  /**\n   * Adds a list of users to the tracker.\n   * @param items\n   * @param skipCache\n   */\n  async trackUsers(items, skipCache = false) {\n    const promises = [];\n    for (let i = 0; i < items.length; i += 400) {\n      const slice = items.slice(i, i + 400);\n      const pubkeys = slice.map((item) => getKeyFromItem(item)).filter((pubkey) => !this.data.has(pubkey));\n      if (pubkeys.length === 0) continue;\n      for (const pubkey of pubkeys) {\n        this.data.set(pubkey, new OutboxItem(\"user\"));\n      }\n      promises.push(\n        new Promise((resolve) => {\n          getRelayListForUsers(pubkeys, this.ndk, skipCache).then((relayLists) => {\n            for (const [pubkey, relayList] of relayLists) {\n              let outboxItem = this.data.get(pubkey);\n              outboxItem ??= new OutboxItem(\"user\");\n              if (relayList) {\n                outboxItem.readRelays = new Set(normalize(relayList.readRelayUrls));\n                outboxItem.writeRelays = new Set(normalize(relayList.writeRelayUrls));\n                for (const relayUrl of outboxItem.readRelays) {\n                  if (this.ndk.pool.blacklistRelayUrls.has(relayUrl)) {\n                    outboxItem.readRelays.delete(relayUrl);\n                  }\n                }\n                for (const relayUrl of outboxItem.writeRelays) {\n                  if (this.ndk.pool.blacklistRelayUrls.has(relayUrl)) {\n                    outboxItem.writeRelays.delete(relayUrl);\n                  }\n                }\n                this.data.set(pubkey, outboxItem);\n              }\n            }\n          }).finally(resolve);\n        })\n      );\n    }\n    return Promise.all(promises);\n  }\n  /**\n   *\n   * @param key\n   * @param score\n   */\n  track(item, type, _skipCache = true) {\n    const key = getKeyFromItem(item);\n    type ??= getTypeFromItem(item);\n    let outboxItem = this.data.get(key);\n    if (!outboxItem) {\n      outboxItem = new OutboxItem(type);\n      if (item instanceof NDKUser) {\n        this.trackUsers([item]);\n      }\n    }\n    return outboxItem;\n  }\n};\nfunction getKeyFromItem(item) {\n  if (item instanceof NDKUser) {\n    return item.pubkey;\n  }\n  return item;\n}\nfunction getTypeFromItem(item) {\n  if (item instanceof NDKUser) {\n    return \"user\";\n  }\n  return \"kind\";\n}\n\n// src/relay/sets/utils.ts\nfunction correctRelaySet(relaySet, pool) {\n  const connectedRelays = pool.connectedRelays();\n  const includesConnectedRelay = Array.from(relaySet.relays).some((relay) => {\n    return connectedRelays.map((r) => r.url).includes(relay.url);\n  });\n  if (!includesConnectedRelay) {\n    for (const relay of connectedRelays) {\n      relaySet.addRelay(relay);\n    }\n  }\n  if (connectedRelays.length === 0) {\n    for (const relay of pool.relays.values()) {\n      relaySet.addRelay(relay);\n    }\n  }\n  return relaySet;\n}\n\n// src/subscription/manager.ts\n\nvar NDKSubscriptionManager = class {\n  subscriptions;\n  seenEvents = /* @__PURE__ */ new Map();\n  constructor() {\n    this.subscriptions = /* @__PURE__ */ new Map();\n  }\n  add(sub) {\n    this.subscriptions.set(sub.internalId, sub);\n    if (sub.onStopped) {\n    }\n    sub.onStopped = () => {\n      this.subscriptions.delete(sub.internalId);\n    };\n    sub.on(\"close\", () => {\n      this.subscriptions.delete(sub.internalId);\n    });\n  }\n  seenEvent(eventId, relay) {\n    const current = this.seenEvents.get(eventId) || [];\n    current.push(relay);\n    this.seenEvents.set(eventId, current);\n  }\n  /**\n   * Whenever an event comes in, this function is called.\n   * This function matches the received event against all the\n   * known (i.e. active) NDKSubscriptions, and if it matches,\n   * it sends the event to the subscription.\n   *\n   * This is the single place in the codebase that matches\n   * incoming events with parties interested in the event.\n   *\n   * This is also what allows for reactivity in NDK apps, such that\n   * whenever an active subscription receives an event that some\n   * other active subscription would want to receive, both receive it.\n   *\n   * TODO This also allows for subscriptions that overlap in meaning\n   * to be collapsed into one.\n   *\n   * I.e. if a subscription with filter: kinds: [1], authors: [alice]\n   * is created and EOSEs, and then a subsequent subscription with\n   * kinds: [1], authors: [alice] is created, once the second subscription\n   * EOSEs we can safely close it, increment its refCount and close it,\n   * and when the first subscription receives a new event from Alice this\n   * code will make the second subscription receive the event even though\n   * it has no active subscription on a relay.\n   * @param event Raw event received from a relay\n   * @param relay Relay that sent the event\n   * @param optimisticPublish Whether the event is coming from an optimistic publish\n   */\n  dispatchEvent(event, relay, optimisticPublish = false) {\n    if (relay) this.seenEvent(event.id, relay);\n    const subscriptions = this.subscriptions.values();\n    const matchingSubs = [];\n    for (const sub of subscriptions) {\n      if ((0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.matchFilters)(sub.filters, event)) {\n        matchingSubs.push(sub);\n      }\n    }\n    for (const sub of matchingSubs) {\n      sub.eventReceived(event, relay, false, optimisticPublish);\n    }\n  }\n};\n\n// src/ndk/active-user.ts\n\nvar debug6 = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:active-user\");\nasync function getUserRelayList(user) {\n  if (!this.autoConnectUserRelays) return;\n  const userRelays = await getRelayListForUser(user.pubkey, this);\n  if (!userRelays) return;\n  for (const url of userRelays.relays) {\n    let relay = this.pool.relays.get(url);\n    if (!relay) {\n      relay = new NDKRelay(url, this.relayAuthDefaultPolicy, this);\n      this.pool.addRelay(relay);\n    }\n  }\n  return userRelays;\n}\nasync function setActiveUser(user) {\n  const pool = this.outboxPool || this.pool;\n  if (pool.connectedRelays.length > 0) {\n    setActiveUserConnected.call(this, user);\n  } else {\n    pool.once(\"connect\", () => {\n      setActiveUserConnected.call(this, user);\n    });\n  }\n}\nasync function setActiveUserConnected(user) {\n  const userRelays = await getUserRelayList.call(this, user);\n  const filters = [\n    {\n      kinds: [10006 /* BlockRelayList */],\n      authors: [user.pubkey]\n    }\n  ];\n  if (this.autoFetchUserMutelist) {\n    filters[0].kinds?.push(1e4 /* MuteList */);\n  }\n  const events = /* @__PURE__ */ new Map();\n  const relaySet = userRelays ? userRelays.relaySet : void 0;\n  this.subscribe(\n    filters,\n    { subId: \"active-user-settings\", closeOnEose: true, relaySet },\n    {\n      onEvent: (event) => {\n        const prevEvent = events.get(event.kind);\n        if (prevEvent && prevEvent.created_at >= event.created_at) return;\n        events.set(event.kind, event);\n      },\n      onEose: () => {\n        for (const event of events.values()) {\n          processEvent.call(this, event);\n        }\n      }\n    }\n  );\n}\nasync function processEvent(event) {\n  if (event.kind === 10006 /* BlockRelayList */) {\n    processBlockRelayList.call(this, event);\n  } else if (event.kind === 1e4 /* MuteList */) {\n    processMuteList.call(this, event);\n  }\n}\nfunction processBlockRelayList(event) {\n  const list = lists_default.from(event);\n  for (const item of list.items) {\n    this.pool.blacklistRelayUrls.add(item[0]);\n  }\n  debug6(\"Added %d relays to relay blacklist\", list.items.length);\n}\nfunction processMuteList(muteList) {\n  const list = lists_default.from(muteList);\n  for (const item of list.items) {\n    this.mutedIds.set(item[1], item[0]);\n  }\n  debug6(\"Added %d users to mute list\", list.items.length);\n}\n\n// src/ndk/entity.ts\n\nfunction getEntity(entity) {\n  try {\n    const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(entity);\n    if (decoded.type === \"npub\") return npub(this, decoded.data);\n    if (decoded.type === \"nprofile\") return nprofile(this, decoded.data);\n    return decoded;\n  } catch (_e) {\n    return null;\n  }\n}\nfunction npub(ndk, pubkey) {\n  return ndk.getUser({ pubkey });\n}\nfunction nprofile(ndk, profile) {\n  const user = ndk.getUser({ pubkey: profile.pubkey });\n  if (profile.relays) user.relayUrls = profile.relays;\n  return user;\n}\n\n// src/ndk/fetch-event-from-tag.ts\nfunction isValidHint(hint) {\n  if (!hint || hint === \"\") return false;\n  try {\n    new URL(hint);\n    return true;\n  } catch (_e) {\n    return false;\n  }\n}\nasync function fetchEventFromTag(tag, originalEvent, subOpts, fallback = {\n  type: \"timeout\"\n}) {\n  const d4 = this.debug.extend(\"fetch-event-from-tag\");\n  const [_, id, hint] = tag;\n  subOpts = {};\n  d4(\"fetching event from tag\", tag, subOpts, fallback);\n  const authorRelays = getRelaysForSync(this, originalEvent.pubkey);\n  if (authorRelays && authorRelays.size > 0) {\n    d4(\"fetching event from author relays %o\", Array.from(authorRelays));\n    const relaySet2 = NDKRelaySet.fromRelayUrls(Array.from(authorRelays), this);\n    const event2 = await this.fetchEvent(id, subOpts, relaySet2);\n    if (event2) return event2;\n  } else {\n    d4(\"no author relays found for %s\", originalEvent.pubkey, originalEvent);\n  }\n  const relaySet = calculateRelaySetsFromFilters(this, [{ ids: [id] }], this.pool);\n  d4(\"fetching event without relay hint\", relaySet);\n  const event = await this.fetchEvent(id, subOpts);\n  if (event) return event;\n  if (hint && hint !== \"\") {\n    const event2 = await this.fetchEvent(id, subOpts, this.pool.getRelay(hint, true, true, [{ ids: [id] }]));\n    if (event2) return event2;\n  }\n  let result = void 0;\n  const relay = isValidHint(hint) ? this.pool.getRelay(hint, false, true, [{ ids: [id] }]) : void 0;\n  const fetchMaybeWithRelayHint = new Promise((resolve) => {\n    this.fetchEvent(id, subOpts, relay).then(resolve);\n  });\n  if (!isValidHint(hint) || fallback.type === \"none\") {\n    return fetchMaybeWithRelayHint;\n  }\n  const fallbackFetchPromise = new Promise(async (resolve) => {\n    const fallbackRelaySet = fallback.relaySet;\n    const timeout = fallback.timeout ?? 1500;\n    const timeoutPromise = new Promise((resolve2) => setTimeout(resolve2, timeout));\n    if (fallback.type === \"timeout\") await timeoutPromise;\n    if (result) {\n      resolve(result);\n    } else {\n      d4(\"fallback fetch triggered\");\n      const fallbackEvent = await this.fetchEvent(id, subOpts, fallbackRelaySet);\n      resolve(fallbackEvent);\n    }\n  });\n  switch (fallback.type) {\n    case \"timeout\":\n      return Promise.race([fetchMaybeWithRelayHint, fallbackFetchPromise]);\n    case \"eose\":\n      result = await fetchMaybeWithRelayHint;\n      if (result) return result;\n      return fallbackFetchPromise;\n  }\n}\n\n// src/ndk/queue/index.ts\nvar Queue = class {\n  queue = [];\n  maxConcurrency;\n  processing = /* @__PURE__ */ new Set();\n  promises = /* @__PURE__ */ new Map();\n  constructor(_name, maxConcurrency) {\n    this.maxConcurrency = maxConcurrency;\n  }\n  add(item) {\n    if (this.promises.has(item.id)) {\n      return this.promises.get(item.id);\n    }\n    const promise = new Promise((resolve, reject) => {\n      this.queue.push({\n        ...item,\n        func: () => item.func().then(\n          (result) => {\n            resolve(result);\n            return result;\n          },\n          (error) => {\n            reject(error);\n            throw error;\n          }\n        )\n      });\n      this.process();\n    });\n    this.promises.set(item.id, promise);\n    promise.finally(() => {\n      this.promises.delete(item.id);\n      this.processing.delete(item.id);\n      this.process();\n    });\n    return promise;\n  }\n  process() {\n    if (this.processing.size >= this.maxConcurrency || this.queue.length === 0) {\n      return;\n    }\n    const item = this.queue.shift();\n    if (!item || this.processing.has(item.id)) {\n      return;\n    }\n    this.processing.add(item.id);\n    item.func();\n  }\n  clear() {\n    this.queue = [];\n  }\n  clearProcessing() {\n    this.processing.clear();\n  }\n  clearAll() {\n    this.clear();\n    this.clearProcessing();\n  }\n  length() {\n    return this.queue.length;\n  }\n};\n\n// src/ndk/index.ts\nvar DEFAULT_OUTBOX_RELAYS = [\"wss://purplepag.es/\", \"wss://nos.lol/\"];\nvar DEFAULT_BLACKLISTED_RELAYS = [\n  \"wss://brb.io/\",\n  // BRB\n  \"wss://nostr.mutinywallet.com/\"\n  // Don't try to read from this relay since it's a write-only relay\n  // \"wss://purplepag.es/\", // This is a hack, since this is a mostly read-only relay, but not fully. Once we have relay routing this can be removed so it only receives the supported kinds\n];\nvar NDK = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  _explicitRelayUrls;\n  blacklistRelayUrls;\n  pool;\n  outboxPool;\n  _signer;\n  _activeUser;\n  cacheAdapter;\n  debug;\n  devWriteRelaySet;\n  outboxTracker;\n  mutedIds;\n  clientName;\n  clientNip89;\n  queuesZapConfig;\n  queuesNip05;\n  asyncSigVerification = false;\n  initialValidationRatio = 1;\n  lowestValidationRatio = 1;\n  validationRatioFn;\n  subManager;\n  publishingFailureHandled = false;\n  pools = [];\n  /**\n   * Default relay-auth policy that will be used when a relay requests authentication,\n   * if no other policy is specified for that relay.\n   *\n   * @example Disconnect from relays that request authentication:\n   * ```typescript\n   * ndk.relayAuthDefaultPolicy = NDKAuthPolicies.disconnect(ndk.pool);\n   * ```\n   *\n   * @example Sign in to relays that request authentication:\n   * ```typescript\n   * ndk.relayAuthDefaultPolicy = NDKAuthPolicies.signIn({ndk})\n   * ```\n   *\n   * @example Sign in to relays that request authentication, asking the user for confirmation:\n   * ```typescript\n   * ndk.relayAuthDefaultPolicy = (relay: NDKRelay) => {\n   *     const signIn = NDKAuthPolicies.signIn({ndk});\n   *     if (confirm(`Relay ${relay.url} is requesting authentication, do you want to sign in?`)) {\n   *        signIn(relay);\n   *     }\n   * }\n   * ```\n   */\n  relayAuthDefaultPolicy;\n  /**\n   * Fetch function to use for HTTP requests.\n   *\n   * @example\n   * ```typescript\n   * import fetch from \"node-fetch\";\n   *\n   * ndk.httpFetch = fetch;\n   * ```\n   */\n  httpFetch;\n  /**\n   * Provide a caller function to receive all networking traffic from relays\n   */\n  netDebug;\n  autoConnectUserRelays = true;\n  autoFetchUserMutelist = true;\n  walletConfig;\n  constructor(opts = {}) {\n    super();\n    this.debug = opts.debug || debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk\");\n    this.netDebug = opts.netDebug;\n    this._explicitRelayUrls = opts.explicitRelayUrls || [];\n    this.blacklistRelayUrls = opts.blacklistRelayUrls || DEFAULT_BLACKLISTED_RELAYS;\n    this.subManager = new NDKSubscriptionManager();\n    this.pool = new NDKPool(opts.explicitRelayUrls || [], [], this);\n    this.pool.name = \"Main\";\n    this.pool.on(\"relay:auth\", async (relay, challenge) => {\n      if (this.relayAuthDefaultPolicy) {\n        await this.relayAuthDefaultPolicy(relay, challenge);\n      }\n    });\n    this.autoConnectUserRelays = opts.autoConnectUserRelays ?? true;\n    this.autoFetchUserMutelist = opts.autoFetchUserMutelist ?? true;\n    this.clientName = opts.clientName;\n    this.clientNip89 = opts.clientNip89;\n    this.relayAuthDefaultPolicy = opts.relayAuthDefaultPolicy;\n    if (opts.enableOutboxModel) {\n      this.outboxPool = new NDKPool(opts.outboxRelayUrls || DEFAULT_OUTBOX_RELAYS, [], this, {\n        debug: this.debug.extend(\"outbox-pool\"),\n        name: \"Outbox Pool\"\n      });\n      this.outboxTracker = new OutboxTracker(this);\n    }\n    this.signer = opts.signer;\n    this.cacheAdapter = opts.cacheAdapter;\n    this.mutedIds = opts.mutedIds || /* @__PURE__ */ new Map();\n    if (opts.devWriteRelayUrls) {\n      this.devWriteRelaySet = NDKRelaySet.fromRelayUrls(opts.devWriteRelayUrls, this);\n    }\n    this.queuesZapConfig = new Queue(\"zaps\", 3);\n    this.queuesNip05 = new Queue(\"nip05\", 10);\n    this.signatureVerificationWorker = opts.signatureVerificationWorker;\n    this.initialValidationRatio = opts.initialValidationRatio || 1;\n    this.lowestValidationRatio = opts.lowestValidationRatio || 1;\n    try {\n      this.httpFetch = fetch;\n    } catch {\n    }\n  }\n  set explicitRelayUrls(urls) {\n    this._explicitRelayUrls = urls.map(normalizeRelayUrl);\n    this.pool.relayUrls = urls;\n  }\n  get explicitRelayUrls() {\n    return this._explicitRelayUrls || [];\n  }\n  set signatureVerificationWorker(worker2) {\n    this.asyncSigVerification = !!worker2;\n    if (worker2) {\n      signatureVerificationInit(worker2);\n    }\n  }\n  /**\n   * Adds an explicit relay to the pool.\n   * @param url\n   * @param relayAuthPolicy Authentication policy to use if different from the default\n   * @param connect Whether to connect to the relay automatically\n   * @returns\n   */\n  addExplicitRelay(urlOrRelay, relayAuthPolicy, connect = true) {\n    let relay;\n    if (typeof urlOrRelay === \"string\") {\n      relay = new NDKRelay(urlOrRelay, relayAuthPolicy, this);\n    } else {\n      relay = urlOrRelay;\n    }\n    this.pool.addRelay(relay, connect);\n    this.explicitRelayUrls?.push(relay.url);\n    return relay;\n  }\n  toJSON() {\n    return { relayCount: this.pool.relays.size }.toString();\n  }\n  get activeUser() {\n    return this._activeUser;\n  }\n  /**\n   * Sets the active user for this NDK instance, typically this will be\n   * called when assigning a signer to the NDK instance.\n   *\n   * This function will automatically connect to the user's relays if\n   * `autoConnectUserRelays` is set to true.\n   *\n   * It will also fetch the user's mutelist if `autoFetchUserMutelist` is set to true.\n   */\n  set activeUser(user) {\n    const differentUser = this._activeUser?.pubkey !== user?.pubkey;\n    this._activeUser = user;\n    if (user && differentUser) {\n      setActiveUser.call(this, user);\n    } else if (!user) {\n      this.mutedIds = /* @__PURE__ */ new Map();\n    }\n  }\n  get signer() {\n    return this._signer;\n  }\n  set signer(newSigner) {\n    this._signer = newSigner;\n    if (newSigner) this.emit(\"signer:ready\", newSigner);\n    newSigner?.user().then((user) => {\n      user.ndk = this;\n      this.activeUser = user;\n    });\n  }\n  /**\n   * Connect to relays with optional timeout.\n   * If the timeout is reached, the connection will be continued to be established in the background.\n   */\n  async connect(timeoutMs) {\n    if (this._signer && this.autoConnectUserRelays) {\n      this.debug(\n        \"Attempting to connect to user relays specified by signer %o\",\n        await this._signer.relays?.(this)\n      );\n      if (this._signer.relays) {\n        const relays = await this._signer.relays(this);\n        relays.forEach((relay) => this.pool.addRelay(relay));\n      }\n    }\n    const connections = [this.pool.connect(timeoutMs)];\n    if (this.outboxPool) {\n      connections.push(this.outboxPool.connect(timeoutMs));\n    }\n    this.debug(\"Connecting to relays %o\", { timeoutMs });\n    return Promise.allSettled(connections).then(() => {\n    });\n  }\n  /**\n   * Get a NDKUser object\n   *\n   * @param opts\n   * @returns\n   */\n  getUser(opts) {\n    const user = new NDKUser(opts);\n    user.ndk = this;\n    return user;\n  }\n  /**\n   * Get a NDKUser from a NIP05\n   * @param nip05 NIP-05 ID\n   * @param skipCache Skip cache\n   * @returns\n   */\n  async getUserFromNip05(nip05, skipCache = false) {\n    return NDKUser.fromNip05(nip05, this, skipCache);\n  }\n  /**\n   * Creates and starts a new subscription.\n   *\n   * Subscriptions automatically start unless `autoStart` is set to `false`.\n   * You can control automatic closing on EOSE via `opts.closeOnEose`.\n   *\n   * @param filters - A single NDKFilter object or an array of filters.\n   * @param opts - Optional NDKSubscriptionOptions to customize behavior (e.g., caching, grouping).\n   * @param handlers - Optional handlers for subscription events. Passing handlers is the preferred method of using ndk.subscribe.\n   *   - `onEvent`: Called for each event received.\n   *  - `onEvents`: Called once with an array of events when the subscription starts (from the cache).\n   *  - `onEose`: Called when the subscription receives EOSE.\n   *  For backwards compatibility, this third parameter also accepts a relaySet, the relaySet should be passed via `opts.relaySet`.\n   *\n   * @param _autoStart - For backwards compatibility, this can be a boolean indicating whether to start the subscription immediately.\n   *  This parameter is deprecated and will be removed in a future version.\n   *   - `false`: Creates the subscription but does not start it (call `subscription.start()` manually).\n   * @returns The created NDKSubscription instance.\n   *\n   * @example Basic subscription\n   * ```typescript\n   * const sub = ndk.subscribe({ kinds: [1], authors: [pubkey] });\n   * sub.on(\"event\", (event) => console.log(\"Kind 1 event:\", event.content));\n   * ```\n   *\n   * @example Subscription with options and direct handlers\n   * ```typescript\n   * const sub = ndk.subscribe(\n   *   { kinds: [0], authors: [pubkey] },\n   *   { closeOnEose: true, cacheUsage: NDKSubscriptionCacheUsage.PARALLEL },\n   *   undefined, // Use default relay set calculation\n   *   {\n   *     onEvents: (events) => { // Renamed parameter\n   *       if (events.length > 0) {\n   *         console.log(`Got ${events.length} profile events from cache:`, events[0].content);\n   *       }\n   *     },\n   *     onEvent: (event) => { // Renamed parameter\n   *       console.log(\"Got profile update from relay:\", event.content); // Clarified source\n   *     },\n   *     onEose: () => console.log(\"Profile subscription finished.\")\n   *   }\n   * );\n   * ```\n   *\n   * @since 2.13.0 `relaySet` parameter removed; pass `relaySet` or `relayUrls` via `opts`.\n   */\n  subscribe(filters, opts, autoStartOrRelaySet = true, _autoStart = true) {\n    let _relaySet = opts?.relaySet;\n    let autoStart = _autoStart;\n    if (autoStartOrRelaySet instanceof NDKRelaySet) {\n      console.warn(\"relaySet is deprecated, use opts.relaySet instead. This will be removed in version v2.14.0\");\n      _relaySet = autoStartOrRelaySet;\n      autoStart = _autoStart;\n    } else if (typeof autoStartOrRelaySet === \"boolean\" || typeof autoStartOrRelaySet === \"object\") {\n      autoStart = autoStartOrRelaySet;\n    }\n    const subscription = new NDKSubscription(this, filters, { relaySet: _relaySet, ...opts });\n    this.subManager.add(subscription);\n    const pool = subscription.pool;\n    if (subscription.relaySet) {\n      for (const relay of subscription.relaySet.relays) {\n        pool.useTemporaryRelay(relay, void 0, subscription.filters);\n      }\n    }\n    if (this.outboxPool && subscription.hasAuthorsFilter()) {\n      const authors = subscription.filters.filter((filter) => filter.authors && filter.authors?.length > 0).flatMap((filter) => filter.authors);\n      this.outboxTracker?.trackUsers(authors);\n    }\n    if (autoStart) {\n      let eventsHandler;\n      if (typeof autoStart === \"object\") {\n        if (autoStart.onEvent) subscription.on(\"event\", autoStart.onEvent);\n        if (autoStart.onEose) subscription.on(\"eose\", autoStart.onEose);\n        if (autoStart.onEvents) eventsHandler = autoStart.onEvents;\n      }\n      setTimeout(() => {\n        const cachedEvents = subscription.start(!eventsHandler);\n        if (cachedEvents && cachedEvents.length > 0 && !!eventsHandler) eventsHandler(cachedEvents);\n      }, 0);\n    }\n    return subscription;\n  }\n  /**\n   * Publish an event to a relay\n   * @param event event to publish\n   * @param relaySet explicit relay set to use\n   * @param timeoutMs timeout in milliseconds to wait for the event to be published\n   * @returns The relays the event was published to\n   *\n   * @deprecated Use `event.publish()` instead\n   */\n  async publish(event, relaySet, timeoutMs) {\n    this.debug(\"Deprecated: Use `event.publish()` instead\");\n    return event.publish(relaySet, timeoutMs);\n  }\n  /**\n   * Attempts to fetch an event from a tag, following relay hints and\n   * other best practices.\n   * @param tag Tag to fetch the event from\n   * @param originalEvent Event where the tag came from\n   * @param subOpts Subscription options to use when fetching the event\n   * @param fallback Fallback options to use when the hint relay doesn't respond\n   * @returns\n   */\n  fetchEventFromTag = fetchEventFromTag.bind(this);\n  /**\n   * Fetch an event from the cache synchronously.\n   * @param idOrFilter event id in bech32 format or filter\n   * @returns events from the cache or null if the cache is empty\n   */\n  fetchEventSync(idOrFilter) {\n    if (!this.cacheAdapter) throw new Error(\"Cache adapter not set\");\n    let filters;\n    if (typeof idOrFilter === \"string\") filters = [filterFromId(idOrFilter)];\n    else filters = idOrFilter;\n    const sub = new NDKSubscription(this, filters);\n    const events = this.cacheAdapter.query(sub);\n    if (events instanceof Promise) throw new Error(\"Cache adapter is async\");\n    return events.map((e) => {\n      e.ndk = this;\n      return e;\n    });\n  }\n  /**\n   * Fetch a single event.\n   *\n   * @param idOrFilter event id in bech32 format or filter\n   * @param opts subscription options\n   * @param relaySetOrRelay explicit relay set to use\n   */\n  async fetchEvent(idOrFilter, opts, relaySetOrRelay) {\n    let filters;\n    let relaySet;\n    if (relaySetOrRelay instanceof NDKRelay) {\n      relaySet = new NDKRelaySet(/* @__PURE__ */ new Set([relaySetOrRelay]), this);\n    } else if (relaySetOrRelay instanceof NDKRelaySet) {\n      relaySet = relaySetOrRelay;\n    }\n    if (!relaySetOrRelay && typeof idOrFilter === \"string\") {\n      if (!isNip33AValue(idOrFilter)) {\n        const relays = relaysFromBech32(idOrFilter, this);\n        if (relays.length > 0) {\n          relaySet = new NDKRelaySet(new Set(relays), this);\n          relaySet = correctRelaySet(relaySet, this.pool);\n        }\n      }\n    }\n    if (typeof idOrFilter === \"string\") {\n      filters = [filterFromId(idOrFilter)];\n    } else if (Array.isArray(idOrFilter)) {\n      filters = idOrFilter;\n    } else {\n      filters = [idOrFilter];\n    }\n    if (filters.length === 0) {\n      throw new Error(`Invalid filter: ${JSON.stringify(idOrFilter)}`);\n    }\n    return new Promise((resolve) => {\n      let fetchedEvent = null;\n      const subscribeOpts = {\n        ...opts || {},\n        closeOnEose: true\n      };\n      if (relaySet) subscribeOpts.relaySet = relaySet;\n      const s = this.subscribe(\n        filters,\n        subscribeOpts,\n        // relaySet, // Removed: Passed via opts\n        false\n        // autoStart = false\n      );\n      const t2 = setTimeout(() => {\n        s.stop();\n        resolve(fetchedEvent);\n      }, 1e4);\n      s.on(\"event\", (event) => {\n        event.ndk = this;\n        if (!event.isReplaceable()) {\n          clearTimeout(t2);\n          resolve(event);\n        } else if (!fetchedEvent || fetchedEvent.created_at < event.created_at) {\n          fetchedEvent = event;\n        }\n      });\n      s.on(\"eose\", () => {\n        clearTimeout(t2);\n        resolve(fetchedEvent);\n      });\n      s.start();\n    });\n  }\n  /**\n   * Fetch events\n   */\n  async fetchEvents(filters, opts, relaySet) {\n    return new Promise((resolve) => {\n      const events = /* @__PURE__ */ new Map();\n      const subscribeOpts = {\n        ...opts || {},\n        closeOnEose: true\n      };\n      if (relaySet) subscribeOpts.relaySet = relaySet;\n      const relaySetSubscription = this.subscribe(\n        filters,\n        subscribeOpts,\n        // relaySet, // Removed: Passed via opts\n        false\n        // autoStart = false\n      );\n      const onEvent = (event) => {\n        let _event;\n        if (!(event instanceof NDKEvent)) _event = new NDKEvent(void 0, event);\n        else _event = event;\n        const dedupKey = _event.deduplicationKey();\n        const existingEvent = events.get(dedupKey);\n        if (existingEvent) {\n          _event = dedup(existingEvent, _event);\n        }\n        _event.ndk = this;\n        events.set(dedupKey, _event);\n      };\n      relaySetSubscription.on(\"event\", onEvent);\n      relaySetSubscription.on(\"eose\", () => {\n        resolve(new Set(events.values()));\n      });\n      relaySetSubscription.start();\n    });\n  }\n  /**\n   * Ensures that a signer is available to sign an event.\n   */\n  assertSigner() {\n    if (!this.signer) {\n      this.emit(\"signer:required\");\n      throw new Error(\"Signer required\");\n    }\n  }\n  getEntity = getEntity.bind(this);\n  set wallet(wallet) {\n    if (!wallet) {\n      this.walletConfig = void 0;\n      return;\n    }\n    this.walletConfig ??= {};\n    this.walletConfig.lnPay = wallet?.lnPay?.bind(wallet);\n    this.walletConfig.cashuPay = wallet?.cashuPay?.bind(wallet);\n  }\n};\n\n// src/zap/invoice.ts\n\nfunction zapInvoiceFromEvent(event) {\n  const description = event.getMatchingTags(\"description\")[0];\n  const bolt11 = event.getMatchingTags(\"bolt11\")[0];\n  let decodedInvoice;\n  let zapRequest;\n  if (!description || !bolt11 || !bolt11[1]) {\n    return null;\n  }\n  try {\n    let zapRequestPayload = description[1];\n    if (zapRequestPayload.startsWith(\"%\")) {\n      zapRequestPayload = decodeURIComponent(zapRequestPayload);\n    }\n    if (zapRequestPayload === \"\") {\n      return null;\n    }\n    zapRequest = JSON.parse(zapRequestPayload);\n    decodedInvoice = (0,light_bolt11_decoder__WEBPACK_IMPORTED_MODULE_7__.decode)(bolt11[1]);\n  } catch (_e) {\n    return null;\n  }\n  const amountSection = decodedInvoice.sections.find((s) => s.name === \"amount\");\n  if (!amountSection) {\n    return null;\n  }\n  const amount = Number.parseInt(amountSection.value);\n  if (!amount) {\n    return null;\n  }\n  const content = zapRequest.content;\n  const sender = zapRequest.pubkey;\n  const recipientTag = event.getMatchingTags(\"p\")[0];\n  const recipient = recipientTag[1];\n  let zappedEvent = event.getMatchingTags(\"e\")[0];\n  if (!zappedEvent) {\n    zappedEvent = event.getMatchingTags(\"a\")[0];\n  }\n  const zappedEventId = zappedEvent ? zappedEvent[1] : void 0;\n  const zapInvoice = {\n    id: event.id,\n    zapper: event.pubkey,\n    zappee: sender,\n    zapped: recipient,\n    zappedEvent: zappedEventId,\n    amount,\n    comment: content\n  };\n  return zapInvoice;\n}\n\n// src/zapper/index.ts\n\n\n\n// src/zapper/ln.ts\n\n\nvar d2 = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:zapper:ln\");\nasync function getNip57ZapSpecFromLud({ lud06, lud16 }, ndk) {\n  let zapEndpoint;\n  if (lud16 && !lud16.startsWith(\"LNURL\")) {\n    const [name, domain] = lud16.split(\"@\");\n    zapEndpoint = `https://${domain}/.well-known/lnurlp/${name}`;\n  } else if (lud06) {\n    const { words } = _scure_base__WEBPACK_IMPORTED_MODULE_8__.bech32.decode(lud06, 1e3);\n    const data = _scure_base__WEBPACK_IMPORTED_MODULE_8__.bech32.fromWords(words);\n    const utf8Decoder = new TextDecoder(\"utf-8\");\n    zapEndpoint = utf8Decoder.decode(data);\n  }\n  if (!zapEndpoint) {\n    d2(\"No zap endpoint found %o\", { lud06, lud16 });\n    throw new Error(\"No zap endpoint found\");\n  }\n  try {\n    const _fetch = ndk.httpFetch || fetch;\n    const response = await _fetch(zapEndpoint);\n    if (response.status !== 200) {\n      const text = await response.text();\n      throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${text}`);\n    }\n    return await response.json();\n  } catch (e) {\n    throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${e}`);\n  }\n}\n\n// src/zapper/nip57.ts\n\nasync function generateZapRequest(target, ndk, data, pubkey, amount, relays, comment, tags, signer) {\n  const zapEndpoint = data.callback;\n  const zapRequest = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip57.makeZapRequest({\n    profile: pubkey,\n    // set the event to null since nostr-tools doesn't support nip-33 zaps\n    event: null,\n    amount,\n    comment: comment || \"\",\n    relays: relays.slice(0, 4)\n  });\n  if (target instanceof NDKEvent) {\n    const tags2 = target.referenceTags();\n    const nonPTags = tags2.filter((tag) => tag[0] !== \"p\");\n    zapRequest.tags.push(...nonPTags);\n  }\n  zapRequest.tags.push([\"lnurl\", zapEndpoint]);\n  const event = new NDKEvent(ndk, zapRequest);\n  if (tags) {\n    event.tags = event.tags.concat(tags);\n  }\n  const eTaggedEvents = /* @__PURE__ */ new Set();\n  const aTaggedEvents = /* @__PURE__ */ new Set();\n  for (const tag of event.tags) {\n    if (tag[0] === \"e\") {\n      eTaggedEvents.add(tag[1]);\n    } else if (tag[0] === \"a\") {\n      aTaggedEvents.add(tag[1]);\n    }\n  }\n  if (eTaggedEvents.size > 1) throw new Error(\"Only one e-tag is allowed\");\n  if (aTaggedEvents.size > 1) throw new Error(\"Only one a-tag is allowed\");\n  event.tags = event.tags.filter((tag) => tag[0] !== \"p\");\n  event.tags.push([\"p\", pubkey]);\n  await event.sign(signer);\n  return event;\n}\n\n// src/zapper/index.ts\nvar d3 = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:zapper\");\nvar NDKZapper = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  target;\n  ndk;\n  comment;\n  amount;\n  unit;\n  tags;\n  signer;\n  zapMethod;\n  nutzapAsFallback;\n  lnPay;\n  /**\n   * Called when a cashu payment is to be made.\n   * This function should swap/mint proofs for the required amount, in the required unit,\n   * in any of the provided mints and return the proofs and mint used.\n   */\n  cashuPay;\n  onComplete;\n  maxRelays = 3;\n  /**\n   *\n   * @param target The target of the zap\n   * @param amount The amount to send indicated in the unit\n   * @param unit The unit of the amount\n   * @param opts Options for the zap\n   */\n  constructor(target, amount, unit = \"msat\", opts = {}) {\n    super();\n    this.target = target;\n    this.ndk = opts.ndk || target.ndk;\n    if (!this.ndk) {\n      throw new Error(\"No NDK instance provided\");\n    }\n    this.amount = amount;\n    this.comment = opts.comment;\n    this.unit = unit;\n    this.tags = opts.tags;\n    this.signer = opts.signer;\n    this.nutzapAsFallback = opts.nutzapAsFallback ?? false;\n    this.lnPay = opts.lnPay || this.ndk.walletConfig?.lnPay;\n    this.cashuPay = opts.cashuPay || this.ndk.walletConfig?.cashuPay;\n    this.onComplete = opts.onComplete || this.ndk.walletConfig?.onPaymentComplete;\n  }\n  /**\n   * Initiate zapping process\n   *\n   * This function will calculate the splits for this zap and initiate each zap split.\n   */\n  async zap(methods) {\n    const splits = this.getZapSplits();\n    const results = /* @__PURE__ */ new Map();\n    await Promise.all(\n      splits.map(async (split) => {\n        let result;\n        try {\n          result = await this.zapSplit(split, methods);\n        } catch (e) {\n          result = new Error(e.message);\n        }\n        this.emit(\"split:complete\", split, result);\n        results.set(split, result);\n      })\n    );\n    this.emit(\"complete\", results);\n    if (this.onComplete) this.onComplete(results);\n    return results;\n  }\n  async zapNip57(split, data) {\n    if (!this.lnPay) throw new Error(\"No lnPay function available\");\n    const zapSpec = await getNip57ZapSpecFromLud(data, this.ndk);\n    if (!zapSpec) throw new Error(\"No zap spec available for recipient\");\n    const relays = await this.relays(split.pubkey);\n    const zapRequest = await generateZapRequest(\n      this.target,\n      this.ndk,\n      zapSpec,\n      split.pubkey,\n      split.amount,\n      relays,\n      this.comment,\n      this.tags,\n      this.signer\n    );\n    if (!zapRequest) {\n      d3(\"Unable to generate zap request\");\n      throw new Error(\"Unable to generate zap request\");\n    }\n    const pr = await this.getLnInvoice(zapRequest, split.amount, zapSpec);\n    if (!pr) {\n      d3(\"Unable to get payment request\");\n      throw new Error(\"Unable to get payment request\");\n    }\n    this.emit(\"ln_invoice\", {\n      amount: split.amount,\n      recipientPubkey: split.pubkey,\n      unit: this.unit,\n      nip57ZapRequest: zapRequest,\n      pr,\n      type: \"nip57\"\n    });\n    const res = await this.lnPay({\n      target: this.target,\n      recipientPubkey: split.pubkey,\n      paymentDescription: \"NIP-57 Zap\",\n      pr,\n      amount: split.amount,\n      unit: this.unit,\n      nip57ZapRequest: zapRequest\n    });\n    if (res?.preimage) {\n      this.emit(\"ln_payment\", {\n        preimage: res.preimage,\n        amount: split.amount,\n        recipientPubkey: split.pubkey,\n        pr,\n        unit: this.unit,\n        nip57ZapRequest: zapRequest,\n        type: \"nip57\"\n      });\n    }\n    return res;\n  }\n  /**\n   * Fetches information about a NIP-61 zap and asks the caller to create cashu proofs for the zap.\n   *\n   * (note that the cashuPay function can use any method to create the proofs, including using lightning\n   * to mint proofs in the specified mint, the responsibility of minting the proofs is delegated to the caller (e.g. ndk-wallet))\n   */\n  async zapNip61(split, data) {\n    if (!this.cashuPay) throw new Error(\"No cashuPay function available\");\n    let ret;\n    ret = await this.cashuPay(\n      {\n        target: this.target,\n        recipientPubkey: split.pubkey,\n        paymentDescription: \"NIP-61 Zap\",\n        amount: split.amount,\n        unit: this.unit,\n        ...data ?? {}\n      },\n      (pr) => {\n        this.emit(\"ln_invoice\", {\n          pr,\n          amount: split.amount,\n          recipientPubkey: split.pubkey,\n          unit: this.unit,\n          type: \"nip61\"\n        });\n      }\n    );\n    d3(\"NIP-61 Zap result: %o\", ret);\n    if (ret instanceof Error) {\n      return ret;\n    }\n    if (ret) {\n      const { proofs, mint } = ret;\n      if (!proofs || !mint) throw new Error(`Invalid zap confirmation: missing proofs or mint: ${ret}`);\n      const relays = await this.relays(split.pubkey);\n      const relaySet = NDKRelaySet.fromRelayUrls(relays, this.ndk);\n      const nutzap = new NDKNutzap(this.ndk);\n      nutzap.tags = [...nutzap.tags, ...this.tags || []];\n      nutzap.proofs = proofs;\n      nutzap.mint = mint;\n      nutzap.target = this.target;\n      nutzap.comment = this.comment;\n      nutzap.unit = \"sat\";\n      nutzap.recipientPubkey = split.pubkey;\n      await nutzap.sign(this.signer);\n      nutzap.publish(relaySet);\n      return nutzap;\n    }\n  }\n  /**\n   * Get the zap methods available for the recipient and initiates the zap\n   * in the desired method.\n   * @param split\n   * @param methods - The methods to try, if not provided, all methods will be tried.\n   * @returns\n   */\n  async zapSplit(split, methods) {\n    const recipient = this.ndk.getUser({ pubkey: split.pubkey });\n    const zapMethods = await recipient.getZapInfo(2500);\n    let retVal;\n    const canFallbackToNip61 = this.nutzapAsFallback && this.cashuPay;\n    if (zapMethods.size === 0 && !canFallbackToNip61)\n      throw new Error(\"No zap method available for recipient and NIP-61 fallback is disabled\");\n    const nip61Fallback = async () => {\n      if (!this.nutzapAsFallback) return;\n      const relayLists = await getRelayListForUsers([split.pubkey], this.ndk);\n      let relayUrls = relayLists.get(split.pubkey)?.readRelayUrls;\n      relayUrls = this.ndk.pool.connectedRelays().map((r) => r.url);\n      return await this.zapNip61(split, {\n        // use the user's relay list\n        relays: relayUrls,\n        // lock to the user's actual pubkey\n        p2pk: split.pubkey,\n        // allow intramint fallback\n        allowIntramintFallback: !!canFallbackToNip61\n      });\n    };\n    const canUseNip61 = !methods || methods.includes(\"nip61\");\n    const canUseNip57 = !methods || methods.includes(\"nip57\");\n    const nip61Method = zapMethods.get(\"nip61\");\n    if (nip61Method && canUseNip61) {\n      try {\n        retVal = await this.zapNip61(split, nip61Method);\n        if (retVal instanceof NDKNutzap) return retVal;\n      } catch (e) {\n        this.emit(\"notice\", `NIP-61 attempt failed: ${e.message}`);\n      }\n    }\n    const nip57Method = zapMethods.get(\"nip57\");\n    if (nip57Method && canUseNip57) {\n      try {\n        retVal = await this.zapNip57(split, nip57Method);\n        if (!(retVal instanceof Error)) return retVal;\n      } catch (e) {\n        this.emit(\"notice\", `NIP-57 attempt failed: ${e.message}`);\n      }\n    }\n    if (canFallbackToNip61) {\n      retVal = await nip61Fallback();\n      if (retVal instanceof Error) throw retVal;\n      return retVal;\n    }\n    this.emit(\"notice\", \"Zap methods exhausted and there was no fallback to NIP-61\");\n    if (retVal instanceof Error) throw retVal;\n    return retVal;\n  }\n  /**\n   * Gets a bolt11 for a nip57 zap\n   * @param event\n   * @param amount\n   * @param zapEndpoint\n   * @returns\n   */\n  async getLnInvoice(zapRequest, amount, data) {\n    const zapEndpoint = data.callback;\n    const eventPayload = JSON.stringify(zapRequest.rawEvent());\n    d3(\n      `Fetching invoice from ${zapEndpoint}?${new URLSearchParams({\n        amount: amount.toString(),\n        nostr: eventPayload\n      })}`\n    );\n    const url = new URL(zapEndpoint);\n    url.searchParams.append(\"amount\", amount.toString());\n    url.searchParams.append(\"nostr\", eventPayload);\n    d3(`Fetching invoice from ${url.toString()}`);\n    const response = await fetch(url.toString());\n    d3(`Got response from zap endpoint: ${zapEndpoint}`, { status: response.status });\n    if (response.status !== 200) {\n      d3(`Received non-200 status from zap endpoint: ${zapEndpoint}`, {\n        status: response.status,\n        amount,\n        nostr: eventPayload\n      });\n      const text = await response.text();\n      throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${text}`);\n    }\n    const body = await response.json();\n    return body.pr;\n  }\n  getZapSplits() {\n    if (this.target instanceof NDKUser) {\n      return [\n        {\n          pubkey: this.target.pubkey,\n          amount: this.amount\n        }\n      ];\n    }\n    const zapTags = this.target.getMatchingTags(\"zap\");\n    if (zapTags.length === 0) {\n      return [\n        {\n          pubkey: this.target.pubkey,\n          amount: this.amount\n        }\n      ];\n    }\n    const splits = [];\n    const total = zapTags.reduce((acc, tag) => acc + Number.parseInt(tag[2]), 0);\n    for (const tag of zapTags) {\n      const pubkey = tag[1];\n      const amount = Math.floor(Number.parseInt(tag[2]) / total * this.amount);\n      splits.push({ pubkey, amount });\n    }\n    return splits;\n  }\n  /**\n   * Gets the zap method that should be used to zap a pubbkey\n   * @param ndk\n   * @param pubkey\n   * @returns\n   */\n  async getZapMethods(ndk, recipient, timeout = 2500) {\n    const user = ndk.getUser({ pubkey: recipient });\n    return await user.getZapInfo(timeout);\n  }\n  /**\n   * @returns the relays to use for the zap request\n   */\n  async relays(pubkey) {\n    let r = [];\n    if (this.ndk?.activeUser) {\n      const relayLists = await getRelayListForUsers([this.ndk.activeUser.pubkey, pubkey], this.ndk);\n      const relayScores = /* @__PURE__ */ new Map();\n      for (const relayList of relayLists.values()) {\n        for (const url of relayList.readRelayUrls) {\n          const score = relayScores.get(url) || 0;\n          relayScores.set(url, score + 1);\n        }\n      }\n      r = Array.from(relayScores.entries()).sort((a, b) => b[1] - a[1]).map(([url]) => url).slice(0, this.maxRelays);\n    }\n    if (this.ndk?.pool?.permanentAndConnectedRelays().length) {\n      r = this.ndk.pool.permanentAndConnectedRelays().map((relay) => relay.url);\n    }\n    if (!r.length) {\n      r = [];\n    }\n    return r;\n  }\n};\n\n// src/utils/filter.ts\nfunction matchFilter(filter, event) {\n  if (filter.ids && filter.ids.indexOf(event.id) === -1) {\n    return false;\n  }\n  if (filter.kinds && filter.kinds.indexOf(event.kind) === -1) {\n    return false;\n  }\n  if (filter.authors && filter.authors.indexOf(event.pubkey) === -1) {\n    return false;\n  }\n  for (const f in filter) {\n    if (f[0] === \"#\") {\n      const tagName = f.slice(1);\n      if (tagName === \"t\") {\n        const values = filter[`#${tagName}`]?.map((v) => v.toLowerCase());\n        if (values && !event.tags.find(([t, v]) => t === tagName && values?.indexOf(v.toLowerCase()) !== -1))\n          return false;\n      } else {\n        const values = filter[`#${tagName}`];\n        if (values && !event.tags.find(([t, v]) => t === tagName && values?.indexOf(v) !== -1)) return false;\n      }\n    }\n  }\n  if (filter.since && event.created_at < filter.since) return false;\n  if (filter.until && event.created_at > filter.until) return false;\n  return true;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/@nostr-dev-kit/ndk/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/lib/esm/index.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/lib/esm/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Relay: () => (/* binding */ Relay),\n/* harmony export */   SimplePool: () => (/* binding */ SimplePool),\n/* harmony export */   finalizeEvent: () => (/* binding */ finalizeEvent),\n/* harmony export */   fj: () => (/* binding */ fakejson_exports),\n/* harmony export */   generateSecretKey: () => (/* binding */ generateSecretKey),\n/* harmony export */   getEventHash: () => (/* binding */ getEventHash),\n/* harmony export */   getFilterLimit: () => (/* binding */ getFilterLimit),\n/* harmony export */   getPublicKey: () => (/* binding */ getPublicKey),\n/* harmony export */   kinds: () => (/* binding */ kinds_exports),\n/* harmony export */   matchFilter: () => (/* binding */ matchFilter),\n/* harmony export */   matchFilters: () => (/* binding */ matchFilters),\n/* harmony export */   mergeFilters: () => (/* binding */ mergeFilters),\n/* harmony export */   nip04: () => (/* binding */ nip04_exports),\n/* harmony export */   nip05: () => (/* binding */ nip05_exports),\n/* harmony export */   nip10: () => (/* binding */ nip10_exports),\n/* harmony export */   nip11: () => (/* binding */ nip11_exports),\n/* harmony export */   nip13: () => (/* binding */ nip13_exports),\n/* harmony export */   nip17: () => (/* binding */ nip17_exports),\n/* harmony export */   nip18: () => (/* binding */ nip18_exports),\n/* harmony export */   nip19: () => (/* binding */ nip19_exports),\n/* harmony export */   nip21: () => (/* binding */ nip21_exports),\n/* harmony export */   nip25: () => (/* binding */ nip25_exports),\n/* harmony export */   nip27: () => (/* binding */ nip27_exports),\n/* harmony export */   nip28: () => (/* binding */ nip28_exports),\n/* harmony export */   nip30: () => (/* binding */ nip30_exports),\n/* harmony export */   nip39: () => (/* binding */ nip39_exports),\n/* harmony export */   nip42: () => (/* binding */ nip42_exports),\n/* harmony export */   nip44: () => (/* binding */ nip44_exports),\n/* harmony export */   nip47: () => (/* binding */ nip47_exports),\n/* harmony export */   nip54: () => (/* binding */ nip54_exports),\n/* harmony export */   nip57: () => (/* binding */ nip57_exports),\n/* harmony export */   nip59: () => (/* binding */ nip59_exports),\n/* harmony export */   nip98: () => (/* binding */ nip98_exports),\n/* harmony export */   parseReferences: () => (/* binding */ parseReferences),\n/* harmony export */   serializeEvent: () => (/* binding */ serializeEvent),\n/* harmony export */   sortEvents: () => (/* binding */ sortEvents),\n/* harmony export */   utils: () => (/* binding */ utils_exports),\n/* harmony export */   validateEvent: () => (/* binding */ validateEvent),\n/* harmony export */   verifiedSymbol: () => (/* binding */ verifiedSymbol),\n/* harmony export */   verifyEvent: () => (/* binding */ verifyEvent)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@scure/base/lib/esm/index.js\");\n/* harmony import */ var _noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/ciphers/aes */ \"(ssr)/./node_modules/@noble/ciphers/esm/aes.js\");\n/* harmony import */ var _noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @noble/ciphers/chacha */ \"(ssr)/./node_modules/@noble/ciphers/esm/chacha.js\");\n/* harmony import */ var _noble_ciphers_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @noble/ciphers/utils */ \"(ssr)/./node_modules/@noble/ciphers/esm/utils.js\");\n/* harmony import */ var _noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/hashes/hkdf */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/hkdf.js\");\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/hmac.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// pure.ts\n\n\n\n// core.ts\nvar verifiedSymbol = Symbol(\"verified\");\nvar isRecord = (obj) => obj instanceof Object;\nfunction validateEvent(event) {\n  if (!isRecord(event))\n    return false;\n  if (typeof event.kind !== \"number\")\n    return false;\n  if (typeof event.content !== \"string\")\n    return false;\n  if (typeof event.created_at !== \"number\")\n    return false;\n  if (typeof event.pubkey !== \"string\")\n    return false;\n  if (!event.pubkey.match(/^[a-f0-9]{64}$/))\n    return false;\n  if (!Array.isArray(event.tags))\n    return false;\n  for (let i2 = 0; i2 < event.tags.length; i2++) {\n    let tag = event.tags[i2];\n    if (!Array.isArray(tag))\n      return false;\n    for (let j = 0; j < tag.length; j++) {\n      if (typeof tag[j] === \"object\")\n        return false;\n    }\n  }\n  return true;\n}\nfunction sortEvents(events) {\n  return events.sort((a, b) => {\n    if (a.created_at !== b.created_at) {\n      return b.created_at - a.created_at;\n    }\n    return a.id.localeCompare(b.id);\n  });\n}\n\n// pure.ts\n\n\n// utils.ts\nvar utils_exports = {};\n__export(utils_exports, {\n  Queue: () => Queue,\n  QueueNode: () => QueueNode,\n  binarySearch: () => binarySearch,\n  insertEventIntoAscendingList: () => insertEventIntoAscendingList,\n  insertEventIntoDescendingList: () => insertEventIntoDescendingList,\n  normalizeURL: () => normalizeURL,\n  utf8Decoder: () => utf8Decoder,\n  utf8Encoder: () => utf8Encoder\n});\nvar utf8Decoder = new TextDecoder(\"utf-8\");\nvar utf8Encoder = new TextEncoder();\nfunction normalizeURL(url) {\n  if (url.indexOf(\"://\") === -1)\n    url = \"wss://\" + url;\n  let p = new URL(url);\n  p.pathname = p.pathname.replace(/\\/+/g, \"/\");\n  if (p.pathname.endsWith(\"/\"))\n    p.pathname = p.pathname.slice(0, -1);\n  if (p.port === \"80\" && p.protocol === \"ws:\" || p.port === \"443\" && p.protocol === \"wss:\")\n    p.port = \"\";\n  p.searchParams.sort();\n  p.hash = \"\";\n  return p.toString();\n}\nfunction insertEventIntoDescendingList(sortedArray, event) {\n  const [idx, found] = binarySearch(sortedArray, (b) => {\n    if (event.id === b.id)\n      return 0;\n    if (event.created_at === b.created_at)\n      return -1;\n    return b.created_at - event.created_at;\n  });\n  if (!found) {\n    sortedArray.splice(idx, 0, event);\n  }\n  return sortedArray;\n}\nfunction insertEventIntoAscendingList(sortedArray, event) {\n  const [idx, found] = binarySearch(sortedArray, (b) => {\n    if (event.id === b.id)\n      return 0;\n    if (event.created_at === b.created_at)\n      return -1;\n    return event.created_at - b.created_at;\n  });\n  if (!found) {\n    sortedArray.splice(idx, 0, event);\n  }\n  return sortedArray;\n}\nfunction binarySearch(arr, compare) {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    const cmp = compare(arr[mid]);\n    if (cmp === 0) {\n      return [mid, true];\n    }\n    if (cmp < 0) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return [start, false];\n}\nvar QueueNode = class {\n  value;\n  next = null;\n  prev = null;\n  constructor(message) {\n    this.value = message;\n  }\n};\nvar Queue = class {\n  first;\n  last;\n  constructor() {\n    this.first = null;\n    this.last = null;\n  }\n  enqueue(value) {\n    const newNode = new QueueNode(value);\n    if (!this.last) {\n      this.first = newNode;\n      this.last = newNode;\n    } else if (this.last === this.first) {\n      this.last = newNode;\n      this.last.prev = this.first;\n      this.first.next = newNode;\n    } else {\n      newNode.prev = this.last;\n      this.last.next = newNode;\n      this.last = newNode;\n    }\n    return true;\n  }\n  dequeue() {\n    if (!this.first)\n      return null;\n    if (this.first === this.last) {\n      const target2 = this.first;\n      this.first = null;\n      this.last = null;\n      return target2.value;\n    }\n    const target = this.first;\n    this.first = target.next;\n    return target.value;\n  }\n};\n\n// pure.ts\nvar JS = class {\n  generateSecretKey() {\n    return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.schnorr.utils.randomPrivateKey();\n  }\n  getPublicKey(secretKey) {\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.schnorr.getPublicKey(secretKey));\n  }\n  finalizeEvent(t, secretKey) {\n    const event = t;\n    event.pubkey = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.schnorr.getPublicKey(secretKey));\n    event.id = getEventHash(event);\n    event.sig = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.schnorr.sign(getEventHash(event), secretKey));\n    event[verifiedSymbol] = true;\n    return event;\n  }\n  verifyEvent(event) {\n    if (typeof event[verifiedSymbol] === \"boolean\")\n      return event[verifiedSymbol];\n    const hash = getEventHash(event);\n    if (hash !== event.id) {\n      event[verifiedSymbol] = false;\n      return false;\n    }\n    try {\n      const valid = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.schnorr.verify(event.sig, hash, event.pubkey);\n      event[verifiedSymbol] = valid;\n      return valid;\n    } catch (err) {\n      event[verifiedSymbol] = false;\n      return false;\n    }\n  }\n};\nfunction serializeEvent(evt) {\n  if (!validateEvent(evt))\n    throw new Error(\"can't serialize event with wrong or missing properties\");\n  return JSON.stringify([0, evt.pubkey, evt.created_at, evt.kind, evt.tags, evt.content]);\n}\nfunction getEventHash(event) {\n  let eventHash = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(utf8Encoder.encode(serializeEvent(event)));\n  return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(eventHash);\n}\nvar i = new JS();\nvar generateSecretKey = i.generateSecretKey;\nvar getPublicKey = i.getPublicKey;\nvar finalizeEvent = i.finalizeEvent;\nvar verifyEvent = i.verifyEvent;\n\n// kinds.ts\nvar kinds_exports = {};\n__export(kinds_exports, {\n  Application: () => Application,\n  BadgeAward: () => BadgeAward,\n  BadgeDefinition: () => BadgeDefinition,\n  BlockedRelaysList: () => BlockedRelaysList,\n  BookmarkList: () => BookmarkList,\n  Bookmarksets: () => Bookmarksets,\n  Calendar: () => Calendar,\n  CalendarEventRSVP: () => CalendarEventRSVP,\n  ChannelCreation: () => ChannelCreation,\n  ChannelHideMessage: () => ChannelHideMessage,\n  ChannelMessage: () => ChannelMessage,\n  ChannelMetadata: () => ChannelMetadata,\n  ChannelMuteUser: () => ChannelMuteUser,\n  ClassifiedListing: () => ClassifiedListing,\n  ClientAuth: () => ClientAuth,\n  CommunitiesList: () => CommunitiesList,\n  CommunityDefinition: () => CommunityDefinition,\n  CommunityPostApproval: () => CommunityPostApproval,\n  Contacts: () => Contacts,\n  CreateOrUpdateProduct: () => CreateOrUpdateProduct,\n  CreateOrUpdateStall: () => CreateOrUpdateStall,\n  Curationsets: () => Curationsets,\n  Date: () => Date2,\n  DirectMessageRelaysList: () => DirectMessageRelaysList,\n  DraftClassifiedListing: () => DraftClassifiedListing,\n  DraftLong: () => DraftLong,\n  Emojisets: () => Emojisets,\n  EncryptedDirectMessage: () => EncryptedDirectMessage,\n  EventDeletion: () => EventDeletion,\n  FileMetadata: () => FileMetadata,\n  FileServerPreference: () => FileServerPreference,\n  Followsets: () => Followsets,\n  GenericRepost: () => GenericRepost,\n  Genericlists: () => Genericlists,\n  GiftWrap: () => GiftWrap,\n  HTTPAuth: () => HTTPAuth,\n  Handlerinformation: () => Handlerinformation,\n  Handlerrecommendation: () => Handlerrecommendation,\n  Highlights: () => Highlights,\n  InterestsList: () => InterestsList,\n  Interestsets: () => Interestsets,\n  JobFeedback: () => JobFeedback,\n  JobRequest: () => JobRequest,\n  JobResult: () => JobResult,\n  Label: () => Label,\n  LightningPubRPC: () => LightningPubRPC,\n  LiveChatMessage: () => LiveChatMessage,\n  LiveEvent: () => LiveEvent,\n  LongFormArticle: () => LongFormArticle,\n  Metadata: () => Metadata,\n  Mutelist: () => Mutelist,\n  NWCWalletInfo: () => NWCWalletInfo,\n  NWCWalletRequest: () => NWCWalletRequest,\n  NWCWalletResponse: () => NWCWalletResponse,\n  NostrConnect: () => NostrConnect,\n  OpenTimestamps: () => OpenTimestamps,\n  Pinlist: () => Pinlist,\n  PrivateDirectMessage: () => PrivateDirectMessage,\n  ProblemTracker: () => ProblemTracker,\n  ProfileBadges: () => ProfileBadges,\n  PublicChatsList: () => PublicChatsList,\n  Reaction: () => Reaction,\n  RecommendRelay: () => RecommendRelay,\n  RelayList: () => RelayList,\n  Relaysets: () => Relaysets,\n  Report: () => Report,\n  Reporting: () => Reporting,\n  Repost: () => Repost,\n  Seal: () => Seal,\n  SearchRelaysList: () => SearchRelaysList,\n  ShortTextNote: () => ShortTextNote,\n  Time: () => Time,\n  UserEmojiList: () => UserEmojiList,\n  UserStatuses: () => UserStatuses,\n  Zap: () => Zap,\n  ZapGoal: () => ZapGoal,\n  ZapRequest: () => ZapRequest,\n  classifyKind: () => classifyKind,\n  isAddressableKind: () => isAddressableKind,\n  isEphemeralKind: () => isEphemeralKind,\n  isKind: () => isKind,\n  isParameterizedReplaceableKind: () => isParameterizedReplaceableKind,\n  isRegularKind: () => isRegularKind,\n  isReplaceableKind: () => isReplaceableKind\n});\nfunction isRegularKind(kind) {\n  return 1e3 <= kind && kind < 1e4 || [1, 2, 4, 5, 6, 7, 8, 16, 40, 41, 42, 43, 44].includes(kind);\n}\nfunction isReplaceableKind(kind) {\n  return [0, 3].includes(kind) || 1e4 <= kind && kind < 2e4;\n}\nfunction isEphemeralKind(kind) {\n  return 2e4 <= kind && kind < 3e4;\n}\nfunction isAddressableKind(kind) {\n  return 3e4 <= kind && kind < 4e4;\n}\nvar isParameterizedReplaceableKind = isAddressableKind;\nfunction classifyKind(kind) {\n  if (isRegularKind(kind))\n    return \"regular\";\n  if (isReplaceableKind(kind))\n    return \"replaceable\";\n  if (isEphemeralKind(kind))\n    return \"ephemeral\";\n  if (isAddressableKind(kind))\n    return \"parameterized\";\n  return \"unknown\";\n}\nfunction isKind(event, kind) {\n  const kindAsArray = kind instanceof Array ? kind : [kind];\n  return validateEvent(event) && kindAsArray.includes(event.kind) || false;\n}\nvar Metadata = 0;\nvar ShortTextNote = 1;\nvar RecommendRelay = 2;\nvar Contacts = 3;\nvar EncryptedDirectMessage = 4;\nvar EventDeletion = 5;\nvar Repost = 6;\nvar Reaction = 7;\nvar BadgeAward = 8;\nvar Seal = 13;\nvar PrivateDirectMessage = 14;\nvar GenericRepost = 16;\nvar ChannelCreation = 40;\nvar ChannelMetadata = 41;\nvar ChannelMessage = 42;\nvar ChannelHideMessage = 43;\nvar ChannelMuteUser = 44;\nvar OpenTimestamps = 1040;\nvar GiftWrap = 1059;\nvar FileMetadata = 1063;\nvar LiveChatMessage = 1311;\nvar ProblemTracker = 1971;\nvar Report = 1984;\nvar Reporting = 1984;\nvar Label = 1985;\nvar CommunityPostApproval = 4550;\nvar JobRequest = 5999;\nvar JobResult = 6999;\nvar JobFeedback = 7e3;\nvar ZapGoal = 9041;\nvar ZapRequest = 9734;\nvar Zap = 9735;\nvar Highlights = 9802;\nvar Mutelist = 1e4;\nvar Pinlist = 10001;\nvar RelayList = 10002;\nvar BookmarkList = 10003;\nvar CommunitiesList = 10004;\nvar PublicChatsList = 10005;\nvar BlockedRelaysList = 10006;\nvar SearchRelaysList = 10007;\nvar InterestsList = 10015;\nvar UserEmojiList = 10030;\nvar DirectMessageRelaysList = 10050;\nvar FileServerPreference = 10096;\nvar NWCWalletInfo = 13194;\nvar LightningPubRPC = 21e3;\nvar ClientAuth = 22242;\nvar NWCWalletRequest = 23194;\nvar NWCWalletResponse = 23195;\nvar NostrConnect = 24133;\nvar HTTPAuth = 27235;\nvar Followsets = 3e4;\nvar Genericlists = 30001;\nvar Relaysets = 30002;\nvar Bookmarksets = 30003;\nvar Curationsets = 30004;\nvar ProfileBadges = 30008;\nvar BadgeDefinition = 30009;\nvar Interestsets = 30015;\nvar CreateOrUpdateStall = 30017;\nvar CreateOrUpdateProduct = 30018;\nvar LongFormArticle = 30023;\nvar DraftLong = 30024;\nvar Emojisets = 30030;\nvar Application = 30078;\nvar LiveEvent = 30311;\nvar UserStatuses = 30315;\nvar ClassifiedListing = 30402;\nvar DraftClassifiedListing = 30403;\nvar Date2 = 31922;\nvar Time = 31923;\nvar Calendar = 31924;\nvar CalendarEventRSVP = 31925;\nvar Handlerrecommendation = 31989;\nvar Handlerinformation = 31990;\nvar CommunityDefinition = 34550;\n\n// filter.ts\nfunction matchFilter(filter, event) {\n  if (filter.ids && filter.ids.indexOf(event.id) === -1) {\n    return false;\n  }\n  if (filter.kinds && filter.kinds.indexOf(event.kind) === -1) {\n    return false;\n  }\n  if (filter.authors && filter.authors.indexOf(event.pubkey) === -1) {\n    return false;\n  }\n  for (let f in filter) {\n    if (f[0] === \"#\") {\n      let tagName = f.slice(1);\n      let values = filter[`#${tagName}`];\n      if (values && !event.tags.find(([t, v]) => t === f.slice(1) && values.indexOf(v) !== -1))\n        return false;\n    }\n  }\n  if (filter.since && event.created_at < filter.since)\n    return false;\n  if (filter.until && event.created_at > filter.until)\n    return false;\n  return true;\n}\nfunction matchFilters(filters, event) {\n  for (let i2 = 0; i2 < filters.length; i2++) {\n    if (matchFilter(filters[i2], event)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction mergeFilters(...filters) {\n  let result = {};\n  for (let i2 = 0; i2 < filters.length; i2++) {\n    let filter = filters[i2];\n    Object.entries(filter).forEach(([property, values]) => {\n      if (property === \"kinds\" || property === \"ids\" || property === \"authors\" || property[0] === \"#\") {\n        result[property] = result[property] || [];\n        for (let v = 0; v < values.length; v++) {\n          let value = values[v];\n          if (!result[property].includes(value))\n            result[property].push(value);\n        }\n      }\n    });\n    if (filter.limit && (!result.limit || filter.limit > result.limit))\n      result.limit = filter.limit;\n    if (filter.until && (!result.until || filter.until > result.until))\n      result.until = filter.until;\n    if (filter.since && (!result.since || filter.since < result.since))\n      result.since = filter.since;\n  }\n  return result;\n}\nfunction getFilterLimit(filter) {\n  if (filter.ids && !filter.ids.length)\n    return 0;\n  if (filter.kinds && !filter.kinds.length)\n    return 0;\n  if (filter.authors && !filter.authors.length)\n    return 0;\n  for (const [key, value] of Object.entries(filter)) {\n    if (key[0] === \"#\" && Array.isArray(value) && !value.length)\n      return 0;\n  }\n  return Math.min(\n    Math.max(0, filter.limit ?? Infinity),\n    filter.ids?.length ?? Infinity,\n    filter.authors?.length && filter.kinds?.every((kind) => isReplaceableKind(kind)) ? filter.authors.length * filter.kinds.length : Infinity,\n    filter.authors?.length && filter.kinds?.every((kind) => isAddressableKind(kind)) && filter[\"#d\"]?.length ? filter.authors.length * filter.kinds.length * filter[\"#d\"].length : Infinity\n  );\n}\n\n// fakejson.ts\nvar fakejson_exports = {};\n__export(fakejson_exports, {\n  getHex64: () => getHex64,\n  getInt: () => getInt,\n  getSubscriptionId: () => getSubscriptionId,\n  matchEventId: () => matchEventId,\n  matchEventKind: () => matchEventKind,\n  matchEventPubkey: () => matchEventPubkey\n});\nfunction getHex64(json, field) {\n  let len = field.length + 3;\n  let idx = json.indexOf(`\"${field}\":`) + len;\n  let s = json.slice(idx).indexOf(`\"`) + idx + 1;\n  return json.slice(s, s + 64);\n}\nfunction getInt(json, field) {\n  let len = field.length;\n  let idx = json.indexOf(`\"${field}\":`) + len + 3;\n  let sliced = json.slice(idx);\n  let end = Math.min(sliced.indexOf(\",\"), sliced.indexOf(\"}\"));\n  return parseInt(sliced.slice(0, end), 10);\n}\nfunction getSubscriptionId(json) {\n  let idx = json.slice(0, 22).indexOf(`\"EVENT\"`);\n  if (idx === -1)\n    return null;\n  let pstart = json.slice(idx + 7 + 1).indexOf(`\"`);\n  if (pstart === -1)\n    return null;\n  let start = idx + 7 + 1 + pstart;\n  let pend = json.slice(start + 1, 80).indexOf(`\"`);\n  if (pend === -1)\n    return null;\n  let end = start + 1 + pend;\n  return json.slice(start + 1, end);\n}\nfunction matchEventId(json, id) {\n  return id === getHex64(json, \"id\");\n}\nfunction matchEventPubkey(json, pubkey) {\n  return pubkey === getHex64(json, \"pubkey\");\n}\nfunction matchEventKind(json, kind) {\n  return kind === getInt(json, \"kind\");\n}\n\n// nip42.ts\nvar nip42_exports = {};\n__export(nip42_exports, {\n  makeAuthEvent: () => makeAuthEvent\n});\nfunction makeAuthEvent(relayURL, challenge) {\n  return {\n    kind: ClientAuth,\n    created_at: Math.floor(Date.now() / 1e3),\n    tags: [\n      [\"relay\", relayURL],\n      [\"challenge\", challenge]\n    ],\n    content: \"\"\n  };\n}\n\n// helpers.ts\nasync function yieldThread() {\n  return new Promise((resolve) => {\n    const ch = new MessageChannel();\n    const handler = () => {\n      ch.port1.removeEventListener(\"message\", handler);\n      resolve();\n    };\n    ch.port1.addEventListener(\"message\", handler);\n    ch.port2.postMessage(0);\n    ch.port1.start();\n  });\n}\nvar alwaysTrue = (t) => {\n  t[verifiedSymbol] = true;\n  return true;\n};\n\n// abstract-relay.ts\nvar AbstractRelay = class {\n  url;\n  _connected = false;\n  onclose = null;\n  onnotice = (msg) => console.debug(`NOTICE from ${this.url}: ${msg}`);\n  _onauth = null;\n  baseEoseTimeout = 4400;\n  connectionTimeout = 4400;\n  publishTimeout = 4400;\n  openSubs = /* @__PURE__ */ new Map();\n  connectionTimeoutHandle;\n  connectionPromise;\n  openCountRequests = /* @__PURE__ */ new Map();\n  openEventPublishes = /* @__PURE__ */ new Map();\n  ws;\n  incomingMessageQueue = new Queue();\n  queueRunning = false;\n  challenge;\n  authPromise;\n  serial = 0;\n  verifyEvent;\n  _WebSocket;\n  constructor(url, opts) {\n    this.url = normalizeURL(url);\n    this.verifyEvent = opts.verifyEvent;\n    this._WebSocket = opts.websocketImplementation || WebSocket;\n  }\n  static async connect(url, opts) {\n    const relay = new AbstractRelay(url, opts);\n    await relay.connect();\n    return relay;\n  }\n  closeAllSubscriptions(reason) {\n    for (let [_, sub] of this.openSubs) {\n      sub.close(reason);\n    }\n    this.openSubs.clear();\n    for (let [_, ep] of this.openEventPublishes) {\n      ep.reject(new Error(reason));\n    }\n    this.openEventPublishes.clear();\n    for (let [_, cr] of this.openCountRequests) {\n      cr.reject(new Error(reason));\n    }\n    this.openCountRequests.clear();\n  }\n  get connected() {\n    return this._connected;\n  }\n  async connect() {\n    if (this.connectionPromise)\n      return this.connectionPromise;\n    this.challenge = void 0;\n    this.authPromise = void 0;\n    this.connectionPromise = new Promise((resolve, reject) => {\n      this.connectionTimeoutHandle = setTimeout(() => {\n        reject(\"connection timed out\");\n        this.connectionPromise = void 0;\n        this.onclose?.();\n        this.closeAllSubscriptions(\"relay connection timed out\");\n      }, this.connectionTimeout);\n      try {\n        this.ws = new this._WebSocket(this.url);\n      } catch (err) {\n        reject(err);\n        return;\n      }\n      this.ws.onopen = () => {\n        clearTimeout(this.connectionTimeoutHandle);\n        this._connected = true;\n        resolve();\n      };\n      this.ws.onerror = (ev) => {\n        reject(ev.message || \"websocket error\");\n        if (this._connected) {\n          this._connected = false;\n          this.connectionPromise = void 0;\n          this.onclose?.();\n          this.closeAllSubscriptions(\"relay connection errored\");\n        }\n      };\n      this.ws.onclose = async () => {\n        if (this._connected) {\n          this._connected = false;\n          this.connectionPromise = void 0;\n          this.onclose?.();\n          this.closeAllSubscriptions(\"relay connection closed\");\n        }\n      };\n      this.ws.onmessage = this._onmessage.bind(this);\n    });\n    return this.connectionPromise;\n  }\n  async runQueue() {\n    this.queueRunning = true;\n    while (true) {\n      if (false === this.handleNext()) {\n        break;\n      }\n      await yieldThread();\n    }\n    this.queueRunning = false;\n  }\n  handleNext() {\n    const json = this.incomingMessageQueue.dequeue();\n    if (!json) {\n      return false;\n    }\n    const subid = getSubscriptionId(json);\n    if (subid) {\n      const so = this.openSubs.get(subid);\n      if (!so) {\n        return;\n      }\n      const id = getHex64(json, \"id\");\n      const alreadyHave = so.alreadyHaveEvent?.(id);\n      so.receivedEvent?.(this, id);\n      if (alreadyHave) {\n        return;\n      }\n    }\n    try {\n      let data = JSON.parse(json);\n      switch (data[0]) {\n        case \"EVENT\": {\n          const so = this.openSubs.get(data[1]);\n          const event = data[2];\n          if (this.verifyEvent(event) && matchFilters(so.filters, event)) {\n            so.onevent(event);\n          }\n          return;\n        }\n        case \"COUNT\": {\n          const id = data[1];\n          const payload = data[2];\n          const cr = this.openCountRequests.get(id);\n          if (cr) {\n            cr.resolve(payload.count);\n            this.openCountRequests.delete(id);\n          }\n          return;\n        }\n        case \"EOSE\": {\n          const so = this.openSubs.get(data[1]);\n          if (!so)\n            return;\n          so.receivedEose();\n          return;\n        }\n        case \"OK\": {\n          const id = data[1];\n          const ok = data[2];\n          const reason = data[3];\n          const ep = this.openEventPublishes.get(id);\n          if (ep) {\n            clearTimeout(ep.timeout);\n            if (ok)\n              ep.resolve(reason);\n            else\n              ep.reject(new Error(reason));\n            this.openEventPublishes.delete(id);\n          }\n          return;\n        }\n        case \"CLOSED\": {\n          const id = data[1];\n          const so = this.openSubs.get(id);\n          if (!so)\n            return;\n          so.closed = true;\n          so.close(data[2]);\n          return;\n        }\n        case \"NOTICE\":\n          this.onnotice(data[1]);\n          return;\n        case \"AUTH\": {\n          this.challenge = data[1];\n          this.authPromise = void 0;\n          this._onauth?.(data[1]);\n          return;\n        }\n      }\n    } catch (err) {\n      return;\n    }\n  }\n  async send(message) {\n    if (!this.connectionPromise)\n      throw new Error(\"sending on closed connection\");\n    this.connectionPromise.then(() => {\n      this.ws?.send(message);\n    });\n  }\n  async auth(signAuthEvent) {\n    if (!this.challenge)\n      throw new Error(\"can't perform auth, no challenge was received\");\n    if (this.authPromise)\n      return this.authPromise;\n    const evt = await signAuthEvent(makeAuthEvent(this.url, this.challenge));\n    this.authPromise = new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        const ep = this.openEventPublishes.get(evt.id);\n        if (ep) {\n          ep.reject(new Error(\"auth timed out\"));\n          this.openEventPublishes.delete(evt.id);\n        }\n      }, this.publishTimeout);\n      this.openEventPublishes.set(evt.id, { resolve, reject, timeout });\n    });\n    this.send('[\"AUTH\",' + JSON.stringify(evt) + \"]\");\n    return this.authPromise;\n  }\n  async publish(event) {\n    const ret = new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        const ep = this.openEventPublishes.get(event.id);\n        if (ep) {\n          ep.reject(new Error(\"publish timed out\"));\n          this.openEventPublishes.delete(event.id);\n        }\n      }, this.publishTimeout);\n      this.openEventPublishes.set(event.id, { resolve, reject, timeout });\n    });\n    this.send('[\"EVENT\",' + JSON.stringify(event) + \"]\");\n    return ret;\n  }\n  async count(filters, params) {\n    this.serial++;\n    const id = params?.id || \"count:\" + this.serial;\n    const ret = new Promise((resolve, reject) => {\n      this.openCountRequests.set(id, { resolve, reject });\n    });\n    this.send('[\"COUNT\",\"' + id + '\",' + JSON.stringify(filters).substring(1));\n    return ret;\n  }\n  subscribe(filters, params) {\n    const subscription = this.prepareSubscription(filters, params);\n    subscription.fire();\n    return subscription;\n  }\n  prepareSubscription(filters, params) {\n    this.serial++;\n    const id = params.id || (params.label ? params.label + \":\" : \"sub:\") + this.serial;\n    const subscription = new Subscription(this, id, filters, params);\n    this.openSubs.set(id, subscription);\n    return subscription;\n  }\n  close() {\n    this.closeAllSubscriptions(\"relay connection closed by us\");\n    this._connected = false;\n    this.ws?.close();\n  }\n  _onmessage(ev) {\n    this.incomingMessageQueue.enqueue(ev.data);\n    if (!this.queueRunning) {\n      this.runQueue();\n    }\n  }\n};\nvar Subscription = class {\n  relay;\n  id;\n  closed = false;\n  eosed = false;\n  filters;\n  alreadyHaveEvent;\n  receivedEvent;\n  onevent;\n  oneose;\n  onclose;\n  eoseTimeout;\n  eoseTimeoutHandle;\n  constructor(relay, id, filters, params) {\n    this.relay = relay;\n    this.filters = filters;\n    this.id = id;\n    this.alreadyHaveEvent = params.alreadyHaveEvent;\n    this.receivedEvent = params.receivedEvent;\n    this.eoseTimeout = params.eoseTimeout || relay.baseEoseTimeout;\n    this.oneose = params.oneose;\n    this.onclose = params.onclose;\n    this.onevent = params.onevent || ((event) => {\n      console.warn(\n        `onevent() callback not defined for subscription '${this.id}' in relay ${this.relay.url}. event received:`,\n        event\n      );\n    });\n  }\n  fire() {\n    this.relay.send('[\"REQ\",\"' + this.id + '\",' + JSON.stringify(this.filters).substring(1));\n    this.eoseTimeoutHandle = setTimeout(this.receivedEose.bind(this), this.eoseTimeout);\n  }\n  receivedEose() {\n    if (this.eosed)\n      return;\n    clearTimeout(this.eoseTimeoutHandle);\n    this.eosed = true;\n    this.oneose?.();\n  }\n  close(reason = \"closed by caller\") {\n    if (!this.closed && this.relay.connected) {\n      this.relay.send('[\"CLOSE\",' + JSON.stringify(this.id) + \"]\");\n      this.closed = true;\n    }\n    this.relay.openSubs.delete(this.id);\n    this.onclose?.(reason);\n  }\n};\n\n// relay.ts\nvar _WebSocket;\ntry {\n  _WebSocket = WebSocket;\n} catch {\n}\nvar Relay = class extends AbstractRelay {\n  constructor(url) {\n    super(url, { verifyEvent, websocketImplementation: _WebSocket });\n  }\n  static async connect(url) {\n    const relay = new Relay(url);\n    await relay.connect();\n    return relay;\n  }\n};\n\n// abstract-pool.ts\nvar AbstractSimplePool = class {\n  relays = /* @__PURE__ */ new Map();\n  seenOn = /* @__PURE__ */ new Map();\n  trackRelays = false;\n  verifyEvent;\n  trustedRelayURLs = /* @__PURE__ */ new Set();\n  _WebSocket;\n  constructor(opts) {\n    this.verifyEvent = opts.verifyEvent;\n    this._WebSocket = opts.websocketImplementation;\n  }\n  async ensureRelay(url, params) {\n    url = normalizeURL(url);\n    let relay = this.relays.get(url);\n    if (!relay) {\n      relay = new AbstractRelay(url, {\n        verifyEvent: this.trustedRelayURLs.has(url) ? alwaysTrue : this.verifyEvent,\n        websocketImplementation: this._WebSocket\n      });\n      if (params?.connectionTimeout)\n        relay.connectionTimeout = params.connectionTimeout;\n      this.relays.set(url, relay);\n    }\n    await relay.connect();\n    return relay;\n  }\n  close(relays) {\n    relays.map(normalizeURL).forEach((url) => {\n      this.relays.get(url)?.close();\n    });\n  }\n  subscribe(relays, filter, params) {\n    return this.subscribeMap(\n      relays.map((url) => ({ url, filter })),\n      params\n    );\n  }\n  subscribeMany(relays, filters, params) {\n    return this.subscribeMap(\n      relays.flatMap((url) => filters.map((filter) => ({ url, filter }))),\n      params\n    );\n  }\n  subscribeMap(requests, params) {\n    if (this.trackRelays) {\n      params.receivedEvent = (relay, id) => {\n        let set = this.seenOn.get(id);\n        if (!set) {\n          set = /* @__PURE__ */ new Set();\n          this.seenOn.set(id, set);\n        }\n        set.add(relay);\n      };\n    }\n    const _knownIds = /* @__PURE__ */ new Set();\n    const subs = [];\n    const eosesReceived = [];\n    let handleEose = (i2) => {\n      if (eosesReceived[i2])\n        return;\n      eosesReceived[i2] = true;\n      if (eosesReceived.filter((a) => a).length === requests.length) {\n        params.oneose?.();\n        handleEose = () => {\n        };\n      }\n    };\n    const closesReceived = [];\n    let handleClose = (i2, reason) => {\n      if (closesReceived[i2])\n        return;\n      handleEose(i2);\n      closesReceived[i2] = reason;\n      if (closesReceived.filter((a) => a).length === requests.length) {\n        params.onclose?.(closesReceived);\n        handleClose = () => {\n        };\n      }\n    };\n    const localAlreadyHaveEventHandler = (id) => {\n      if (params.alreadyHaveEvent?.(id)) {\n        return true;\n      }\n      const have = _knownIds.has(id);\n      _knownIds.add(id);\n      return have;\n    };\n    const allOpened = Promise.all(\n      requests.map(async ({ url, filter }, i2) => {\n        url = normalizeURL(url);\n        let relay;\n        try {\n          relay = await this.ensureRelay(url, {\n            connectionTimeout: params.maxWait ? Math.max(params.maxWait * 0.8, params.maxWait - 1e3) : void 0\n          });\n        } catch (err) {\n          handleClose(i2, err?.message || String(err));\n          return;\n        }\n        let subscription = relay.subscribe([filter], {\n          ...params,\n          oneose: () => handleEose(i2),\n          onclose: (reason) => {\n            if (reason.startsWith(\"auth-required:\") && params.doauth) {\n              relay.auth(params.doauth).then(() => {\n                relay.subscribe([filter], {\n                  ...params,\n                  oneose: () => handleEose(i2),\n                  onclose: (reason2) => {\n                    handleClose(i2, reason2);\n                  },\n                  alreadyHaveEvent: localAlreadyHaveEventHandler,\n                  eoseTimeout: params.maxWait\n                });\n              }).catch((err) => {\n                handleClose(i2, `auth was required and attempted, but failed with: ${err}`);\n              });\n            } else {\n              handleClose(i2, reason);\n            }\n          },\n          alreadyHaveEvent: localAlreadyHaveEventHandler,\n          eoseTimeout: params.maxWait\n        });\n        subs.push(subscription);\n      })\n    );\n    return {\n      async close() {\n        await allOpened;\n        subs.forEach((sub) => {\n          sub.close();\n        });\n      }\n    };\n  }\n  subscribeManyMap(requests, params) {\n    if (this.trackRelays) {\n      params.receivedEvent = (relay, id) => {\n        let set = this.seenOn.get(id);\n        if (!set) {\n          set = /* @__PURE__ */ new Set();\n          this.seenOn.set(id, set);\n        }\n        set.add(relay);\n      };\n    }\n    const _knownIds = /* @__PURE__ */ new Set();\n    const subs = [];\n    const relaysLength = Object.keys(requests).length;\n    const eosesReceived = [];\n    let handleEose = (i2) => {\n      if (eosesReceived[i2])\n        return;\n      eosesReceived[i2] = true;\n      if (eosesReceived.filter((a) => a).length === relaysLength) {\n        params.oneose?.();\n        handleEose = () => {\n        };\n      }\n    };\n    const closesReceived = [];\n    let handleClose = (i2, reason) => {\n      if (closesReceived[i2])\n        return;\n      handleEose(i2);\n      closesReceived[i2] = reason;\n      if (closesReceived.filter((a) => a).length === relaysLength) {\n        params.onclose?.(closesReceived);\n        handleClose = () => {\n        };\n      }\n    };\n    const localAlreadyHaveEventHandler = (id) => {\n      if (params.alreadyHaveEvent?.(id)) {\n        return true;\n      }\n      const have = _knownIds.has(id);\n      _knownIds.add(id);\n      return have;\n    };\n    const allOpened = Promise.all(\n      Object.entries(requests).map(async (req, i2, arr) => {\n        if (arr.indexOf(req) !== i2) {\n          handleClose(i2, \"duplicate url\");\n          return;\n        }\n        let [url, filters] = req;\n        url = normalizeURL(url);\n        let relay;\n        try {\n          relay = await this.ensureRelay(url, {\n            connectionTimeout: params.maxWait ? Math.max(params.maxWait * 0.8, params.maxWait - 1e3) : void 0\n          });\n        } catch (err) {\n          handleClose(i2, err?.message || String(err));\n          return;\n        }\n        let subscription = relay.subscribe(filters, {\n          ...params,\n          oneose: () => handleEose(i2),\n          onclose: (reason) => {\n            if (reason.startsWith(\"auth-required:\") && params.doauth) {\n              relay.auth(params.doauth).then(() => {\n                relay.subscribe(filters, {\n                  ...params,\n                  oneose: () => handleEose(i2),\n                  onclose: (reason2) => {\n                    handleClose(i2, reason2);\n                  },\n                  alreadyHaveEvent: localAlreadyHaveEventHandler,\n                  eoseTimeout: params.maxWait\n                });\n              }).catch((err) => {\n                handleClose(i2, `auth was required and attempted, but failed with: ${err}`);\n              });\n            } else {\n              handleClose(i2, reason);\n            }\n          },\n          alreadyHaveEvent: localAlreadyHaveEventHandler,\n          eoseTimeout: params.maxWait\n        });\n        subs.push(subscription);\n      })\n    );\n    return {\n      async close() {\n        await allOpened;\n        subs.forEach((sub) => {\n          sub.close();\n        });\n      }\n    };\n  }\n  subscribeEose(relays, filter, params) {\n    const subcloser = this.subscribe(relays, filter, {\n      ...params,\n      oneose() {\n        subcloser.close();\n      }\n    });\n    return subcloser;\n  }\n  subscribeManyEose(relays, filters, params) {\n    const subcloser = this.subscribeMany(relays, filters, {\n      ...params,\n      oneose() {\n        subcloser.close();\n      }\n    });\n    return subcloser;\n  }\n  async querySync(relays, filter, params) {\n    return new Promise(async (resolve) => {\n      const events = [];\n      this.subscribeEose(relays, filter, {\n        ...params,\n        onevent(event) {\n          events.push(event);\n        },\n        onclose(_) {\n          resolve(events);\n        }\n      });\n    });\n  }\n  async get(relays, filter, params) {\n    filter.limit = 1;\n    const events = await this.querySync(relays, filter, params);\n    events.sort((a, b) => b.created_at - a.created_at);\n    return events[0] || null;\n  }\n  publish(relays, event) {\n    return relays.map(normalizeURL).map(async (url, i2, arr) => {\n      if (arr.indexOf(url) !== i2) {\n        return Promise.reject(\"duplicate url\");\n      }\n      let r = await this.ensureRelay(url);\n      return r.publish(event).then((reason) => {\n        if (this.trackRelays) {\n          let set = this.seenOn.get(event.id);\n          if (!set) {\n            set = /* @__PURE__ */ new Set();\n            this.seenOn.set(event.id, set);\n          }\n          set.add(r);\n        }\n        return reason;\n      });\n    });\n  }\n  listConnectionStatus() {\n    const map = /* @__PURE__ */ new Map();\n    this.relays.forEach((relay, url) => map.set(url, relay.connected));\n    return map;\n  }\n  destroy() {\n    this.relays.forEach((conn) => conn.close());\n    this.relays = /* @__PURE__ */ new Map();\n  }\n};\n\n// pool.ts\nvar _WebSocket2;\ntry {\n  _WebSocket2 = WebSocket;\n} catch {\n}\nvar SimplePool = class extends AbstractSimplePool {\n  constructor() {\n    super({ verifyEvent, websocketImplementation: _WebSocket2 });\n  }\n};\n\n// nip19.ts\nvar nip19_exports = {};\n__export(nip19_exports, {\n  BECH32_REGEX: () => BECH32_REGEX,\n  Bech32MaxSize: () => Bech32MaxSize,\n  NostrTypeGuard: () => NostrTypeGuard,\n  decode: () => decode,\n  decodeNostrURI: () => decodeNostrURI,\n  encodeBytes: () => encodeBytes,\n  naddrEncode: () => naddrEncode,\n  neventEncode: () => neventEncode,\n  noteEncode: () => noteEncode,\n  nprofileEncode: () => nprofileEncode,\n  npubEncode: () => npubEncode,\n  nsecEncode: () => nsecEncode\n});\n\n\nvar NostrTypeGuard = {\n  isNProfile: (value) => /^nprofile1[a-z\\d]+$/.test(value || \"\"),\n  isNEvent: (value) => /^nevent1[a-z\\d]+$/.test(value || \"\"),\n  isNAddr: (value) => /^naddr1[a-z\\d]+$/.test(value || \"\"),\n  isNSec: (value) => /^nsec1[a-z\\d]{58}$/.test(value || \"\"),\n  isNPub: (value) => /^npub1[a-z\\d]{58}$/.test(value || \"\"),\n  isNote: (value) => /^note1[a-z\\d]+$/.test(value || \"\"),\n  isNcryptsec: (value) => /^ncryptsec1[a-z\\d]+$/.test(value || \"\")\n};\nvar Bech32MaxSize = 5e3;\nvar BECH32_REGEX = /[\\x21-\\x7E]{1,83}1[023456789acdefghjklmnpqrstuvwxyz]{6,}/;\nfunction integerToUint8Array(number) {\n  const uint8Array = new Uint8Array(4);\n  uint8Array[0] = number >> 24 & 255;\n  uint8Array[1] = number >> 16 & 255;\n  uint8Array[2] = number >> 8 & 255;\n  uint8Array[3] = number & 255;\n  return uint8Array;\n}\nfunction decodeNostrURI(nip19code) {\n  try {\n    if (nip19code.startsWith(\"nostr:\"))\n      nip19code = nip19code.substring(6);\n    return decode(nip19code);\n  } catch (_err) {\n    return { type: \"invalid\", data: null };\n  }\n}\nfunction decode(nip19) {\n  let { prefix, words } = _scure_base__WEBPACK_IMPORTED_MODULE_3__.bech32.decode(nip19, Bech32MaxSize);\n  let data = new Uint8Array(_scure_base__WEBPACK_IMPORTED_MODULE_3__.bech32.fromWords(words));\n  switch (prefix) {\n    case \"nprofile\": {\n      let tlv = parseTLV(data);\n      if (!tlv[0]?.[0])\n        throw new Error(\"missing TLV 0 for nprofile\");\n      if (tlv[0][0].length !== 32)\n        throw new Error(\"TLV 0 should be 32 bytes\");\n      return {\n        type: \"nprofile\",\n        data: {\n          pubkey: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(tlv[0][0]),\n          relays: tlv[1] ? tlv[1].map((d) => utf8Decoder.decode(d)) : []\n        }\n      };\n    }\n    case \"nevent\": {\n      let tlv = parseTLV(data);\n      if (!tlv[0]?.[0])\n        throw new Error(\"missing TLV 0 for nevent\");\n      if (tlv[0][0].length !== 32)\n        throw new Error(\"TLV 0 should be 32 bytes\");\n      if (tlv[2] && tlv[2][0].length !== 32)\n        throw new Error(\"TLV 2 should be 32 bytes\");\n      if (tlv[3] && tlv[3][0].length !== 4)\n        throw new Error(\"TLV 3 should be 4 bytes\");\n      return {\n        type: \"nevent\",\n        data: {\n          id: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(tlv[0][0]),\n          relays: tlv[1] ? tlv[1].map((d) => utf8Decoder.decode(d)) : [],\n          author: tlv[2]?.[0] ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(tlv[2][0]) : void 0,\n          kind: tlv[3]?.[0] ? parseInt((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(tlv[3][0]), 16) : void 0\n        }\n      };\n    }\n    case \"naddr\": {\n      let tlv = parseTLV(data);\n      if (!tlv[0]?.[0])\n        throw new Error(\"missing TLV 0 for naddr\");\n      if (!tlv[2]?.[0])\n        throw new Error(\"missing TLV 2 for naddr\");\n      if (tlv[2][0].length !== 32)\n        throw new Error(\"TLV 2 should be 32 bytes\");\n      if (!tlv[3]?.[0])\n        throw new Error(\"missing TLV 3 for naddr\");\n      if (tlv[3][0].length !== 4)\n        throw new Error(\"TLV 3 should be 4 bytes\");\n      return {\n        type: \"naddr\",\n        data: {\n          identifier: utf8Decoder.decode(tlv[0][0]),\n          pubkey: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(tlv[2][0]),\n          kind: parseInt((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(tlv[3][0]), 16),\n          relays: tlv[1] ? tlv[1].map((d) => utf8Decoder.decode(d)) : []\n        }\n      };\n    }\n    case \"nsec\":\n      return { type: prefix, data };\n    case \"npub\":\n    case \"note\":\n      return { type: prefix, data: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(data) };\n    default:\n      throw new Error(`unknown prefix ${prefix}`);\n  }\n}\nfunction parseTLV(data) {\n  let result = {};\n  let rest = data;\n  while (rest.length > 0) {\n    let t = rest[0];\n    let l = rest[1];\n    let v = rest.slice(2, 2 + l);\n    rest = rest.slice(2 + l);\n    if (v.length < l)\n      throw new Error(`not enough data to read on TLV ${t}`);\n    result[t] = result[t] || [];\n    result[t].push(v);\n  }\n  return result;\n}\nfunction nsecEncode(key) {\n  return encodeBytes(\"nsec\", key);\n}\nfunction npubEncode(hex) {\n  return encodeBytes(\"npub\", (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(hex));\n}\nfunction noteEncode(hex) {\n  return encodeBytes(\"note\", (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(hex));\n}\nfunction encodeBech32(prefix, data) {\n  let words = _scure_base__WEBPACK_IMPORTED_MODULE_3__.bech32.toWords(data);\n  return _scure_base__WEBPACK_IMPORTED_MODULE_3__.bech32.encode(prefix, words, Bech32MaxSize);\n}\nfunction encodeBytes(prefix, bytes) {\n  return encodeBech32(prefix, bytes);\n}\nfunction nprofileEncode(profile) {\n  let data = encodeTLV({\n    0: [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(profile.pubkey)],\n    1: (profile.relays || []).map((url) => utf8Encoder.encode(url))\n  });\n  return encodeBech32(\"nprofile\", data);\n}\nfunction neventEncode(event) {\n  let kindArray;\n  if (event.kind !== void 0) {\n    kindArray = integerToUint8Array(event.kind);\n  }\n  let data = encodeTLV({\n    0: [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(event.id)],\n    1: (event.relays || []).map((url) => utf8Encoder.encode(url)),\n    2: event.author ? [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(event.author)] : [],\n    3: kindArray ? [new Uint8Array(kindArray)] : []\n  });\n  return encodeBech32(\"nevent\", data);\n}\nfunction naddrEncode(addr) {\n  let kind = new ArrayBuffer(4);\n  new DataView(kind).setUint32(0, addr.kind, false);\n  let data = encodeTLV({\n    0: [utf8Encoder.encode(addr.identifier)],\n    1: (addr.relays || []).map((url) => utf8Encoder.encode(url)),\n    2: [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(addr.pubkey)],\n    3: [new Uint8Array(kind)]\n  });\n  return encodeBech32(\"naddr\", data);\n}\nfunction encodeTLV(tlv) {\n  let entries = [];\n  Object.entries(tlv).reverse().forEach(([t, vs]) => {\n    vs.forEach((v) => {\n      let entry = new Uint8Array(v.length + 2);\n      entry.set([parseInt(t)], 0);\n      entry.set([v.length], 1);\n      entry.set(v, 2);\n      entries.push(entry);\n    });\n  });\n  return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...entries);\n}\n\n// references.ts\nvar mentionRegex = /\\bnostr:((note|npub|naddr|nevent|nprofile)1\\w+)\\b|#\\[(\\d+)\\]/g;\nfunction parseReferences(evt) {\n  let references = [];\n  for (let ref of evt.content.matchAll(mentionRegex)) {\n    if (ref[2]) {\n      try {\n        let { type, data } = decode(ref[1]);\n        switch (type) {\n          case \"npub\": {\n            references.push({\n              text: ref[0],\n              profile: { pubkey: data, relays: [] }\n            });\n            break;\n          }\n          case \"nprofile\": {\n            references.push({\n              text: ref[0],\n              profile: data\n            });\n            break;\n          }\n          case \"note\": {\n            references.push({\n              text: ref[0],\n              event: { id: data, relays: [] }\n            });\n            break;\n          }\n          case \"nevent\": {\n            references.push({\n              text: ref[0],\n              event: data\n            });\n            break;\n          }\n          case \"naddr\": {\n            references.push({\n              text: ref[0],\n              address: data\n            });\n            break;\n          }\n        }\n      } catch (err) {\n      }\n    } else if (ref[3]) {\n      let idx = parseInt(ref[3], 10);\n      let tag = evt.tags[idx];\n      if (!tag)\n        continue;\n      switch (tag[0]) {\n        case \"p\": {\n          references.push({\n            text: ref[0],\n            profile: { pubkey: tag[1], relays: tag[2] ? [tag[2]] : [] }\n          });\n          break;\n        }\n        case \"e\": {\n          references.push({\n            text: ref[0],\n            event: { id: tag[1], relays: tag[2] ? [tag[2]] : [] }\n          });\n          break;\n        }\n        case \"a\": {\n          try {\n            let [kind, pubkey, identifier] = tag[1].split(\":\");\n            references.push({\n              text: ref[0],\n              address: {\n                identifier,\n                pubkey,\n                kind: parseInt(kind, 10),\n                relays: tag[2] ? [tag[2]] : []\n              }\n            });\n          } catch (err) {\n          }\n          break;\n        }\n      }\n    }\n  }\n  return references;\n}\n\n// nip04.ts\nvar nip04_exports = {};\n__export(nip04_exports, {\n  decrypt: () => decrypt,\n  encrypt: () => encrypt\n});\n\n\n\n\nfunction encrypt(secretKey, pubkey, text) {\n  const privkey = secretKey instanceof Uint8Array ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(secretKey) : secretKey;\n  const key = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.secp256k1.getSharedSecret(privkey, \"02\" + pubkey);\n  const normalizedKey = getNormalizedX(key);\n  let iv = Uint8Array.from((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(16));\n  let plaintext = utf8Encoder.encode(text);\n  let ciphertext = (0,_noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_4__.cbc)(normalizedKey, iv).encrypt(plaintext);\n  let ctb64 = _scure_base__WEBPACK_IMPORTED_MODULE_3__.base64.encode(new Uint8Array(ciphertext));\n  let ivb64 = _scure_base__WEBPACK_IMPORTED_MODULE_3__.base64.encode(new Uint8Array(iv.buffer));\n  return `${ctb64}?iv=${ivb64}`;\n}\nfunction decrypt(secretKey, pubkey, data) {\n  const privkey = secretKey instanceof Uint8Array ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(secretKey) : secretKey;\n  let [ctb64, ivb64] = data.split(\"?iv=\");\n  let key = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.secp256k1.getSharedSecret(privkey, \"02\" + pubkey);\n  let normalizedKey = getNormalizedX(key);\n  let iv = _scure_base__WEBPACK_IMPORTED_MODULE_3__.base64.decode(ivb64);\n  let ciphertext = _scure_base__WEBPACK_IMPORTED_MODULE_3__.base64.decode(ctb64);\n  let plaintext = (0,_noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_4__.cbc)(normalizedKey, iv).decrypt(ciphertext);\n  return utf8Decoder.decode(plaintext);\n}\nfunction getNormalizedX(key) {\n  return key.slice(1, 33);\n}\n\n// nip05.ts\nvar nip05_exports = {};\n__export(nip05_exports, {\n  NIP05_REGEX: () => NIP05_REGEX,\n  isNip05: () => isNip05,\n  isValid: () => isValid,\n  queryProfile: () => queryProfile,\n  searchDomain: () => searchDomain,\n  useFetchImplementation: () => useFetchImplementation\n});\nvar NIP05_REGEX = /^(?:([\\w.+-]+)@)?([\\w_-]+(\\.[\\w_-]+)+)$/;\nvar isNip05 = (value) => NIP05_REGEX.test(value || \"\");\nvar _fetch;\ntry {\n  _fetch = fetch;\n} catch (_) {\n  null;\n}\nfunction useFetchImplementation(fetchImplementation) {\n  _fetch = fetchImplementation;\n}\nasync function searchDomain(domain, query = \"\") {\n  try {\n    const url = `https://${domain}/.well-known/nostr.json?name=${query}`;\n    const res = await _fetch(url, { redirect: \"manual\" });\n    if (res.status !== 200) {\n      throw Error(\"Wrong response code\");\n    }\n    const json = await res.json();\n    return json.names;\n  } catch (_) {\n    return {};\n  }\n}\nasync function queryProfile(fullname) {\n  const match = fullname.match(NIP05_REGEX);\n  if (!match)\n    return null;\n  const [, name = \"_\", domain] = match;\n  try {\n    const url = `https://${domain}/.well-known/nostr.json?name=${name}`;\n    const res = await _fetch(url, { redirect: \"manual\" });\n    if (res.status !== 200) {\n      throw Error(\"Wrong response code\");\n    }\n    const json = await res.json();\n    const pubkey = json.names[name];\n    return pubkey ? { pubkey, relays: json.relays?.[pubkey] } : null;\n  } catch (_e) {\n    return null;\n  }\n}\nasync function isValid(pubkey, nip05) {\n  const res = await queryProfile(nip05);\n  return res ? res.pubkey === pubkey : false;\n}\n\n// nip10.ts\nvar nip10_exports = {};\n__export(nip10_exports, {\n  parse: () => parse\n});\nfunction parse(event) {\n  const result = {\n    reply: void 0,\n    root: void 0,\n    mentions: [],\n    profiles: [],\n    quotes: []\n  };\n  let maybeParent;\n  let maybeRoot;\n  for (let i2 = event.tags.length - 1; i2 >= 0; i2--) {\n    const tag = event.tags[i2];\n    if (tag[0] === \"e\" && tag[1]) {\n      const [_, eTagEventId, eTagRelayUrl, eTagMarker, eTagAuthor] = tag;\n      const eventPointer = {\n        id: eTagEventId,\n        relays: eTagRelayUrl ? [eTagRelayUrl] : [],\n        author: eTagAuthor\n      };\n      if (eTagMarker === \"root\") {\n        result.root = eventPointer;\n        continue;\n      }\n      if (eTagMarker === \"reply\") {\n        result.reply = eventPointer;\n        continue;\n      }\n      if (eTagMarker === \"mention\") {\n        result.mentions.push(eventPointer);\n        continue;\n      }\n      if (!maybeParent) {\n        maybeParent = eventPointer;\n      } else {\n        maybeRoot = eventPointer;\n      }\n      result.mentions.push(eventPointer);\n      continue;\n    }\n    if (tag[0] === \"q\" && tag[1]) {\n      const [_, eTagEventId, eTagRelayUrl] = tag;\n      result.quotes.push({\n        id: eTagEventId,\n        relays: eTagRelayUrl ? [eTagRelayUrl] : []\n      });\n    }\n    if (tag[0] === \"p\" && tag[1]) {\n      result.profiles.push({\n        pubkey: tag[1],\n        relays: tag[2] ? [tag[2]] : []\n      });\n      continue;\n    }\n  }\n  if (!result.root) {\n    result.root = maybeRoot || maybeParent || result.reply;\n  }\n  if (!result.reply) {\n    result.reply = maybeParent || result.root;\n  }\n  ;\n  [result.reply, result.root].forEach((ref) => {\n    if (!ref)\n      return;\n    let idx = result.mentions.indexOf(ref);\n    if (idx !== -1) {\n      result.mentions.splice(idx, 1);\n    }\n    if (ref.author) {\n      let author = result.profiles.find((p) => p.pubkey === ref.author);\n      if (author && author.relays) {\n        if (!ref.relays) {\n          ref.relays = [];\n        }\n        author.relays.forEach((url) => {\n          if (ref.relays?.indexOf(url) === -1)\n            ref.relays.push(url);\n        });\n        author.relays = ref.relays;\n      }\n    }\n  });\n  result.mentions.forEach((ref) => {\n    if (ref.author) {\n      let author = result.profiles.find((p) => p.pubkey === ref.author);\n      if (author && author.relays) {\n        if (!ref.relays) {\n          ref.relays = [];\n        }\n        author.relays.forEach((url) => {\n          if (ref.relays.indexOf(url) === -1)\n            ref.relays.push(url);\n        });\n        author.relays = ref.relays;\n      }\n    }\n  });\n  return result;\n}\n\n// nip11.ts\nvar nip11_exports = {};\n__export(nip11_exports, {\n  fetchRelayInformation: () => fetchRelayInformation,\n  useFetchImplementation: () => useFetchImplementation2\n});\nvar _fetch2;\ntry {\n  _fetch2 = fetch;\n} catch {\n}\nfunction useFetchImplementation2(fetchImplementation) {\n  _fetch2 = fetchImplementation;\n}\nasync function fetchRelayInformation(url) {\n  return await (await fetch(url.replace(\"ws://\", \"http://\").replace(\"wss://\", \"https://\"), {\n    headers: { Accept: \"application/nostr+json\" }\n  })).json();\n}\n\n// nip13.ts\nvar nip13_exports = {};\n__export(nip13_exports, {\n  fastEventHash: () => fastEventHash,\n  getPow: () => getPow,\n  minePow: () => minePow\n});\n\n\nfunction getPow(hex) {\n  let count = 0;\n  for (let i2 = 0; i2 < 64; i2 += 8) {\n    const nibble = parseInt(hex.substring(i2, i2 + 8), 16);\n    if (nibble === 0) {\n      count += 32;\n    } else {\n      count += Math.clz32(nibble);\n      break;\n    }\n  }\n  return count;\n}\nfunction minePow(unsigned, difficulty) {\n  let count = 0;\n  const event = unsigned;\n  const tag = [\"nonce\", count.toString(), difficulty.toString()];\n  event.tags.push(tag);\n  while (true) {\n    const now2 = Math.floor(new Date().getTime() / 1e3);\n    if (now2 !== event.created_at) {\n      count = 0;\n      event.created_at = now2;\n    }\n    tag[1] = (++count).toString();\n    event.id = fastEventHash(event);\n    if (getPow(event.id) >= difficulty) {\n      break;\n    }\n  }\n  return event;\n}\nfunction fastEventHash(evt) {\n  return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(\n    (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(utf8Encoder.encode(JSON.stringify([0, evt.pubkey, evt.created_at, evt.kind, evt.tags, evt.content])))\n  );\n}\n\n// nip17.ts\nvar nip17_exports = {};\n__export(nip17_exports, {\n  unwrapEvent: () => unwrapEvent2,\n  unwrapManyEvents: () => unwrapManyEvents2,\n  wrapEvent: () => wrapEvent2,\n  wrapManyEvents: () => wrapManyEvents2\n});\n\n// nip59.ts\nvar nip59_exports = {};\n__export(nip59_exports, {\n  createRumor: () => createRumor,\n  createSeal: () => createSeal,\n  createWrap: () => createWrap,\n  unwrapEvent: () => unwrapEvent,\n  unwrapManyEvents: () => unwrapManyEvents,\n  wrapEvent: () => wrapEvent,\n  wrapManyEvents: () => wrapManyEvents\n});\n\n// nip44.ts\nvar nip44_exports = {};\n__export(nip44_exports, {\n  decrypt: () => decrypt2,\n  encrypt: () => encrypt2,\n  getConversationKey: () => getConversationKey,\n  v2: () => v2\n});\n\n\n\n\n\n\n\n\nvar minPlaintextSize = 1;\nvar maxPlaintextSize = 65535;\nfunction getConversationKey(privkeyA, pubkeyB) {\n  const sharedX = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.secp256k1.getSharedSecret(privkeyA, \"02\" + pubkeyB).subarray(1, 33);\n  return (0,_noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_5__.extract)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256, sharedX, \"nip44-v2\");\n}\nfunction getMessageKeys(conversationKey, nonce) {\n  const keys = (0,_noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_5__.expand)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256, conversationKey, nonce, 76);\n  return {\n    chacha_key: keys.subarray(0, 32),\n    chacha_nonce: keys.subarray(32, 44),\n    hmac_key: keys.subarray(44, 76)\n  };\n}\nfunction calcPaddedLen(len) {\n  if (!Number.isSafeInteger(len) || len < 1)\n    throw new Error(\"expected positive integer\");\n  if (len <= 32)\n    return 32;\n  const nextPower = 1 << Math.floor(Math.log2(len - 1)) + 1;\n  const chunk = nextPower <= 256 ? 32 : nextPower / 8;\n  return chunk * (Math.floor((len - 1) / chunk) + 1);\n}\nfunction writeU16BE(num) {\n  if (!Number.isSafeInteger(num) || num < minPlaintextSize || num > maxPlaintextSize)\n    throw new Error(\"invalid plaintext size: must be between 1 and 65535 bytes\");\n  const arr = new Uint8Array(2);\n  new DataView(arr.buffer).setUint16(0, num, false);\n  return arr;\n}\nfunction pad(plaintext) {\n  const unpadded = utf8Encoder.encode(plaintext);\n  const unpaddedLen = unpadded.length;\n  const prefix = writeU16BE(unpaddedLen);\n  const suffix = new Uint8Array(calcPaddedLen(unpaddedLen) - unpaddedLen);\n  return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(prefix, unpadded, suffix);\n}\nfunction unpad(padded) {\n  const unpaddedLen = new DataView(padded.buffer).getUint16(0);\n  const unpadded = padded.subarray(2, 2 + unpaddedLen);\n  if (unpaddedLen < minPlaintextSize || unpaddedLen > maxPlaintextSize || unpadded.length !== unpaddedLen || padded.length !== 2 + calcPaddedLen(unpaddedLen))\n    throw new Error(\"invalid padding\");\n  return utf8Decoder.decode(unpadded);\n}\nfunction hmacAad(key, message, aad) {\n  if (aad.length !== 32)\n    throw new Error(\"AAD associated data must be 32 bytes\");\n  const combined = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(aad, message);\n  return (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_6__.hmac)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256, key, combined);\n}\nfunction decodePayload(payload) {\n  if (typeof payload !== \"string\")\n    throw new Error(\"payload must be a valid string\");\n  const plen = payload.length;\n  if (plen < 132 || plen > 87472)\n    throw new Error(\"invalid payload length: \" + plen);\n  if (payload[0] === \"#\")\n    throw new Error(\"unknown encryption version\");\n  let data;\n  try {\n    data = _scure_base__WEBPACK_IMPORTED_MODULE_3__.base64.decode(payload);\n  } catch (error) {\n    throw new Error(\"invalid base64: \" + error.message);\n  }\n  const dlen = data.length;\n  if (dlen < 99 || dlen > 65603)\n    throw new Error(\"invalid data length: \" + dlen);\n  const vers = data[0];\n  if (vers !== 2)\n    throw new Error(\"unknown encryption version \" + vers);\n  return {\n    nonce: data.subarray(1, 33),\n    ciphertext: data.subarray(33, -32),\n    mac: data.subarray(-32)\n  };\n}\nfunction encrypt2(plaintext, conversationKey, nonce = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(32)) {\n  const { chacha_key, chacha_nonce, hmac_key } = getMessageKeys(conversationKey, nonce);\n  const padded = pad(plaintext);\n  const ciphertext = (0,_noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_7__.chacha20)(chacha_key, chacha_nonce, padded);\n  const mac = hmacAad(hmac_key, ciphertext, nonce);\n  return _scure_base__WEBPACK_IMPORTED_MODULE_3__.base64.encode((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(new Uint8Array([2]), nonce, ciphertext, mac));\n}\nfunction decrypt2(payload, conversationKey) {\n  const { nonce, ciphertext, mac } = decodePayload(payload);\n  const { chacha_key, chacha_nonce, hmac_key } = getMessageKeys(conversationKey, nonce);\n  const calculatedMac = hmacAad(hmac_key, ciphertext, nonce);\n  if (!(0,_noble_ciphers_utils__WEBPACK_IMPORTED_MODULE_8__.equalBytes)(calculatedMac, mac))\n    throw new Error(\"invalid MAC\");\n  const padded = (0,_noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_7__.chacha20)(chacha_key, chacha_nonce, ciphertext);\n  return unpad(padded);\n}\nvar v2 = {\n  utils: {\n    getConversationKey,\n    calcPaddedLen\n  },\n  encrypt: encrypt2,\n  decrypt: decrypt2\n};\n\n// nip59.ts\nvar TWO_DAYS = 2 * 24 * 60 * 60;\nvar now = () => Math.round(Date.now() / 1e3);\nvar randomNow = () => Math.round(now() - Math.random() * TWO_DAYS);\nvar nip44ConversationKey = (privateKey, publicKey) => getConversationKey(privateKey, publicKey);\nvar nip44Encrypt = (data, privateKey, publicKey) => encrypt2(JSON.stringify(data), nip44ConversationKey(privateKey, publicKey));\nvar nip44Decrypt = (data, privateKey) => JSON.parse(decrypt2(data.content, nip44ConversationKey(privateKey, data.pubkey)));\nfunction createRumor(event, privateKey) {\n  const rumor = {\n    created_at: now(),\n    content: \"\",\n    tags: [],\n    ...event,\n    pubkey: getPublicKey(privateKey)\n  };\n  rumor.id = getEventHash(rumor);\n  return rumor;\n}\nfunction createSeal(rumor, privateKey, recipientPublicKey) {\n  return finalizeEvent(\n    {\n      kind: Seal,\n      content: nip44Encrypt(rumor, privateKey, recipientPublicKey),\n      created_at: randomNow(),\n      tags: []\n    },\n    privateKey\n  );\n}\nfunction createWrap(seal, recipientPublicKey) {\n  const randomKey = generateSecretKey();\n  return finalizeEvent(\n    {\n      kind: GiftWrap,\n      content: nip44Encrypt(seal, randomKey, recipientPublicKey),\n      created_at: randomNow(),\n      tags: [[\"p\", recipientPublicKey]]\n    },\n    randomKey\n  );\n}\nfunction wrapEvent(event, senderPrivateKey, recipientPublicKey) {\n  const rumor = createRumor(event, senderPrivateKey);\n  const seal = createSeal(rumor, senderPrivateKey, recipientPublicKey);\n  return createWrap(seal, recipientPublicKey);\n}\nfunction wrapManyEvents(event, senderPrivateKey, recipientsPublicKeys) {\n  if (!recipientsPublicKeys || recipientsPublicKeys.length === 0) {\n    throw new Error(\"At least one recipient is required.\");\n  }\n  const senderPublicKey = getPublicKey(senderPrivateKey);\n  const wrappeds = [wrapEvent(event, senderPrivateKey, senderPublicKey)];\n  recipientsPublicKeys.forEach((recipientPublicKey) => {\n    wrappeds.push(wrapEvent(event, senderPrivateKey, recipientPublicKey));\n  });\n  return wrappeds;\n}\nfunction unwrapEvent(wrap, recipientPrivateKey) {\n  const unwrappedSeal = nip44Decrypt(wrap, recipientPrivateKey);\n  return nip44Decrypt(unwrappedSeal, recipientPrivateKey);\n}\nfunction unwrapManyEvents(wrappedEvents, recipientPrivateKey) {\n  let unwrappedEvents = [];\n  wrappedEvents.forEach((e) => {\n    unwrappedEvents.push(unwrapEvent(e, recipientPrivateKey));\n  });\n  unwrappedEvents.sort((a, b) => a.created_at - b.created_at);\n  return unwrappedEvents;\n}\n\n// nip17.ts\nfunction createEvent(recipients, message, conversationTitle, replyTo) {\n  const baseEvent = {\n    created_at: Math.ceil(Date.now() / 1e3),\n    kind: PrivateDirectMessage,\n    tags: [],\n    content: message\n  };\n  const recipientsArray = Array.isArray(recipients) ? recipients : [recipients];\n  recipientsArray.forEach(({ publicKey, relayUrl }) => {\n    baseEvent.tags.push(relayUrl ? [\"p\", publicKey, relayUrl] : [\"p\", publicKey]);\n  });\n  if (replyTo) {\n    baseEvent.tags.push([\"e\", replyTo.eventId, replyTo.relayUrl || \"\", \"reply\"]);\n  }\n  if (conversationTitle) {\n    baseEvent.tags.push([\"subject\", conversationTitle]);\n  }\n  return baseEvent;\n}\nfunction wrapEvent2(senderPrivateKey, recipient, message, conversationTitle, replyTo) {\n  const event = createEvent(recipient, message, conversationTitle, replyTo);\n  return wrapEvent(event, senderPrivateKey, recipient.publicKey);\n}\nfunction wrapManyEvents2(senderPrivateKey, recipients, message, conversationTitle, replyTo) {\n  if (!recipients || recipients.length === 0) {\n    throw new Error(\"At least one recipient is required.\");\n  }\n  const senderPublicKey = getPublicKey(senderPrivateKey);\n  return [{ publicKey: senderPublicKey }, ...recipients].map(\n    (recipient) => wrapEvent2(senderPrivateKey, recipient, message, conversationTitle, replyTo)\n  );\n}\nvar unwrapEvent2 = unwrapEvent;\nvar unwrapManyEvents2 = unwrapManyEvents;\n\n// nip18.ts\nvar nip18_exports = {};\n__export(nip18_exports, {\n  finishRepostEvent: () => finishRepostEvent,\n  getRepostedEvent: () => getRepostedEvent,\n  getRepostedEventPointer: () => getRepostedEventPointer\n});\nfunction finishRepostEvent(t, reposted, relayUrl, privateKey) {\n  let kind;\n  const tags = [...t.tags ?? [], [\"e\", reposted.id, relayUrl], [\"p\", reposted.pubkey]];\n  if (reposted.kind === ShortTextNote) {\n    kind = Repost;\n  } else {\n    kind = GenericRepost;\n    tags.push([\"k\", String(reposted.kind)]);\n  }\n  return finalizeEvent(\n    {\n      kind,\n      tags,\n      content: t.content === \"\" || reposted.tags?.find((tag) => tag[0] === \"-\") ? \"\" : JSON.stringify(reposted),\n      created_at: t.created_at\n    },\n    privateKey\n  );\n}\nfunction getRepostedEventPointer(event) {\n  if (![Repost, GenericRepost].includes(event.kind)) {\n    return void 0;\n  }\n  let lastETag;\n  let lastPTag;\n  for (let i2 = event.tags.length - 1; i2 >= 0 && (lastETag === void 0 || lastPTag === void 0); i2--) {\n    const tag = event.tags[i2];\n    if (tag.length >= 2) {\n      if (tag[0] === \"e\" && lastETag === void 0) {\n        lastETag = tag;\n      } else if (tag[0] === \"p\" && lastPTag === void 0) {\n        lastPTag = tag;\n      }\n    }\n  }\n  if (lastETag === void 0) {\n    return void 0;\n  }\n  return {\n    id: lastETag[1],\n    relays: [lastETag[2], lastPTag?.[2]].filter((x) => typeof x === \"string\"),\n    author: lastPTag?.[1]\n  };\n}\nfunction getRepostedEvent(event, { skipVerification } = {}) {\n  const pointer = getRepostedEventPointer(event);\n  if (pointer === void 0 || event.content === \"\") {\n    return void 0;\n  }\n  let repostedEvent;\n  try {\n    repostedEvent = JSON.parse(event.content);\n  } catch (error) {\n    return void 0;\n  }\n  if (repostedEvent.id !== pointer.id) {\n    return void 0;\n  }\n  if (!skipVerification && !verifyEvent(repostedEvent)) {\n    return void 0;\n  }\n  return repostedEvent;\n}\n\n// nip21.ts\nvar nip21_exports = {};\n__export(nip21_exports, {\n  NOSTR_URI_REGEX: () => NOSTR_URI_REGEX,\n  parse: () => parse2,\n  test: () => test\n});\nvar NOSTR_URI_REGEX = new RegExp(`nostr:(${BECH32_REGEX.source})`);\nfunction test(value) {\n  return typeof value === \"string\" && new RegExp(`^${NOSTR_URI_REGEX.source}$`).test(value);\n}\nfunction parse2(uri) {\n  const match = uri.match(new RegExp(`^${NOSTR_URI_REGEX.source}$`));\n  if (!match)\n    throw new Error(`Invalid Nostr URI: ${uri}`);\n  return {\n    uri: match[0],\n    value: match[1],\n    decoded: decode(match[1])\n  };\n}\n\n// nip25.ts\nvar nip25_exports = {};\n__export(nip25_exports, {\n  finishReactionEvent: () => finishReactionEvent,\n  getReactedEventPointer: () => getReactedEventPointer\n});\nfunction finishReactionEvent(t, reacted, privateKey) {\n  const inheritedTags = reacted.tags.filter((tag) => tag.length >= 2 && (tag[0] === \"e\" || tag[0] === \"p\"));\n  return finalizeEvent(\n    {\n      ...t,\n      kind: Reaction,\n      tags: [...t.tags ?? [], ...inheritedTags, [\"e\", reacted.id], [\"p\", reacted.pubkey]],\n      content: t.content ?? \"+\"\n    },\n    privateKey\n  );\n}\nfunction getReactedEventPointer(event) {\n  if (event.kind !== Reaction) {\n    return void 0;\n  }\n  let lastETag;\n  let lastPTag;\n  for (let i2 = event.tags.length - 1; i2 >= 0 && (lastETag === void 0 || lastPTag === void 0); i2--) {\n    const tag = event.tags[i2];\n    if (tag.length >= 2) {\n      if (tag[0] === \"e\" && lastETag === void 0) {\n        lastETag = tag;\n      } else if (tag[0] === \"p\" && lastPTag === void 0) {\n        lastPTag = tag;\n      }\n    }\n  }\n  if (lastETag === void 0 || lastPTag === void 0) {\n    return void 0;\n  }\n  return {\n    id: lastETag[1],\n    relays: [lastETag[2], lastPTag[2]].filter((x) => x !== void 0),\n    author: lastPTag[1]\n  };\n}\n\n// nip27.ts\nvar nip27_exports = {};\n__export(nip27_exports, {\n  parse: () => parse3\n});\nvar noCharacter = /\\W/m;\nvar noURLCharacter = /\\W |\\W$|$|,| /m;\nfunction* parse3(content) {\n  const max = content.length;\n  let prevIndex = 0;\n  let index = 0;\n  while (index < max) {\n    let u = content.indexOf(\":\", index);\n    if (u === -1) {\n      break;\n    }\n    if (content.substring(u - 5, u) === \"nostr\") {\n      const m = content.substring(u + 60).match(noCharacter);\n      const end = m ? u + 60 + m.index : max;\n      try {\n        let pointer;\n        let { data, type } = decode(content.substring(u + 1, end));\n        switch (type) {\n          case \"npub\":\n            pointer = { pubkey: data };\n            break;\n          case \"nsec\":\n          case \"note\":\n            index = end + 1;\n            continue;\n          default:\n            pointer = data;\n        }\n        if (prevIndex !== u - 5) {\n          yield { type: \"text\", text: content.substring(prevIndex, u - 5) };\n        }\n        yield { type: \"reference\", pointer };\n        index = end;\n        prevIndex = index;\n        continue;\n      } catch (_err) {\n        index = u + 1;\n        continue;\n      }\n    } else if (content.substring(u - 5, u) === \"https\" || content.substring(u - 4, u) === \"http\") {\n      const m = content.substring(u + 4).match(noURLCharacter);\n      const end = m ? u + 4 + m.index : max;\n      const prefixLen = content[u - 1] === \"s\" ? 5 : 4;\n      try {\n        let url = new URL(content.substring(u - prefixLen, end));\n        if (url.hostname.indexOf(\".\") === -1) {\n          throw new Error(\"invalid url\");\n        }\n        if (prevIndex !== u - prefixLen) {\n          yield { type: \"text\", text: content.substring(prevIndex, u - prefixLen) };\n        }\n        if (url.pathname.endsWith(\".png\") || url.pathname.endsWith(\".jpg\") || url.pathname.endsWith(\".jpeg\") || url.pathname.endsWith(\".gif\") || url.pathname.endsWith(\".webp\")) {\n          yield { type: \"image\", url: url.toString() };\n          index = end;\n          prevIndex = index;\n          continue;\n        }\n        if (url.pathname.endsWith(\".mp4\") || url.pathname.endsWith(\".avi\") || url.pathname.endsWith(\".webm\") || url.pathname.endsWith(\".mkv\")) {\n          yield { type: \"video\", url: url.toString() };\n          index = end;\n          prevIndex = index;\n          continue;\n        }\n        if (url.pathname.endsWith(\".mp3\") || url.pathname.endsWith(\".aac\") || url.pathname.endsWith(\".ogg\") || url.pathname.endsWith(\".opus\")) {\n          yield { type: \"audio\", url: url.toString() };\n          index = end;\n          prevIndex = index;\n          continue;\n        }\n        yield { type: \"url\", url: url.toString() };\n        index = end;\n        prevIndex = index;\n        continue;\n      } catch (_err) {\n        index = end + 1;\n        continue;\n      }\n    } else if (content.substring(u - 3, u) === \"wss\" || content.substring(u - 2, u) === \"ws\") {\n      const m = content.substring(u + 4).match(noURLCharacter);\n      const end = m ? u + 4 + m.index : max;\n      const prefixLen = content[u - 1] === \"s\" ? 3 : 2;\n      try {\n        let url = new URL(content.substring(u - prefixLen, end));\n        if (url.hostname.indexOf(\".\") === -1) {\n          throw new Error(\"invalid ws url\");\n        }\n        if (prevIndex !== u - prefixLen) {\n          yield { type: \"text\", text: content.substring(prevIndex, u - prefixLen) };\n        }\n        yield { type: \"relay\", url: url.toString() };\n        index = end;\n        prevIndex = index;\n        continue;\n      } catch (_err) {\n        index = end + 1;\n        continue;\n      }\n    } else {\n      index = u + 1;\n      continue;\n    }\n  }\n  if (prevIndex !== max) {\n    yield { type: \"text\", text: content.substring(prevIndex) };\n  }\n}\n\n// nip28.ts\nvar nip28_exports = {};\n__export(nip28_exports, {\n  channelCreateEvent: () => channelCreateEvent,\n  channelHideMessageEvent: () => channelHideMessageEvent,\n  channelMessageEvent: () => channelMessageEvent,\n  channelMetadataEvent: () => channelMetadataEvent,\n  channelMuteUserEvent: () => channelMuteUserEvent\n});\nvar channelCreateEvent = (t, privateKey) => {\n  let content;\n  if (typeof t.content === \"object\") {\n    content = JSON.stringify(t.content);\n  } else if (typeof t.content === \"string\") {\n    content = t.content;\n  } else {\n    return void 0;\n  }\n  return finalizeEvent(\n    {\n      kind: ChannelCreation,\n      tags: [...t.tags ?? []],\n      content,\n      created_at: t.created_at\n    },\n    privateKey\n  );\n};\nvar channelMetadataEvent = (t, privateKey) => {\n  let content;\n  if (typeof t.content === \"object\") {\n    content = JSON.stringify(t.content);\n  } else if (typeof t.content === \"string\") {\n    content = t.content;\n  } else {\n    return void 0;\n  }\n  return finalizeEvent(\n    {\n      kind: ChannelMetadata,\n      tags: [[\"e\", t.channel_create_event_id], ...t.tags ?? []],\n      content,\n      created_at: t.created_at\n    },\n    privateKey\n  );\n};\nvar channelMessageEvent = (t, privateKey) => {\n  const tags = [[\"e\", t.channel_create_event_id, t.relay_url, \"root\"]];\n  if (t.reply_to_channel_message_event_id) {\n    tags.push([\"e\", t.reply_to_channel_message_event_id, t.relay_url, \"reply\"]);\n  }\n  return finalizeEvent(\n    {\n      kind: ChannelMessage,\n      tags: [...tags, ...t.tags ?? []],\n      content: t.content,\n      created_at: t.created_at\n    },\n    privateKey\n  );\n};\nvar channelHideMessageEvent = (t, privateKey) => {\n  let content;\n  if (typeof t.content === \"object\") {\n    content = JSON.stringify(t.content);\n  } else if (typeof t.content === \"string\") {\n    content = t.content;\n  } else {\n    return void 0;\n  }\n  return finalizeEvent(\n    {\n      kind: ChannelHideMessage,\n      tags: [[\"e\", t.channel_message_event_id], ...t.tags ?? []],\n      content,\n      created_at: t.created_at\n    },\n    privateKey\n  );\n};\nvar channelMuteUserEvent = (t, privateKey) => {\n  let content;\n  if (typeof t.content === \"object\") {\n    content = JSON.stringify(t.content);\n  } else if (typeof t.content === \"string\") {\n    content = t.content;\n  } else {\n    return void 0;\n  }\n  return finalizeEvent(\n    {\n      kind: ChannelMuteUser,\n      tags: [[\"p\", t.pubkey_to_mute], ...t.tags ?? []],\n      content,\n      created_at: t.created_at\n    },\n    privateKey\n  );\n};\n\n// nip30.ts\nvar nip30_exports = {};\n__export(nip30_exports, {\n  EMOJI_SHORTCODE_REGEX: () => EMOJI_SHORTCODE_REGEX,\n  matchAll: () => matchAll,\n  regex: () => regex,\n  replaceAll: () => replaceAll\n});\nvar EMOJI_SHORTCODE_REGEX = /:(\\w+):/;\nvar regex = () => new RegExp(`\\\\B${EMOJI_SHORTCODE_REGEX.source}\\\\B`, \"g\");\nfunction* matchAll(content) {\n  const matches = content.matchAll(regex());\n  for (const match of matches) {\n    try {\n      const [shortcode, name] = match;\n      yield {\n        shortcode,\n        name,\n        start: match.index,\n        end: match.index + shortcode.length\n      };\n    } catch (_e) {\n    }\n  }\n}\nfunction replaceAll(content, replacer) {\n  return content.replaceAll(regex(), (shortcode, name) => {\n    return replacer({\n      shortcode,\n      name\n    });\n  });\n}\n\n// nip39.ts\nvar nip39_exports = {};\n__export(nip39_exports, {\n  useFetchImplementation: () => useFetchImplementation3,\n  validateGithub: () => validateGithub\n});\nvar _fetch3;\ntry {\n  _fetch3 = fetch;\n} catch {\n}\nfunction useFetchImplementation3(fetchImplementation) {\n  _fetch3 = fetchImplementation;\n}\nasync function validateGithub(pubkey, username, proof) {\n  try {\n    let res = await (await _fetch3(`https://gist.github.com/${username}/${proof}/raw`)).text();\n    return res === `Verifying that I control the following Nostr public key: ${pubkey}`;\n  } catch (_) {\n    return false;\n  }\n}\n\n// nip47.ts\nvar nip47_exports = {};\n__export(nip47_exports, {\n  makeNwcRequestEvent: () => makeNwcRequestEvent,\n  parseConnectionString: () => parseConnectionString\n});\nfunction parseConnectionString(connectionString) {\n  const { pathname, searchParams } = new URL(connectionString);\n  const pubkey = pathname;\n  const relay = searchParams.get(\"relay\");\n  const secret = searchParams.get(\"secret\");\n  if (!pubkey || !relay || !secret) {\n    throw new Error(\"invalid connection string\");\n  }\n  return { pubkey, relay, secret };\n}\nasync function makeNwcRequestEvent(pubkey, secretKey, invoice) {\n  const content = {\n    method: \"pay_invoice\",\n    params: {\n      invoice\n    }\n  };\n  const encryptedContent = await encrypt(secretKey, pubkey, JSON.stringify(content));\n  const eventTemplate = {\n    kind: NWCWalletRequest,\n    created_at: Math.round(Date.now() / 1e3),\n    content: encryptedContent,\n    tags: [[\"p\", pubkey]]\n  };\n  return finalizeEvent(eventTemplate, secretKey);\n}\n\n// nip54.ts\nvar nip54_exports = {};\n__export(nip54_exports, {\n  normalizeIdentifier: () => normalizeIdentifier\n});\nfunction normalizeIdentifier(name) {\n  name = name.trim().toLowerCase();\n  name = name.normalize(\"NFKC\");\n  return Array.from(name).map((char) => {\n    if (/\\p{Letter}/u.test(char) || /\\p{Number}/u.test(char)) {\n      return char;\n    }\n    return \"-\";\n  }).join(\"\");\n}\n\n// nip57.ts\nvar nip57_exports = {};\n__export(nip57_exports, {\n  getZapEndpoint: () => getZapEndpoint,\n  makeZapReceipt: () => makeZapReceipt,\n  makeZapRequest: () => makeZapRequest,\n  useFetchImplementation: () => useFetchImplementation4,\n  validateZapRequest: () => validateZapRequest\n});\n\nvar _fetch4;\ntry {\n  _fetch4 = fetch;\n} catch {\n}\nfunction useFetchImplementation4(fetchImplementation) {\n  _fetch4 = fetchImplementation;\n}\nasync function getZapEndpoint(metadata) {\n  try {\n    let lnurl = \"\";\n    let { lud06, lud16 } = JSON.parse(metadata.content);\n    if (lud06) {\n      let { words } = _scure_base__WEBPACK_IMPORTED_MODULE_3__.bech32.decode(lud06, 1e3);\n      let data = _scure_base__WEBPACK_IMPORTED_MODULE_3__.bech32.fromWords(words);\n      lnurl = utf8Decoder.decode(data);\n    } else if (lud16) {\n      let [name, domain] = lud16.split(\"@\");\n      lnurl = new URL(`/.well-known/lnurlp/${name}`, `https://${domain}`).toString();\n    } else {\n      return null;\n    }\n    let res = await _fetch4(lnurl);\n    let body = await res.json();\n    if (body.allowsNostr && body.nostrPubkey) {\n      return body.callback;\n    }\n  } catch (err) {\n  }\n  return null;\n}\nfunction makeZapRequest({\n  profile,\n  event,\n  amount,\n  relays,\n  comment = \"\"\n}) {\n  if (!amount)\n    throw new Error(\"amount not given\");\n  if (!profile)\n    throw new Error(\"profile not given\");\n  let zr = {\n    kind: 9734,\n    created_at: Math.round(Date.now() / 1e3),\n    content: comment,\n    tags: [\n      [\"p\", profile],\n      [\"amount\", amount.toString()],\n      [\"relays\", ...relays]\n    ]\n  };\n  if (event && typeof event === \"string\") {\n    zr.tags.push([\"e\", event]);\n  }\n  if (event && typeof event === \"object\") {\n    if (isReplaceableKind(event.kind)) {\n      const a = [\"a\", `${event.kind}:${event.pubkey}:`];\n      zr.tags.push(a);\n    } else if (isAddressableKind(event.kind)) {\n      let d = event.tags.find(([t, v]) => t === \"d\" && v);\n      if (!d)\n        throw new Error(\"d tag not found or is empty\");\n      const a = [\"a\", `${event.kind}:${event.pubkey}:${d[1]}`];\n      zr.tags.push(a);\n    }\n  }\n  return zr;\n}\nfunction validateZapRequest(zapRequestString) {\n  let zapRequest;\n  try {\n    zapRequest = JSON.parse(zapRequestString);\n  } catch (err) {\n    return \"Invalid zap request JSON.\";\n  }\n  if (!validateEvent(zapRequest))\n    return \"Zap request is not a valid Nostr event.\";\n  if (!verifyEvent(zapRequest))\n    return \"Invalid signature on zap request.\";\n  let p = zapRequest.tags.find(([t, v]) => t === \"p\" && v);\n  if (!p)\n    return \"Zap request doesn't have a 'p' tag.\";\n  if (!p[1].match(/^[a-f0-9]{64}$/))\n    return \"Zap request 'p' tag is not valid hex.\";\n  let e = zapRequest.tags.find(([t, v]) => t === \"e\" && v);\n  if (e && !e[1].match(/^[a-f0-9]{64}$/))\n    return \"Zap request 'e' tag is not valid hex.\";\n  let relays = zapRequest.tags.find(([t, v]) => t === \"relays\" && v);\n  if (!relays)\n    return \"Zap request doesn't have a 'relays' tag.\";\n  return null;\n}\nfunction makeZapReceipt({\n  zapRequest,\n  preimage,\n  bolt11,\n  paidAt\n}) {\n  let zr = JSON.parse(zapRequest);\n  let tagsFromZapRequest = zr.tags.filter(([t]) => t === \"e\" || t === \"p\" || t === \"a\");\n  let zap = {\n    kind: 9735,\n    created_at: Math.round(paidAt.getTime() / 1e3),\n    content: \"\",\n    tags: [...tagsFromZapRequest, [\"P\", zr.pubkey], [\"bolt11\", bolt11], [\"description\", zapRequest]]\n  };\n  if (preimage) {\n    zap.tags.push([\"preimage\", preimage]);\n  }\n  return zap;\n}\n\n// nip98.ts\nvar nip98_exports = {};\n__export(nip98_exports, {\n  getToken: () => getToken,\n  hashPayload: () => hashPayload,\n  unpackEventFromToken: () => unpackEventFromToken,\n  validateEvent: () => validateEvent2,\n  validateEventKind: () => validateEventKind,\n  validateEventMethodTag: () => validateEventMethodTag,\n  validateEventPayloadTag: () => validateEventPayloadTag,\n  validateEventTimestamp: () => validateEventTimestamp,\n  validateEventUrlTag: () => validateEventUrlTag,\n  validateToken: () => validateToken\n});\n\n\n\nvar _authorizationScheme = \"Nostr \";\nasync function getToken(loginUrl, httpMethod, sign, includeAuthorizationScheme = false, payload) {\n  const event = {\n    kind: HTTPAuth,\n    tags: [\n      [\"u\", loginUrl],\n      [\"method\", httpMethod]\n    ],\n    created_at: Math.round(new Date().getTime() / 1e3),\n    content: \"\"\n  };\n  if (payload) {\n    event.tags.push([\"payload\", hashPayload(payload)]);\n  }\n  const signedEvent = await sign(event);\n  const authorizationScheme = includeAuthorizationScheme ? _authorizationScheme : \"\";\n  return authorizationScheme + _scure_base__WEBPACK_IMPORTED_MODULE_3__.base64.encode(utf8Encoder.encode(JSON.stringify(signedEvent)));\n}\nasync function validateToken(token, url, method) {\n  const event = await unpackEventFromToken(token).catch((error) => {\n    throw error;\n  });\n  const valid = await validateEvent2(event, url, method).catch((error) => {\n    throw error;\n  });\n  return valid;\n}\nasync function unpackEventFromToken(token) {\n  if (!token) {\n    throw new Error(\"Missing token\");\n  }\n  token = token.replace(_authorizationScheme, \"\");\n  const eventB64 = utf8Decoder.decode(_scure_base__WEBPACK_IMPORTED_MODULE_3__.base64.decode(token));\n  if (!eventB64 || eventB64.length === 0 || !eventB64.startsWith(\"{\")) {\n    throw new Error(\"Invalid token\");\n  }\n  const event = JSON.parse(eventB64);\n  return event;\n}\nfunction validateEventTimestamp(event) {\n  if (!event.created_at) {\n    return false;\n  }\n  return Math.round(new Date().getTime() / 1e3) - event.created_at < 60;\n}\nfunction validateEventKind(event) {\n  return event.kind === HTTPAuth;\n}\nfunction validateEventUrlTag(event, url) {\n  const urlTag = event.tags.find((t) => t[0] === \"u\");\n  if (!urlTag) {\n    return false;\n  }\n  return urlTag.length > 0 && urlTag[1] === url;\n}\nfunction validateEventMethodTag(event, method) {\n  const methodTag = event.tags.find((t) => t[0] === \"method\");\n  if (!methodTag) {\n    return false;\n  }\n  return methodTag.length > 0 && methodTag[1].toLowerCase() === method.toLowerCase();\n}\nfunction hashPayload(payload) {\n  const hash = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(utf8Encoder.encode(JSON.stringify(payload)));\n  return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(hash);\n}\nfunction validateEventPayloadTag(event, payload) {\n  const payloadTag = event.tags.find((t) => t[0] === \"payload\");\n  if (!payloadTag) {\n    return false;\n  }\n  const payloadHash = hashPayload(payload);\n  return payloadTag.length > 0 && payloadTag[1] === payloadHash;\n}\nasync function validateEvent2(event, url, method, body) {\n  if (!verifyEvent(event)) {\n    throw new Error(\"Invalid nostr event, signature invalid\");\n  }\n  if (!validateEventKind(event)) {\n    throw new Error(\"Invalid nostr event, kind invalid\");\n  }\n  if (!validateEventTimestamp(event)) {\n    throw new Error(\"Invalid nostr event, created_at timestamp invalid\");\n  }\n  if (!validateEventUrlTag(event, url)) {\n    throw new Error(\"Invalid nostr event, url tag invalid\");\n  }\n  if (!validateEventMethodTag(event, method)) {\n    throw new Error(\"Invalid nostr event, method tag invalid\");\n  }\n  if (Boolean(body) && typeof body === \"object\" && Object.keys(body).length > 0) {\n    if (!validateEventPayloadTag(event, body)) {\n      throw new Error(\"Invalid nostr event, payload tag does not match request body hash\");\n    }\n  }\n  return true;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/_shortw_utils.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCurve: () => (/* binding */ createCurve),\n/* harmony export */   getHash: () => (/* binding */ getHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs)),\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vX3Nob3J0d191dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQzBDO0FBQ3FCO0FBQ1A7QUFDeEQ7QUFDTztBQUNQO0FBQ0E7QUFDQSxnQ0FBZ0Msd0RBQUksWUFBWSxnRUFBVztBQUMzRCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNPO0FBQ1AsNkJBQTZCLHFFQUFXLEdBQUcsK0JBQStCO0FBQzFFLDJCQUEyQiw0QkFBNEI7QUFDdkQ7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3BhYmxvZmVybmFuZGV6L3Rlc3QxMjMvVEVORVgtcGZrbWM5L21haW4vbm9kZV9tb2R1bGVzL0Bub3N0ci1kZXYta2l0L25kay1jYWNoZS1kZXhpZS9ub2RlX21vZHVsZXMvbm9zdHItdG9vbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvZXNtL19zaG9ydHdfdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIG5vYmxlLWN1cnZlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuaW1wb3J0IHsgaG1hYyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvaG1hYyc7XG5pbXBvcnQgeyBjb25jYXRCeXRlcywgcmFuZG9tQnl0ZXMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3V0aWxzJztcbmltcG9ydCB7IHdlaWVyc3RyYXNzIH0gZnJvbSAnLi9hYnN0cmFjdC93ZWllcnN0cmFzcy5qcyc7XG4vLyBjb25uZWN0cyBub2JsZS1jdXJ2ZXMgdG8gbm9ibGUtaGFzaGVzXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGFzaChoYXNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGFzaCxcbiAgICAgICAgaG1hYzogKGtleSwgLi4ubXNncykgPT4gaG1hYyhoYXNoLCBrZXksIGNvbmNhdEJ5dGVzKC4uLm1zZ3MpKSxcbiAgICAgICAgcmFuZG9tQnl0ZXMsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDdXJ2ZShjdXJ2ZURlZiwgZGVmSGFzaCkge1xuICAgIGNvbnN0IGNyZWF0ZSA9IChoYXNoKSA9PiB3ZWllcnN0cmFzcyh7IC4uLmN1cnZlRGVmLCAuLi5nZXRIYXNoKGhhc2gpIH0pO1xuICAgIHJldHVybiBPYmplY3QuZnJlZXplKHsgLi4uY3JlYXRlKGRlZkhhc2gpLCBjcmVhdGUgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fc2hvcnR3X3V0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/_shortw_utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/curve.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/curve.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateBasic: () => (/* binding */ validateBasic),\n/* harmony export */   wNAF: () => (/* binding */ wNAF)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\n\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nfunction validateBasic(curve) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),\n/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),\n/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),\n/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/utils.js\");\n\n\nfunction validateDST(dst) {\n    if (dst instanceof Uint8Array)\n        return dst;\n    if (typeof dst === 'string')\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(dst);\n    throw new Error('DST must be Uint8Array or string');\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction isBytes(item) {\n    if (!(item instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n}\nfunction isNum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    isBytes(msg);\n    isNum(count);\n    const DST = validateDST(_DST);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/modular.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/modular.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   FpDiv: () => (/* binding */ FpDiv),\n/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),\n/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),\n/* harmony export */   FpPow: () => (/* binding */ FpPow),\n/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),\n/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),\n/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),\n/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),\n/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),\n/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),\n/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),\n/* harmony export */   mod: () => (/* binding */ mod),\n/* harmony export */   nLength: () => (/* binding */ nLength),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),\n/* harmony export */   validateField: () => (/* binding */ validateField)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vYWJzdHJhY3QvbW9kdWxhci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3VJO0FBQ3ZJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxxRUFBcUUsUUFBUSxNQUFNLE9BQU87QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsaUJBQWlCO0FBQzlDO0FBQ0E7QUFDQSxrQkFBa0IsMkNBQTJDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDLG1DQUFtQztBQUNuQyw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0EscUNBQXFDLE9BQU87QUFDNUM7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0EsNERBQTREO0FBQzVELDRCQUE0QjtBQUM1QiwrQkFBK0I7QUFDL0IsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xELGtEQUFrRDtBQUNsRCxrREFBa0Q7QUFDbEQsa0RBQWtEO0FBQ2xEO0FBQ0Esa0RBQWtEO0FBQ2xELGtEQUFrRDtBQUNsRCxrREFBa0Q7QUFDbEQsa0RBQWtEO0FBQ2xELHNEQUFzRDtBQUN0RCxzREFBc0Q7QUFDdEQsMENBQTBDO0FBQzFDLDBDQUEwQztBQUMxQyxzREFBc0Q7QUFDdEQsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsV0FBVyx5REFBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sc0RBQXNEO0FBQzdEO0FBQ0EseURBQXlELE1BQU07QUFDL0QsWUFBWSx1Q0FBdUM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGtEQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsV0FBVztBQUMxRiw4Q0FBOEM7QUFDOUMsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywwREFBZSxlQUFlLDBEQUFlO0FBQy9FO0FBQ0E7QUFDQSwwREFBMEQsTUFBTSxRQUFRLGFBQWE7QUFDckYsMEJBQTBCLDBEQUFlLFVBQVUsMERBQWU7QUFDbEUsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHNEQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxPQUFPLDRCQUE0QixRQUFRO0FBQ3BHLHVCQUF1QiwwREFBZSxTQUFTLDBEQUFlO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsT0FBTyw0QkFBNEIsSUFBSTtBQUMzRSx1QkFBdUIsMERBQWUsUUFBUSwwREFBZTtBQUM3RDtBQUNBO0FBQ0Esa0JBQWtCLDBEQUFlLHNCQUFzQiwwREFBZTtBQUN0RTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vYWJzdHJhY3QvbW9kdWxhci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG4vLyBVdGlsaXRpZXMgZm9yIG1vZHVsYXIgYXJpdGhtZXRpY3MgYW5kIGZpbml0ZSBmaWVsZHNcbmltcG9ydCB7IGJpdE1hc2ssIG51bWJlclRvQnl0ZXNCRSwgbnVtYmVyVG9CeXRlc0xFLCBieXRlc1RvTnVtYmVyQkUsIGJ5dGVzVG9OdW1iZXJMRSwgZW5zdXJlQnl0ZXMsIHZhbGlkYXRlT2JqZWN0LCB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBfMG4gPSBCaWdJbnQoMCksIF8xbiA9IEJpZ0ludCgxKSwgXzJuID0gQmlnSW50KDIpLCBfM24gPSBCaWdJbnQoMyk7XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IF80biA9IEJpZ0ludCg0KSwgXzVuID0gQmlnSW50KDUpLCBfOG4gPSBCaWdJbnQoOCk7XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IF85biA9IEJpZ0ludCg5KSwgXzE2biA9IEJpZ0ludCgxNik7XG4vLyBDYWxjdWxhdGVzIGEgbW9kdWxvIGJcbmV4cG9ydCBmdW5jdGlvbiBtb2QoYSwgYikge1xuICAgIGNvbnN0IHJlc3VsdCA9IGEgJSBiO1xuICAgIHJldHVybiByZXN1bHQgPj0gXzBuID8gcmVzdWx0IDogYiArIHJlc3VsdDtcbn1cbi8qKlxuICogRWZmaWNpZW50bHkgcmFpc2UgbnVtIHRvIHBvd2VyIGFuZCBkbyBtb2R1bGFyIGRpdmlzaW9uLlxuICogVW5zYWZlIGluIHNvbWUgY29udGV4dHM6IHVzZXMgbGFkZGVyLCBzbyBjYW4gZXhwb3NlIGJpZ2ludCBiaXRzLlxuICogQGV4YW1wbGVcbiAqIHBvdygybiwgNm4sIDExbikgLy8gNjRuICUgMTFuID09IDluXG4gKi9cbi8vIFRPRE86IHVzZSBmaWVsZCB2ZXJzaW9uICYmIHJlbW92ZVxuZXhwb3J0IGZ1bmN0aW9uIHBvdyhudW0sIHBvd2VyLCBtb2R1bG8pIHtcbiAgICBpZiAobW9kdWxvIDw9IF8wbiB8fCBwb3dlciA8IF8wbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBwb3dlci9tb2R1bG8gPiAwJyk7XG4gICAgaWYgKG1vZHVsbyA9PT0gXzFuKVxuICAgICAgICByZXR1cm4gXzBuO1xuICAgIGxldCByZXMgPSBfMW47XG4gICAgd2hpbGUgKHBvd2VyID4gXzBuKSB7XG4gICAgICAgIGlmIChwb3dlciAmIF8xbilcbiAgICAgICAgICAgIHJlcyA9IChyZXMgKiBudW0pICUgbW9kdWxvO1xuICAgICAgICBudW0gPSAobnVtICogbnVtKSAlIG1vZHVsbztcbiAgICAgICAgcG93ZXIgPj49IF8xbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8vIERvZXMgeCBeICgyIF4gcG93ZXIpIG1vZCBwLiBwb3cyKDMwLCA0KSA9PSAzMCBeICgyIF4gNClcbmV4cG9ydCBmdW5jdGlvbiBwb3cyKHgsIHBvd2VyLCBtb2R1bG8pIHtcbiAgICBsZXQgcmVzID0geDtcbiAgICB3aGlsZSAocG93ZXItLSA+IF8wbikge1xuICAgICAgICByZXMgKj0gcmVzO1xuICAgICAgICByZXMgJT0gbW9kdWxvO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8gSW52ZXJzZXMgbnVtYmVyIG92ZXIgbW9kdWxvXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG51bWJlciwgbW9kdWxvKSB7XG4gICAgaWYgKG51bWJlciA9PT0gXzBuIHx8IG1vZHVsbyA8PSBfMG4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZlcnQ6IGV4cGVjdGVkIHBvc2l0aXZlIGludGVnZXJzLCBnb3Qgbj0ke251bWJlcn0gbW9kPSR7bW9kdWxvfWApO1xuICAgIH1cbiAgICAvLyBFdWNsaWRlYW4gR0NEIGh0dHBzOi8vYnJpbGxpYW50Lm9yZy93aWtpL2V4dGVuZGVkLWV1Y2xpZGVhbi1hbGdvcml0aG0vXG4gICAgLy8gRmVybWF0J3MgbGl0dGxlIHRoZW9yZW0gXCJDVC1saWtlXCIgdmVyc2lvbiBpbnYobikgPSBuXihtLTIpIG1vZCBtIGlzIDMweCBzbG93ZXIuXG4gICAgbGV0IGEgPSBtb2QobnVtYmVyLCBtb2R1bG8pO1xuICAgIGxldCBiID0gbW9kdWxvO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIGxldCB4ID0gXzBuLCB5ID0gXzFuLCB1ID0gXzFuLCB2ID0gXzBuO1xuICAgIHdoaWxlIChhICE9PSBfMG4pIHtcbiAgICAgICAgLy8gSklUIGFwcGxpZXMgb3B0aW1pemF0aW9uIGlmIHRob3NlIHR3byBsaW5lcyBmb2xsb3cgZWFjaCBvdGhlclxuICAgICAgICBjb25zdCBxID0gYiAvIGE7XG4gICAgICAgIGNvbnN0IHIgPSBiICUgYTtcbiAgICAgICAgY29uc3QgbSA9IHggLSB1ICogcTtcbiAgICAgICAgY29uc3QgbiA9IHkgLSB2ICogcTtcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIGIgPSBhLCBhID0gciwgeCA9IHUsIHkgPSB2LCB1ID0gbSwgdiA9IG47XG4gICAgfVxuICAgIGNvbnN0IGdjZCA9IGI7XG4gICAgaWYgKGdjZCAhPT0gXzFuKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmVydDogZG9lcyBub3QgZXhpc3QnKTtcbiAgICByZXR1cm4gbW9kKHgsIG1vZHVsbyk7XG59XG4vKipcbiAqIFRvbmVsbGktU2hhbmtzIHNxdWFyZSByb290IHNlYXJjaCBhbGdvcml0aG0uXG4gKiAxLiBodHRwczovL2VwcmludC5pYWNyLm9yZy8yMDEyLzY4NS5wZGYgKHBhZ2UgMTIpXG4gKiAyLiBTcXVhcmUgUm9vdHMgZnJvbSAxOyAyNCwgNTEsIDEwIHRvIERhbiBTaGFua3NcbiAqIFdpbGwgc3RhcnQgYW4gaW5maW5pdGUgbG9vcCBpZiBmaWVsZCBvcmRlciBQIGlzIG5vdCBwcmltZS5cbiAqIEBwYXJhbSBQIGZpZWxkIG9yZGVyXG4gKiBAcmV0dXJucyBmdW5jdGlvbiB0aGF0IHRha2VzIGZpZWxkIEZwIChjcmVhdGVkIGZyb20gUCkgYW5kIG51bWJlciBuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b25lbGxpU2hhbmtzKFApIHtcbiAgICAvLyBMZWdlbmRyZSBjb25zdGFudDogdXNlZCB0byBjYWxjdWxhdGUgTGVnZW5kcmUgc3ltYm9sIChhIHwgcCksXG4gICAgLy8gd2hpY2ggZGVub3RlcyB0aGUgdmFsdWUgb2YgYV4oKHAtMSkvMikgKG1vZCBwKS5cbiAgICAvLyAoYSB8IHApIOKJoSAxICAgIGlmIGEgaXMgYSBzcXVhcmUgKG1vZCBwKVxuICAgIC8vIChhIHwgcCkg4omhIC0xICAgaWYgYSBpcyBub3QgYSBzcXVhcmUgKG1vZCBwKVxuICAgIC8vIChhIHwgcCkg4omhIDAgICAgaWYgYSDiiaEgMCAobW9kIHApXG4gICAgY29uc3QgbGVnZW5kcmVDID0gKFAgLSBfMW4pIC8gXzJuO1xuICAgIGxldCBRLCBTLCBaO1xuICAgIC8vIFN0ZXAgMTogQnkgZmFjdG9yaW5nIG91dCBwb3dlcnMgb2YgMiBmcm9tIHAgLSAxLFxuICAgIC8vIGZpbmQgcSBhbmQgcyBzdWNoIHRoYXQgcCAtIDEgPSBxKigyXnMpIHdpdGggcSBvZGRcbiAgICBmb3IgKFEgPSBQIC0gXzFuLCBTID0gMDsgUSAlIF8ybiA9PT0gXzBuOyBRIC89IF8ybiwgUysrKVxuICAgICAgICA7XG4gICAgLy8gU3RlcCAyOiBTZWxlY3QgYSBub24tc3F1YXJlIHogc3VjaCB0aGF0ICh6IHwgcCkg4omhIC0xIGFuZCBzZXQgYyDiiaEgenFcbiAgICBmb3IgKFogPSBfMm47IFogPCBQICYmIHBvdyhaLCBsZWdlbmRyZUMsIFApICE9PSBQIC0gXzFuOyBaKyspXG4gICAgICAgIDtcbiAgICAvLyBGYXN0LXBhdGhcbiAgICBpZiAoUyA9PT0gMSkge1xuICAgICAgICBjb25zdCBwMWRpdjQgPSAoUCArIF8xbikgLyBfNG47XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiB0b25lbGxpRmFzdChGcCwgbikge1xuICAgICAgICAgICAgY29uc3Qgcm9vdCA9IEZwLnBvdyhuLCBwMWRpdjQpO1xuICAgICAgICAgICAgaWYgKCFGcC5lcWwoRnAuc3FyKHJvb3QpLCBuKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIHNxdWFyZSByb290Jyk7XG4gICAgICAgICAgICByZXR1cm4gcm9vdDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gU2xvdy1wYXRoXG4gICAgY29uc3QgUTFkaXYyID0gKFEgKyBfMW4pIC8gXzJuO1xuICAgIHJldHVybiBmdW5jdGlvbiB0b25lbGxpU2xvdyhGcCwgbikge1xuICAgICAgICAvLyBTdGVwIDA6IENoZWNrIHRoYXQgbiBpcyBpbmRlZWQgYSBzcXVhcmU6IChuIHwgcCkgc2hvdWxkIG5vdCBiZSDiiaEgLTFcbiAgICAgICAgaWYgKEZwLnBvdyhuLCBsZWdlbmRyZUMpID09PSBGcC5uZWcoRnAuT05FKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICAgICAgbGV0IHIgPSBTO1xuICAgICAgICAvLyBUT0RPOiB3aWxsIGZhaWwgYXQgRnAyL2V0Y1xuICAgICAgICBsZXQgZyA9IEZwLnBvdyhGcC5tdWwoRnAuT05FLCBaKSwgUSk7IC8vIHdpbGwgdXBkYXRlIGJvdGggeCBhbmQgYlxuICAgICAgICBsZXQgeCA9IEZwLnBvdyhuLCBRMWRpdjIpOyAvLyBmaXJzdCBndWVzcyBhdCB0aGUgc3F1YXJlIHJvb3RcbiAgICAgICAgbGV0IGIgPSBGcC5wb3cobiwgUSk7IC8vIGZpcnN0IGd1ZXNzIGF0IHRoZSBmdWRnZSBmYWN0b3JcbiAgICAgICAgd2hpbGUgKCFGcC5lcWwoYiwgRnAuT05FKSkge1xuICAgICAgICAgICAgaWYgKEZwLmVxbChiLCBGcC5aRVJPKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gRnAuWkVSTzsgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVG9uZWxsaSVFMiU4MCU5M1NoYW5rc19hbGdvcml0aG0gKDQuIElmIHQgPSAwLCByZXR1cm4gciA9IDApXG4gICAgICAgICAgICAvLyBGaW5kIG0gc3VjaCBiXigyXm0pPT0xXG4gICAgICAgICAgICBsZXQgbSA9IDE7XG4gICAgICAgICAgICBmb3IgKGxldCB0MiA9IEZwLnNxcihiKTsgbSA8IHI7IG0rKykge1xuICAgICAgICAgICAgICAgIGlmIChGcC5lcWwodDIsIEZwLk9ORSkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIHQyID0gRnAuc3FyKHQyKTsgLy8gdDIgKj0gdDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5PVEU6IHItbS0xIGNhbiBiZSBiaWdnZXIgdGhhbiAzMiwgbmVlZCB0byBjb252ZXJ0IHRvIGJpZ2ludCBiZWZvcmUgc2hpZnQsIG90aGVyd2lzZSB0aGVyZSB3aWxsIGJlIG92ZXJmbG93XG4gICAgICAgICAgICBjb25zdCBnZSA9IEZwLnBvdyhnLCBfMW4gPDwgQmlnSW50KHIgLSBtIC0gMSkpOyAvLyBnZSA9IDJeKHItbS0xKVxuICAgICAgICAgICAgZyA9IEZwLnNxcihnZSk7IC8vIGcgPSBnZSAqIGdlXG4gICAgICAgICAgICB4ID0gRnAubXVsKHgsIGdlKTsgLy8geCAqPSBnZVxuICAgICAgICAgICAgYiA9IEZwLm11bChiLCBnKTsgLy8gYiAqPSBnXG4gICAgICAgICAgICByID0gbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geDtcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIEZwU3FydChQKSB7XG4gICAgLy8gTk9URTogZGlmZmVyZW50IGFsZ29yaXRobXMgY2FuIGdpdmUgZGlmZmVyZW50IHJvb3RzLCBpdCBpcyB1cCB0byB1c2VyIHRvIGRlY2lkZSB3aGljaCBvbmUgdGhleSB3YW50LlxuICAgIC8vIEZvciBleGFtcGxlIHRoZXJlIGlzIEZwU3FydE9kZC9GcFNxcnRFdmVuIHRvIGNob2ljZSByb290IGJhc2VkIG9uIG9kZG5lc3MgKHVzZWQgZm9yIGhhc2gtdG8tY3VydmUpLlxuICAgIC8vIFAg4omhIDMgKG1vZCA0KVxuICAgIC8vIOKImm4gPSBuXigoUCsxKS80KVxuICAgIGlmIChQICUgXzRuID09PSBfM24pIHtcbiAgICAgICAgLy8gTm90IGFsbCByb290cyBwb3NzaWJsZSFcbiAgICAgICAgLy8gY29uc3QgT1JERVIgPVxuICAgICAgICAvLyAgIDB4MWEwMTExZWEzOTdmZTY5YTRiMWJhN2I2NDM0YmFjZDc2NDc3NGI4NGYzODUxMmJmNjczMGQyYTBmNmIwZjYyNDFlYWJmZmZlYjE1M2ZmZmZiOWZlZmZmZmZmZmZhYWFibjtcbiAgICAgICAgLy8gY29uc3QgTlVNID0gNzIwNTc1OTQwMzc5Mjc4MTZuO1xuICAgICAgICBjb25zdCBwMWRpdjQgPSAoUCArIF8xbikgLyBfNG47XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBzcXJ0M21vZDQoRnAsIG4pIHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3QgPSBGcC5wb3cobiwgcDFkaXY0KTtcbiAgICAgICAgICAgIC8vIFRocm93IGlmIHJvb3QqKjIgIT0gblxuICAgICAgICAgICAgaWYgKCFGcC5lcWwoRnAuc3FyKHJvb3QpLCBuKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIHNxdWFyZSByb290Jyk7XG4gICAgICAgICAgICByZXR1cm4gcm9vdDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQXRraW4gYWxnb3JpdGhtIGZvciBxIOKJoSA1IChtb2QgOCksIGh0dHBzOi8vZXByaW50LmlhY3Iub3JnLzIwMTIvNjg1LnBkZiAocGFnZSAxMClcbiAgICBpZiAoUCAlIF84biA9PT0gXzVuKSB7XG4gICAgICAgIGNvbnN0IGMxID0gKFAgLSBfNW4pIC8gXzhuO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gc3FydDVtb2Q4KEZwLCBuKSB7XG4gICAgICAgICAgICBjb25zdCBuMiA9IEZwLm11bChuLCBfMm4pO1xuICAgICAgICAgICAgY29uc3QgdiA9IEZwLnBvdyhuMiwgYzEpO1xuICAgICAgICAgICAgY29uc3QgbnYgPSBGcC5tdWwobiwgdik7XG4gICAgICAgICAgICBjb25zdCBpID0gRnAubXVsKEZwLm11bChudiwgXzJuKSwgdik7XG4gICAgICAgICAgICBjb25zdCByb290ID0gRnAubXVsKG52LCBGcC5zdWIoaSwgRnAuT05FKSk7XG4gICAgICAgICAgICBpZiAoIUZwLmVxbChGcC5zcXIocm9vdCksIG4pKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICAgICAgICAgIHJldHVybiByb290O1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBQIOKJoSA5IChtb2QgMTYpXG4gICAgaWYgKFAgJSBfMTZuID09PSBfOW4pIHtcbiAgICAgICAgLy8gTk9URTogdG9uZWxsaSBpcyB0b28gc2xvdyBmb3IgYmxzLUZwMiBjYWxjdWxhdGlvbnMgZXZlbiBvbiBzdGFydFxuICAgICAgICAvLyBNZWFucyB3ZSBjYW5ub3QgdXNlIHNxcnQgZm9yIGNvbnN0YW50cyBhdCBhbGwhXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGNvbnN0IGMxID0gRnAuc3FydChGcC5uZWdhdGUoRnAuT05FKSk7IC8vICAxLiBjMSA9IHNxcnQoLTEpIGluIEYsIGkuZS4sIChjMV4yKSA9PSAtMSBpbiBGXG4gICAgICAgIC8vIGNvbnN0IGMyID0gRnAuc3FydChjMSk7ICAgICAgICAgICAgICAgIC8vICAyLiBjMiA9IHNxcnQoYzEpIGluIEYsIGkuZS4sIChjMl4yKSA9PSBjMSBpbiBGXG4gICAgICAgIC8vIGNvbnN0IGMzID0gRnAuc3FydChGcC5uZWdhdGUoYzEpKTsgICAgIC8vICAzLiBjMyA9IHNxcnQoLWMxKSBpbiBGLCBpLmUuLCAoYzNeMikgPT0gLWMxIGluIEZcbiAgICAgICAgLy8gY29uc3QgYzQgPSAoUCArIF83bikgLyBfMTZuOyAgICAgICAgICAgLy8gIDQuIGM0ID0gKHEgKyA3KSAvIDE2ICAgICAgICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgICAgICAvLyBzcXJ0ID0gKHgpID0+IHtcbiAgICAgICAgLy8gICBsZXQgdHYxID0gRnAucG93KHgsIGM0KTsgICAgICAgICAgICAgLy8gIDEuIHR2MSA9IHheYzRcbiAgICAgICAgLy8gICBsZXQgdHYyID0gRnAubXVsKGMxLCB0djEpOyAgICAgICAgICAgLy8gIDIuIHR2MiA9IGMxICogdHYxXG4gICAgICAgIC8vICAgY29uc3QgdHYzID0gRnAubXVsKGMyLCB0djEpOyAgICAgICAgIC8vICAzLiB0djMgPSBjMiAqIHR2MVxuICAgICAgICAvLyAgIGxldCB0djQgPSBGcC5tdWwoYzMsIHR2MSk7ICAgICAgICAgICAvLyAgNC4gdHY0ID0gYzMgKiB0djFcbiAgICAgICAgLy8gICBjb25zdCBlMSA9IEZwLmVxdWFscyhGcC5zcXVhcmUodHYyKSwgeCk7IC8vICA1LiAgZTEgPSAodHYyXjIpID09IHhcbiAgICAgICAgLy8gICBjb25zdCBlMiA9IEZwLmVxdWFscyhGcC5zcXVhcmUodHYzKSwgeCk7IC8vICA2LiAgZTIgPSAodHYzXjIpID09IHhcbiAgICAgICAgLy8gICB0djEgPSBGcC5jbW92KHR2MSwgdHYyLCBlMSk7IC8vICA3LiB0djEgPSBDTU9WKHR2MSwgdHYyLCBlMSkgICMgU2VsZWN0IHR2MiBpZiAodHYyXjIpID09IHhcbiAgICAgICAgLy8gICB0djIgPSBGcC5jbW92KHR2NCwgdHYzLCBlMik7IC8vICA4LiB0djIgPSBDTU9WKHR2NCwgdHYzLCBlMikgICMgU2VsZWN0IHR2MyBpZiAodHYzXjIpID09IHhcbiAgICAgICAgLy8gICBjb25zdCBlMyA9IEZwLmVxdWFscyhGcC5zcXVhcmUodHYyKSwgeCk7IC8vICA5LiAgZTMgPSAodHYyXjIpID09IHhcbiAgICAgICAgLy8gICByZXR1cm4gRnAuY21vdih0djEsIHR2MiwgZTMpOyAvLyAgMTAuICB6ID0gQ01PVih0djEsIHR2MiwgZTMpICAjIFNlbGVjdCB0aGUgc3FydCBmcm9tIHR2MSBhbmQgdHYyXG4gICAgICAgIC8vIH1cbiAgICB9XG4gICAgLy8gT3RoZXIgY2FzZXM6IFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobVxuICAgIHJldHVybiB0b25lbGxpU2hhbmtzKFApO1xufVxuLy8gTGl0dGxlLWVuZGlhbiBjaGVjayBmb3IgZmlyc3QgTEUgYml0IChsYXN0IEJFIGJpdCk7XG5leHBvcnQgY29uc3QgaXNOZWdhdGl2ZUxFID0gKG51bSwgbW9kdWxvKSA9PiAobW9kKG51bSwgbW9kdWxvKSAmIF8xbikgPT09IF8xbjtcbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgRklFTERfRklFTERTID0gW1xuICAgICdjcmVhdGUnLCAnaXNWYWxpZCcsICdpczAnLCAnbmVnJywgJ2ludicsICdzcXJ0JywgJ3NxcicsXG4gICAgJ2VxbCcsICdhZGQnLCAnc3ViJywgJ211bCcsICdwb3cnLCAnZGl2JyxcbiAgICAnYWRkTicsICdzdWJOJywgJ211bE4nLCAnc3FyTidcbl07XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVGaWVsZChmaWVsZCkge1xuICAgIGNvbnN0IGluaXRpYWwgPSB7XG4gICAgICAgIE9SREVSOiAnYmlnaW50JyxcbiAgICAgICAgTUFTSzogJ2JpZ2ludCcsXG4gICAgICAgIEJZVEVTOiAnaXNTYWZlSW50ZWdlcicsXG4gICAgICAgIEJJVFM6ICdpc1NhZmVJbnRlZ2VyJyxcbiAgICB9O1xuICAgIGNvbnN0IG9wdHMgPSBGSUVMRF9GSUVMRFMucmVkdWNlKChtYXAsIHZhbCkgPT4ge1xuICAgICAgICBtYXBbdmFsXSA9ICdmdW5jdGlvbic7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfSwgaW5pdGlhbCk7XG4gICAgcmV0dXJuIHZhbGlkYXRlT2JqZWN0KGZpZWxkLCBvcHRzKTtcbn1cbi8vIEdlbmVyaWMgZmllbGQgZnVuY3Rpb25zXG4vKipcbiAqIFNhbWUgYXMgYHBvd2AgYnV0IGZvciBGcDogbm9uLWNvbnN0YW50LXRpbWUuXG4gKiBVbnNhZmUgaW4gc29tZSBjb250ZXh0czogdXNlcyBsYWRkZXIsIHNvIGNhbiBleHBvc2UgYmlnaW50IGJpdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBGcFBvdyhmLCBudW0sIHBvd2VyKSB7XG4gICAgLy8gU2hvdWxkIGhhdmUgc2FtZSBzcGVlZCBhcyBwb3cgZm9yIGJpZ2ludHNcbiAgICAvLyBUT0RPOiBiZW5jaG1hcmshXG4gICAgaWYgKHBvd2VyIDwgXzBuKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHBvd2VyID4gMCcpO1xuICAgIGlmIChwb3dlciA9PT0gXzBuKVxuICAgICAgICByZXR1cm4gZi5PTkU7XG4gICAgaWYgKHBvd2VyID09PSBfMW4pXG4gICAgICAgIHJldHVybiBudW07XG4gICAgbGV0IHAgPSBmLk9ORTtcbiAgICBsZXQgZCA9IG51bTtcbiAgICB3aGlsZSAocG93ZXIgPiBfMG4pIHtcbiAgICAgICAgaWYgKHBvd2VyICYgXzFuKVxuICAgICAgICAgICAgcCA9IGYubXVsKHAsIGQpO1xuICAgICAgICBkID0gZi5zcXIoZCk7XG4gICAgICAgIHBvd2VyID4+PSBfMW47XG4gICAgfVxuICAgIHJldHVybiBwO1xufVxuLyoqXG4gKiBFZmZpY2llbnRseSBpbnZlcnQgYW4gYXJyYXkgb2YgRmllbGQgZWxlbWVudHMuXG4gKiBgaW52KDApYCB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCBoZXJlOiBtYWtlIHN1cmUgdG8gdGhyb3cgYW4gZXJyb3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBGcEludmVydEJhdGNoKGYsIG51bXMpIHtcbiAgICBjb25zdCB0bXAgPSBuZXcgQXJyYXkobnVtcy5sZW5ndGgpO1xuICAgIC8vIFdhbGsgZnJvbSBmaXJzdCB0byBsYXN0LCBtdWx0aXBseSB0aGVtIGJ5IGVhY2ggb3RoZXIgTU9EIHBcbiAgICBjb25zdCBsYXN0TXVsdGlwbGllZCA9IG51bXMucmVkdWNlKChhY2MsIG51bSwgaSkgPT4ge1xuICAgICAgICBpZiAoZi5pczAobnVtKSlcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIHRtcFtpXSA9IGFjYztcbiAgICAgICAgcmV0dXJuIGYubXVsKGFjYywgbnVtKTtcbiAgICB9LCBmLk9ORSk7XG4gICAgLy8gSW52ZXJ0IGxhc3QgZWxlbWVudFxuICAgIGNvbnN0IGludmVydGVkID0gZi5pbnYobGFzdE11bHRpcGxpZWQpO1xuICAgIC8vIFdhbGsgZnJvbSBsYXN0IHRvIGZpcnN0LCBtdWx0aXBseSB0aGVtIGJ5IGludmVydGVkIGVhY2ggb3RoZXIgTU9EIHBcbiAgICBudW1zLnJlZHVjZVJpZ2h0KChhY2MsIG51bSwgaSkgPT4ge1xuICAgICAgICBpZiAoZi5pczAobnVtKSlcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIHRtcFtpXSA9IGYubXVsKGFjYywgdG1wW2ldKTtcbiAgICAgICAgcmV0dXJuIGYubXVsKGFjYywgbnVtKTtcbiAgICB9LCBpbnZlcnRlZCk7XG4gICAgcmV0dXJuIHRtcDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBGcERpdihmLCBsaHMsIHJocykge1xuICAgIHJldHVybiBmLm11bChsaHMsIHR5cGVvZiByaHMgPT09ICdiaWdpbnQnID8gaW52ZXJ0KHJocywgZi5PUkRFUikgOiBmLmludihyaHMpKTtcbn1cbi8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBUcnVlIHdoZW5ldmVyIHRoZSB2YWx1ZSB4IGlzIGEgc3F1YXJlIGluIHRoZSBmaWVsZCBGLlxuZXhwb3J0IGZ1bmN0aW9uIEZwSXNTcXVhcmUoZikge1xuICAgIGNvbnN0IGxlZ2VuZHJlQ29uc3QgPSAoZi5PUkRFUiAtIF8xbikgLyBfMm47IC8vIEludGVnZXIgYXJpdGhtZXRpY1xuICAgIHJldHVybiAoeCkgPT4ge1xuICAgICAgICBjb25zdCBwID0gZi5wb3coeCwgbGVnZW5kcmVDb25zdCk7XG4gICAgICAgIHJldHVybiBmLmVxbChwLCBmLlpFUk8pIHx8IGYuZXFsKHAsIGYuT05FKTtcbiAgICB9O1xufVxuLy8gQ1VSVkUubiBsZW5ndGhzXG5leHBvcnQgZnVuY3Rpb24gbkxlbmd0aChuLCBuQml0TGVuZ3RoKSB7XG4gICAgLy8gQml0IHNpemUsIGJ5dGUgc2l6ZSBvZiBDVVJWRS5uXG4gICAgY29uc3QgX25CaXRMZW5ndGggPSBuQml0TGVuZ3RoICE9PSB1bmRlZmluZWQgPyBuQml0TGVuZ3RoIDogbi50b1N0cmluZygyKS5sZW5ndGg7XG4gICAgY29uc3QgbkJ5dGVMZW5ndGggPSBNYXRoLmNlaWwoX25CaXRMZW5ndGggLyA4KTtcbiAgICByZXR1cm4geyBuQml0TGVuZ3RoOiBfbkJpdExlbmd0aCwgbkJ5dGVMZW5ndGggfTtcbn1cbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBmaW5pdGUgZmllbGQgb3ZlciBwcmltZS4gKipOb24tcHJpbWVzIGFyZSBub3Qgc3VwcG9ydGVkLioqXG4gKiBEbyBub3QgaW5pdCBpbiBsb29wOiBzbG93LiBWZXJ5IGZyYWdpbGU6IGFsd2F5cyBydW4gYSBiZW5jaG1hcmsgb24gYSBjaGFuZ2UuXG4gKiBNYWpvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25zOlxuICogKiBhKSBkZW5vcm1hbGl6ZWQgb3BlcmF0aW9ucyBsaWtlIG11bE4gaW5zdGVhZCBvZiBtdWxcbiAqICogYikgc2FtZSBvYmplY3Qgc2hhcGU6IG5ldmVyIGFkZCBvciByZW1vdmUga2V5c1xuICogKiBjKSBPYmplY3QuZnJlZXplXG4gKiBAcGFyYW0gT1JERVIgcHJpbWUgcG9zaXRpdmUgYmlnaW50XG4gKiBAcGFyYW0gYml0TGVuIGhvdyBtYW55IGJpdHMgdGhlIGZpZWxkIGNvbnN1bWVzXG4gKiBAcGFyYW0gaXNMRSAoZGVmOiBmYWxzZSkgaWYgZW5jb2RpbmcgLyBkZWNvZGluZyBzaG91bGQgYmUgaW4gbGl0dGxlLWVuZGlhblxuICogQHBhcmFtIHJlZGVmIG9wdGlvbmFsIGZhc3RlciByZWRlZmluaXRpb25zIG9mIHNxcnQgYW5kIG90aGVyIG1ldGhvZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEZpZWxkKE9SREVSLCBiaXRMZW4sIGlzTEUgPSBmYWxzZSwgcmVkZWYgPSB7fSkge1xuICAgIGlmIChPUkRFUiA8PSBfMG4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgRmllbGQgT1JERVIgPiAwLCBnb3QgJHtPUkRFUn1gKTtcbiAgICBjb25zdCB7IG5CaXRMZW5ndGg6IEJJVFMsIG5CeXRlTGVuZ3RoOiBCWVRFUyB9ID0gbkxlbmd0aChPUkRFUiwgYml0TGVuKTtcbiAgICBpZiAoQllURVMgPiAyMDQ4KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpZWxkIGxlbmd0aHMgb3ZlciAyMDQ4IGJ5dGVzIGFyZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgY29uc3Qgc3FydFAgPSBGcFNxcnQoT1JERVIpO1xuICAgIGNvbnN0IGYgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgT1JERVIsXG4gICAgICAgIEJJVFMsXG4gICAgICAgIEJZVEVTLFxuICAgICAgICBNQVNLOiBiaXRNYXNrKEJJVFMpLFxuICAgICAgICBaRVJPOiBfMG4sXG4gICAgICAgIE9ORTogXzFuLFxuICAgICAgICBjcmVhdGU6IChudW0pID0+IG1vZChudW0sIE9SREVSKSxcbiAgICAgICAgaXNWYWxpZDogKG51bSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBudW0gIT09ICdiaWdpbnQnKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBmaWVsZCBlbGVtZW50OiBleHBlY3RlZCBiaWdpbnQsIGdvdCAke3R5cGVvZiBudW19YCk7XG4gICAgICAgICAgICByZXR1cm4gXzBuIDw9IG51bSAmJiBudW0gPCBPUkRFUjsgLy8gMCBpcyB2YWxpZCBlbGVtZW50LCBidXQgaXQncyBub3QgaW52ZXJ0aWJsZVxuICAgICAgICB9LFxuICAgICAgICBpczA6IChudW0pID0+IG51bSA9PT0gXzBuLFxuICAgICAgICBpc09kZDogKG51bSkgPT4gKG51bSAmIF8xbikgPT09IF8xbixcbiAgICAgICAgbmVnOiAobnVtKSA9PiBtb2QoLW51bSwgT1JERVIpLFxuICAgICAgICBlcWw6IChsaHMsIHJocykgPT4gbGhzID09PSByaHMsXG4gICAgICAgIHNxcjogKG51bSkgPT4gbW9kKG51bSAqIG51bSwgT1JERVIpLFxuICAgICAgICBhZGQ6IChsaHMsIHJocykgPT4gbW9kKGxocyArIHJocywgT1JERVIpLFxuICAgICAgICBzdWI6IChsaHMsIHJocykgPT4gbW9kKGxocyAtIHJocywgT1JERVIpLFxuICAgICAgICBtdWw6IChsaHMsIHJocykgPT4gbW9kKGxocyAqIHJocywgT1JERVIpLFxuICAgICAgICBwb3c6IChudW0sIHBvd2VyKSA9PiBGcFBvdyhmLCBudW0sIHBvd2VyKSxcbiAgICAgICAgZGl2OiAobGhzLCByaHMpID0+IG1vZChsaHMgKiBpbnZlcnQocmhzLCBPUkRFUiksIE9SREVSKSxcbiAgICAgICAgLy8gU2FtZSBhcyBhYm92ZSwgYnV0IGRvZXNuJ3Qgbm9ybWFsaXplXG4gICAgICAgIHNxck46IChudW0pID0+IG51bSAqIG51bSxcbiAgICAgICAgYWRkTjogKGxocywgcmhzKSA9PiBsaHMgKyByaHMsXG4gICAgICAgIHN1Yk46IChsaHMsIHJocykgPT4gbGhzIC0gcmhzLFxuICAgICAgICBtdWxOOiAobGhzLCByaHMpID0+IGxocyAqIHJocyxcbiAgICAgICAgaW52OiAobnVtKSA9PiBpbnZlcnQobnVtLCBPUkRFUiksXG4gICAgICAgIHNxcnQ6IHJlZGVmLnNxcnQgfHwgKChuKSA9PiBzcXJ0UChmLCBuKSksXG4gICAgICAgIGludmVydEJhdGNoOiAobHN0KSA9PiBGcEludmVydEJhdGNoKGYsIGxzdCksXG4gICAgICAgIC8vIFRPRE86IGRvIHdlIHJlYWxseSBuZWVkIGNvbnN0YW50IGNtb3Y/XG4gICAgICAgIC8vIFdlIGRvbid0IGhhdmUgY29uc3QtdGltZSBiaWdpbnRzIGFueXdheSwgc28gcHJvYmFibHkgd2lsbCBiZSBub3QgdmVyeSB1c2VmdWxcbiAgICAgICAgY21vdjogKGEsIGIsIGMpID0+IChjID8gYiA6IGEpLFxuICAgICAgICB0b0J5dGVzOiAobnVtKSA9PiAoaXNMRSA/IG51bWJlclRvQnl0ZXNMRShudW0sIEJZVEVTKSA6IG51bWJlclRvQnl0ZXNCRShudW0sIEJZVEVTKSksXG4gICAgICAgIGZyb21CeXRlczogKGJ5dGVzKSA9PiB7XG4gICAgICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSBCWVRFUylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZwLmZyb21CeXRlczogZXhwZWN0ZWQgJHtCWVRFU30sIGdvdCAke2J5dGVzLmxlbmd0aH1gKTtcbiAgICAgICAgICAgIHJldHVybiBpc0xFID8gYnl0ZXNUb051bWJlckxFKGJ5dGVzKSA6IGJ5dGVzVG9OdW1iZXJCRShieXRlcyk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoZik7XG59XG5leHBvcnQgZnVuY3Rpb24gRnBTcXJ0T2RkKEZwLCBlbG0pIHtcbiAgICBpZiAoIUZwLmlzT2RkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkIGRvZXNuJ3QgaGF2ZSBpc09kZGApO1xuICAgIGNvbnN0IHJvb3QgPSBGcC5zcXJ0KGVsbSk7XG4gICAgcmV0dXJuIEZwLmlzT2RkKHJvb3QpID8gcm9vdCA6IEZwLm5lZyhyb290KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBGcFNxcnRFdmVuKEZwLCBlbG0pIHtcbiAgICBpZiAoIUZwLmlzT2RkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkIGRvZXNuJ3QgaGF2ZSBpc09kZGApO1xuICAgIGNvbnN0IHJvb3QgPSBGcC5zcXJ0KGVsbSk7XG4gICAgcmV0dXJuIEZwLmlzT2RkKHJvb3QpID8gRnAubmVnKHJvb3QpIDogcm9vdDtcbn1cbi8qKlxuICogXCJDb25zdGFudC10aW1lXCIgcHJpdmF0ZSBrZXkgZ2VuZXJhdGlvbiB1dGlsaXR5LlxuICogU2FtZSBhcyBtYXBLZXlUb0ZpZWxkLCBidXQgYWNjZXB0cyBsZXNzIGJ5dGVzICg0MCBpbnN0ZWFkIG9mIDQ4IGZvciAzMi1ieXRlIGZpZWxkKS5cbiAqIFdoaWNoIG1ha2VzIGl0IHNsaWdodGx5IG1vcmUgYmlhc2VkLCBsZXNzIHNlY3VyZS5cbiAqIEBkZXByZWNhdGVkIHVzZSBtYXBLZXlUb0ZpZWxkIGluc3RlYWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2hUb1ByaXZhdGVTY2FsYXIoaGFzaCwgZ3JvdXBPcmRlciwgaXNMRSA9IGZhbHNlKSB7XG4gICAgaGFzaCA9IGVuc3VyZUJ5dGVzKCdwcml2YXRlSGFzaCcsIGhhc2gpO1xuICAgIGNvbnN0IGhhc2hMZW4gPSBoYXNoLmxlbmd0aDtcbiAgICBjb25zdCBtaW5MZW4gPSBuTGVuZ3RoKGdyb3VwT3JkZXIpLm5CeXRlTGVuZ3RoICsgODtcbiAgICBpZiAobWluTGVuIDwgMjQgfHwgaGFzaExlbiA8IG1pbkxlbiB8fCBoYXNoTGVuID4gMTAyNClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBoYXNoVG9Qcml2YXRlU2NhbGFyOiBleHBlY3RlZCAke21pbkxlbn0tMTAyNCBieXRlcyBvZiBpbnB1dCwgZ290ICR7aGFzaExlbn1gKTtcbiAgICBjb25zdCBudW0gPSBpc0xFID8gYnl0ZXNUb051bWJlckxFKGhhc2gpIDogYnl0ZXNUb051bWJlckJFKGhhc2gpO1xuICAgIHJldHVybiBtb2QobnVtLCBncm91cE9yZGVyIC0gXzFuKSArIF8xbjtcbn1cbi8qKlxuICogUmV0dXJucyB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgY29uc3VtZWQgYnkgdGhlIGZpZWxkIGVsZW1lbnQuXG4gKiBGb3IgZXhhbXBsZSwgMzIgYnl0ZXMgZm9yIHVzdWFsIDI1Ni1iaXQgd2VpZXJzdHJhc3MgY3VydmUuXG4gKiBAcGFyYW0gZmllbGRPcmRlciBudW1iZXIgb2YgZmllbGQgZWxlbWVudHMsIHVzdWFsbHkgQ1VSVkUublxuICogQHJldHVybnMgYnl0ZSBsZW5ndGggb2YgZmllbGRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpZWxkQnl0ZXNMZW5ndGgoZmllbGRPcmRlcikge1xuICAgIGlmICh0eXBlb2YgZmllbGRPcmRlciAhPT0gJ2JpZ2ludCcpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZmllbGQgb3JkZXIgbXVzdCBiZSBiaWdpbnQnKTtcbiAgICBjb25zdCBiaXRMZW5ndGggPSBmaWVsZE9yZGVyLnRvU3RyaW5nKDIpLmxlbmd0aDtcbiAgICByZXR1cm4gTWF0aC5jZWlsKGJpdExlbmd0aCAvIDgpO1xufVxuLyoqXG4gKiBSZXR1cm5zIG1pbmltYWwgYW1vdW50IG9mIGJ5dGVzIHRoYXQgY2FuIGJlIHNhZmVseSByZWR1Y2VkXG4gKiBieSBmaWVsZCBvcmRlci5cbiAqIFNob3VsZCBiZSAyXi0xMjggZm9yIDEyOC1iaXQgY3VydmUgc3VjaCBhcyBQMjU2LlxuICogQHBhcmFtIGZpZWxkT3JkZXIgbnVtYmVyIG9mIGZpZWxkIGVsZW1lbnRzLCB1c3VhbGx5IENVUlZFLm5cbiAqIEByZXR1cm5zIGJ5dGUgbGVuZ3RoIG9mIHRhcmdldCBoYXNoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNaW5IYXNoTGVuZ3RoKGZpZWxkT3JkZXIpIHtcbiAgICBjb25zdCBsZW5ndGggPSBnZXRGaWVsZEJ5dGVzTGVuZ3RoKGZpZWxkT3JkZXIpO1xuICAgIHJldHVybiBsZW5ndGggKyBNYXRoLmNlaWwobGVuZ3RoIC8gMik7XG59XG4vKipcbiAqIFwiQ29uc3RhbnQtdGltZVwiIHByaXZhdGUga2V5IGdlbmVyYXRpb24gdXRpbGl0eS5cbiAqIENhbiB0YWtlIChuICsgbi8yKSBvciBtb3JlIGJ5dGVzIG9mIHVuaWZvcm0gaW5wdXQgZS5nLiBmcm9tIENTUFJORyBvciBLREZcbiAqIGFuZCBjb252ZXJ0IHRoZW0gaW50byBwcml2YXRlIHNjYWxhciwgd2l0aCB0aGUgbW9kdWxvIGJpYXMgYmVpbmcgbmVnbGlnaWJsZS5cbiAqIE5lZWRzIGF0IGxlYXN0IDQ4IGJ5dGVzIG9mIGlucHV0IGZvciAzMi1ieXRlIHByaXZhdGUga2V5LlxuICogaHR0cHM6Ly9yZXNlYXJjaC5rdWRlbHNraXNlY3VyaXR5LmNvbS8yMDIwLzA3LzI4L3RoZS1kZWZpbml0aXZlLWd1aWRlLXRvLW1vZHVsby1iaWFzLWFuZC1ob3ctdG8tYXZvaWQtaXQvXG4gKiBGSVBTIDE4Ni01LCBBLjIgaHR0cHM6Ly9jc3JjLm5pc3QuZ292L3B1YmxpY2F0aW9ucy9kZXRhaWwvZmlwcy8xODYvNS9maW5hbFxuICogUkZDIDkzODAsIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MzgwI3NlY3Rpb24tNVxuICogQHBhcmFtIGhhc2ggaGFzaCBvdXRwdXQgZnJvbSBTSEEzIG9yIGEgc2ltaWxhciBmdW5jdGlvblxuICogQHBhcmFtIGdyb3VwT3JkZXIgc2l6ZSBvZiBzdWJncm91cCAtIChlLmcuIHNlY3AyNTZrMS5DVVJWRS5uKVxuICogQHBhcmFtIGlzTEUgaW50ZXJwcmV0IGhhc2ggYnl0ZXMgYXMgTEUgbnVtXG4gKiBAcmV0dXJucyB2YWxpZCBwcml2YXRlIHNjYWxhclxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwSGFzaFRvRmllbGQoa2V5LCBmaWVsZE9yZGVyLCBpc0xFID0gZmFsc2UpIHtcbiAgICBjb25zdCBsZW4gPSBrZXkubGVuZ3RoO1xuICAgIGNvbnN0IGZpZWxkTGVuID0gZ2V0RmllbGRCeXRlc0xlbmd0aChmaWVsZE9yZGVyKTtcbiAgICBjb25zdCBtaW5MZW4gPSBnZXRNaW5IYXNoTGVuZ3RoKGZpZWxkT3JkZXIpO1xuICAgIC8vIE5vIHNtYWxsIG51bWJlcnM6IG5lZWQgdG8gdW5kZXJzdGFuZCBiaWFzIHN0b3J5LiBObyBodWdlIG51bWJlcnM6IGVhc2llciB0byBkZXRlY3QgSlMgdGltaW5ncy5cbiAgICBpZiAobGVuIDwgMTYgfHwgbGVuIDwgbWluTGVuIHx8IGxlbiA+IDEwMjQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgJHttaW5MZW59LTEwMjQgYnl0ZXMgb2YgaW5wdXQsIGdvdCAke2xlbn1gKTtcbiAgICBjb25zdCBudW0gPSBpc0xFID8gYnl0ZXNUb051bWJlckJFKGtleSkgOiBieXRlc1RvTnVtYmVyTEUoa2V5KTtcbiAgICAvLyBgbW9kKHgsIDExKWAgY2FuIHNvbWV0aW1lcyBwcm9kdWNlIDAuIGBtb2QoeCwgMTApICsgMWAgaXMgdGhlIHNhbWUsIGJ1dCBubyAwXG4gICAgY29uc3QgcmVkdWNlZCA9IG1vZChudW0sIGZpZWxkT3JkZXIgLSBfMW4pICsgXzFuO1xuICAgIHJldHVybiBpc0xFID8gbnVtYmVyVG9CeXRlc0xFKHJlZHVjZWQsIGZpZWxkTGVuKSA6IG51bWJlclRvQnl0ZXNCRShyZWR1Y2VkLCBmaWVsZExlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGFyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/modular.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/utils.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/utils.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nfunction equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nconst bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER: () => (/* binding */ DER),\n/* harmony export */   SWUFpSqrtRatio: () => (/* binding */ SWUFpSqrtRatio),\n/* harmony export */   mapToCurveSimpleSWU: () => (/* binding */ mapToCurveSimpleSWU),\n/* harmony export */   weierstrass: () => (/* binding */ weierstrass),\n/* harmony export */   weierstrassPoints: () => (/* binding */ weierstrassPoints)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\n\n\n\n\nfunction validatePointOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = _utils_js__WEBPACK_IMPORTED_MODULE_1__;\nconst DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = _modular_js__WEBPACK_IMPORTED_MODULE_2__.getMinHashLength(CURVE.n);\n            return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('extraEntropy', e)); // check for being bytes\n        }\n        const seed = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    _modular_js__WEBPACK_IMPORTED_MODULE_2__.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ29DO0FBQ0g7QUFDUTtBQUNRO0FBQ2pEO0FBQ0EsaUJBQWlCLHdEQUFhO0FBQzlCLElBQUkscURBQWlCO0FBQ3JCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFNBQVM7QUFDcEM7QUFDQTtBQUNBLFFBQVEsd0NBQXdDLEVBQUUsc0NBQUU7QUFDN0M7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwwQ0FBMEM7QUFDM0QsS0FBSztBQUNMO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGtCQUFrQjtBQUNsQyxnQkFBZ0Isc0JBQXNCO0FBQ3RDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsSUFBSTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUIsSUFBSSxHQUFHLEVBQUUsRUFBRSxJQUFJLEdBQUcsRUFBRSxFQUFFO0FBQzNELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxZQUFZLEtBQUssU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0RBQWM7QUFDakMsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkIsOEJBQThCO0FBQzlCLGtDQUFrQztBQUNsQyxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9FQUFvRTtBQUNwRjtBQUNBO0FBQ0Esc0JBQXNCLGlEQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNEQUFrQixDQUFDLHNEQUFXO0FBQ3BEO0FBQ0E7QUFDQSxtREFBbUQsYUFBYSw0QkFBNEIsV0FBVztBQUN2RztBQUNBO0FBQ0Esa0JBQWtCLDRDQUFPLFVBQVU7QUFDbkMsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELHNEQUFXO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMsa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixJQUFJO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix5QkFBeUI7QUFDN0Msb0JBQW9CLHlCQUF5QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBLG9CQUFvQix5QkFBeUI7QUFDN0MsMERBQTBEO0FBQzFELHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHlCQUF5QjtBQUM3QyxvQkFBb0IseUJBQXlCO0FBQzdDLDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0Isb0JBQW9CLE9BQU87QUFDM0I7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DLHNCQUFzQixpQkFBaUI7QUFDdkMsc0JBQXNCLGlCQUFpQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlEQUFhO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsK0NBQUk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsd0RBQWE7QUFDOUIsSUFBSSxxREFBaUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwyQkFBMkIscUJBQXFCO0FBQ2hEO0FBQ087QUFDUDtBQUNBLFlBQVkscUJBQXFCO0FBQ2pDLHdDQUF3QztBQUN4Qyw4Q0FBOEM7QUFDOUM7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBLGVBQWUsNENBQU87QUFDdEI7QUFDQTtBQUNBLGVBQWUsK0NBQVU7QUFDekI7QUFDQSxZQUFZLDJGQUEyRjtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrREFBYztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHNEQUFrQjtBQUM1QztBQUNBO0FBQ0EsbURBQW1EO0FBQ25ELHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxtREFBbUQsS0FBSyx3QkFBd0IsZUFBZSxzQkFBc0IsaUJBQWlCO0FBQ3RJO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTCxtQ0FBbUMsaURBQWEsQ0FBQyxzREFBa0I7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxzREFBa0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isc0RBQVc7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPLFlBQVksc0RBQVc7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isc0JBQXNCO0FBQzFDLG9DQUFvQyxzREFBVyx1QkFBdUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsc0NBQXNDO0FBQ3RDLHFDQUFxQztBQUNyQyxrRUFBa0U7QUFDbEU7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlEQUFhO0FBQ2hDO0FBQ0E7QUFDQSxvQ0FBb0Msc0JBQXNCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpREFBYTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix5REFBb0I7QUFDL0MsbUJBQW1CLHVEQUFrQjtBQUNyQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0RBQWtCLFNBQVM7QUFDbkQsK0RBQStEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQSx1QkFBdUIsOENBQVU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsaUJBQWlCO0FBQ3BFO0FBQ0EsZUFBZSxzREFBa0I7QUFDakM7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDLGNBQWMsbUNBQW1DLFFBQVE7QUFDekQ7QUFDQSx5QkFBeUI7QUFDekIsa0JBQWtCLHNEQUFXO0FBQzdCO0FBQ0Esc0JBQXNCLHNEQUFXO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFO0FBQ2xFLDBCQUEwQixzREFBVyxzQkFBc0I7QUFDM0Q7QUFDQSxxQkFBcUIsa0RBQWMsZUFBZTtBQUNsRCx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0Esd0JBQXdCO0FBQ3hCLGdDQUFnQztBQUNoQyx5REFBeUQ7QUFDekQsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLCtCQUErQjtBQUMvQjtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixjQUFjLG1DQUFtQztBQUNqRTtBQUNBLHFCQUFxQixxREFBaUI7QUFDdEMsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixzREFBVztBQUM3QixvQkFBb0Isc0RBQVc7QUFDL0I7QUFDQTtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLDBDQUEwQztBQUMxQyw0QkFBNEI7QUFDNUIsaUNBQWlDO0FBQ2pDLGlDQUFpQztBQUNqQywwRUFBMEU7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGlCQUFpQjtBQUMzQztBQUNBLGtCQUFrQjtBQUNsQiwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMsNkJBQTZCO0FBQzdCLDhCQUE4QjtBQUM5Qiw0Q0FBNEM7QUFDNUM7QUFDQSxzQkFBc0I7QUFDdEIsaUNBQWlDO0FBQ2pDLCtCQUErQjtBQUMvQiw4QkFBOEI7QUFDOUIsa0NBQWtDO0FBQ2xDLCtCQUErQjtBQUMvQixnQ0FBZ0M7QUFDaEMsOEJBQThCO0FBQzlCLDhCQUE4QjtBQUM5QixvQ0FBb0M7QUFDcEMsK0JBQStCO0FBQy9CLHdDQUF3QztBQUN4QywrQkFBK0I7QUFDL0IsZ0NBQWdDO0FBQ2hDLHVDQUF1QztBQUN2Qyx1Q0FBdUM7QUFDdkM7QUFDQSx5QkFBeUIsU0FBUztBQUNsQywrQkFBK0I7QUFDL0Isc0NBQXNDO0FBQ3RDLHlDQUF5QztBQUN6Qyw2Q0FBNkM7QUFDN0Msb0NBQW9DO0FBQ3BDLG9DQUFvQztBQUNwQyxxQ0FBcUM7QUFDckMseUNBQXlDO0FBQ3pDLDBDQUEwQztBQUMxQztBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsdUNBQXVDO0FBQ3ZDO0FBQ0EsaUNBQWlDO0FBQ2pDLHNDQUFzQztBQUN0QyxvQ0FBb0M7QUFDcEMsc0NBQXNDO0FBQ3RDLGtDQUFrQztBQUNsQyx1Q0FBdUM7QUFDdkMsK0NBQStDLGtCQUFrQjtBQUNqRSx5Q0FBeUM7QUFDekMsMkNBQTJDO0FBQzNDLHFCQUFxQiwyQkFBMkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLElBQUksc0RBQWlCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLG1DQUFtQztBQUNuQywyQkFBMkI7QUFDM0IsZ0NBQWdDO0FBQ2hDLG1DQUFtQztBQUNuQyxtQ0FBbUM7QUFDbkMsbUVBQW1FO0FBQ25FLG1DQUFtQztBQUNuQywyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLG1DQUFtQztBQUNuQyxnQ0FBZ0M7QUFDaEMsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxtQ0FBbUM7QUFDbkMsZ0NBQWdDO0FBQ2hDLDhCQUE4QjtBQUM5QixnQkFBZ0IsaUJBQWlCLHVCQUF1QjtBQUN4RCw0QkFBNEI7QUFDNUIsOEJBQThCO0FBQzlCLHNDQUFzQztBQUN0Qyx3Q0FBd0M7QUFDeEMsZ0RBQWdEO0FBQ2hELHVDQUF1QztBQUN2Qyw0QkFBNEI7QUFDNUIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3BhYmxvZmVybmFuZGV6L3Rlc3QxMjMvVEVORVgtcGZrbWM5L21haW4vbm9kZV9tb2R1bGVzL0Bub3N0ci1kZXYta2l0L25kay1jYWNoZS1kZXhpZS9ub2RlX21vZHVsZXMvbm9zdHItdG9vbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvZXNtL2Fic3RyYWN0L3dlaWVyc3RyYXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbi8vIFNob3J0IFdlaWVyc3RyYXNzIGN1cnZlLiBUaGUgZm9ybXVsYSBpczogecKyID0geMKzICsgYXggKyBiXG5pbXBvcnQgKiBhcyBtb2QgZnJvbSAnLi9tb2R1bGFyLmpzJztcbmltcG9ydCAqIGFzIHV0IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgZW5zdXJlQnl0ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IHdOQUYsIHZhbGlkYXRlQmFzaWMgfSBmcm9tICcuL2N1cnZlLmpzJztcbmZ1bmN0aW9uIHZhbGlkYXRlUG9pbnRPcHRzKGN1cnZlKSB7XG4gICAgY29uc3Qgb3B0cyA9IHZhbGlkYXRlQmFzaWMoY3VydmUpO1xuICAgIHV0LnZhbGlkYXRlT2JqZWN0KG9wdHMsIHtcbiAgICAgICAgYTogJ2ZpZWxkJyxcbiAgICAgICAgYjogJ2ZpZWxkJyxcbiAgICB9LCB7XG4gICAgICAgIGFsbG93ZWRQcml2YXRlS2V5TGVuZ3RoczogJ2FycmF5JyxcbiAgICAgICAgd3JhcFByaXZhdGVLZXk6ICdib29sZWFuJyxcbiAgICAgICAgaXNUb3JzaW9uRnJlZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgY2xlYXJDb2ZhY3RvcjogJ2Z1bmN0aW9uJyxcbiAgICAgICAgYWxsb3dJbmZpbml0eVBvaW50OiAnYm9vbGVhbicsXG4gICAgICAgIGZyb21CeXRlczogJ2Z1bmN0aW9uJyxcbiAgICAgICAgdG9CeXRlczogJ2Z1bmN0aW9uJyxcbiAgICB9KTtcbiAgICBjb25zdCB7IGVuZG8sIEZwLCBhIH0gPSBvcHRzO1xuICAgIGlmIChlbmRvKSB7XG4gICAgICAgIGlmICghRnAuZXFsKGEsIEZwLlpFUk8pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuZG9tb3JwaGlzbSBjYW4gb25seSBiZSBkZWZpbmVkIGZvciBLb2JsaXR6IGN1cnZlcyB0aGF0IGhhdmUgYT0wJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBlbmRvICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICAgICAgdHlwZW9mIGVuZG8uYmV0YSAhPT0gJ2JpZ2ludCcgfHxcbiAgICAgICAgICAgIHR5cGVvZiBlbmRvLnNwbGl0U2NhbGFyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGVuZG9tb3JwaGlzbSB3aXRoIGJldGE6IGJpZ2ludCBhbmQgc3BsaXRTY2FsYXI6IGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoeyAuLi5vcHRzIH0pO1xufVxuLy8gQVNOLjEgREVSIGVuY29kaW5nIHV0aWxpdGllc1xuY29uc3QgeyBieXRlc1RvTnVtYmVyQkU6IGIybiwgaGV4VG9CeXRlczogaDJiIH0gPSB1dDtcbmV4cG9ydCBjb25zdCBERVIgPSB7XG4gICAgLy8gYXNuLjEgREVSIGVuY29kaW5nIHV0aWxzXG4gICAgRXJyOiBjbGFzcyBERVJFcnIgZXh0ZW5kcyBFcnJvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yKG0gPSAnJykge1xuICAgICAgICAgICAgc3VwZXIobSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF9wYXJzZUludChkYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgRXJyOiBFIH0gPSBERVI7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA8IDIgfHwgZGF0YVswXSAhPT0gMHgwMilcbiAgICAgICAgICAgIHRocm93IG5ldyBFKCdJbnZhbGlkIHNpZ25hdHVyZSBpbnRlZ2VyIHRhZycpO1xuICAgICAgICBjb25zdCBsZW4gPSBkYXRhWzFdO1xuICAgICAgICBjb25zdCByZXMgPSBkYXRhLnN1YmFycmF5KDIsIGxlbiArIDIpO1xuICAgICAgICBpZiAoIWxlbiB8fCByZXMubGVuZ3RoICE9PSBsZW4pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRSgnSW52YWxpZCBzaWduYXR1cmUgaW50ZWdlcjogd3JvbmcgbGVuZ3RoJyk7XG4gICAgICAgIC8vIGh0dHBzOi8vY3J5cHRvLnN0YWNrZXhjaGFuZ2UuY29tL2EvNTc3MzQgTGVmdG1vc3QgYml0IG9mIGZpcnN0IGJ5dGUgaXMgJ25lZ2F0aXZlJyBmbGFnLFxuICAgICAgICAvLyBzaW5jZSB3ZSBhbHdheXMgdXNlIHBvc2l0aXZlIGludGVnZXJzIGhlcmUuIEl0IG11c3QgYWx3YXlzIGJlIGVtcHR5OlxuICAgICAgICAvLyAtIGFkZCB6ZXJvIGJ5dGUgaWYgZXhpc3RzXG4gICAgICAgIC8vIC0gaWYgbmV4dCBieXRlIGRvZXNuJ3QgaGF2ZSBhIGZsYWcsIGxlYWRpbmcgemVybyBpcyBub3QgYWxsb3dlZCAobWluaW1hbCBlbmNvZGluZylcbiAgICAgICAgaWYgKHJlc1swXSAmIDBiMTAwMDAwMDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRSgnSW52YWxpZCBzaWduYXR1cmUgaW50ZWdlcjogbmVnYXRpdmUnKTtcbiAgICAgICAgaWYgKHJlc1swXSA9PT0gMHgwMCAmJiAhKHJlc1sxXSAmIDBiMTAwMDAwMDApKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEUoJ0ludmFsaWQgc2lnbmF0dXJlIGludGVnZXI6IHVubmVjZXNzYXJ5IGxlYWRpbmcgemVybycpO1xuICAgICAgICByZXR1cm4geyBkOiBiMm4ocmVzKSwgbDogZGF0YS5zdWJhcnJheShsZW4gKyAyKSB9OyAvLyBkIGlzIGRhdGEsIGwgaXMgbGVmdFxuICAgIH0sXG4gICAgdG9TaWcoaGV4KSB7XG4gICAgICAgIC8vIHBhcnNlIERFUiBzaWduYXR1cmVcbiAgICAgICAgY29uc3QgeyBFcnI6IEUgfSA9IERFUjtcbiAgICAgICAgY29uc3QgZGF0YSA9IHR5cGVvZiBoZXggPT09ICdzdHJpbmcnID8gaDJiKGhleCkgOiBoZXg7XG4gICAgICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndWk4YSBleHBlY3RlZCcpO1xuICAgICAgICBsZXQgbCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBpZiAobCA8IDIgfHwgZGF0YVswXSAhPSAweDMwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEUoJ0ludmFsaWQgc2lnbmF0dXJlIHRhZycpO1xuICAgICAgICBpZiAoZGF0YVsxXSAhPT0gbCAtIDIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRSgnSW52YWxpZCBzaWduYXR1cmU6IGluY29ycmVjdCBsZW5ndGgnKTtcbiAgICAgICAgY29uc3QgeyBkOiByLCBsOiBzQnl0ZXMgfSA9IERFUi5fcGFyc2VJbnQoZGF0YS5zdWJhcnJheSgyKSk7XG4gICAgICAgIGNvbnN0IHsgZDogcywgbDogckJ5dGVzTGVmdCB9ID0gREVSLl9wYXJzZUludChzQnl0ZXMpO1xuICAgICAgICBpZiAockJ5dGVzTGVmdC5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRSgnSW52YWxpZCBzaWduYXR1cmU6IGxlZnQgYnl0ZXMgYWZ0ZXIgcGFyc2luZycpO1xuICAgICAgICByZXR1cm4geyByLCBzIH07XG4gICAgfSxcbiAgICBoZXhGcm9tU2lnKHNpZykge1xuICAgICAgICAvLyBBZGQgbGVhZGluZyB6ZXJvIGlmIGZpcnN0IGJ5dGUgaGFzIG5lZ2F0aXZlIGJpdCBlbmFibGVkLiBNb3JlIGRldGFpbHMgaW4gJ19wYXJzZUludCdcbiAgICAgICAgY29uc3Qgc2xpY2UgPSAocykgPT4gKE51bWJlci5wYXJzZUludChzWzBdLCAxNikgJiAwYjEwMDAgPyAnMDAnICsgcyA6IHMpO1xuICAgICAgICBjb25zdCBoID0gKG51bSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGV4ID0gbnVtLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgIHJldHVybiBoZXgubGVuZ3RoICYgMSA/IGAwJHtoZXh9YCA6IGhleDtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcyA9IHNsaWNlKGgoc2lnLnMpKTtcbiAgICAgICAgY29uc3QgciA9IHNsaWNlKGgoc2lnLnIpKTtcbiAgICAgICAgY29uc3Qgc2hsID0gcy5sZW5ndGggLyAyO1xuICAgICAgICBjb25zdCByaGwgPSByLmxlbmd0aCAvIDI7XG4gICAgICAgIGNvbnN0IHNsID0gaChzaGwpO1xuICAgICAgICBjb25zdCBybCA9IGgocmhsKTtcbiAgICAgICAgcmV0dXJuIGAzMCR7aChyaGwgKyBzaGwgKyA0KX0wMiR7cmx9JHtyfTAyJHtzbH0ke3N9YDtcbiAgICB9LFxufTtcbi8vIEJlIGZyaWVuZGx5IHRvIGJhZCBFQ01BU2NyaXB0IHBhcnNlcnMgYnkgbm90IHVzaW5nIGJpZ2ludCBsaXRlcmFsc1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBfMG4gPSBCaWdJbnQoMCksIF8xbiA9IEJpZ0ludCgxKSwgXzJuID0gQmlnSW50KDIpLCBfM24gPSBCaWdJbnQoMyksIF80biA9IEJpZ0ludCg0KTtcbmV4cG9ydCBmdW5jdGlvbiB3ZWllcnN0cmFzc1BvaW50cyhvcHRzKSB7XG4gICAgY29uc3QgQ1VSVkUgPSB2YWxpZGF0ZVBvaW50T3B0cyhvcHRzKTtcbiAgICBjb25zdCB7IEZwIH0gPSBDVVJWRTsgLy8gQWxsIGN1cnZlcyBoYXMgc2FtZSBmaWVsZCAvIGdyb3VwIGxlbmd0aCBhcyBmb3Igbm93LCBidXQgdGhleSBjYW4gZGlmZmVyXG4gICAgY29uc3QgdG9CeXRlcyA9IENVUlZFLnRvQnl0ZXMgfHxcbiAgICAgICAgKChfYywgcG9pbnQsIF9pc0NvbXByZXNzZWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBwb2ludC50b0FmZmluZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHV0LmNvbmNhdEJ5dGVzKFVpbnQ4QXJyYXkuZnJvbShbMHgwNF0pLCBGcC50b0J5dGVzKGEueCksIEZwLnRvQnl0ZXMoYS55KSk7XG4gICAgICAgIH0pO1xuICAgIGNvbnN0IGZyb21CeXRlcyA9IENVUlZFLmZyb21CeXRlcyB8fFxuICAgICAgICAoKGJ5dGVzKSA9PiB7XG4gICAgICAgICAgICAvLyBjb25zdCBoZWFkID0gYnl0ZXNbMF07XG4gICAgICAgICAgICBjb25zdCB0YWlsID0gYnl0ZXMuc3ViYXJyYXkoMSk7XG4gICAgICAgICAgICAvLyBpZiAoaGVhZCAhPT0gMHgwNCkgdGhyb3cgbmV3IEVycm9yKCdPbmx5IG5vbi1jb21wcmVzc2VkIGVuY29kaW5nIGlzIHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgY29uc3QgeCA9IEZwLmZyb21CeXRlcyh0YWlsLnN1YmFycmF5KDAsIEZwLkJZVEVTKSk7XG4gICAgICAgICAgICBjb25zdCB5ID0gRnAuZnJvbUJ5dGVzKHRhaWwuc3ViYXJyYXkoRnAuQllURVMsIDIgKiBGcC5CWVRFUykpO1xuICAgICAgICAgICAgcmV0dXJuIHsgeCwgeSB9O1xuICAgICAgICB9KTtcbiAgICAvKipcbiAgICAgKiB5wrIgPSB4wrMgKyBheCArIGI6IFNob3J0IHdlaWVyc3RyYXNzIGN1cnZlIGZvcm11bGFcbiAgICAgKiBAcmV0dXJucyB5wrJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3ZWllcnN0cmFzc0VxdWF0aW9uKHgpIHtcbiAgICAgICAgY29uc3QgeyBhLCBiIH0gPSBDVVJWRTtcbiAgICAgICAgY29uc3QgeDIgPSBGcC5zcXIoeCk7IC8vIHggKiB4XG4gICAgICAgIGNvbnN0IHgzID0gRnAubXVsKHgyLCB4KTsgLy8geDIgKiB4XG4gICAgICAgIHJldHVybiBGcC5hZGQoRnAuYWRkKHgzLCBGcC5tdWwoeCwgYSkpLCBiKTsgLy8geDMgKyBhICogeCArIGJcbiAgICB9XG4gICAgLy8gVmFsaWRhdGUgd2hldGhlciB0aGUgcGFzc2VkIGN1cnZlIHBhcmFtcyBhcmUgdmFsaWQuXG4gICAgLy8gV2UgY2hlY2sgaWYgY3VydmUgZXF1YXRpb24gd29ya3MgZm9yIGdlbmVyYXRvciBwb2ludC5cbiAgICAvLyBgYXNzZXJ0VmFsaWRpdHkoKWAgd29uJ3Qgd29yazogYGlzVG9yc2lvbkZyZWUoKWAgaXMgbm90IGF2YWlsYWJsZSBhdCB0aGlzIHBvaW50IGluIGJsczEyLTM4MS5cbiAgICAvLyBQcm9qZWN0aXZlUG9pbnQgY2xhc3MgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldC5cbiAgICBpZiAoIUZwLmVxbChGcC5zcXIoQ1VSVkUuR3kpLCB3ZWllcnN0cmFzc0VxdWF0aW9uKENVUlZFLkd4KSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIGdlbmVyYXRvciBwb2ludDogZXF1YXRpb24gbGVmdCAhPSByaWdodCcpO1xuICAgIC8vIFZhbGlkIGdyb3VwIGVsZW1lbnRzIHJlc2lkZSBpbiByYW5nZSAxLi5uLTFcbiAgICBmdW5jdGlvbiBpc1dpdGhpbkN1cnZlT3JkZXIobnVtKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgbnVtID09PSAnYmlnaW50JyAmJiBfMG4gPCBudW0gJiYgbnVtIDwgQ1VSVkUubjtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNzZXJ0R0UobnVtKSB7XG4gICAgICAgIGlmICghaXNXaXRoaW5DdXJ2ZU9yZGVyKG51bSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHZhbGlkIGJpZ2ludDogMCA8IGJpZ2ludCA8IGN1cnZlLm4nKTtcbiAgICB9XG4gICAgLy8gVmFsaWRhdGVzIGlmIHByaXYga2V5IGlzIHZhbGlkIGFuZCBjb252ZXJ0cyBpdCB0byBiaWdpbnQuXG4gICAgLy8gU3VwcG9ydHMgb3B0aW9ucyBhbGxvd2VkUHJpdmF0ZUtleUxlbmd0aHMgYW5kIHdyYXBQcml2YXRlS2V5LlxuICAgIGZ1bmN0aW9uIG5vcm1Qcml2YXRlS2V5VG9TY2FsYXIoa2V5KSB7XG4gICAgICAgIGNvbnN0IHsgYWxsb3dlZFByaXZhdGVLZXlMZW5ndGhzOiBsZW5ndGhzLCBuQnl0ZUxlbmd0aCwgd3JhcFByaXZhdGVLZXksIG4gfSA9IENVUlZFO1xuICAgICAgICBpZiAobGVuZ3RocyAmJiB0eXBlb2Yga2V5ICE9PSAnYmlnaW50Jykge1xuICAgICAgICAgICAgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICAgICAga2V5ID0gdXQuYnl0ZXNUb0hleChrZXkpO1xuICAgICAgICAgICAgLy8gTm9ybWFsaXplIHRvIGhleCBzdHJpbmcsIHBhZC4gRS5nLiBQNTIxIHdvdWxkIG5vcm0gMTMwLTEzMiBjaGFyIGhleCB0byAxMzItY2hhciBieXRlc1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnIHx8ICFsZW5ndGhzLmluY2x1ZGVzKGtleS5sZW5ndGgpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBrZXknKTtcbiAgICAgICAgICAgIGtleSA9IGtleS5wYWRTdGFydChuQnl0ZUxlbmd0aCAqIDIsICcwJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG51bTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG51bSA9XG4gICAgICAgICAgICAgICAgdHlwZW9mIGtleSA9PT0gJ2JpZ2ludCdcbiAgICAgICAgICAgICAgICAgICAgPyBrZXlcbiAgICAgICAgICAgICAgICAgICAgOiB1dC5ieXRlc1RvTnVtYmVyQkUoZW5zdXJlQnl0ZXMoJ3ByaXZhdGUga2V5Jywga2V5LCBuQnl0ZUxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBwcml2YXRlIGtleSBtdXN0IGJlICR7bkJ5dGVMZW5ndGh9IGJ5dGVzLCBoZXggb3IgYmlnaW50LCBub3QgJHt0eXBlb2Yga2V5fWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3cmFwUHJpdmF0ZUtleSlcbiAgICAgICAgICAgIG51bSA9IG1vZC5tb2QobnVtLCBuKTsgLy8gZGlzYWJsZWQgYnkgZGVmYXVsdCwgZW5hYmxlZCBmb3IgQkxTXG4gICAgICAgIGFzc2VydEdFKG51bSk7IC8vIG51bSBpbiByYW5nZSBbMS4uTi0xXVxuICAgICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgICBjb25zdCBwb2ludFByZWNvbXB1dGVzID0gbmV3IE1hcCgpO1xuICAgIGZ1bmN0aW9uIGFzc2VydFByalBvaW50KG90aGVyKSB7XG4gICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgUG9pbnQpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcm9qZWN0aXZlUG9pbnQgZXhwZWN0ZWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvamVjdGl2ZSBQb2ludCB3b3JrcyBpbiAzZCAvIHByb2plY3RpdmUgKGhvbW9nZW5lb3VzKSBjb29yZGluYXRlczogKHgsIHksIHopIOKIiyAoeD14L3osIHk9eS96KVxuICAgICAqIERlZmF1bHQgUG9pbnQgd29ya3MgaW4gMmQgLyBhZmZpbmUgY29vcmRpbmF0ZXM6ICh4LCB5KVxuICAgICAqIFdlJ3JlIGRvaW5nIGNhbGN1bGF0aW9ucyBpbiBwcm9qZWN0aXZlLCBiZWNhdXNlIGl0cyBvcGVyYXRpb25zIGRvbid0IHJlcXVpcmUgY29zdGx5IGludmVyc2lvbi5cbiAgICAgKi9cbiAgICBjbGFzcyBQb2ludCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHB4LCBweSwgcHopIHtcbiAgICAgICAgICAgIHRoaXMucHggPSBweDtcbiAgICAgICAgICAgIHRoaXMucHkgPSBweTtcbiAgICAgICAgICAgIHRoaXMucHogPSBwejtcbiAgICAgICAgICAgIGlmIChweCA9PSBudWxsIHx8ICFGcC5pc1ZhbGlkKHB4KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ggcmVxdWlyZWQnKTtcbiAgICAgICAgICAgIGlmIChweSA9PSBudWxsIHx8ICFGcC5pc1ZhbGlkKHB5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3kgcmVxdWlyZWQnKTtcbiAgICAgICAgICAgIGlmIChweiA9PSBudWxsIHx8ICFGcC5pc1ZhbGlkKHB6KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ogcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEb2VzIG5vdCB2YWxpZGF0ZSBpZiB0aGUgcG9pbnQgaXMgb24tY3VydmUuXG4gICAgICAgIC8vIFVzZSBmcm9tSGV4IGluc3RlYWQsIG9yIGNhbGwgYXNzZXJ0VmFsaWRpdHkoKSBsYXRlci5cbiAgICAgICAgc3RhdGljIGZyb21BZmZpbmUocCkge1xuICAgICAgICAgICAgY29uc3QgeyB4LCB5IH0gPSBwIHx8IHt9O1xuICAgICAgICAgICAgaWYgKCFwIHx8ICFGcC5pc1ZhbGlkKHgpIHx8ICFGcC5pc1ZhbGlkKHkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhZmZpbmUgcG9pbnQnKTtcbiAgICAgICAgICAgIGlmIChwIGluc3RhbmNlb2YgUG9pbnQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9qZWN0aXZlIHBvaW50IG5vdCBhbGxvd2VkJyk7XG4gICAgICAgICAgICBjb25zdCBpczAgPSAoaSkgPT4gRnAuZXFsKGksIEZwLlpFUk8pO1xuICAgICAgICAgICAgLy8gZnJvbUFmZmluZSh4OjAsIHk6MCkgd291bGQgcHJvZHVjZSAoeDowLCB5OjAsIHo6MSksIGJ1dCB3ZSBuZWVkICh4OjAsIHk6MSwgejowKVxuICAgICAgICAgICAgaWYgKGlzMCh4KSAmJiBpczAoeSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFBvaW50LlpFUk87XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KHgsIHksIEZwLk9ORSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHgoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b0FmZmluZSgpLng7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b0FmZmluZSgpLnk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRha2VzIGEgYnVuY2ggb2YgUHJvamVjdGl2ZSBQb2ludHMgYnV0IGV4ZWN1dGVzIG9ubHkgb25lXG4gICAgICAgICAqIGludmVyc2lvbiBvbiBhbGwgb2YgdGhlbS4gSW52ZXJzaW9uIGlzIHZlcnkgc2xvdyBvcGVyYXRpb24sXG4gICAgICAgICAqIHNvIHRoaXMgaW1wcm92ZXMgcGVyZm9ybWFuY2UgbWFzc2l2ZWx5LlxuICAgICAgICAgKiBPcHRpbWl6YXRpb246IGNvbnZlcnRzIGEgbGlzdCBvZiBwcm9qZWN0aXZlIHBvaW50cyB0byBhIGxpc3Qgb2YgaWRlbnRpY2FsIHBvaW50cyB3aXRoIFo9MS5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBub3JtYWxpemVaKHBvaW50cykge1xuICAgICAgICAgICAgY29uc3QgdG9JbnYgPSBGcC5pbnZlcnRCYXRjaChwb2ludHMubWFwKChwKSA9PiBwLnB6KSk7XG4gICAgICAgICAgICByZXR1cm4gcG9pbnRzLm1hcCgocCwgaSkgPT4gcC50b0FmZmluZSh0b0ludltpXSkpLm1hcChQb2ludC5mcm9tQWZmaW5lKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgaGFzaCBzdHJpbmcgb3IgVWludDhBcnJheSB0byBQb2ludC5cbiAgICAgICAgICogQHBhcmFtIGhleCBzaG9ydC9sb25nIEVDRFNBIGhleFxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGZyb21IZXgoaGV4KSB7XG4gICAgICAgICAgICBjb25zdCBQID0gUG9pbnQuZnJvbUFmZmluZShmcm9tQnl0ZXMoZW5zdXJlQnl0ZXMoJ3BvaW50SGV4JywgaGV4KSkpO1xuICAgICAgICAgICAgUC5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICAgICAgcmV0dXJuIFA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTXVsdGlwbGllcyBnZW5lcmF0b3IgcG9pbnQgYnkgcHJpdmF0ZUtleS5cbiAgICAgICAgc3RhdGljIGZyb21Qcml2YXRlS2V5KHByaXZhdGVLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBQb2ludC5CQVNFLm11bHRpcGx5KG5vcm1Qcml2YXRlS2V5VG9TY2FsYXIocHJpdmF0ZUtleSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFwiUHJpdmF0ZSBtZXRob2RcIiwgZG9uJ3QgdXNlIGl0IGRpcmVjdGx5XG4gICAgICAgIF9zZXRXaW5kb3dTaXplKHdpbmRvd1NpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX1dJTkRPV19TSVpFID0gd2luZG93U2l6ZTtcbiAgICAgICAgICAgIHBvaW50UHJlY29tcHV0ZXMuZGVsZXRlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEEgcG9pbnQgb24gY3VydmUgaXMgdmFsaWQgaWYgaXQgY29uZm9ybXMgdG8gZXF1YXRpb24uXG4gICAgICAgIGFzc2VydFZhbGlkaXR5KCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXMwKCkpIHtcbiAgICAgICAgICAgICAgICAvLyAoMCwgMSwgMCkgYWthIFpFUk8gaXMgaW52YWxpZCBpbiBtb3N0IGNvbnRleHRzLlxuICAgICAgICAgICAgICAgIC8vIEluIEJMUywgWkVSTyBjYW4gYmUgc2VyaWFsaXplZCwgc28gd2UgYWxsb3cgaXQuXG4gICAgICAgICAgICAgICAgLy8gKDAsIDAsIDApIGlzIHdyb25nIHJlcHJlc2VudGF0aW9uIG9mIFpFUk8gYW5kIGlzIGFsd2F5cyBpbnZhbGlkLlxuICAgICAgICAgICAgICAgIGlmIChDVVJWRS5hbGxvd0luZmluaXR5UG9pbnQgJiYgIUZwLmlzMCh0aGlzLnB5KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIHBvaW50OiBaRVJPJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTb21lIDNyZC1wYXJ0eSB0ZXN0IHZlY3RvcnMgcmVxdWlyZSBkaWZmZXJlbnQgd29yZGluZyBiZXR3ZWVuIGhlcmUgJiBgZnJvbUNvbXByZXNzZWRIZXhgXG4gICAgICAgICAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXMudG9BZmZpbmUoKTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHgsIHkgYXJlIHZhbGlkIGZpZWxkIGVsZW1lbnRzXG4gICAgICAgICAgICBpZiAoIUZwLmlzVmFsaWQoeCkgfHwgIUZwLmlzVmFsaWQoeSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcG9pbnQ6IHggb3IgeSBub3QgRkUnKTtcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBGcC5zcXIoeSk7IC8vIHnCslxuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSB3ZWllcnN0cmFzc0VxdWF0aW9uKHgpOyAvLyB4wrMgKyBheCArIGJcbiAgICAgICAgICAgIGlmICghRnAuZXFsKGxlZnQsIHJpZ2h0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwb2ludDogZXF1YXRpb24gbGVmdCAhPSByaWdodCcpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzVG9yc2lvbkZyZWUoKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwb2ludDogbm90IGluIHByaW1lLW9yZGVyIHN1Ymdyb3VwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaGFzRXZlblkoKSB7XG4gICAgICAgICAgICBjb25zdCB7IHkgfSA9IHRoaXMudG9BZmZpbmUoKTtcbiAgICAgICAgICAgIGlmIChGcC5pc09kZClcbiAgICAgICAgICAgICAgICByZXR1cm4gIUZwLmlzT2RkKHkpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmllbGQgZG9lc24ndCBzdXBwb3J0IGlzT2RkXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb21wYXJlIG9uZSBwb2ludCB0byBhbm90aGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgICAgICBhc3NlcnRQcmpQb2ludChvdGhlcik7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiBYMSwgcHk6IFkxLCBwejogWjEgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiBYMiwgcHk6IFkyLCBwejogWjIgfSA9IG90aGVyO1xuICAgICAgICAgICAgY29uc3QgVTEgPSBGcC5lcWwoRnAubXVsKFgxLCBaMiksIEZwLm11bChYMiwgWjEpKTtcbiAgICAgICAgICAgIGNvbnN0IFUyID0gRnAuZXFsKEZwLm11bChZMSwgWjIpLCBGcC5tdWwoWTIsIFoxKSk7XG4gICAgICAgICAgICByZXR1cm4gVTEgJiYgVTI7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZsaXBzIHBvaW50IHRvIG9uZSBjb3JyZXNwb25kaW5nIHRvICh4LCAteSkgaW4gQWZmaW5lIGNvb3JkaW5hdGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgbmVnYXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnB4LCBGcC5uZWcodGhpcy5weSksIHRoaXMucHopO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbmVzLUNvc3RlbGxvLUJhdGluYSBleGNlcHRpb24tZnJlZSBkb3VibGluZyBmb3JtdWxhLlxuICAgICAgICAvLyBUaGVyZSBpcyAzMCUgZmFzdGVyIEphY29iaWFuIGZvcm11bGEsIGJ1dCBpdCBpcyBub3QgY29tcGxldGUuXG4gICAgICAgIC8vIGh0dHBzOi8vZXByaW50LmlhY3Iub3JnLzIwMTUvMTA2MCwgYWxnb3JpdGhtIDNcbiAgICAgICAgLy8gQ29zdDogOE0gKyAzUyArIDMqYSArIDIqYjMgKyAxNWFkZC5cbiAgICAgICAgZG91YmxlKCkge1xuICAgICAgICAgICAgY29uc3QgeyBhLCBiIH0gPSBDVVJWRTtcbiAgICAgICAgICAgIGNvbnN0IGIzID0gRnAubXVsKGIsIF8zbik7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiBYMSwgcHk6IFkxLCBwejogWjEgfSA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgWDMgPSBGcC5aRVJPLCBZMyA9IEZwLlpFUk8sIFozID0gRnAuWkVSTzsgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICBsZXQgdDAgPSBGcC5tdWwoWDEsIFgxKTsgLy8gc3RlcCAxXG4gICAgICAgICAgICBsZXQgdDEgPSBGcC5tdWwoWTEsIFkxKTtcbiAgICAgICAgICAgIGxldCB0MiA9IEZwLm11bChaMSwgWjEpO1xuICAgICAgICAgICAgbGV0IHQzID0gRnAubXVsKFgxLCBZMSk7XG4gICAgICAgICAgICB0MyA9IEZwLmFkZCh0MywgdDMpOyAvLyBzdGVwIDVcbiAgICAgICAgICAgIFozID0gRnAubXVsKFgxLCBaMSk7XG4gICAgICAgICAgICBaMyA9IEZwLmFkZChaMywgWjMpO1xuICAgICAgICAgICAgWDMgPSBGcC5tdWwoYSwgWjMpO1xuICAgICAgICAgICAgWTMgPSBGcC5tdWwoYjMsIHQyKTtcbiAgICAgICAgICAgIFkzID0gRnAuYWRkKFgzLCBZMyk7IC8vIHN0ZXAgMTBcbiAgICAgICAgICAgIFgzID0gRnAuc3ViKHQxLCBZMyk7XG4gICAgICAgICAgICBZMyA9IEZwLmFkZCh0MSwgWTMpO1xuICAgICAgICAgICAgWTMgPSBGcC5tdWwoWDMsIFkzKTtcbiAgICAgICAgICAgIFgzID0gRnAubXVsKHQzLCBYMyk7XG4gICAgICAgICAgICBaMyA9IEZwLm11bChiMywgWjMpOyAvLyBzdGVwIDE1XG4gICAgICAgICAgICB0MiA9IEZwLm11bChhLCB0Mik7XG4gICAgICAgICAgICB0MyA9IEZwLnN1Yih0MCwgdDIpO1xuICAgICAgICAgICAgdDMgPSBGcC5tdWwoYSwgdDMpO1xuICAgICAgICAgICAgdDMgPSBGcC5hZGQodDMsIFozKTtcbiAgICAgICAgICAgIFozID0gRnAuYWRkKHQwLCB0MCk7IC8vIHN0ZXAgMjBcbiAgICAgICAgICAgIHQwID0gRnAuYWRkKFozLCB0MCk7XG4gICAgICAgICAgICB0MCA9IEZwLmFkZCh0MCwgdDIpO1xuICAgICAgICAgICAgdDAgPSBGcC5tdWwodDAsIHQzKTtcbiAgICAgICAgICAgIFkzID0gRnAuYWRkKFkzLCB0MCk7XG4gICAgICAgICAgICB0MiA9IEZwLm11bChZMSwgWjEpOyAvLyBzdGVwIDI1XG4gICAgICAgICAgICB0MiA9IEZwLmFkZCh0MiwgdDIpO1xuICAgICAgICAgICAgdDAgPSBGcC5tdWwodDIsIHQzKTtcbiAgICAgICAgICAgIFgzID0gRnAuc3ViKFgzLCB0MCk7XG4gICAgICAgICAgICBaMyA9IEZwLm11bCh0MiwgdDEpO1xuICAgICAgICAgICAgWjMgPSBGcC5hZGQoWjMsIFozKTsgLy8gc3RlcCAzMFxuICAgICAgICAgICAgWjMgPSBGcC5hZGQoWjMsIFozKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9pbnQoWDMsIFkzLCBaMyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVuZXMtQ29zdGVsbG8tQmF0aW5hIGV4Y2VwdGlvbi1mcmVlIGFkZGl0aW9uIGZvcm11bGEuXG4gICAgICAgIC8vIFRoZXJlIGlzIDMwJSBmYXN0ZXIgSmFjb2JpYW4gZm9ybXVsYSwgYnV0IGl0IGlzIG5vdCBjb21wbGV0ZS5cbiAgICAgICAgLy8gaHR0cHM6Ly9lcHJpbnQuaWFjci5vcmcvMjAxNS8xMDYwLCBhbGdvcml0aG0gMVxuICAgICAgICAvLyBDb3N0OiAxMk0gKyAwUyArIDMqYSArIDMqYjMgKyAyM2FkZC5cbiAgICAgICAgYWRkKG90aGVyKSB7XG4gICAgICAgICAgICBhc3NlcnRQcmpQb2ludChvdGhlcik7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiBYMSwgcHk6IFkxLCBwejogWjEgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiBYMiwgcHk6IFkyLCBwejogWjIgfSA9IG90aGVyO1xuICAgICAgICAgICAgbGV0IFgzID0gRnAuWkVSTywgWTMgPSBGcC5aRVJPLCBaMyA9IEZwLlpFUk87IC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgYSA9IENVUlZFLmE7XG4gICAgICAgICAgICBjb25zdCBiMyA9IEZwLm11bChDVVJWRS5iLCBfM24pO1xuICAgICAgICAgICAgbGV0IHQwID0gRnAubXVsKFgxLCBYMik7IC8vIHN0ZXAgMVxuICAgICAgICAgICAgbGV0IHQxID0gRnAubXVsKFkxLCBZMik7XG4gICAgICAgICAgICBsZXQgdDIgPSBGcC5tdWwoWjEsIFoyKTtcbiAgICAgICAgICAgIGxldCB0MyA9IEZwLmFkZChYMSwgWTEpO1xuICAgICAgICAgICAgbGV0IHQ0ID0gRnAuYWRkKFgyLCBZMik7IC8vIHN0ZXAgNVxuICAgICAgICAgICAgdDMgPSBGcC5tdWwodDMsIHQ0KTtcbiAgICAgICAgICAgIHQ0ID0gRnAuYWRkKHQwLCB0MSk7XG4gICAgICAgICAgICB0MyA9IEZwLnN1Yih0MywgdDQpO1xuICAgICAgICAgICAgdDQgPSBGcC5hZGQoWDEsIFoxKTtcbiAgICAgICAgICAgIGxldCB0NSA9IEZwLmFkZChYMiwgWjIpOyAvLyBzdGVwIDEwXG4gICAgICAgICAgICB0NCA9IEZwLm11bCh0NCwgdDUpO1xuICAgICAgICAgICAgdDUgPSBGcC5hZGQodDAsIHQyKTtcbiAgICAgICAgICAgIHQ0ID0gRnAuc3ViKHQ0LCB0NSk7XG4gICAgICAgICAgICB0NSA9IEZwLmFkZChZMSwgWjEpO1xuICAgICAgICAgICAgWDMgPSBGcC5hZGQoWTIsIFoyKTsgLy8gc3RlcCAxNVxuICAgICAgICAgICAgdDUgPSBGcC5tdWwodDUsIFgzKTtcbiAgICAgICAgICAgIFgzID0gRnAuYWRkKHQxLCB0Mik7XG4gICAgICAgICAgICB0NSA9IEZwLnN1Yih0NSwgWDMpO1xuICAgICAgICAgICAgWjMgPSBGcC5tdWwoYSwgdDQpO1xuICAgICAgICAgICAgWDMgPSBGcC5tdWwoYjMsIHQyKTsgLy8gc3RlcCAyMFxuICAgICAgICAgICAgWjMgPSBGcC5hZGQoWDMsIFozKTtcbiAgICAgICAgICAgIFgzID0gRnAuc3ViKHQxLCBaMyk7XG4gICAgICAgICAgICBaMyA9IEZwLmFkZCh0MSwgWjMpO1xuICAgICAgICAgICAgWTMgPSBGcC5tdWwoWDMsIFozKTtcbiAgICAgICAgICAgIHQxID0gRnAuYWRkKHQwLCB0MCk7IC8vIHN0ZXAgMjVcbiAgICAgICAgICAgIHQxID0gRnAuYWRkKHQxLCB0MCk7XG4gICAgICAgICAgICB0MiA9IEZwLm11bChhLCB0Mik7XG4gICAgICAgICAgICB0NCA9IEZwLm11bChiMywgdDQpO1xuICAgICAgICAgICAgdDEgPSBGcC5hZGQodDEsIHQyKTtcbiAgICAgICAgICAgIHQyID0gRnAuc3ViKHQwLCB0Mik7IC8vIHN0ZXAgMzBcbiAgICAgICAgICAgIHQyID0gRnAubXVsKGEsIHQyKTtcbiAgICAgICAgICAgIHQ0ID0gRnAuYWRkKHQ0LCB0Mik7XG4gICAgICAgICAgICB0MCA9IEZwLm11bCh0MSwgdDQpO1xuICAgICAgICAgICAgWTMgPSBGcC5hZGQoWTMsIHQwKTtcbiAgICAgICAgICAgIHQwID0gRnAubXVsKHQ1LCB0NCk7IC8vIHN0ZXAgMzVcbiAgICAgICAgICAgIFgzID0gRnAubXVsKHQzLCBYMyk7XG4gICAgICAgICAgICBYMyA9IEZwLnN1YihYMywgdDApO1xuICAgICAgICAgICAgdDAgPSBGcC5tdWwodDMsIHQxKTtcbiAgICAgICAgICAgIFozID0gRnAubXVsKHQ1LCBaMyk7XG4gICAgICAgICAgICBaMyA9IEZwLmFkZChaMywgdDApOyAvLyBzdGVwIDQwXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KFgzLCBZMywgWjMpO1xuICAgICAgICB9XG4gICAgICAgIHN1YnRyYWN0KG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQob3RoZXIubmVnYXRlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlzMCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVxdWFscyhQb2ludC5aRVJPKTtcbiAgICAgICAgfVxuICAgICAgICB3TkFGKG4pIHtcbiAgICAgICAgICAgIHJldHVybiB3bmFmLndOQUZDYWNoZWQodGhpcywgcG9pbnRQcmVjb21wdXRlcywgbiwgKGNvbXApID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b0ludiA9IEZwLmludmVydEJhdGNoKGNvbXAubWFwKChwKSA9PiBwLnB6KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXAubWFwKChwLCBpKSA9PiBwLnRvQWZmaW5lKHRvSW52W2ldKSkubWFwKFBvaW50LmZyb21BZmZpbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vbi1jb25zdGFudC10aW1lIG11bHRpcGxpY2F0aW9uLiBVc2VzIGRvdWJsZS1hbmQtYWRkIGFsZ29yaXRobS5cbiAgICAgICAgICogSXQncyBmYXN0ZXIsIGJ1dCBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4geW91IGRvbid0IGNhcmUgYWJvdXRcbiAgICAgICAgICogYW4gZXhwb3NlZCBwcml2YXRlIGtleSBlLmcuIHNpZyB2ZXJpZmljYXRpb24sIHdoaWNoIHdvcmtzIG92ZXIgKnB1YmxpYyoga2V5cy5cbiAgICAgICAgICovXG4gICAgICAgIG11bHRpcGx5VW5zYWZlKG4pIHtcbiAgICAgICAgICAgIGNvbnN0IEkgPSBQb2ludC5aRVJPO1xuICAgICAgICAgICAgaWYgKG4gPT09IF8wbilcbiAgICAgICAgICAgICAgICByZXR1cm4gSTtcbiAgICAgICAgICAgIGFzc2VydEdFKG4pOyAvLyBXaWxsIHRocm93IG9uIDBcbiAgICAgICAgICAgIGlmIChuID09PSBfMW4pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGVuZG8gfSA9IENVUlZFO1xuICAgICAgICAgICAgaWYgKCFlbmRvKVxuICAgICAgICAgICAgICAgIHJldHVybiB3bmFmLnVuc2FmZUxhZGRlcih0aGlzLCBuKTtcbiAgICAgICAgICAgIC8vIEFwcGx5IGVuZG9tb3JwaGlzbVxuICAgICAgICAgICAgbGV0IHsgazFuZWcsIGsxLCBrMm5lZywgazIgfSA9IGVuZG8uc3BsaXRTY2FsYXIobik7XG4gICAgICAgICAgICBsZXQgazFwID0gSTtcbiAgICAgICAgICAgIGxldCBrMnAgPSBJO1xuICAgICAgICAgICAgbGV0IGQgPSB0aGlzO1xuICAgICAgICAgICAgd2hpbGUgKGsxID4gXzBuIHx8IGsyID4gXzBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGsxICYgXzFuKVxuICAgICAgICAgICAgICAgICAgICBrMXAgPSBrMXAuYWRkKGQpO1xuICAgICAgICAgICAgICAgIGlmIChrMiAmIF8xbilcbiAgICAgICAgICAgICAgICAgICAgazJwID0gazJwLmFkZChkKTtcbiAgICAgICAgICAgICAgICBkID0gZC5kb3VibGUoKTtcbiAgICAgICAgICAgICAgICBrMSA+Pj0gXzFuO1xuICAgICAgICAgICAgICAgIGsyID4+PSBfMW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoazFuZWcpXG4gICAgICAgICAgICAgICAgazFwID0gazFwLm5lZ2F0ZSgpO1xuICAgICAgICAgICAgaWYgKGsybmVnKVxuICAgICAgICAgICAgICAgIGsycCA9IGsycC5uZWdhdGUoKTtcbiAgICAgICAgICAgIGsycCA9IG5ldyBQb2ludChGcC5tdWwoazJwLnB4LCBlbmRvLmJldGEpLCBrMnAucHksIGsycC5weik7XG4gICAgICAgICAgICByZXR1cm4gazFwLmFkZChrMnApO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdGFudCB0aW1lIG11bHRpcGxpY2F0aW9uLlxuICAgICAgICAgKiBVc2VzIHdOQUYgbWV0aG9kLiBXaW5kb3dlZCBtZXRob2QgbWF5IGJlIDEwJSBmYXN0ZXIsXG4gICAgICAgICAqIGJ1dCB0YWtlcyAyeCBsb25nZXIgdG8gZ2VuZXJhdGUgYW5kIGNvbnN1bWVzIDJ4IG1lbW9yeS5cbiAgICAgICAgICogVXNlcyBwcmVjb21wdXRlcyB3aGVuIGF2YWlsYWJsZS5cbiAgICAgICAgICogVXNlcyBlbmRvbW9ycGhpc20gZm9yIEtvYmxpdHogY3VydmVzLlxuICAgICAgICAgKiBAcGFyYW0gc2NhbGFyIGJ5IHdoaWNoIHRoZSBwb2ludCB3b3VsZCBiZSBtdWx0aXBsaWVkXG4gICAgICAgICAqIEByZXR1cm5zIE5ldyBwb2ludFxuICAgICAgICAgKi9cbiAgICAgICAgbXVsdGlwbHkoc2NhbGFyKSB7XG4gICAgICAgICAgICBhc3NlcnRHRShzY2FsYXIpO1xuICAgICAgICAgICAgbGV0IG4gPSBzY2FsYXI7XG4gICAgICAgICAgICBsZXQgcG9pbnQsIGZha2U7IC8vIEZha2UgcG9pbnQgaXMgdXNlZCB0byBjb25zdC10aW1lIG11bHRcbiAgICAgICAgICAgIGNvbnN0IHsgZW5kbyB9ID0gQ1VSVkU7XG4gICAgICAgICAgICBpZiAoZW5kbykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgazFuZWcsIGsxLCBrMm5lZywgazIgfSA9IGVuZG8uc3BsaXRTY2FsYXIobik7XG4gICAgICAgICAgICAgICAgbGV0IHsgcDogazFwLCBmOiBmMXAgfSA9IHRoaXMud05BRihrMSk7XG4gICAgICAgICAgICAgICAgbGV0IHsgcDogazJwLCBmOiBmMnAgfSA9IHRoaXMud05BRihrMik7XG4gICAgICAgICAgICAgICAgazFwID0gd25hZi5jb25zdFRpbWVOZWdhdGUoazFuZWcsIGsxcCk7XG4gICAgICAgICAgICAgICAgazJwID0gd25hZi5jb25zdFRpbWVOZWdhdGUoazJuZWcsIGsycCk7XG4gICAgICAgICAgICAgICAgazJwID0gbmV3IFBvaW50KEZwLm11bChrMnAucHgsIGVuZG8uYmV0YSksIGsycC5weSwgazJwLnB6KTtcbiAgICAgICAgICAgICAgICBwb2ludCA9IGsxcC5hZGQoazJwKTtcbiAgICAgICAgICAgICAgICBmYWtlID0gZjFwLmFkZChmMnApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBwLCBmIH0gPSB0aGlzLndOQUYobik7XG4gICAgICAgICAgICAgICAgcG9pbnQgPSBwO1xuICAgICAgICAgICAgICAgIGZha2UgPSBmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTm9ybWFsaXplIGB6YCBmb3IgYm90aCBwb2ludHMsIGJ1dCByZXR1cm4gb25seSByZWFsIG9uZVxuICAgICAgICAgICAgcmV0dXJuIFBvaW50Lm5vcm1hbGl6ZVooW3BvaW50LCBmYWtlXSlbMF07XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVmZmljaWVudGx5IGNhbGN1bGF0ZSBgYVAgKyBiUWAuIFVuc2FmZSwgY2FuIGV4cG9zZSBwcml2YXRlIGtleSwgaWYgdXNlZCBpbmNvcnJlY3RseS5cbiAgICAgICAgICogTm90IHVzaW5nIFN0cmF1c3MtU2hhbWlyIHRyaWNrOiBwcmVjb21wdXRhdGlvbiB0YWJsZXMgYXJlIGZhc3Rlci5cbiAgICAgICAgICogVGhlIHRyaWNrIGNvdWxkIGJlIHVzZWZ1bCBpZiBib3RoIFAgYW5kIFEgYXJlIG5vdCBHIChub3QgaW4gb3VyIGNhc2UpLlxuICAgICAgICAgKiBAcmV0dXJucyBub24temVybyBhZmZpbmUgcG9pbnRcbiAgICAgICAgICovXG4gICAgICAgIG11bHRpcGx5QW5kQWRkVW5zYWZlKFEsIGEsIGIpIHtcbiAgICAgICAgICAgIGNvbnN0IEcgPSBQb2ludC5CQVNFOyAvLyBObyBTdHJhdXNzLVNoYW1pciB0cmljazogd2UgaGF2ZSAxMCUgZmFzdGVyIEcgcHJlY29tcHV0ZXNcbiAgICAgICAgICAgIGNvbnN0IG11bCA9IChQLCBhIC8vIFNlbGVjdCBmYXN0ZXIgbXVsdGlwbHkoKSBtZXRob2RcbiAgICAgICAgICAgICkgPT4gKGEgPT09IF8wbiB8fCBhID09PSBfMW4gfHwgIVAuZXF1YWxzKEcpID8gUC5tdWx0aXBseVVuc2FmZShhKSA6IFAubXVsdGlwbHkoYSkpO1xuICAgICAgICAgICAgY29uc3Qgc3VtID0gbXVsKHRoaXMsIGEpLmFkZChtdWwoUSwgYikpO1xuICAgICAgICAgICAgcmV0dXJuIHN1bS5pczAoKSA/IHVuZGVmaW5lZCA6IHN1bTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0cyBQcm9qZWN0aXZlIHBvaW50IHRvIGFmZmluZSAoeCwgeSkgY29vcmRpbmF0ZXMuXG4gICAgICAgIC8vIENhbiBhY2NlcHQgcHJlY29tcHV0ZWQgWl4tMSAtIGZvciBleGFtcGxlLCBmcm9tIGludmVydEJhdGNoLlxuICAgICAgICAvLyAoeCwgeSwgeikg4oiLICh4PXgveiwgeT15L3opXG4gICAgICAgIHRvQWZmaW5lKGl6KSB7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiB4LCBweTogeSwgcHo6IHogfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCBpczAgPSB0aGlzLmlzMCgpO1xuICAgICAgICAgICAgLy8gSWYgaW52WiB3YXMgMCwgd2UgcmV0dXJuIHplcm8gcG9pbnQuIEhvd2V2ZXIgd2Ugc3RpbGwgd2FudCB0byBleGVjdXRlXG4gICAgICAgICAgICAvLyBhbGwgb3BlcmF0aW9ucywgc28gd2UgcmVwbGFjZSBpbnZaIHdpdGggYSByYW5kb20gbnVtYmVyLCAxLlxuICAgICAgICAgICAgaWYgKGl6ID09IG51bGwpXG4gICAgICAgICAgICAgICAgaXogPSBpczAgPyBGcC5PTkUgOiBGcC5pbnYoeik7XG4gICAgICAgICAgICBjb25zdCBheCA9IEZwLm11bCh4LCBpeik7XG4gICAgICAgICAgICBjb25zdCBheSA9IEZwLm11bCh5LCBpeik7XG4gICAgICAgICAgICBjb25zdCB6eiA9IEZwLm11bCh6LCBpeik7XG4gICAgICAgICAgICBpZiAoaXMwKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IEZwLlpFUk8sIHk6IEZwLlpFUk8gfTtcbiAgICAgICAgICAgIGlmICghRnAuZXFsKHp6LCBGcC5PTkUpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52WiB3YXMgaW52YWxpZCcpO1xuICAgICAgICAgICAgcmV0dXJuIHsgeDogYXgsIHk6IGF5IH07XG4gICAgICAgIH1cbiAgICAgICAgaXNUb3JzaW9uRnJlZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaDogY29mYWN0b3IsIGlzVG9yc2lvbkZyZWUgfSA9IENVUlZFO1xuICAgICAgICAgICAgaWYgKGNvZmFjdG9yID09PSBfMW4pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIE5vIHN1Ymdyb3VwcywgYWx3YXlzIHRvcnNpb24tZnJlZVxuICAgICAgICAgICAgaWYgKGlzVG9yc2lvbkZyZWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVG9yc2lvbkZyZWUoUG9pbnQsIHRoaXMpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpc1RvcnNpb25GcmVlKCkgaGFzIG5vdCBiZWVuIGRlY2xhcmVkIGZvciB0aGUgZWxsaXB0aWMgY3VydmUnKTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhckNvZmFjdG9yKCkge1xuICAgICAgICAgICAgY29uc3QgeyBoOiBjb2ZhY3RvciwgY2xlYXJDb2ZhY3RvciB9ID0gQ1VSVkU7XG4gICAgICAgICAgICBpZiAoY29mYWN0b3IgPT09IF8xbilcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsgLy8gRmFzdC1wYXRoXG4gICAgICAgICAgICBpZiAoY2xlYXJDb2ZhY3RvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xlYXJDb2ZhY3RvcihQb2ludCwgdGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseVVuc2FmZShDVVJWRS5oKTtcbiAgICAgICAgfVxuICAgICAgICB0b1Jhd0J5dGVzKGlzQ29tcHJlc3NlZCA9IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgICAgIHJldHVybiB0b0J5dGVzKFBvaW50LCB0aGlzLCBpc0NvbXByZXNzZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRvSGV4KGlzQ29tcHJlc3NlZCA9IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiB1dC5ieXRlc1RvSGV4KHRoaXMudG9SYXdCeXRlcyhpc0NvbXByZXNzZWQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBQb2ludC5CQVNFID0gbmV3IFBvaW50KENVUlZFLkd4LCBDVVJWRS5HeSwgRnAuT05FKTtcbiAgICBQb2ludC5aRVJPID0gbmV3IFBvaW50KEZwLlpFUk8sIEZwLk9ORSwgRnAuWkVSTyk7XG4gICAgY29uc3QgX2JpdHMgPSBDVVJWRS5uQml0TGVuZ3RoO1xuICAgIGNvbnN0IHduYWYgPSB3TkFGKFBvaW50LCBDVVJWRS5lbmRvID8gTWF0aC5jZWlsKF9iaXRzIC8gMikgOiBfYml0cyk7XG4gICAgLy8gVmFsaWRhdGUgaWYgZ2VuZXJhdG9yIHBvaW50IGlzIG9uIGN1cnZlXG4gICAgcmV0dXJuIHtcbiAgICAgICAgQ1VSVkUsXG4gICAgICAgIFByb2plY3RpdmVQb2ludDogUG9pbnQsXG4gICAgICAgIG5vcm1Qcml2YXRlS2V5VG9TY2FsYXIsXG4gICAgICAgIHdlaWVyc3RyYXNzRXF1YXRpb24sXG4gICAgICAgIGlzV2l0aGluQ3VydmVPcmRlcixcbiAgICB9O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVPcHRzKGN1cnZlKSB7XG4gICAgY29uc3Qgb3B0cyA9IHZhbGlkYXRlQmFzaWMoY3VydmUpO1xuICAgIHV0LnZhbGlkYXRlT2JqZWN0KG9wdHMsIHtcbiAgICAgICAgaGFzaDogJ2hhc2gnLFxuICAgICAgICBobWFjOiAnZnVuY3Rpb24nLFxuICAgICAgICByYW5kb21CeXRlczogJ2Z1bmN0aW9uJyxcbiAgICB9LCB7XG4gICAgICAgIGJpdHMyaW50OiAnZnVuY3Rpb24nLFxuICAgICAgICBiaXRzMmludF9tb2ROOiAnZnVuY3Rpb24nLFxuICAgICAgICBsb3dTOiAnYm9vbGVhbicsXG4gICAgfSk7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoeyBsb3dTOiB0cnVlLCAuLi5vcHRzIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdlaWVyc3RyYXNzKGN1cnZlRGVmKSB7XG4gICAgY29uc3QgQ1VSVkUgPSB2YWxpZGF0ZU9wdHMoY3VydmVEZWYpO1xuICAgIGNvbnN0IHsgRnAsIG46IENVUlZFX09SREVSIH0gPSBDVVJWRTtcbiAgICBjb25zdCBjb21wcmVzc2VkTGVuID0gRnAuQllURVMgKyAxOyAvLyBlLmcuIDMzIGZvciAzMlxuICAgIGNvbnN0IHVuY29tcHJlc3NlZExlbiA9IDIgKiBGcC5CWVRFUyArIDE7IC8vIGUuZy4gNjUgZm9yIDMyXG4gICAgZnVuY3Rpb24gaXNWYWxpZEZpZWxkRWxlbWVudChudW0pIHtcbiAgICAgICAgcmV0dXJuIF8wbiA8IG51bSAmJiBudW0gPCBGcC5PUkRFUjsgLy8gMCBpcyBiYW5uZWQgc2luY2UgaXQncyBub3QgaW52ZXJ0aWJsZSBGRVxuICAgIH1cbiAgICBmdW5jdGlvbiBtb2ROKGEpIHtcbiAgICAgICAgcmV0dXJuIG1vZC5tb2QoYSwgQ1VSVkVfT1JERVIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbnZOKGEpIHtcbiAgICAgICAgcmV0dXJuIG1vZC5pbnZlcnQoYSwgQ1VSVkVfT1JERVIpO1xuICAgIH1cbiAgICBjb25zdCB7IFByb2plY3RpdmVQb2ludDogUG9pbnQsIG5vcm1Qcml2YXRlS2V5VG9TY2FsYXIsIHdlaWVyc3RyYXNzRXF1YXRpb24sIGlzV2l0aGluQ3VydmVPcmRlciwgfSA9IHdlaWVyc3RyYXNzUG9pbnRzKHtcbiAgICAgICAgLi4uQ1VSVkUsXG4gICAgICAgIHRvQnl0ZXMoX2MsIHBvaW50LCBpc0NvbXByZXNzZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBwb2ludC50b0FmZmluZSgpO1xuICAgICAgICAgICAgY29uc3QgeCA9IEZwLnRvQnl0ZXMoYS54KTtcbiAgICAgICAgICAgIGNvbnN0IGNhdCA9IHV0LmNvbmNhdEJ5dGVzO1xuICAgICAgICAgICAgaWYgKGlzQ29tcHJlc3NlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYXQoVWludDhBcnJheS5mcm9tKFtwb2ludC5oYXNFdmVuWSgpID8gMHgwMiA6IDB4MDNdKSwgeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2F0KFVpbnQ4QXJyYXkuZnJvbShbMHgwNF0pLCB4LCBGcC50b0J5dGVzKGEueSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmcm9tQnl0ZXMoYnl0ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGJ5dGVzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGhlYWQgPSBieXRlc1swXTtcbiAgICAgICAgICAgIGNvbnN0IHRhaWwgPSBieXRlcy5zdWJhcnJheSgxKTtcbiAgICAgICAgICAgIC8vIHRoaXMuYXNzZXJ0VmFsaWRpdHkoKSBpcyBkb25lIGluc2lkZSBvZiBmcm9tSGV4XG4gICAgICAgICAgICBpZiAobGVuID09PSBjb21wcmVzc2VkTGVuICYmIChoZWFkID09PSAweDAyIHx8IGhlYWQgPT09IDB4MDMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IHV0LmJ5dGVzVG9OdW1iZXJCRSh0YWlsKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWRGaWVsZEVsZW1lbnQoeCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUG9pbnQgaXMgbm90IG9uIGN1cnZlJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgeTIgPSB3ZWllcnN0cmFzc0VxdWF0aW9uKHgpOyAvLyB5wrIgPSB4wrMgKyBheCArIGJcbiAgICAgICAgICAgICAgICBsZXQgeSA9IEZwLnNxcnQoeTIpOyAvLyB5ID0gecKyIF4gKHArMSkvNFxuICAgICAgICAgICAgICAgIGNvbnN0IGlzWU9kZCA9ICh5ICYgXzFuKSA9PT0gXzFuO1xuICAgICAgICAgICAgICAgIC8vIEVDRFNBXG4gICAgICAgICAgICAgICAgY29uc3QgaXNIZWFkT2RkID0gKGhlYWQgJiAxKSA9PT0gMTtcbiAgICAgICAgICAgICAgICBpZiAoaXNIZWFkT2RkICE9PSBpc1lPZGQpXG4gICAgICAgICAgICAgICAgICAgIHkgPSBGcC5uZWcoeSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeCwgeSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobGVuID09PSB1bmNvbXByZXNzZWRMZW4gJiYgaGVhZCA9PT0gMHgwNCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBGcC5mcm9tQnl0ZXModGFpbC5zdWJhcnJheSgwLCBGcC5CWVRFUykpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBGcC5mcm9tQnl0ZXModGFpbC5zdWJhcnJheShGcC5CWVRFUywgMiAqIEZwLkJZVEVTKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeCwgeSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQb2ludCBvZiBsZW5ndGggJHtsZW59IHdhcyBpbnZhbGlkLiBFeHBlY3RlZCAke2NvbXByZXNzZWRMZW59IGNvbXByZXNzZWQgYnl0ZXMgb3IgJHt1bmNvbXByZXNzZWRMZW59IHVuY29tcHJlc3NlZCBieXRlc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IG51bVRvTkJ5dGVTdHIgPSAobnVtKSA9PiB1dC5ieXRlc1RvSGV4KHV0Lm51bWJlclRvQnl0ZXNCRShudW0sIENVUlZFLm5CeXRlTGVuZ3RoKSk7XG4gICAgZnVuY3Rpb24gaXNCaWdnZXJUaGFuSGFsZk9yZGVyKG51bWJlcikge1xuICAgICAgICBjb25zdCBIQUxGID0gQ1VSVkVfT1JERVIgPj4gXzFuO1xuICAgICAgICByZXR1cm4gbnVtYmVyID4gSEFMRjtcbiAgICB9XG4gICAgZnVuY3Rpb24gbm9ybWFsaXplUyhzKSB7XG4gICAgICAgIHJldHVybiBpc0JpZ2dlclRoYW5IYWxmT3JkZXIocykgPyBtb2ROKC1zKSA6IHM7XG4gICAgfVxuICAgIC8vIHNsaWNlIGJ5dGVzIG51bVxuICAgIGNvbnN0IHNsY051bSA9IChiLCBmcm9tLCB0bykgPT4gdXQuYnl0ZXNUb051bWJlckJFKGIuc2xpY2UoZnJvbSwgdG8pKTtcbiAgICAvKipcbiAgICAgKiBFQ0RTQSBzaWduYXR1cmUgd2l0aCBpdHMgKHIsIHMpIHByb3BlcnRpZXMuIFN1cHBvcnRzIERFUiAmIGNvbXBhY3QgcmVwcmVzZW50YXRpb25zLlxuICAgICAqL1xuICAgIGNsYXNzIFNpZ25hdHVyZSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHIsIHMsIHJlY292ZXJ5KSB7XG4gICAgICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICAgICAgdGhpcy5zID0gcztcbiAgICAgICAgICAgIHRoaXMucmVjb3ZlcnkgPSByZWNvdmVyeTtcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwYWlyIChieXRlcyBvZiByLCBieXRlcyBvZiBzKVxuICAgICAgICBzdGF0aWMgZnJvbUNvbXBhY3QoaGV4KSB7XG4gICAgICAgICAgICBjb25zdCBsID0gQ1VSVkUubkJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBoZXggPSBlbnN1cmVCeXRlcygnY29tcGFjdFNpZ25hdHVyZScsIGhleCwgbCAqIDIpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaWduYXR1cmUoc2xjTnVtKGhleCwgMCwgbCksIHNsY051bShoZXgsIGwsIDIgKiBsKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gREVSIGVuY29kZWQgRUNEU0Egc2lnbmF0dXJlXG4gICAgICAgIC8vIGh0dHBzOi8vYml0Y29pbi5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNTc2NDQvd2hhdC1hcmUtdGhlLXBhcnRzLW9mLWEtYml0Y29pbi10cmFuc2FjdGlvbi1pbnB1dC1zY3JpcHRcbiAgICAgICAgc3RhdGljIGZyb21ERVIoaGV4KSB7XG4gICAgICAgICAgICBjb25zdCB7IHIsIHMgfSA9IERFUi50b1NpZyhlbnN1cmVCeXRlcygnREVSJywgaGV4KSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNpZ25hdHVyZShyLCBzKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnRWYWxpZGl0eSgpIHtcbiAgICAgICAgICAgIC8vIGNhbiB1c2UgYXNzZXJ0R0UgaGVyZVxuICAgICAgICAgICAgaWYgKCFpc1dpdGhpbkN1cnZlT3JkZXIodGhpcy5yKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3IgbXVzdCBiZSAwIDwgciA8IENVUlZFLm4nKTtcbiAgICAgICAgICAgIGlmICghaXNXaXRoaW5DdXJ2ZU9yZGVyKHRoaXMucykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzIG11c3QgYmUgMCA8IHMgPCBDVVJWRS5uJyk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkUmVjb3ZlcnlCaXQocmVjb3ZlcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHRoaXMuciwgdGhpcy5zLCByZWNvdmVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVjb3ZlclB1YmxpY0tleShtc2dIYXNoKSB7XG4gICAgICAgICAgICBjb25zdCB7IHIsIHMsIHJlY292ZXJ5OiByZWMgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCBoID0gYml0czJpbnRfbW9kTihlbnN1cmVCeXRlcygnbXNnSGFzaCcsIG1zZ0hhc2gpKTsgLy8gVHJ1bmNhdGUgaGFzaFxuICAgICAgICAgICAgaWYgKHJlYyA9PSBudWxsIHx8ICFbMCwgMSwgMiwgM10uaW5jbHVkZXMocmVjKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlY292ZXJ5IGlkIGludmFsaWQnKTtcbiAgICAgICAgICAgIGNvbnN0IHJhZGogPSByZWMgPT09IDIgfHwgcmVjID09PSAzID8gciArIENVUlZFLm4gOiByO1xuICAgICAgICAgICAgaWYgKHJhZGogPj0gRnAuT1JERVIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWNvdmVyeSBpZCAyIG9yIDMgaW52YWxpZCcpO1xuICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gKHJlYyAmIDEpID09PSAwID8gJzAyJyA6ICcwMyc7XG4gICAgICAgICAgICBjb25zdCBSID0gUG9pbnQuZnJvbUhleChwcmVmaXggKyBudW1Ub05CeXRlU3RyKHJhZGopKTtcbiAgICAgICAgICAgIGNvbnN0IGlyID0gaW52TihyYWRqKTsgLy8gcl4tMVxuICAgICAgICAgICAgY29uc3QgdTEgPSBtb2ROKC1oICogaXIpOyAvLyAtaHJeLTFcbiAgICAgICAgICAgIGNvbnN0IHUyID0gbW9kTihzICogaXIpOyAvLyBzcl4tMVxuICAgICAgICAgICAgY29uc3QgUSA9IFBvaW50LkJBU0UubXVsdGlwbHlBbmRBZGRVbnNhZmUoUiwgdTEsIHUyKTsgLy8gKHNyXi0xKVItKGhyXi0xKUcgPSAtKGhyXi0xKUcgKyAoc3JeLTEpXG4gICAgICAgICAgICBpZiAoIVEpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2ludCBhdCBpbmZpbmlmeScpOyAvLyB1bnNhZmUgaXMgZmluZTogbm8gcHJpdiBkYXRhIGxlYWtlZFxuICAgICAgICAgICAgUS5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICAgICAgcmV0dXJuIFE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2lnbmF0dXJlcyBzaG91bGQgYmUgbG93LXMsIHRvIHByZXZlbnQgbWFsbGVhYmlsaXR5LlxuICAgICAgICBoYXNIaWdoUygpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0JpZ2dlclRoYW5IYWxmT3JkZXIodGhpcy5zKTtcbiAgICAgICAgfVxuICAgICAgICBub3JtYWxpemVTKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzSGlnaFMoKSA/IG5ldyBTaWduYXR1cmUodGhpcy5yLCBtb2ROKC10aGlzLnMpLCB0aGlzLnJlY292ZXJ5KSA6IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gREVSLWVuY29kZWRcbiAgICAgICAgdG9ERVJSYXdCeXRlcygpIHtcbiAgICAgICAgICAgIHJldHVybiB1dC5oZXhUb0J5dGVzKHRoaXMudG9ERVJIZXgoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9ERVJIZXgoKSB7XG4gICAgICAgICAgICByZXR1cm4gREVSLmhleEZyb21TaWcoeyByOiB0aGlzLnIsIHM6IHRoaXMucyB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwYWRkZWQgYnl0ZXMgb2YgciwgdGhlbiBwYWRkZWQgYnl0ZXMgb2Ygc1xuICAgICAgICB0b0NvbXBhY3RSYXdCeXRlcygpIHtcbiAgICAgICAgICAgIHJldHVybiB1dC5oZXhUb0J5dGVzKHRoaXMudG9Db21wYWN0SGV4KCkpO1xuICAgICAgICB9XG4gICAgICAgIHRvQ29tcGFjdEhleCgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1Ub05CeXRlU3RyKHRoaXMucikgKyBudW1Ub05CeXRlU3RyKHRoaXMucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdXRpbHMgPSB7XG4gICAgICAgIGlzVmFsaWRQcml2YXRlS2V5KHByaXZhdGVLZXkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbm9ybVByaXZhdGVLZXlUb1NjYWxhcihwcml2YXRlS2V5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbm9ybVByaXZhdGVLZXlUb1NjYWxhcjogbm9ybVByaXZhdGVLZXlUb1NjYWxhcixcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2VzIGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSBwcml2YXRlIGtleSBmcm9tIHJhbmRvbSBvZiBzaXplXG4gICAgICAgICAqIChncm91cExlbiArIGNlaWwoZ3JvdXBMZW4gLyAyKSkgd2l0aCBtb2R1bG8gYmlhcyBiZWluZyBuZWdsaWdpYmxlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmFuZG9tUHJpdmF0ZUtleTogKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gbW9kLmdldE1pbkhhc2hMZW5ndGgoQ1VSVkUubik7XG4gICAgICAgICAgICByZXR1cm4gbW9kLm1hcEhhc2hUb0ZpZWxkKENVUlZFLnJhbmRvbUJ5dGVzKGxlbmd0aCksIENVUlZFLm4pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBwcmVjb21wdXRlIHRhYmxlIGZvciBhbiBhcmJpdHJhcnkgRUMgcG9pbnQuIE1ha2VzIHBvaW50IFwiY2FjaGVkXCIuXG4gICAgICAgICAqIEFsbG93cyB0byBtYXNzaXZlbHkgc3BlZWQtdXAgYHBvaW50Lm11bHRpcGx5KHNjYWxhcilgLlxuICAgICAgICAgKiBAcmV0dXJucyBjYWNoZWQgcG9pbnRcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY29uc3QgZmFzdCA9IHV0aWxzLnByZWNvbXB1dGUoOCwgUHJvamVjdGl2ZVBvaW50LmZyb21IZXgoc29tZW9uZXNQdWJLZXkpKTtcbiAgICAgICAgICogZmFzdC5tdWx0aXBseShwcml2S2V5KTsgLy8gbXVjaCBmYXN0ZXIgRUNESCBub3dcbiAgICAgICAgICovXG4gICAgICAgIHByZWNvbXB1dGUod2luZG93U2l6ZSA9IDgsIHBvaW50ID0gUG9pbnQuQkFTRSkge1xuICAgICAgICAgICAgcG9pbnQuX3NldFdpbmRvd1NpemUod2luZG93U2l6ZSk7XG4gICAgICAgICAgICBwb2ludC5tdWx0aXBseShCaWdJbnQoMykpOyAvLyAzIGlzIGFyYml0cmFyeSwganVzdCBuZWVkIGFueSBudW1iZXIgaGVyZVxuICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgICAgICB9LFxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgcHVibGljIGtleSBmb3IgYSBwcml2YXRlIGtleS4gQ2hlY2tzIGZvciB2YWxpZGl0eSBvZiB0aGUgcHJpdmF0ZSBrZXkuXG4gICAgICogQHBhcmFtIHByaXZhdGVLZXkgcHJpdmF0ZSBrZXlcbiAgICAgKiBAcGFyYW0gaXNDb21wcmVzc2VkIHdoZXRoZXIgdG8gcmV0dXJuIGNvbXBhY3QgKGRlZmF1bHQpLCBvciBmdWxsIGtleVxuICAgICAqIEByZXR1cm5zIFB1YmxpYyBrZXksIGZ1bGwgd2hlbiBpc0NvbXByZXNzZWQ9ZmFsc2U7IHNob3J0IHdoZW4gaXNDb21wcmVzc2VkPXRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQdWJsaWNLZXkocHJpdmF0ZUtleSwgaXNDb21wcmVzc2VkID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gUG9pbnQuZnJvbVByaXZhdGVLZXkocHJpdmF0ZUtleSkudG9SYXdCeXRlcyhpc0NvbXByZXNzZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBRdWljayBhbmQgZGlydHkgY2hlY2sgZm9yIGl0ZW0gYmVpbmcgcHVibGljIGtleS4gRG9lcyBub3QgdmFsaWRhdGUgaGV4LCBvciBiZWluZyBvbi1jdXJ2ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb2JQdWIoaXRlbSkge1xuICAgICAgICBjb25zdCBhcnIgPSBpdGVtIGluc3RhbmNlb2YgVWludDhBcnJheTtcbiAgICAgICAgY29uc3Qgc3RyID0gdHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnO1xuICAgICAgICBjb25zdCBsZW4gPSAoYXJyIHx8IHN0cikgJiYgaXRlbS5sZW5ndGg7XG4gICAgICAgIGlmIChhcnIpXG4gICAgICAgICAgICByZXR1cm4gbGVuID09PSBjb21wcmVzc2VkTGVuIHx8IGxlbiA9PT0gdW5jb21wcmVzc2VkTGVuO1xuICAgICAgICBpZiAoc3RyKVxuICAgICAgICAgICAgcmV0dXJuIGxlbiA9PT0gMiAqIGNvbXByZXNzZWRMZW4gfHwgbGVuID09PSAyICogdW5jb21wcmVzc2VkTGVuO1xuICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFBvaW50KVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRUNESCAoRWxsaXB0aWMgQ3VydmUgRGlmZmllIEhlbGxtYW4pLlxuICAgICAqIENvbXB1dGVzIHNoYXJlZCBwdWJsaWMga2V5IGZyb20gcHJpdmF0ZSBrZXkgYW5kIHB1YmxpYyBrZXkuXG4gICAgICogQ2hlY2tzOiAxKSBwcml2YXRlIGtleSB2YWxpZGl0eSAyKSBzaGFyZWQga2V5IGlzIG9uLWN1cnZlLlxuICAgICAqIERvZXMgTk9UIGhhc2ggdGhlIHJlc3VsdC5cbiAgICAgKiBAcGFyYW0gcHJpdmF0ZUEgcHJpdmF0ZSBrZXlcbiAgICAgKiBAcGFyYW0gcHVibGljQiBkaWZmZXJlbnQgcHVibGljIGtleVxuICAgICAqIEBwYXJhbSBpc0NvbXByZXNzZWQgd2hldGhlciB0byByZXR1cm4gY29tcGFjdCAoZGVmYXVsdCksIG9yIGZ1bGwga2V5XG4gICAgICogQHJldHVybnMgc2hhcmVkIHB1YmxpYyBrZXlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRTaGFyZWRTZWNyZXQocHJpdmF0ZUEsIHB1YmxpY0IsIGlzQ29tcHJlc3NlZCA9IHRydWUpIHtcbiAgICAgICAgaWYgKGlzUHJvYlB1Yihwcml2YXRlQSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZyBtdXN0IGJlIHByaXZhdGUga2V5Jyk7XG4gICAgICAgIGlmICghaXNQcm9iUHViKHB1YmxpY0IpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZWNvbmQgYXJnIG11c3QgYmUgcHVibGljIGtleScpO1xuICAgICAgICBjb25zdCBiID0gUG9pbnQuZnJvbUhleChwdWJsaWNCKTsgLy8gY2hlY2sgZm9yIGJlaW5nIG9uLWN1cnZlXG4gICAgICAgIHJldHVybiBiLm11bHRpcGx5KG5vcm1Qcml2YXRlS2V5VG9TY2FsYXIocHJpdmF0ZUEpKS50b1Jhd0J5dGVzKGlzQ29tcHJlc3NlZCk7XG4gICAgfVxuICAgIC8vIFJGQzY5Nzk6IGVuc3VyZSBFQ0RTQSBtc2cgaXMgWCBieXRlcyBhbmQgPCBOLiBSRkMgc3VnZ2VzdHMgb3B0aW9uYWwgdHJ1bmNhdGluZyB2aWEgYml0czJvY3RldHMuXG4gICAgLy8gRklQUyAxODYtNCA0LjYgc3VnZ2VzdHMgdGhlIGxlZnRtb3N0IG1pbihuQml0TGVuLCBvdXRMZW4pIGJpdHMsIHdoaWNoIG1hdGNoZXMgYml0czJpbnQuXG4gICAgLy8gYml0czJpbnQgY2FuIHByb2R1Y2UgcmVzPk4sIHdlIGNhbiBkbyBtb2QocmVzLCBOKSBzaW5jZSB0aGUgYml0TGVuIGlzIHRoZSBzYW1lLlxuICAgIC8vIGludDJvY3RldHMgY2FuJ3QgYmUgdXNlZDsgcGFkcyBzbWFsbCBtc2dzIHdpdGggMDogdW5hY2NlcHRhdGJsZSBmb3IgdHJ1bmMgYXMgcGVyIFJGQyB2ZWN0b3JzXG4gICAgY29uc3QgYml0czJpbnQgPSBDVVJWRS5iaXRzMmludCB8fFxuICAgICAgICBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICAgICAgICAgIC8vIEZvciBjdXJ2ZXMgd2l0aCBuQml0TGVuZ3RoICUgOCAhPT0gMDogYml0czJvY3RldHMoYml0czJvY3RldHMobSkpICE9PSBiaXRzMm9jdGV0cyhtKVxuICAgICAgICAgICAgLy8gZm9yIHNvbWUgY2FzZXMsIHNpbmNlIGJ5dGVzLmxlbmd0aCAqIDggaXMgbm90IGFjdHVhbCBiaXRMZW5ndGguXG4gICAgICAgICAgICBjb25zdCBudW0gPSB1dC5ieXRlc1RvTnVtYmVyQkUoYnl0ZXMpOyAvLyBjaGVjayBmb3IgPT0gdTggZG9uZSBoZXJlXG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IGJ5dGVzLmxlbmd0aCAqIDggLSBDVVJWRS5uQml0TGVuZ3RoOyAvLyB0cnVuY2F0ZSB0byBuQml0TGVuZ3RoIGxlZnRtb3N0IGJpdHNcbiAgICAgICAgICAgIHJldHVybiBkZWx0YSA+IDAgPyBudW0gPj4gQmlnSW50KGRlbHRhKSA6IG51bTtcbiAgICAgICAgfTtcbiAgICBjb25zdCBiaXRzMmludF9tb2ROID0gQ1VSVkUuYml0czJpbnRfbW9kTiB8fFxuICAgICAgICBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2ROKGJpdHMyaW50KGJ5dGVzKSk7IC8vIGNhbid0IHVzZSBieXRlc1RvTnVtYmVyQkUgaGVyZVxuICAgICAgICB9O1xuICAgIC8vIE5PVEU6IHBhZHMgb3V0cHV0IHdpdGggemVybyBhcyBwZXIgc3BlY1xuICAgIGNvbnN0IE9SREVSX01BU0sgPSB1dC5iaXRNYXNrKENVUlZFLm5CaXRMZW5ndGgpO1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRvIGJ5dGVzLiBDaGVja3MgaWYgbnVtIGluIGBbMC4uT1JERVJfTUFTSy0xXWAgZS5nLjogYFswLi4yXjI1Ni0xXWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW50Mm9jdGV0cyhudW0pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBudW0gIT09ICdiaWdpbnQnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiaWdpbnQgZXhwZWN0ZWQnKTtcbiAgICAgICAgaWYgKCEoXzBuIDw9IG51bSAmJiBudW0gPCBPUkRFUl9NQVNLKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYmlnaW50IGV4cGVjdGVkIDwgMl4ke0NVUlZFLm5CaXRMZW5ndGh9YCk7XG4gICAgICAgIC8vIHdvcmtzIHdpdGggb3JkZXIsIGNhbiBoYXZlIGRpZmZlcmVudCBzaXplIHRoYW4gbnVtVG9GaWVsZCFcbiAgICAgICAgcmV0dXJuIHV0Lm51bWJlclRvQnl0ZXNCRShudW0sIENVUlZFLm5CeXRlTGVuZ3RoKTtcbiAgICB9XG4gICAgLy8gU3RlcHMgQSwgRCBvZiBSRkM2OTc5IDMuMlxuICAgIC8vIENyZWF0ZXMgUkZDNjk3OSBzZWVkOyBjb252ZXJ0cyBtc2cvcHJpdktleSB0byBudW1iZXJzLlxuICAgIC8vIFVzZWQgb25seSBpbiBzaWduLCBub3QgaW4gdmVyaWZ5LlxuICAgIC8vIE5PVEU6IHdlIGNhbm5vdCBhc3N1bWUgaGVyZSB0aGF0IG1zZ0hhc2ggaGFzIHNhbWUgYW1vdW50IG9mIGJ5dGVzIGFzIGN1cnZlIG9yZGVyLCB0aGlzIHdpbGwgYmUgd3JvbmcgYXQgbGVhc3QgZm9yIFA1MjEuXG4gICAgLy8gQWxzbyBpdCBjYW4gYmUgYmlnZ2VyIGZvciBQMjI0ICsgU0hBMjU2XG4gICAgZnVuY3Rpb24gcHJlcFNpZyhtc2dIYXNoLCBwcml2YXRlS2V5LCBvcHRzID0gZGVmYXVsdFNpZ09wdHMpIHtcbiAgICAgICAgaWYgKFsncmVjb3ZlcmVkJywgJ2Nhbm9uaWNhbCddLnNvbWUoKGspID0+IGsgaW4gb3B0cykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NpZ24oKSBsZWdhY3kgb3B0aW9ucyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgIGNvbnN0IHsgaGFzaCwgcmFuZG9tQnl0ZXMgfSA9IENVUlZFO1xuICAgICAgICBsZXQgeyBsb3dTLCBwcmVoYXNoLCBleHRyYUVudHJvcHk6IGVudCB9ID0gb3B0czsgLy8gZ2VuZXJhdGVzIGxvdy1zIHNpZ3MgYnkgZGVmYXVsdFxuICAgICAgICBpZiAobG93UyA9PSBudWxsKVxuICAgICAgICAgICAgbG93UyA9IHRydWU7IC8vIFJGQzY5NzkgMy4yOiB3ZSBza2lwIHN0ZXAgQSwgYmVjYXVzZSB3ZSBhbHJlYWR5IHByb3ZpZGUgaGFzaFxuICAgICAgICBtc2dIYXNoID0gZW5zdXJlQnl0ZXMoJ21zZ0hhc2gnLCBtc2dIYXNoKTtcbiAgICAgICAgaWYgKHByZWhhc2gpXG4gICAgICAgICAgICBtc2dIYXNoID0gZW5zdXJlQnl0ZXMoJ3ByZWhhc2hlZCBtc2dIYXNoJywgaGFzaChtc2dIYXNoKSk7XG4gICAgICAgIC8vIFdlIGNhbid0IGxhdGVyIGNhbGwgYml0czJvY3RldHMsIHNpbmNlIG5lc3RlZCBiaXRzMmludCBpcyBicm9rZW4gZm9yIGN1cnZlc1xuICAgICAgICAvLyB3aXRoIG5CaXRMZW5ndGggJSA4ICE9PSAwLiBCZWNhdXNlIG9mIHRoYXQsIHdlIHVud3JhcCBpdCBoZXJlIGFzIGludDJvY3RldHMgY2FsbC5cbiAgICAgICAgLy8gY29uc3QgYml0czJvY3RldHMgPSAoYml0cykgPT4gaW50Mm9jdGV0cyhiaXRzMmludF9tb2ROKGJpdHMpKVxuICAgICAgICBjb25zdCBoMWludCA9IGJpdHMyaW50X21vZE4obXNnSGFzaCk7XG4gICAgICAgIGNvbnN0IGQgPSBub3JtUHJpdmF0ZUtleVRvU2NhbGFyKHByaXZhdGVLZXkpOyAvLyB2YWxpZGF0ZSBwcml2YXRlIGtleSwgY29udmVydCB0byBiaWdpbnRcbiAgICAgICAgY29uc3Qgc2VlZEFyZ3MgPSBbaW50Mm9jdGV0cyhkKSwgaW50Mm9jdGV0cyhoMWludCldO1xuICAgICAgICAvLyBleHRyYUVudHJvcHkuIFJGQzY5NzkgMy42OiBhZGRpdGlvbmFsIGsnIChvcHRpb25hbCkuXG4gICAgICAgIGlmIChlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSyA9IEhNQUNfSyhWIHx8IDB4MDAgfHwgaW50Mm9jdGV0cyh4KSB8fCBiaXRzMm9jdGV0cyhoMSkgfHwgaycpXG4gICAgICAgICAgICBjb25zdCBlID0gZW50ID09PSB0cnVlID8gcmFuZG9tQnl0ZXMoRnAuQllURVMpIDogZW50OyAvLyBnZW5lcmF0ZSByYW5kb20gYnl0ZXMgT1IgcGFzcyBhcy1pc1xuICAgICAgICAgICAgc2VlZEFyZ3MucHVzaChlbnN1cmVCeXRlcygnZXh0cmFFbnRyb3B5JywgZSkpOyAvLyBjaGVjayBmb3IgYmVpbmcgYnl0ZXNcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWVkID0gdXQuY29uY2F0Qnl0ZXMoLi4uc2VlZEFyZ3MpOyAvLyBTdGVwIEQgb2YgUkZDNjk3OSAzLjJcbiAgICAgICAgY29uc3QgbSA9IGgxaW50OyAvLyBOT1RFOiBubyBuZWVkIHRvIGNhbGwgYml0czJpbnQgc2Vjb25kIHRpbWUgaGVyZSwgaXQgaXMgaW5zaWRlIHRydW5jYXRlSGFzaCFcbiAgICAgICAgLy8gQ29udmVydHMgc2lnbmF0dXJlIHBhcmFtcyBpbnRvIHBvaW50IHcgci9zLCBjaGVja3MgcmVzdWx0IGZvciB2YWxpZGl0eS5cbiAgICAgICAgZnVuY3Rpb24gazJzaWcoa0J5dGVzKSB7XG4gICAgICAgICAgICAvLyBSRkMgNjk3OSBTZWN0aW9uIDMuMiwgc3RlcCAzOiBrID0gYml0czJpbnQoVClcbiAgICAgICAgICAgIGNvbnN0IGsgPSBiaXRzMmludChrQnl0ZXMpOyAvLyBDYW5ub3QgdXNlIGZpZWxkcyBtZXRob2RzLCBzaW5jZSBpdCBpcyBncm91cCBlbGVtZW50XG4gICAgICAgICAgICBpZiAoIWlzV2l0aGluQ3VydmVPcmRlcihrKSlcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIEltcG9ydGFudDogYWxsIG1vZCgpIGNhbGxzIGhlcmUgbXVzdCBiZSBkb25lIG92ZXIgTlxuICAgICAgICAgICAgY29uc3QgaWsgPSBpbnZOKGspOyAvLyBrXi0xIG1vZCBuXG4gICAgICAgICAgICBjb25zdCBxID0gUG9pbnQuQkFTRS5tdWx0aXBseShrKS50b0FmZmluZSgpOyAvLyBxID0gR2tcbiAgICAgICAgICAgIGNvbnN0IHIgPSBtb2ROKHEueCk7IC8vIHIgPSBxLnggbW9kIG5cbiAgICAgICAgICAgIGlmIChyID09PSBfMG4pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gQ2FuIHVzZSBzY2FsYXIgYmxpbmRpbmcgYl4tMShibSArIGJkcikgd2hlcmUgYiDiiIggWzEsceKIkjFdIGFjY29yZGluZyB0b1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly90Y2hlcy5pYWNyLm9yZy9pbmRleC5waHAvVENIRVMvYXJ0aWNsZS92aWV3LzczMzcvNjUwOS4gV2UndmUgZGVjaWRlZCBhZ2FpbnN0IGl0OlxuICAgICAgICAgICAgLy8gYSkgZGVwZW5kZW5jeSBvbiBDU1BSTkcgYikgMTUlIHNsb3dkb3duIGMpIGRvZXNuJ3QgcmVhbGx5IGhlbHAgc2luY2UgYmlnaW50cyBhcmUgbm90IENUXG4gICAgICAgICAgICBjb25zdCBzID0gbW9kTihpayAqIG1vZE4obSArIHIgKiBkKSk7IC8vIE5vdCB1c2luZyBibGluZGluZyBoZXJlXG4gICAgICAgICAgICBpZiAocyA9PT0gXzBuKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxldCByZWNvdmVyeSA9IChxLnggPT09IHIgPyAwIDogMikgfCBOdW1iZXIocS55ICYgXzFuKTsgLy8gcmVjb3ZlcnkgYml0ICgyIG9yIDMsIHdoZW4gcS54ID4gbilcbiAgICAgICAgICAgIGxldCBub3JtUyA9IHM7XG4gICAgICAgICAgICBpZiAobG93UyAmJiBpc0JpZ2dlclRoYW5IYWxmT3JkZXIocykpIHtcbiAgICAgICAgICAgICAgICBub3JtUyA9IG5vcm1hbGl6ZVMocyk7IC8vIGlmIGxvd1Mgd2FzIHBhc3NlZCwgZW5zdXJlIHMgaXMgYWx3YXlzXG4gICAgICAgICAgICAgICAgcmVjb3ZlcnkgXj0gMTsgLy8gLy8gaW4gdGhlIGJvdHRvbSBoYWxmIG9mIE5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHIsIG5vcm1TLCByZWNvdmVyeSk7IC8vIHVzZSBub3JtUywgbm90IHNcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzZWVkLCBrMnNpZyB9O1xuICAgIH1cbiAgICBjb25zdCBkZWZhdWx0U2lnT3B0cyA9IHsgbG93UzogQ1VSVkUubG93UywgcHJlaGFzaDogZmFsc2UgfTtcbiAgICBjb25zdCBkZWZhdWx0VmVyT3B0cyA9IHsgbG93UzogQ1VSVkUubG93UywgcHJlaGFzaDogZmFsc2UgfTtcbiAgICAvKipcbiAgICAgKiBTaWducyBtZXNzYWdlIGhhc2ggd2l0aCBhIHByaXZhdGUga2V5LlxuICAgICAqIGBgYFxuICAgICAqIHNpZ24obSwgZCwgaykgd2hlcmVcbiAgICAgKiAgICh4LCB5KSA9IEcgw5cga1xuICAgICAqICAgciA9IHggbW9kIG5cbiAgICAgKiAgIHMgPSAobSArIGRyKS9rIG1vZCBuXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG1zZ0hhc2ggTk9UIG1lc3NhZ2UuIG1zZyBuZWVkcyB0byBiZSBoYXNoZWQgdG8gYG1zZ0hhc2hgLCBvciB1c2UgYHByZWhhc2hgLlxuICAgICAqIEBwYXJhbSBwcml2S2V5IHByaXZhdGUga2V5XG4gICAgICogQHBhcmFtIG9wdHMgbG93UyBmb3Igbm9uLW1hbGxlYWJsZSBzaWdzLiBleHRyYUVudHJvcHkgZm9yIG1peGluZyByYW5kb21uZXNzIGludG8gay4gcHJlaGFzaCB3aWxsIGhhc2ggZmlyc3QgYXJnLlxuICAgICAqIEByZXR1cm5zIHNpZ25hdHVyZSB3aXRoIHJlY292ZXJ5IHBhcmFtXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2lnbihtc2dIYXNoLCBwcml2S2V5LCBvcHRzID0gZGVmYXVsdFNpZ09wdHMpIHtcbiAgICAgICAgY29uc3QgeyBzZWVkLCBrMnNpZyB9ID0gcHJlcFNpZyhtc2dIYXNoLCBwcml2S2V5LCBvcHRzKTsgLy8gU3RlcHMgQSwgRCBvZiBSRkM2OTc5IDMuMi5cbiAgICAgICAgY29uc3QgQyA9IENVUlZFO1xuICAgICAgICBjb25zdCBkcmJnID0gdXQuY3JlYXRlSG1hY0RyYmcoQy5oYXNoLm91dHB1dExlbiwgQy5uQnl0ZUxlbmd0aCwgQy5obWFjKTtcbiAgICAgICAgcmV0dXJuIGRyYmcoc2VlZCwgazJzaWcpOyAvLyBTdGVwcyBCLCBDLCBELCBFLCBGLCBHXG4gICAgfVxuICAgIC8vIEVuYWJsZSBwcmVjb21wdXRlcy4gU2xvd3MgZG93biBmaXJzdCBwdWJsaWNLZXkgY29tcHV0YXRpb24gYnkgMjBtcy5cbiAgICBQb2ludC5CQVNFLl9zZXRXaW5kb3dTaXplKDgpO1xuICAgIC8vIHV0aWxzLnByZWNvbXB1dGUoOCwgUHJvamVjdGl2ZVBvaW50LkJBU0UpXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgYSBzaWduYXR1cmUgYWdhaW5zdCBtZXNzYWdlIGhhc2ggYW5kIHB1YmxpYyBrZXkuXG4gICAgICogUmVqZWN0cyBsb3dTIHNpZ25hdHVyZXMgYnkgZGVmYXVsdDogdG8gb3ZlcnJpZGUsXG4gICAgICogc3BlY2lmeSBvcHRpb24gYHtsb3dTOiBmYWxzZX1gLiBJbXBsZW1lbnRzIHNlY3Rpb24gNC4xLjQgZnJvbSBodHRwczovL3d3dy5zZWNnLm9yZy9zZWMxLXYyLnBkZjpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIHZlcmlmeShyLCBzLCBoLCBQKSB3aGVyZVxuICAgICAqICAgVTEgPSBoc14tMSBtb2QgblxuICAgICAqICAgVTIgPSByc14tMSBtb2QgblxuICAgICAqICAgUiA9IFUx4ouFRyAtIFUy4ouFUFxuICAgICAqICAgbW9kKFIueCwgbikgPT0gclxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZlcmlmeShzaWduYXR1cmUsIG1zZ0hhc2gsIHB1YmxpY0tleSwgb3B0cyA9IGRlZmF1bHRWZXJPcHRzKSB7XG4gICAgICAgIGNvbnN0IHNnID0gc2lnbmF0dXJlO1xuICAgICAgICBtc2dIYXNoID0gZW5zdXJlQnl0ZXMoJ21zZ0hhc2gnLCBtc2dIYXNoKTtcbiAgICAgICAgcHVibGljS2V5ID0gZW5zdXJlQnl0ZXMoJ3B1YmxpY0tleScsIHB1YmxpY0tleSk7XG4gICAgICAgIGlmICgnc3RyaWN0JyBpbiBvcHRzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zLnN0cmljdCB3YXMgcmVuYW1lZCB0byBsb3dTJyk7XG4gICAgICAgIGNvbnN0IHsgbG93UywgcHJlaGFzaCB9ID0gb3B0cztcbiAgICAgICAgbGV0IF9zaWcgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBQO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZyA9PT0gJ3N0cmluZycgfHwgc2cgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgLy8gU2lnbmF0dXJlIGNhbiBiZSByZXByZXNlbnRlZCBpbiAyIHdheXM6IGNvbXBhY3QgKDIqbkJ5dGVMZW5ndGgpICYgREVSICh2YXJpYWJsZS1sZW5ndGgpLlxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIERFUiBjYW4gYWxzbyBiZSAyKm5CeXRlTGVuZ3RoIGJ5dGVzLCB3ZSBjaGVjayBmb3IgaXQgZmlyc3QuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgX3NpZyA9IFNpZ25hdHVyZS5mcm9tREVSKHNnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGRlckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGRlckVycm9yIGluc3RhbmNlb2YgREVSLkVycikpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBkZXJFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgX3NpZyA9IFNpZ25hdHVyZS5mcm9tQ29tcGFjdChzZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHNnID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygc2cuciA9PT0gJ2JpZ2ludCcgJiYgdHlwZW9mIHNnLnMgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyByLCBzIH0gPSBzZztcbiAgICAgICAgICAgICAgICBfc2lnID0gbmV3IFNpZ25hdHVyZShyLCBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUEFSU0UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFAgPSBQb2ludC5mcm9tSGV4KHB1YmxpY0tleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSA9PT0gJ1BBUlNFJylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHNpZ25hdHVyZSBtdXN0IGJlIFNpZ25hdHVyZSBpbnN0YW5jZSwgVWludDhBcnJheSBvciBoZXggc3RyaW5nYCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd1MgJiYgX3NpZy5oYXNIaWdoUygpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAocHJlaGFzaClcbiAgICAgICAgICAgIG1zZ0hhc2ggPSBDVVJWRS5oYXNoKG1zZ0hhc2gpO1xuICAgICAgICBjb25zdCB7IHIsIHMgfSA9IF9zaWc7XG4gICAgICAgIGNvbnN0IGggPSBiaXRzMmludF9tb2ROKG1zZ0hhc2gpOyAvLyBDYW5ub3QgdXNlIGZpZWxkcyBtZXRob2RzLCBzaW5jZSBpdCBpcyBncm91cCBlbGVtZW50XG4gICAgICAgIGNvbnN0IGlzID0gaW52TihzKTsgLy8gc14tMVxuICAgICAgICBjb25zdCB1MSA9IG1vZE4oaCAqIGlzKTsgLy8gdTEgPSBoc14tMSBtb2QgblxuICAgICAgICBjb25zdCB1MiA9IG1vZE4ociAqIGlzKTsgLy8gdTIgPSByc14tMSBtb2QgblxuICAgICAgICBjb25zdCBSID0gUG9pbnQuQkFTRS5tdWx0aXBseUFuZEFkZFVuc2FmZShQLCB1MSwgdTIpPy50b0FmZmluZSgpOyAvLyBSID0gdTHii4VHICsgdTLii4VQXG4gICAgICAgIGlmICghUilcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgdiA9IG1vZE4oUi54KTtcbiAgICAgICAgcmV0dXJuIHYgPT09IHI7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIENVUlZFLFxuICAgICAgICBnZXRQdWJsaWNLZXksXG4gICAgICAgIGdldFNoYXJlZFNlY3JldCxcbiAgICAgICAgc2lnbixcbiAgICAgICAgdmVyaWZ5LFxuICAgICAgICBQcm9qZWN0aXZlUG9pbnQ6IFBvaW50LFxuICAgICAgICBTaWduYXR1cmUsXG4gICAgICAgIHV0aWxzLFxuICAgIH07XG59XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBTaGFsbHVlIGFuZCB2YW4gZGUgV29lc3Rpam5lIG1ldGhvZCBmb3IgYW55IHdlaWVyc3RyYXNzIGN1cnZlLlxuICogVE9ETzogY2hlY2sgaWYgdGhlcmUgaXMgYSB3YXkgdG8gbWVyZ2UgdGhpcyB3aXRoIHV2UmF0aW8gaW4gRWR3YXJkczsgbW92ZSB0byBtb2R1bGFyLlxuICogYiA9IFRydWUgYW5kIHkgPSBzcXJ0KHUgLyB2KSBpZiAodSAvIHYpIGlzIHNxdWFyZSBpbiBGLCBhbmRcbiAqIGIgPSBGYWxzZSBhbmQgeSA9IHNxcnQoWiAqICh1IC8gdikpIG90aGVyd2lzZS5cbiAqIEBwYXJhbSBGcFxuICogQHBhcmFtIFpcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTV1VGcFNxcnRSYXRpbyhGcCwgWikge1xuICAgIC8vIEdlbmVyaWMgaW1wbGVtZW50YXRpb25cbiAgICBjb25zdCBxID0gRnAuT1JERVI7XG4gICAgbGV0IGwgPSBfMG47XG4gICAgZm9yIChsZXQgbyA9IHEgLSBfMW47IG8gJSBfMm4gPT09IF8wbjsgbyAvPSBfMm4pXG4gICAgICAgIGwgKz0gXzFuO1xuICAgIGNvbnN0IGMxID0gbDsgLy8gMS4gYzEsIHRoZSBsYXJnZXN0IGludGVnZXIgc3VjaCB0aGF0IDJeYzEgZGl2aWRlcyBxIC0gMS5cbiAgICAvLyBXZSBuZWVkIDJuICoqIGMxIGFuZCAybiAqKiAoYzEtMSkuIFdlIGNhbid0IHVzZSAqKjsgYnV0IHdlIGNhbiB1c2UgPDwuXG4gICAgLy8gMm4gKiogYzEgPT0gMm4gPDwgKGMxLTEpXG4gICAgY29uc3QgXzJuX3Bvd19jMV8xID0gXzJuIDw8IChjMSAtIF8xbiAtIF8xbik7XG4gICAgY29uc3QgXzJuX3Bvd19jMSA9IF8ybl9wb3dfYzFfMSAqIF8ybjtcbiAgICBjb25zdCBjMiA9IChxIC0gXzFuKSAvIF8ybl9wb3dfYzE7IC8vIDIuIGMyID0gKHEgLSAxKSAvICgyXmMxKSAgIyBJbnRlZ2VyIGFyaXRobWV0aWNcbiAgICBjb25zdCBjMyA9IChjMiAtIF8xbikgLyBfMm47IC8vIDMuIGMzID0gKGMyIC0gMSkgLyAyICAgICAgICAgICAgIyBJbnRlZ2VyIGFyaXRobWV0aWNcbiAgICBjb25zdCBjNCA9IF8ybl9wb3dfYzEgLSBfMW47IC8vIDQuIGM0ID0gMl5jMSAtIDEgICAgICAgICAgICAgICAgIyBJbnRlZ2VyIGFyaXRobWV0aWNcbiAgICBjb25zdCBjNSA9IF8ybl9wb3dfYzFfMTsgLy8gNS4gYzUgPSAyXihjMSAtIDEpICAgICAgICAgICAgICAgICAgIyBJbnRlZ2VyIGFyaXRobWV0aWNcbiAgICBjb25zdCBjNiA9IEZwLnBvdyhaLCBjMik7IC8vIDYuIGM2ID0gWl5jMlxuICAgIGNvbnN0IGM3ID0gRnAucG93KFosIChjMiArIF8xbikgLyBfMm4pOyAvLyA3LiBjNyA9IFpeKChjMiArIDEpIC8gMilcbiAgICBsZXQgc3FydFJhdGlvID0gKHUsIHYpID0+IHtcbiAgICAgICAgbGV0IHR2MSA9IGM2OyAvLyAxLiB0djEgPSBjNlxuICAgICAgICBsZXQgdHYyID0gRnAucG93KHYsIGM0KTsgLy8gMi4gdHYyID0gdl5jNFxuICAgICAgICBsZXQgdHYzID0gRnAuc3FyKHR2Mik7IC8vIDMuIHR2MyA9IHR2Ml4yXG4gICAgICAgIHR2MyA9IEZwLm11bCh0djMsIHYpOyAvLyA0LiB0djMgPSB0djMgKiB2XG4gICAgICAgIGxldCB0djUgPSBGcC5tdWwodSwgdHYzKTsgLy8gNS4gdHY1ID0gdSAqIHR2M1xuICAgICAgICB0djUgPSBGcC5wb3codHY1LCBjMyk7IC8vIDYuIHR2NSA9IHR2NV5jM1xuICAgICAgICB0djUgPSBGcC5tdWwodHY1LCB0djIpOyAvLyA3LiB0djUgPSB0djUgKiB0djJcbiAgICAgICAgdHYyID0gRnAubXVsKHR2NSwgdik7IC8vIDguIHR2MiA9IHR2NSAqIHZcbiAgICAgICAgdHYzID0gRnAubXVsKHR2NSwgdSk7IC8vIDkuIHR2MyA9IHR2NSAqIHVcbiAgICAgICAgbGV0IHR2NCA9IEZwLm11bCh0djMsIHR2Mik7IC8vIDEwLiB0djQgPSB0djMgKiB0djJcbiAgICAgICAgdHY1ID0gRnAucG93KHR2NCwgYzUpOyAvLyAxMS4gdHY1ID0gdHY0XmM1XG4gICAgICAgIGxldCBpc1FSID0gRnAuZXFsKHR2NSwgRnAuT05FKTsgLy8gMTIuIGlzUVIgPSB0djUgPT0gMVxuICAgICAgICB0djIgPSBGcC5tdWwodHYzLCBjNyk7IC8vIDEzLiB0djIgPSB0djMgKiBjN1xuICAgICAgICB0djUgPSBGcC5tdWwodHY0LCB0djEpOyAvLyAxNC4gdHY1ID0gdHY0ICogdHYxXG4gICAgICAgIHR2MyA9IEZwLmNtb3YodHYyLCB0djMsIGlzUVIpOyAvLyAxNS4gdHYzID0gQ01PVih0djIsIHR2MywgaXNRUilcbiAgICAgICAgdHY0ID0gRnAuY21vdih0djUsIHR2NCwgaXNRUik7IC8vIDE2LiB0djQgPSBDTU9WKHR2NSwgdHY0LCBpc1FSKVxuICAgICAgICAvLyAxNy4gZm9yIGkgaW4gKGMxLCBjMSAtIDEsIC4uLiwgMik6XG4gICAgICAgIGZvciAobGV0IGkgPSBjMTsgaSA+IF8xbjsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgdHY1ID0gaSAtIF8ybjsgLy8gMTguICAgIHR2NSA9IGkgLSAyXG4gICAgICAgICAgICB0djUgPSBfMm4gPDwgKHR2NSAtIF8xbik7IC8vIDE5LiAgICB0djUgPSAyXnR2NVxuICAgICAgICAgICAgbGV0IHR2djUgPSBGcC5wb3codHY0LCB0djUpOyAvLyAyMC4gICAgdHY1ID0gdHY0XnR2NVxuICAgICAgICAgICAgY29uc3QgZTEgPSBGcC5lcWwodHZ2NSwgRnAuT05FKTsgLy8gMjEuICAgIGUxID0gdHY1ID09IDFcbiAgICAgICAgICAgIHR2MiA9IEZwLm11bCh0djMsIHR2MSk7IC8vIDIyLiAgICB0djIgPSB0djMgKiB0djFcbiAgICAgICAgICAgIHR2MSA9IEZwLm11bCh0djEsIHR2MSk7IC8vIDIzLiAgICB0djEgPSB0djEgKiB0djFcbiAgICAgICAgICAgIHR2djUgPSBGcC5tdWwodHY0LCB0djEpOyAvLyAyNC4gICAgdHY1ID0gdHY0ICogdHYxXG4gICAgICAgICAgICB0djMgPSBGcC5jbW92KHR2MiwgdHYzLCBlMSk7IC8vIDI1LiAgICB0djMgPSBDTU9WKHR2MiwgdHYzLCBlMSlcbiAgICAgICAgICAgIHR2NCA9IEZwLmNtb3YodHZ2NSwgdHY0LCBlMSk7IC8vIDI2LiAgICB0djQgPSBDTU9WKHR2NSwgdHY0LCBlMSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBpc1ZhbGlkOiBpc1FSLCB2YWx1ZTogdHYzIH07XG4gICAgfTtcbiAgICBpZiAoRnAuT1JERVIgJSBfNG4gPT09IF8zbikge1xuICAgICAgICAvLyBzcXJ0X3JhdGlvXzNtb2Q0KHUsIHYpXG4gICAgICAgIGNvbnN0IGMxID0gKEZwLk9SREVSIC0gXzNuKSAvIF80bjsgLy8gMS4gYzEgPSAocSAtIDMpIC8gNCAgICAgIyBJbnRlZ2VyIGFyaXRobWV0aWNcbiAgICAgICAgY29uc3QgYzIgPSBGcC5zcXJ0KEZwLm5lZyhaKSk7IC8vIDIuIGMyID0gc3FydCgtWilcbiAgICAgICAgc3FydFJhdGlvID0gKHUsIHYpID0+IHtcbiAgICAgICAgICAgIGxldCB0djEgPSBGcC5zcXIodik7IC8vIDEuIHR2MSA9IHZeMlxuICAgICAgICAgICAgY29uc3QgdHYyID0gRnAubXVsKHUsIHYpOyAvLyAyLiB0djIgPSB1ICogdlxuICAgICAgICAgICAgdHYxID0gRnAubXVsKHR2MSwgdHYyKTsgLy8gMy4gdHYxID0gdHYxICogdHYyXG4gICAgICAgICAgICBsZXQgeTEgPSBGcC5wb3codHYxLCBjMSk7IC8vIDQuIHkxID0gdHYxXmMxXG4gICAgICAgICAgICB5MSA9IEZwLm11bCh5MSwgdHYyKTsgLy8gNS4geTEgPSB5MSAqIHR2MlxuICAgICAgICAgICAgY29uc3QgeTIgPSBGcC5tdWwoeTEsIGMyKTsgLy8gNi4geTIgPSB5MSAqIGMyXG4gICAgICAgICAgICBjb25zdCB0djMgPSBGcC5tdWwoRnAuc3FyKHkxKSwgdik7IC8vIDcuIHR2MyA9IHkxXjI7IDguIHR2MyA9IHR2MyAqIHZcbiAgICAgICAgICAgIGNvbnN0IGlzUVIgPSBGcC5lcWwodHYzLCB1KTsgLy8gOS4gaXNRUiA9IHR2MyA9PSB1XG4gICAgICAgICAgICBsZXQgeSA9IEZwLmNtb3YoeTIsIHkxLCBpc1FSKTsgLy8gMTAuIHkgPSBDTU9WKHkyLCB5MSwgaXNRUilcbiAgICAgICAgICAgIHJldHVybiB7IGlzVmFsaWQ6IGlzUVIsIHZhbHVlOiB5IH07IC8vIDExLiByZXR1cm4gKGlzUVIsIHkpIGlzUVIgPyB5IDogeSpjMlxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBObyBjdXJ2ZXMgdXNlcyB0aGF0XG4gICAgLy8gaWYgKEZwLk9SREVSICUgXzhuID09PSBfNW4pIC8vIHNxcnRfcmF0aW9fNW1vZDhcbiAgICByZXR1cm4gc3FydFJhdGlvO1xufVxuLyoqXG4gKiBTaW1wbGlmaWVkIFNoYWxsdWUtdmFuIGRlIFdvZXN0aWpuZS1VbGFzIE1ldGhvZFxuICogaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzkzODAjc2VjdGlvbi02LjYuMlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9DdXJ2ZVNpbXBsZVNXVShGcCwgb3B0cykge1xuICAgIG1vZC52YWxpZGF0ZUZpZWxkKEZwKTtcbiAgICBpZiAoIUZwLmlzVmFsaWQob3B0cy5BKSB8fCAhRnAuaXNWYWxpZChvcHRzLkIpIHx8ICFGcC5pc1ZhbGlkKG9wdHMuWikpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWFwVG9DdXJ2ZVNpbXBsZVNXVTogaW52YWxpZCBvcHRzJyk7XG4gICAgY29uc3Qgc3FydFJhdGlvID0gU1dVRnBTcXJ0UmF0aW8oRnAsIG9wdHMuWik7XG4gICAgaWYgKCFGcC5pc09kZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGcC5pc09kZCBpcyBub3QgaW1wbGVtZW50ZWQhJyk7XG4gICAgLy8gSW5wdXQ6IHUsIGFuIGVsZW1lbnQgb2YgRi5cbiAgICAvLyBPdXRwdXQ6ICh4LCB5KSwgYSBwb2ludCBvbiBFLlxuICAgIHJldHVybiAodSkgPT4ge1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgbGV0IHR2MSwgdHYyLCB0djMsIHR2NCwgdHY1LCB0djYsIHgsIHk7XG4gICAgICAgIHR2MSA9IEZwLnNxcih1KTsgLy8gMS4gIHR2MSA9IHVeMlxuICAgICAgICB0djEgPSBGcC5tdWwodHYxLCBvcHRzLlopOyAvLyAyLiAgdHYxID0gWiAqIHR2MVxuICAgICAgICB0djIgPSBGcC5zcXIodHYxKTsgLy8gMy4gIHR2MiA9IHR2MV4yXG4gICAgICAgIHR2MiA9IEZwLmFkZCh0djIsIHR2MSk7IC8vIDQuICB0djIgPSB0djIgKyB0djFcbiAgICAgICAgdHYzID0gRnAuYWRkKHR2MiwgRnAuT05FKTsgLy8gNS4gIHR2MyA9IHR2MiArIDFcbiAgICAgICAgdHYzID0gRnAubXVsKHR2Mywgb3B0cy5CKTsgLy8gNi4gIHR2MyA9IEIgKiB0djNcbiAgICAgICAgdHY0ID0gRnAuY21vdihvcHRzLlosIEZwLm5lZyh0djIpLCAhRnAuZXFsKHR2MiwgRnAuWkVSTykpOyAvLyA3LiAgdHY0ID0gQ01PVihaLCAtdHYyLCB0djIgIT0gMClcbiAgICAgICAgdHY0ID0gRnAubXVsKHR2NCwgb3B0cy5BKTsgLy8gOC4gIHR2NCA9IEEgKiB0djRcbiAgICAgICAgdHYyID0gRnAuc3FyKHR2Myk7IC8vIDkuICB0djIgPSB0djNeMlxuICAgICAgICB0djYgPSBGcC5zcXIodHY0KTsgLy8gMTAuIHR2NiA9IHR2NF4yXG4gICAgICAgIHR2NSA9IEZwLm11bCh0djYsIG9wdHMuQSk7IC8vIDExLiB0djUgPSBBICogdHY2XG4gICAgICAgIHR2MiA9IEZwLmFkZCh0djIsIHR2NSk7IC8vIDEyLiB0djIgPSB0djIgKyB0djVcbiAgICAgICAgdHYyID0gRnAubXVsKHR2MiwgdHYzKTsgLy8gMTMuIHR2MiA9IHR2MiAqIHR2M1xuICAgICAgICB0djYgPSBGcC5tdWwodHY2LCB0djQpOyAvLyAxNC4gdHY2ID0gdHY2ICogdHY0XG4gICAgICAgIHR2NSA9IEZwLm11bCh0djYsIG9wdHMuQik7IC8vIDE1LiB0djUgPSBCICogdHY2XG4gICAgICAgIHR2MiA9IEZwLmFkZCh0djIsIHR2NSk7IC8vIDE2LiB0djIgPSB0djIgKyB0djVcbiAgICAgICAgeCA9IEZwLm11bCh0djEsIHR2Myk7IC8vIDE3LiAgIHggPSB0djEgKiB0djNcbiAgICAgICAgY29uc3QgeyBpc1ZhbGlkLCB2YWx1ZSB9ID0gc3FydFJhdGlvKHR2MiwgdHY2KTsgLy8gMTguIChpc19neDFfc3F1YXJlLCB5MSkgPSBzcXJ0X3JhdGlvKHR2MiwgdHY2KVxuICAgICAgICB5ID0gRnAubXVsKHR2MSwgdSk7IC8vIDE5LiAgIHkgPSB0djEgKiB1ICAtPiBaICogdV4zICogeTFcbiAgICAgICAgeSA9IEZwLm11bCh5LCB2YWx1ZSk7IC8vIDIwLiAgIHkgPSB5ICogeTFcbiAgICAgICAgeCA9IEZwLmNtb3YoeCwgdHYzLCBpc1ZhbGlkKTsgLy8gMjEuICAgeCA9IENNT1YoeCwgdHYzLCBpc19neDFfc3F1YXJlKVxuICAgICAgICB5ID0gRnAuY21vdih5LCB2YWx1ZSwgaXNWYWxpZCk7IC8vIDIyLiAgIHkgPSBDTU9WKHksIHkxLCBpc19neDFfc3F1YXJlKVxuICAgICAgICBjb25zdCBlMSA9IEZwLmlzT2RkKHUpID09PSBGcC5pc09kZCh5KTsgLy8gMjMuICBlMSA9IHNnbjAodSkgPT0gc2duMCh5KVxuICAgICAgICB5ID0gRnAuY21vdihGcC5uZWcoeSksIHksIGUxKTsgLy8gMjQuICAgeSA9IENNT1YoLXksIHksIGUxKVxuICAgICAgICB4ID0gRnAuZGl2KHgsIHR2NCk7IC8vIDI1LiAgIHggPSB4IC8gdHY0XG4gICAgICAgIHJldHVybiB7IHgsIHkgfTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2VpZXJzdHJhc3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/weierstrass.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/secp256k1.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/secp256k1.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   schnorr: () => (/* binding */ schnorr),\n/* harmony export */   secp256k1: () => (/* binding */ secp256k1)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/_shortw_utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n\n\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b3, _3n, P) * b3) % P;\n    const b9 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b6, _3n, P) * b3) % P;\n    const b11 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b9, _2n, P) * b2) % P;\n    const b22 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b11, _11n, P) * b11) % P;\n    const b44 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b22, _22n, P) * b22) % P;\n    const b88 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b44, _44n, P) * b44) % P;\n    const b176 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b88, _88n, P) * b88) % P;\n    const b220 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b176, _44n, P) * b44) % P;\n    const b223 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b220, _3n, P) * b3) % P;\n    const t1 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b223, _23n, P) * b22) % P;\n    const t2 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t1, _6n, P) * b2) % P;\n    const root = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nconst secp256k1 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE)(n, 32);\nconst modP = (x) => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1P);\nconst modN = (x) => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(32)) {\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('signature', signature, 64);\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('message', message);\n    const pub = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('publicKey', publicKey, 32);\n    try {\n        const P = lift_x((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nconst schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE,\n        bytesToNumberBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE,\n        taggedHash,\n        mod: _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.isogenyMap)(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__.mapToCurveSimpleSWU)(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.createHasher)(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256,\n}))();\nconst hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/esm/secp256k1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_assert.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_assert.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBLG1EQUFtRCxFQUFFO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxFQUFFO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsUUFBUSxrQkFBa0IsU0FBUztBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLElBQUk7QUFDckY7QUFDQTtBQUNxRDtBQUNyRCxpQkFBaUI7QUFDakIsaUVBQWUsTUFBTSxFQUFDO0FBQ3RCIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBudW1iZXIobikge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobikgfHwgbiA8IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgV3JvbmcgcG9zaXRpdmUgaW50ZWdlcjogJHtufWApO1xufVxuZnVuY3Rpb24gYm9vbChiKSB7XG4gICAgaWYgKHR5cGVvZiBiICE9PSAnYm9vbGVhbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYm9vbGVhbiwgbm90ICR7Yn1gKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzKGIsIC4uLmxlbmd0aHMpIHtcbiAgICBpZiAoIShiIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgVWludDhBcnJheScpO1xuICAgIGlmIChsZW5ndGhzLmxlbmd0aCA+IDAgJiYgIWxlbmd0aHMuaW5jbHVkZXMoYi5sZW5ndGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFVpbnQ4QXJyYXkgb2YgbGVuZ3RoICR7bGVuZ3Roc30sIG5vdCBvZiBsZW5ndGg9JHtiLmxlbmd0aH1gKTtcbn1cbmZ1bmN0aW9uIGhhc2goaGFzaCkge1xuICAgIGlmICh0eXBlb2YgaGFzaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaGFzaC5jcmVhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcbiAgICBudW1iZXIoaGFzaC5vdXRwdXRMZW4pO1xuICAgIG51bWJlcihoYXNoLmJsb2NrTGVuKTtcbn1cbmZ1bmN0aW9uIGV4aXN0cyhpbnN0YW5jZSwgY2hlY2tGaW5pc2hlZCA9IHRydWUpIHtcbiAgICBpZiAoaW5zdGFuY2UuZGVzdHJveWVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkJyk7XG4gICAgaWYgKGNoZWNrRmluaXNoZWQgJiYgaW5zdGFuY2UuZmluaXNoZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCcpO1xufVxuZnVuY3Rpb24gb3V0cHV0KG91dCwgaW5zdGFuY2UpIHtcbiAgICBieXRlcyhvdXQpO1xuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgICBpZiAob3V0Lmxlbmd0aCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICR7bWlufWApO1xuICAgIH1cbn1cbmV4cG9ydCB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5jb25zdCBhc3NlcnQgPSB7IG51bWJlciwgYm9vbCwgYnl0ZXMsIGhhc2gsIGV4aXN0cywgb3V0cHV0IH07XG5leHBvcnQgZGVmYXVsdCBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_sha2.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_sha2.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA2: () => (/* binding */ SHA2)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3NoYTIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ1M7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG1CQUFtQiwyQ0FBSTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFEQUFVO0FBQzlCO0FBQ0E7QUFDQSxRQUFRLGtEQUFNO0FBQ2QsZ0JBQWdCLHlCQUF5QjtBQUN6QyxlQUFlLGtEQUFPO0FBQ3RCO0FBQ0EsMEJBQTBCLFVBQVU7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHFEQUFVO0FBQzNDLHVCQUF1Qix1QkFBdUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtEQUFNO0FBQ2QsUUFBUSxrREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLCtCQUErQjtBQUMvQyxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHFEQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQXFEO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3NoYTIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhpc3RzLCBvdXRwdXQgfSBmcm9tICcuL19hc3NlcnQuanMnO1xuaW1wb3J0IHsgSGFzaCwgY3JlYXRlVmlldywgdG9CeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gUG9seWZpbGwgZm9yIFNhZmFyaSAxNFxuZnVuY3Rpb24gc2V0QmlnVWludDY0KHZpZXcsIGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKSB7XG4gICAgaWYgKHR5cGVvZiB2aWV3LnNldEJpZ1VpbnQ2NCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHZpZXcuc2V0QmlnVWludDY0KGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKTtcbiAgICBjb25zdCBfMzJuID0gQmlnSW50KDMyKTtcbiAgICBjb25zdCBfdTMyX21heCA9IEJpZ0ludCgweGZmZmZmZmZmKTtcbiAgICBjb25zdCB3aCA9IE51bWJlcigodmFsdWUgPj4gXzMybikgJiBfdTMyX21heCk7XG4gICAgY29uc3Qgd2wgPSBOdW1iZXIodmFsdWUgJiBfdTMyX21heCk7XG4gICAgY29uc3QgaCA9IGlzTEUgPyA0IDogMDtcbiAgICBjb25zdCBsID0gaXNMRSA/IDAgOiA0O1xuICAgIHZpZXcuc2V0VWludDMyKGJ5dGVPZmZzZXQgKyBoLCB3aCwgaXNMRSk7XG4gICAgdmlldy5zZXRVaW50MzIoYnl0ZU9mZnNldCArIGwsIHdsLCBpc0xFKTtcbn1cbi8vIEJhc2UgU0hBMiBjbGFzcyAoUkZDIDYyMzQpXG5leHBvcnQgY2xhc3MgU0hBMiBleHRlbmRzIEhhc2gge1xuICAgIGNvbnN0cnVjdG9yKGJsb2NrTGVuLCBvdXRwdXRMZW4sIHBhZE9mZnNldCwgaXNMRSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJsb2NrTGVuID0gYmxvY2tMZW47XG4gICAgICAgIHRoaXMub3V0cHV0TGVuID0gb3V0cHV0TGVuO1xuICAgICAgICB0aGlzLnBhZE9mZnNldCA9IHBhZE9mZnNldDtcbiAgICAgICAgdGhpcy5pc0xFID0gaXNMRTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgVWludDhBcnJheShibG9ja0xlbik7XG4gICAgICAgIHRoaXMudmlldyA9IGNyZWF0ZVZpZXcodGhpcy5idWZmZXIpO1xuICAgIH1cbiAgICB1cGRhdGUoZGF0YSkge1xuICAgICAgICBleGlzdHModGhpcyk7XG4gICAgICAgIGNvbnN0IHsgdmlldywgYnVmZmVyLCBibG9ja0xlbiB9ID0gdGhpcztcbiAgICAgICAgZGF0YSA9IHRvQnl0ZXMoZGF0YSk7XG4gICAgICAgIGNvbnN0IGxlbiA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBwb3MgPSAwOyBwb3MgPCBsZW47KSB7XG4gICAgICAgICAgICBjb25zdCB0YWtlID0gTWF0aC5taW4oYmxvY2tMZW4gLSB0aGlzLnBvcywgbGVuIC0gcG9zKTtcbiAgICAgICAgICAgIC8vIEZhc3QgcGF0aDogd2UgaGF2ZSBhdCBsZWFzdCBvbmUgYmxvY2sgaW4gaW5wdXQsIGNhc3QgaXQgdG8gdmlldyBhbmQgcHJvY2Vzc1xuICAgICAgICAgICAgaWYgKHRha2UgPT09IGJsb2NrTGVuKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YVZpZXcgPSBjcmVhdGVWaWV3KGRhdGEpO1xuICAgICAgICAgICAgICAgIGZvciAoOyBibG9ja0xlbiA8PSBsZW4gLSBwb3M7IHBvcyArPSBibG9ja0xlbilcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzKGRhdGFWaWV3LCBwb3MpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyLnNldChkYXRhLnN1YmFycmF5KHBvcywgcG9zICsgdGFrZSksIHRoaXMucG9zKTtcbiAgICAgICAgICAgIHRoaXMucG9zICs9IHRha2U7XG4gICAgICAgICAgICBwb3MgKz0gdGFrZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBvcyA9PT0gYmxvY2tMZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3ModmlldywgMCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVuZ3RoICs9IGRhdGEubGVuZ3RoO1xuICAgICAgICB0aGlzLnJvdW5kQ2xlYW4oKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRpZ2VzdEludG8ob3V0KSB7XG4gICAgICAgIGV4aXN0cyh0aGlzKTtcbiAgICAgICAgb3V0cHV0KG91dCwgdGhpcyk7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAvLyBQYWRkaW5nXG4gICAgICAgIC8vIFdlIGNhbiBhdm9pZCBhbGxvY2F0aW9uIG9mIGJ1ZmZlciBmb3IgcGFkZGluZyBjb21wbGV0ZWx5IGlmIGl0XG4gICAgICAgIC8vIHdhcyBwcmV2aW91c2x5IG5vdCBhbGxvY2F0ZWQgaGVyZS4gQnV0IGl0IHdvbid0IGNoYW5nZSBwZXJmb3JtYW5jZS5cbiAgICAgICAgY29uc3QgeyBidWZmZXIsIHZpZXcsIGJsb2NrTGVuLCBpc0xFIH0gPSB0aGlzO1xuICAgICAgICBsZXQgeyBwb3MgfSA9IHRoaXM7XG4gICAgICAgIC8vIGFwcGVuZCB0aGUgYml0ICcxJyB0byB0aGUgbWVzc2FnZVxuICAgICAgICBidWZmZXJbcG9zKytdID0gMGIxMDAwMDAwMDtcbiAgICAgICAgdGhpcy5idWZmZXIuc3ViYXJyYXkocG9zKS5maWxsKDApO1xuICAgICAgICAvLyB3ZSBoYXZlIGxlc3MgdGhhbiBwYWRPZmZzZXQgbGVmdCBpbiBidWZmZXIsIHNvIHdlIGNhbm5vdCBwdXQgbGVuZ3RoIGluIGN1cnJlbnQgYmxvY2ssIG5lZWQgcHJvY2VzcyBpdCBhbmQgcGFkIGFnYWluXG4gICAgICAgIGlmICh0aGlzLnBhZE9mZnNldCA+IGJsb2NrTGVuIC0gcG9zKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3ModmlldywgMCk7XG4gICAgICAgICAgICBwb3MgPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhZCB1bnRpbCBmdWxsIGJsb2NrIGJ5dGUgd2l0aCB6ZXJvc1xuICAgICAgICBmb3IgKGxldCBpID0gcG9zOyBpIDwgYmxvY2tMZW47IGkrKylcbiAgICAgICAgICAgIGJ1ZmZlcltpXSA9IDA7XG4gICAgICAgIC8vIE5vdGU6IHNoYTUxMiByZXF1aXJlcyBsZW5ndGggdG8gYmUgMTI4Yml0IGludGVnZXIsIGJ1dCBsZW5ndGggaW4gSlMgd2lsbCBvdmVyZmxvdyBiZWZvcmUgdGhhdFxuICAgICAgICAvLyBZb3UgbmVlZCB0byB3cml0ZSBhcm91bmQgMiBleGFieXRlcyAodTY0X21heCAvIDggLyAoMTAyNCoqNikpIGZvciB0aGlzIHRvIGhhcHBlbi5cbiAgICAgICAgLy8gU28gd2UganVzdCB3cml0ZSBsb3dlc3QgNjQgYml0cyBvZiB0aGF0IHZhbHVlLlxuICAgICAgICBzZXRCaWdVaW50NjQodmlldywgYmxvY2tMZW4gLSA4LCBCaWdJbnQodGhpcy5sZW5ndGggKiA4KSwgaXNMRSk7XG4gICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgY29uc3Qgb3ZpZXcgPSBjcmVhdGVWaWV3KG91dCk7XG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMub3V0cHV0TGVuO1xuICAgICAgICAvLyBOT1RFOiB3ZSBkbyBkaXZpc2lvbiBieSA0IGxhdGVyLCB3aGljaCBzaG91bGQgYmUgZnVzZWQgaW4gc2luZ2xlIG9wIHdpdGggbW9kdWxvIGJ5IEpJVFxuICAgICAgICBpZiAobGVuICUgNClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignX3NoYTI6IG91dHB1dExlbiBzaG91bGQgYmUgYWxpZ25lZCB0byAzMmJpdCcpO1xuICAgICAgICBjb25zdCBvdXRMZW4gPSBsZW4gLyA0O1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0KCk7XG4gICAgICAgIGlmIChvdXRMZW4gPiBzdGF0ZS5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ19zaGEyOiBvdXRwdXRMZW4gYmlnZ2VyIHRoYW4gc3RhdGUnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRMZW47IGkrKylcbiAgICAgICAgICAgIG92aWV3LnNldFVpbnQzMig0ICogaSwgc3RhdGVbaV0sIGlzTEUpO1xuICAgIH1cbiAgICBkaWdlc3QoKSB7XG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCBvdXRwdXRMZW4gfSA9IHRoaXM7XG4gICAgICAgIHRoaXMuZGlnZXN0SW50byhidWZmZXIpO1xuICAgICAgICBjb25zdCByZXMgPSBidWZmZXIuc2xpY2UoMCwgb3V0cHV0TGVuKTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIF9jbG9uZUludG8odG8pIHtcbiAgICAgICAgdG8gfHwgKHRvID0gbmV3IHRoaXMuY29uc3RydWN0b3IoKSk7XG4gICAgICAgIHRvLnNldCguLi50aGlzLmdldCgpKTtcbiAgICAgICAgY29uc3QgeyBibG9ja0xlbiwgYnVmZmVyLCBsZW5ndGgsIGZpbmlzaGVkLCBkZXN0cm95ZWQsIHBvcyB9ID0gdGhpcztcbiAgICAgICAgdG8ubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0by5wb3MgPSBwb3M7XG4gICAgICAgIHRvLmZpbmlzaGVkID0gZmluaXNoZWQ7XG4gICAgICAgIHRvLmRlc3Ryb3llZCA9IGRlc3Ryb3llZDtcbiAgICAgICAgaWYgKGxlbmd0aCAlIGJsb2NrTGVuKVxuICAgICAgICAgICAgdG8uYnVmZmVyLnNldChidWZmZXIpO1xuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3NoYTIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_sha2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \******************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNrQztBQUMzQixlQUFlLDJNQUFFLFdBQVcsMk1BQUUsaUJBQWlCLDBOQUFpQixHQUFHLGtEQUFZO0FBQ3RGIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSB1c2UgV2ViQ3J5cHRvIGFrYSBnbG9iYWxUaGlzLmNyeXB0bywgd2hpY2ggZXhpc3RzIGluIGJyb3dzZXJzIGFuZCBub2RlLmpzIDE2Ky5cbi8vIFNlZSB1dGlscy50cyBmb3IgZGV0YWlscy5cbi8vIFRoZSBmaWxlIHdpbGwgdGhyb3cgb24gbm9kZS5qcyAxNCBhbmQgZWFybGllci5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCAqIGFzIG5jIGZyb20gJ25vZGU6Y3J5cHRvJztcbmV4cG9ydCBjb25zdCBjcnlwdG8gPSBuYyAmJiB0eXBlb2YgbmMgPT09ICdvYmplY3QnICYmICd3ZWJjcnlwdG8nIGluIG5jID8gbmMud2ViY3J5cHRvIDogdW5kZWZpbmVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvTm9kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/hmac.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/hmac.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: () => (/* binding */ HMAC),\n/* harmony export */   hmac: () => (/* binding */ hmac)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// HMAC (RFC 2104)\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.hash)(hash);\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vaG1hYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdHO0FBQ3JEO0FBQzNDO0FBQ08sbUJBQW1CLDJDQUFJO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxnREFBVTtBQUNsQixvQkFBb0Isa0RBQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBWTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0RBQVk7QUFDcEIsUUFBUSxpREFBVztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRTtBQUNqRSxnQkFBZ0IseURBQXlEO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3BhYmxvZmVybmFuZGV6L3Rlc3QxMjMvVEVORVgtcGZrbWM5L21haW4vbm9kZV9tb2R1bGVzL0Bub3N0ci1kZXYta2l0L25kay1jYWNoZS1kZXhpZS9ub2RlX21vZHVsZXMvbm9zdHItdG9vbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2htYWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzaCBhcyBhc3NlcnRIYXNoLCBieXRlcyBhcyBhc3NlcnRCeXRlcywgZXhpc3RzIGFzIGFzc2VydEV4aXN0cyB9IGZyb20gJy4vX2Fzc2VydC5qcyc7XG5pbXBvcnQgeyBIYXNoLCB0b0J5dGVzIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vLyBITUFDIChSRkMgMjEwNClcbmV4cG9ydCBjbGFzcyBITUFDIGV4dGVuZHMgSGFzaCB7XG4gICAgY29uc3RydWN0b3IoaGFzaCwgX2tleSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIGFzc2VydEhhc2goaGFzaCk7XG4gICAgICAgIGNvbnN0IGtleSA9IHRvQnl0ZXMoX2tleSk7XG4gICAgICAgIHRoaXMuaUhhc2ggPSBoYXNoLmNyZWF0ZSgpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuaUhhc2gudXBkYXRlICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBpbnN0YW5jZSBvZiBjbGFzcyB3aGljaCBleHRlbmRzIHV0aWxzLkhhc2gnKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IHRoaXMuaUhhc2guYmxvY2tMZW47XG4gICAgICAgIHRoaXMub3V0cHV0TGVuID0gdGhpcy5pSGFzaC5vdXRwdXRMZW47XG4gICAgICAgIGNvbnN0IGJsb2NrTGVuID0gdGhpcy5ibG9ja0xlbjtcbiAgICAgICAgY29uc3QgcGFkID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xuICAgICAgICAvLyBibG9ja0xlbiBjYW4gYmUgYmlnZ2VyIHRoYW4gb3V0cHV0TGVuXG4gICAgICAgIHBhZC5zZXQoa2V5Lmxlbmd0aCA+IGJsb2NrTGVuID8gaGFzaC5jcmVhdGUoKS51cGRhdGUoa2V5KS5kaWdlc3QoKSA6IGtleSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgcGFkW2ldIF49IDB4MzY7XG4gICAgICAgIHRoaXMuaUhhc2gudXBkYXRlKHBhZCk7XG4gICAgICAgIC8vIEJ5IGRvaW5nIHVwZGF0ZSAocHJvY2Vzc2luZyBvZiBmaXJzdCBibG9jaykgb2Ygb3V0ZXIgaGFzaCBoZXJlIHdlIGNhbiByZS11c2UgaXQgYmV0d2VlbiBtdWx0aXBsZSBjYWxscyB2aWEgY2xvbmVcbiAgICAgICAgdGhpcy5vSGFzaCA9IGhhc2guY3JlYXRlKCk7XG4gICAgICAgIC8vIFVuZG8gaW50ZXJuYWwgWE9SICYmIGFwcGx5IG91dGVyIFhPUlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHBhZFtpXSBePSAweDM2IF4gMHg1YztcbiAgICAgICAgdGhpcy5vSGFzaC51cGRhdGUocGFkKTtcbiAgICAgICAgcGFkLmZpbGwoMCk7XG4gICAgfVxuICAgIHVwZGF0ZShidWYpIHtcbiAgICAgICAgYXNzZXJ0RXhpc3RzKHRoaXMpO1xuICAgICAgICB0aGlzLmlIYXNoLnVwZGF0ZShidWYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgYXNzZXJ0RXhpc3RzKHRoaXMpO1xuICAgICAgICBhc3NlcnRCeXRlcyhvdXQsIHRoaXMub3V0cHV0TGVuKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaUhhc2guZGlnZXN0SW50byhvdXQpO1xuICAgICAgICB0aGlzLm9IYXNoLnVwZGF0ZShvdXQpO1xuICAgICAgICB0aGlzLm9IYXNoLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5vSGFzaC5vdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICAvLyBDcmVhdGUgbmV3IGluc3RhbmNlIHdpdGhvdXQgY2FsbGluZyBjb25zdHJ1Y3RvciBzaW5jZSBrZXkgYWxyZWFkeSBpbiBzdGF0ZSBhbmQgd2UgZG9uJ3Qga25vdyBpdC5cbiAgICAgICAgdG8gfHwgKHRvID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyksIHt9KSk7XG4gICAgICAgIGNvbnN0IHsgb0hhc2gsIGlIYXNoLCBmaW5pc2hlZCwgZGVzdHJveWVkLCBibG9ja0xlbiwgb3V0cHV0TGVuIH0gPSB0aGlzO1xuICAgICAgICB0byA9IHRvO1xuICAgICAgICB0by5maW5pc2hlZCA9IGZpbmlzaGVkO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSBkZXN0cm95ZWQ7XG4gICAgICAgIHRvLmJsb2NrTGVuID0gYmxvY2tMZW47XG4gICAgICAgIHRvLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdG8ub0hhc2ggPSBvSGFzaC5fY2xvbmVJbnRvKHRvLm9IYXNoKTtcbiAgICAgICAgdG8uaUhhc2ggPSBpSGFzaC5fY2xvbmVJbnRvKHRvLmlIYXNoKTtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIHRoaXMub0hhc2guZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmlIYXNoLmRlc3Ryb3koKTtcbiAgICB9XG59XG4vKipcbiAqIEhNQUM6IFJGQzIxMDQgbWVzc2FnZSBhdXRoZW50aWNhdGlvbiBjb2RlLlxuICogQHBhcmFtIGhhc2ggLSBmdW5jdGlvbiB0aGF0IHdvdWxkIGJlIHVzZWQgZS5nLiBzaGEyNTZcbiAqIEBwYXJhbSBrZXkgLSBtZXNzYWdlIGtleVxuICogQHBhcmFtIG1lc3NhZ2UgLSBtZXNzYWdlIGRhdGFcbiAqL1xuZXhwb3J0IGNvbnN0IGhtYWMgPSAoaGFzaCwga2V5LCBtZXNzYWdlKSA9PiBuZXcgSE1BQyhoYXNoLCBrZXkpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoKTtcbmhtYWMuY3JlYXRlID0gKGhhc2gsIGtleSkgPT4gbmV3IEhNQUMoaGFzaCwga2V5KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhtYWMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/hmac.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha256.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha256.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_sha2.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_sha2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\n\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/_assert.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/_assert.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQU87QUFDUDtBQUNBLG1EQUFtRCxFQUFFO0FBQ3JEO0FBQ087QUFDUDtBQUNBLGlEQUFpRCxFQUFFO0FBQ25EO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsUUFBUSxrQkFBa0IsU0FBUztBQUM1RjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLElBQUk7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxNQUFNLEVBQUM7QUFDdEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYWJsb2Zlcm5hbmRlei90ZXN0MTIzL1RFTkVYLXBma21jOS9tYWluL25vZGVfbW9kdWxlcy9Abm9zdHItZGV2LWtpdC9uZGstY2FjaGUtZGV4aWUvbm9kZV9tb2R1bGVzL25vc3RyLXRvb2xzL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBudW1iZXIobikge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobikgfHwgbiA8IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgV3JvbmcgcG9zaXRpdmUgaW50ZWdlcjogJHtufWApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJvb2woYikge1xuICAgIGlmICh0eXBlb2YgYiAhPT0gJ2Jvb2xlYW4nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGJvb2xlYW4sIG5vdCAke2J9YCk7XG59XG5leHBvcnQgZnVuY3Rpb24gYnl0ZXMoYiwgLi4ubGVuZ3Rocykge1xuICAgIGlmICghKGIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBVaW50OEFycmF5Jyk7XG4gICAgaWYgKGxlbmd0aHMubGVuZ3RoID4gMCAmJiAhbGVuZ3Rocy5pbmNsdWRlcyhiLmxlbmd0aCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgVWludDhBcnJheSBvZiBsZW5ndGggJHtsZW5ndGhzfSwgbm90IG9mIGxlbmd0aD0ke2IubGVuZ3RofWApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc2goaGFzaCkge1xuICAgIGlmICh0eXBlb2YgaGFzaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaGFzaC5jcmVhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcbiAgICBudW1iZXIoaGFzaC5vdXRwdXRMZW4pO1xuICAgIG51bWJlcihoYXNoLmJsb2NrTGVuKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleGlzdHMoaW5zdGFuY2UsIGNoZWNrRmluaXNoZWQgPSB0cnVlKSB7XG4gICAgaWYgKGluc3RhbmNlLmRlc3Ryb3llZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZCcpO1xuICAgIGlmIChjaGVja0ZpbmlzaGVkICYmIGluc3RhbmNlLmZpbmlzaGVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2gjZGlnZXN0KCkgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvdXRwdXQob3V0LCBpbnN0YW5jZSkge1xuICAgIGJ5dGVzKG91dCk7XG4gICAgY29uc3QgbWluID0gaW5zdGFuY2Uub3V0cHV0TGVuO1xuICAgIGlmIChvdXQubGVuZ3RoIDwgbWluKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlnZXN0SW50bygpIGV4cGVjdHMgb3V0cHV0IGJ1ZmZlciBvZiBsZW5ndGggYXQgbGVhc3QgJHttaW59YCk7XG4gICAgfVxufVxuY29uc3QgYXNzZXJ0ID0ge1xuICAgIG51bWJlcixcbiAgICBib29sLFxuICAgIGJ5dGVzLFxuICAgIGhhc2gsXG4gICAgZXhpc3RzLFxuICAgIG91dHB1dCxcbn07XG5leHBvcnQgZGVmYXVsdCBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/_sha2.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/_sha2.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA2: () => (/* binding */ SHA2)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].exists(this);\n        _assert_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3NoYTIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQ3FCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxtQkFBbUIsMkNBQUk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxREFBVTtBQUM5QjtBQUNBO0FBQ0EsUUFBUSx5REFBYTtBQUNyQixnQkFBZ0IseUJBQXlCO0FBQ3pDLGVBQWUsa0RBQU87QUFDdEI7QUFDQSwwQkFBMEIsVUFBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMscURBQVU7QUFDM0MsdUJBQXVCLHVCQUF1QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEseURBQWE7QUFDckIsUUFBUSx5REFBYTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrQkFBK0I7QUFDL0MsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixjQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixxREFBVTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFEQUFxRDtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3BhYmxvZmVybmFuZGV6L3Rlc3QxMjMvVEVORVgtcGZrbWM5L21haW4vbm9kZV9tb2R1bGVzL0Bub3N0ci1kZXYta2l0L25kay1jYWNoZS1kZXhpZS9ub2RlX21vZHVsZXMvbm9zdHItdG9vbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19zaGEyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnLi9fYXNzZXJ0LmpzJztcbmltcG9ydCB7IEhhc2gsIGNyZWF0ZVZpZXcsIHRvQnl0ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbi8vIFBvbHlmaWxsIGZvciBTYWZhcmkgMTRcbmZ1bmN0aW9uIHNldEJpZ1VpbnQ2NCh2aWV3LCBieXRlT2Zmc2V0LCB2YWx1ZSwgaXNMRSkge1xuICAgIGlmICh0eXBlb2Ygdmlldy5zZXRCaWdVaW50NjQgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB2aWV3LnNldEJpZ1VpbnQ2NChieXRlT2Zmc2V0LCB2YWx1ZSwgaXNMRSk7XG4gICAgY29uc3QgXzMybiA9IEJpZ0ludCgzMik7XG4gICAgY29uc3QgX3UzMl9tYXggPSBCaWdJbnQoMHhmZmZmZmZmZik7XG4gICAgY29uc3Qgd2ggPSBOdW1iZXIoKHZhbHVlID4+IF8zMm4pICYgX3UzMl9tYXgpO1xuICAgIGNvbnN0IHdsID0gTnVtYmVyKHZhbHVlICYgX3UzMl9tYXgpO1xuICAgIGNvbnN0IGggPSBpc0xFID8gNCA6IDA7XG4gICAgY29uc3QgbCA9IGlzTEUgPyAwIDogNDtcbiAgICB2aWV3LnNldFVpbnQzMihieXRlT2Zmc2V0ICsgaCwgd2gsIGlzTEUpO1xuICAgIHZpZXcuc2V0VWludDMyKGJ5dGVPZmZzZXQgKyBsLCB3bCwgaXNMRSk7XG59XG4vLyBCYXNlIFNIQTIgY2xhc3MgKFJGQyA2MjM0KVxuZXhwb3J0IGNsYXNzIFNIQTIgZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgb3V0cHV0TGVuLCBwYWRPZmZzZXQsIGlzTEUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5wYWRPZmZzZXQgPSBwYWRPZmZzZXQ7XG4gICAgICAgIHRoaXMuaXNMRSA9IGlzTEU7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xuICAgICAgICB0aGlzLnZpZXcgPSBjcmVhdGVWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICB9XG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgYXNzZXJ0LmV4aXN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyB2aWV3LCBidWZmZXIsIGJsb2NrTGVuIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gdG9CeXRlcyhkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjspIHtcbiAgICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zLCBsZW4gLSBwb3MpO1xuICAgICAgICAgICAgLy8gRmFzdCBwYXRoOiB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBibG9jayBpbiBpbnB1dCwgY2FzdCBpdCB0byB2aWV3IGFuZCBwcm9jZXNzXG4gICAgICAgICAgICBpZiAodGFrZSA9PT0gYmxvY2tMZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhVmlldyA9IGNyZWF0ZVZpZXcoZGF0YSk7XG4gICAgICAgICAgICAgICAgZm9yICg7IGJsb2NrTGVuIDw9IGxlbiAtIHBvczsgcG9zICs9IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoZGF0YVZpZXcsIHBvcyk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIuc2V0KGRhdGEuc3ViYXJyYXkocG9zLCBwb3MgKyB0YWtlKSwgdGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gdGFrZTtcbiAgICAgICAgICAgIHBvcyArPSB0YWtlO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIHRoaXMucm91bmRDbGVhbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgYXNzZXJ0LmV4aXN0cyh0aGlzKTtcbiAgICAgICAgYXNzZXJ0Lm91dHB1dChvdXQsIHRoaXMpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gUGFkZGluZ1xuICAgICAgICAvLyBXZSBjYW4gYXZvaWQgYWxsb2NhdGlvbiBvZiBidWZmZXIgZm9yIHBhZGRpbmcgY29tcGxldGVseSBpZiBpdFxuICAgICAgICAvLyB3YXMgcHJldmlvdXNseSBub3QgYWxsb2NhdGVkIGhlcmUuIEJ1dCBpdCB3b24ndCBjaGFuZ2UgcGVyZm9ybWFuY2UuXG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCB2aWV3LCBibG9ja0xlbiwgaXNMRSB9ID0gdGhpcztcbiAgICAgICAgbGV0IHsgcG9zIH0gPSB0aGlzO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGJpdCAnMScgdG8gdGhlIG1lc3NhZ2VcbiAgICAgICAgYnVmZmVyW3BvcysrXSA9IDBiMTAwMDAwMDA7XG4gICAgICAgIHRoaXMuYnVmZmVyLnN1YmFycmF5KHBvcykuZmlsbCgwKTtcbiAgICAgICAgLy8gd2UgaGF2ZSBsZXNzIHRoYW4gcGFkT2Zmc2V0IGxlZnQgaW4gYnVmZmVyLCBzbyB3ZSBjYW5ub3QgcHV0IGxlbmd0aCBpbiBjdXJyZW50IGJsb2NrLCBuZWVkIHByb2Nlc3MgaXQgYW5kIHBhZCBhZ2FpblxuICAgICAgICBpZiAodGhpcy5wYWRPZmZzZXQgPiBibG9ja0xlbiAtIHBvcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYWQgdW50aWwgZnVsbCBibG9jayBieXRlIHdpdGggemVyb3NcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGJsb2NrTGVuOyBpKyspXG4gICAgICAgICAgICBidWZmZXJbaV0gPSAwO1xuICAgICAgICAvLyBOb3RlOiBzaGE1MTIgcmVxdWlyZXMgbGVuZ3RoIHRvIGJlIDEyOGJpdCBpbnRlZ2VyLCBidXQgbGVuZ3RoIGluIEpTIHdpbGwgb3ZlcmZsb3cgYmVmb3JlIHRoYXRcbiAgICAgICAgLy8gWW91IG5lZWQgdG8gd3JpdGUgYXJvdW5kIDIgZXhhYnl0ZXMgKHU2NF9tYXggLyA4IC8gKDEwMjQqKjYpKSBmb3IgdGhpcyB0byBoYXBwZW4uXG4gICAgICAgIC8vIFNvIHdlIGp1c3Qgd3JpdGUgbG93ZXN0IDY0IGJpdHMgb2YgdGhhdCB2YWx1ZS5cbiAgICAgICAgc2V0QmlnVWludDY0KHZpZXcsIGJsb2NrTGVuIC0gOCwgQmlnSW50KHRoaXMubGVuZ3RoICogOCksIGlzTEUpO1xuICAgICAgICB0aGlzLnByb2Nlc3ModmlldywgMCk7XG4gICAgICAgIGNvbnN0IG92aWV3ID0gY3JlYXRlVmlldyhvdXQpO1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLm91dHB1dExlbjtcbiAgICAgICAgLy8gTk9URTogd2UgZG8gZGl2aXNpb24gYnkgNCBsYXRlciwgd2hpY2ggc2hvdWxkIGJlIGZ1c2VkIGluIHNpbmdsZSBvcCB3aXRoIG1vZHVsbyBieSBKSVRcbiAgICAgICAgaWYgKGxlbiAlIDQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ19zaGEyOiBvdXRwdXRMZW4gc2hvdWxkIGJlIGFsaWduZWQgdG8gMzJiaXQnKTtcbiAgICAgICAgY29uc3Qgb3V0TGVuID0gbGVuIC8gNDtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldCgpO1xuICAgICAgICBpZiAob3V0TGVuID4gc3RhdGUubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIGJpZ2dlciB0aGFuIHN0YXRlJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspXG4gICAgICAgICAgICBvdmlldy5zZXRVaW50MzIoNCAqIGksIHN0YXRlW2ldLCBpc0xFKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgb3V0cHV0TGVuIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLmRpZ2VzdEludG8oYnVmZmVyKTtcbiAgICAgICAgY29uc3QgcmVzID0gYnVmZmVyLnNsaWNlKDAsIG91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIHRvIHx8ICh0byA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkpO1xuICAgICAgICB0by5zZXQoLi4udGhpcy5nZXQoKSk7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIGJ1ZmZlciwgbGVuZ3RoLCBmaW5pc2hlZCwgZGVzdHJveWVkLCBwb3MgfSA9IHRoaXM7XG4gICAgICAgIHRvLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdG8ucG9zID0gcG9zO1xuICAgICAgICB0by5maW5pc2hlZCA9IGZpbmlzaGVkO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSBkZXN0cm95ZWQ7XG4gICAgICAgIGlmIChsZW5ndGggJSBibG9ja0xlbilcbiAgICAgICAgICAgIHRvLmJ1ZmZlci5zZXQoYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9zaGEyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/_sha2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === 'object' && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNrQztBQUMzQixlQUFlLDJNQUFFLFdBQVcsMk1BQUUsaUJBQWlCLDBOQUFpQixHQUFHLGtEQUFZO0FBQ3RGIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSB1c2UgV2ViQ3J5cHRvIGFrYSBnbG9iYWxUaGlzLmNyeXB0bywgd2hpY2ggZXhpc3RzIGluIGJyb3dzZXJzIGFuZCBub2RlLmpzIDE2Ky5cbi8vIFNlZSB1dGlscy50cyBmb3IgZGV0YWlscy5cbi8vIFRoZSBmaWxlIHdpbGwgdGhyb3cgb24gbm9kZS5qcyAxNCBhbmQgZWFybGllci5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCAqIGFzIG5jIGZyb20gJ25vZGU6Y3J5cHRvJztcbmV4cG9ydCBjb25zdCBjcnlwdG8gPSBuYyAmJiB0eXBlb2YgbmMgPT09ICdvYmplY3QnICYmICd3ZWJjcnlwdG8nIGluIG5jID8gbmMud2ViY3J5cHRvIDogdW5kZWZpbmVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvTm9kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/hkdf.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/hkdf.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   expand: () => (/* binding */ expand),\n/* harmony export */   extract: () => (/* binding */ extract),\n/* harmony export */   hkdf: () => (/* binding */ hkdf)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _hmac_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hmac.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/hmac.js\");\n\n\n\n// HKDF (RFC 5869)\n// https://soatok.blog/2021/11/17/understanding-hkdf/\n/**\n * HKDF-Extract(IKM, salt) -> PRK\n * Arguments position differs from spec (IKM is first one, since it is not optional)\n * @param hash\n * @param ikm\n * @param salt\n * @returns\n */\nfunction extract(hash, ikm, salt) {\n    _assert_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hash(hash);\n    // NOTE: some libraries treat zero-length array as 'not provided';\n    // we don't, since we have undefined as 'not provided'\n    // https://github.com/RustCrypto/KDFs/issues/15\n    if (salt === undefined)\n        salt = new Uint8Array(hash.outputLen); // if not provided, it is set to a string of HashLen zeros\n    return (0,_hmac_js__WEBPACK_IMPORTED_MODULE_2__.hmac)(hash, (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(salt), (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(ikm));\n}\n// HKDF-Expand(PRK, info, L) -> OKM\nconst HKDF_COUNTER = new Uint8Array([0]);\nconst EMPTY_BUFFER = new Uint8Array();\n/**\n * HKDF-expand from the spec.\n * @param prk - a pseudorandom key of at least HashLen octets (usually, the output from the extract step)\n * @param info - optional context and application specific information (can be a zero-length string)\n * @param length - length of output keying material in octets\n */\nfunction expand(hash, prk, info, length = 32) {\n    _assert_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hash(hash);\n    _assert_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].number(length);\n    if (length > 255 * hash.outputLen)\n        throw new Error('Length should be <= 255*HashLen');\n    const blocks = Math.ceil(length / hash.outputLen);\n    if (info === undefined)\n        info = EMPTY_BUFFER;\n    // first L(ength) octets of T\n    const okm = new Uint8Array(blocks * hash.outputLen);\n    // Re-use HMAC instance between blocks\n    const HMAC = _hmac_js__WEBPACK_IMPORTED_MODULE_2__.hmac.create(hash, prk);\n    const HMACTmp = HMAC._cloneInto();\n    const T = new Uint8Array(HMAC.outputLen);\n    for (let counter = 0; counter < blocks; counter++) {\n        HKDF_COUNTER[0] = counter + 1;\n        // T(0) = empty string (zero length)\n        // T(N) = HMAC-Hash(PRK, T(N-1) | info | N)\n        HMACTmp.update(counter === 0 ? EMPTY_BUFFER : T)\n            .update(info)\n            .update(HKDF_COUNTER)\n            .digestInto(T);\n        okm.set(T, hash.outputLen * counter);\n        HMAC._cloneInto(HMACTmp);\n    }\n    HMAC.destroy();\n    HMACTmp.destroy();\n    T.fill(0);\n    HKDF_COUNTER.fill(0);\n    return okm.slice(0, length);\n}\n/**\n * HKDF (RFC 5869): extract + expand in one step.\n * @param hash - hash function that would be used (e.g. sha256)\n * @param ikm - input keying material, the initial key\n * @param salt - optional salt value (a non-secret random value)\n * @param info - optional context and application specific information\n * @param length - length of output keying material in octets\n */\nconst hkdf = (hash, ikm, salt, info, length) => expand(hash, extract(hash, ikm, salt), info, length);\n//# sourceMappingURL=hkdf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vaGtkZi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBa0M7QUFDRztBQUNKO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxJQUFJLHVEQUFXO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0MsV0FBVyw4Q0FBSSxPQUFPLGtEQUFPLFFBQVEsa0RBQU87QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLElBQUksdURBQVc7QUFDZixJQUFJLHlEQUFhO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsMENBQUk7QUFDckI7QUFDQTtBQUNBLDBCQUEwQixrQkFBa0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiL1VzZXJzL3BhYmxvZmVybmFuZGV6L3Rlc3QxMjMvVEVORVgtcGZrbWM5L21haW4vbm9kZV9tb2R1bGVzL0Bub3N0ci1kZXYta2l0L25kay1jYWNoZS1kZXhpZS9ub2RlX21vZHVsZXMvbm9zdHItdG9vbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2hrZGYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tICcuL19hc3NlcnQuanMnO1xuaW1wb3J0IHsgdG9CeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgaG1hYyB9IGZyb20gJy4vaG1hYy5qcyc7XG4vLyBIS0RGIChSRkMgNTg2OSlcbi8vIGh0dHBzOi8vc29hdG9rLmJsb2cvMjAyMS8xMS8xNy91bmRlcnN0YW5kaW5nLWhrZGYvXG4vKipcbiAqIEhLREYtRXh0cmFjdChJS00sIHNhbHQpIC0+IFBSS1xuICogQXJndW1lbnRzIHBvc2l0aW9uIGRpZmZlcnMgZnJvbSBzcGVjIChJS00gaXMgZmlyc3Qgb25lLCBzaW5jZSBpdCBpcyBub3Qgb3B0aW9uYWwpXG4gKiBAcGFyYW0gaGFzaFxuICogQHBhcmFtIGlrbVxuICogQHBhcmFtIHNhbHRcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0KGhhc2gsIGlrbSwgc2FsdCkge1xuICAgIGFzc2VydC5oYXNoKGhhc2gpO1xuICAgIC8vIE5PVEU6IHNvbWUgbGlicmFyaWVzIHRyZWF0IHplcm8tbGVuZ3RoIGFycmF5IGFzICdub3QgcHJvdmlkZWQnO1xuICAgIC8vIHdlIGRvbid0LCBzaW5jZSB3ZSBoYXZlIHVuZGVmaW5lZCBhcyAnbm90IHByb3ZpZGVkJ1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9SdXN0Q3J5cHRvL0tERnMvaXNzdWVzLzE1XG4gICAgaWYgKHNhbHQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgc2FsdCA9IG5ldyBVaW50OEFycmF5KGhhc2gub3V0cHV0TGVuKTsgLy8gaWYgbm90IHByb3ZpZGVkLCBpdCBpcyBzZXQgdG8gYSBzdHJpbmcgb2YgSGFzaExlbiB6ZXJvc1xuICAgIHJldHVybiBobWFjKGhhc2gsIHRvQnl0ZXMoc2FsdCksIHRvQnl0ZXMoaWttKSk7XG59XG4vLyBIS0RGLUV4cGFuZChQUkssIGluZm8sIEwpIC0+IE9LTVxuY29uc3QgSEtERl9DT1VOVEVSID0gbmV3IFVpbnQ4QXJyYXkoWzBdKTtcbmNvbnN0IEVNUFRZX0JVRkZFUiA9IG5ldyBVaW50OEFycmF5KCk7XG4vKipcbiAqIEhLREYtZXhwYW5kIGZyb20gdGhlIHNwZWMuXG4gKiBAcGFyYW0gcHJrIC0gYSBwc2V1ZG9yYW5kb20ga2V5IG9mIGF0IGxlYXN0IEhhc2hMZW4gb2N0ZXRzICh1c3VhbGx5LCB0aGUgb3V0cHV0IGZyb20gdGhlIGV4dHJhY3Qgc3RlcClcbiAqIEBwYXJhbSBpbmZvIC0gb3B0aW9uYWwgY29udGV4dCBhbmQgYXBwbGljYXRpb24gc3BlY2lmaWMgaW5mb3JtYXRpb24gKGNhbiBiZSBhIHplcm8tbGVuZ3RoIHN0cmluZylcbiAqIEBwYXJhbSBsZW5ndGggLSBsZW5ndGggb2Ygb3V0cHV0IGtleWluZyBtYXRlcmlhbCBpbiBvY3RldHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZChoYXNoLCBwcmssIGluZm8sIGxlbmd0aCA9IDMyKSB7XG4gICAgYXNzZXJ0Lmhhc2goaGFzaCk7XG4gICAgYXNzZXJ0Lm51bWJlcihsZW5ndGgpO1xuICAgIGlmIChsZW5ndGggPiAyNTUgKiBoYXNoLm91dHB1dExlbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMZW5ndGggc2hvdWxkIGJlIDw9IDI1NSpIYXNoTGVuJyk7XG4gICAgY29uc3QgYmxvY2tzID0gTWF0aC5jZWlsKGxlbmd0aCAvIGhhc2gub3V0cHV0TGVuKTtcbiAgICBpZiAoaW5mbyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBpbmZvID0gRU1QVFlfQlVGRkVSO1xuICAgIC8vIGZpcnN0IEwoZW5ndGgpIG9jdGV0cyBvZiBUXG4gICAgY29uc3Qgb2ttID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tzICogaGFzaC5vdXRwdXRMZW4pO1xuICAgIC8vIFJlLXVzZSBITUFDIGluc3RhbmNlIGJldHdlZW4gYmxvY2tzXG4gICAgY29uc3QgSE1BQyA9IGhtYWMuY3JlYXRlKGhhc2gsIHByayk7XG4gICAgY29uc3QgSE1BQ1RtcCA9IEhNQUMuX2Nsb25lSW50bygpO1xuICAgIGNvbnN0IFQgPSBuZXcgVWludDhBcnJheShITUFDLm91dHB1dExlbik7XG4gICAgZm9yIChsZXQgY291bnRlciA9IDA7IGNvdW50ZXIgPCBibG9ja3M7IGNvdW50ZXIrKykge1xuICAgICAgICBIS0RGX0NPVU5URVJbMF0gPSBjb3VudGVyICsgMTtcbiAgICAgICAgLy8gVCgwKSA9IGVtcHR5IHN0cmluZyAoemVybyBsZW5ndGgpXG4gICAgICAgIC8vIFQoTikgPSBITUFDLUhhc2goUFJLLCBUKE4tMSkgfCBpbmZvIHwgTilcbiAgICAgICAgSE1BQ1RtcC51cGRhdGUoY291bnRlciA9PT0gMCA/IEVNUFRZX0JVRkZFUiA6IFQpXG4gICAgICAgICAgICAudXBkYXRlKGluZm8pXG4gICAgICAgICAgICAudXBkYXRlKEhLREZfQ09VTlRFUilcbiAgICAgICAgICAgIC5kaWdlc3RJbnRvKFQpO1xuICAgICAgICBva20uc2V0KFQsIGhhc2gub3V0cHV0TGVuICogY291bnRlcik7XG4gICAgICAgIEhNQUMuX2Nsb25lSW50byhITUFDVG1wKTtcbiAgICB9XG4gICAgSE1BQy5kZXN0cm95KCk7XG4gICAgSE1BQ1RtcC5kZXN0cm95KCk7XG4gICAgVC5maWxsKDApO1xuICAgIEhLREZfQ09VTlRFUi5maWxsKDApO1xuICAgIHJldHVybiBva20uc2xpY2UoMCwgbGVuZ3RoKTtcbn1cbi8qKlxuICogSEtERiAoUkZDIDU4NjkpOiBleHRyYWN0ICsgZXhwYW5kIGluIG9uZSBzdGVwLlxuICogQHBhcmFtIGhhc2ggLSBoYXNoIGZ1bmN0aW9uIHRoYXQgd291bGQgYmUgdXNlZCAoZS5nLiBzaGEyNTYpXG4gKiBAcGFyYW0gaWttIC0gaW5wdXQga2V5aW5nIG1hdGVyaWFsLCB0aGUgaW5pdGlhbCBrZXlcbiAqIEBwYXJhbSBzYWx0IC0gb3B0aW9uYWwgc2FsdCB2YWx1ZSAoYSBub24tc2VjcmV0IHJhbmRvbSB2YWx1ZSlcbiAqIEBwYXJhbSBpbmZvIC0gb3B0aW9uYWwgY29udGV4dCBhbmQgYXBwbGljYXRpb24gc3BlY2lmaWMgaW5mb3JtYXRpb25cbiAqIEBwYXJhbSBsZW5ndGggLSBsZW5ndGggb2Ygb3V0cHV0IGtleWluZyBtYXRlcmlhbCBpbiBvY3RldHNcbiAqL1xuZXhwb3J0IGNvbnN0IGhrZGYgPSAoaGFzaCwgaWttLCBzYWx0LCBpbmZvLCBsZW5ndGgpID0+IGV4cGFuZChoYXNoLCBleHRyYWN0KGhhc2gsIGlrbSwgc2FsdCksIGluZm8sIGxlbmd0aCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oa2RmLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/hkdf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/hmac.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/hmac.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: () => (/* binding */ HMAC),\n/* harmony export */   hmac: () => (/* binding */ hmac)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// HMAC (RFC 2104)\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hash(hash);\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].exists(this);\n        _assert_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vaG1hYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtDO0FBQ1M7QUFDM0M7QUFDTyxtQkFBbUIsMkNBQUk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVEQUFXO0FBQ25CLG9CQUFvQixrREFBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlEQUFhO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx5REFBYTtBQUNyQixRQUFRLHdEQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFLGdCQUFnQix5REFBeUQ7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vaG1hYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gJy4vX2Fzc2VydC5qcyc7XG5pbXBvcnQgeyBIYXNoLCB0b0J5dGVzIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vLyBITUFDIChSRkMgMjEwNClcbmV4cG9ydCBjbGFzcyBITUFDIGV4dGVuZHMgSGFzaCB7XG4gICAgY29uc3RydWN0b3IoaGFzaCwgX2tleSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIGFzc2VydC5oYXNoKGhhc2gpO1xuICAgICAgICBjb25zdCBrZXkgPSB0b0J5dGVzKF9rZXkpO1xuICAgICAgICB0aGlzLmlIYXNoID0gaGFzaC5jcmVhdGUoKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmlIYXNoLnVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgaW5zdGFuY2Ugb2YgY2xhc3Mgd2hpY2ggZXh0ZW5kcyB1dGlscy5IYXNoJyk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW4gPSB0aGlzLmlIYXNoLmJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IHRoaXMuaUhhc2gub3V0cHV0TGVuO1xuICAgICAgICBjb25zdCBibG9ja0xlbiA9IHRoaXMuYmxvY2tMZW47XG4gICAgICAgIGNvbnN0IHBhZCA9IG5ldyBVaW50OEFycmF5KGJsb2NrTGVuKTtcbiAgICAgICAgLy8gYmxvY2tMZW4gY2FuIGJlIGJpZ2dlciB0aGFuIG91dHB1dExlblxuICAgICAgICBwYWQuc2V0KGtleS5sZW5ndGggPiBibG9ja0xlbiA/IGhhc2guY3JlYXRlKCkudXBkYXRlKGtleSkuZGlnZXN0KCkgOiBrZXkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHBhZFtpXSBePSAweDM2O1xuICAgICAgICB0aGlzLmlIYXNoLnVwZGF0ZShwYWQpO1xuICAgICAgICAvLyBCeSBkb2luZyB1cGRhdGUgKHByb2Nlc3Npbmcgb2YgZmlyc3QgYmxvY2spIG9mIG91dGVyIGhhc2ggaGVyZSB3ZSBjYW4gcmUtdXNlIGl0IGJldHdlZW4gbXVsdGlwbGUgY2FsbHMgdmlhIGNsb25lXG4gICAgICAgIHRoaXMub0hhc2ggPSBoYXNoLmNyZWF0ZSgpO1xuICAgICAgICAvLyBVbmRvIGludGVybmFsIFhPUiAmJiBhcHBseSBvdXRlciBYT1JcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwYWRbaV0gXj0gMHgzNiBeIDB4NWM7XG4gICAgICAgIHRoaXMub0hhc2gudXBkYXRlKHBhZCk7XG4gICAgICAgIHBhZC5maWxsKDApO1xuICAgIH1cbiAgICB1cGRhdGUoYnVmKSB7XG4gICAgICAgIGFzc2VydC5leGlzdHModGhpcyk7XG4gICAgICAgIHRoaXMuaUhhc2gudXBkYXRlKGJ1Zik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkaWdlc3RJbnRvKG91dCkge1xuICAgICAgICBhc3NlcnQuZXhpc3RzKHRoaXMpO1xuICAgICAgICBhc3NlcnQuYnl0ZXMob3V0LCB0aGlzLm91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmlIYXNoLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgdGhpcy5vSGFzaC51cGRhdGUob3V0KTtcbiAgICAgICAgdGhpcy5vSGFzaC5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIH1cbiAgICBkaWdlc3QoKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMub0hhc2gub3V0cHV0TGVuKTtcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIF9jbG9uZUludG8odG8pIHtcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBpbnN0YW5jZSB3aXRob3V0IGNhbGxpbmcgY29uc3RydWN0b3Igc2luY2Uga2V5IGFscmVhZHkgaW4gc3RhdGUgYW5kIHdlIGRvbid0IGtub3cgaXQuXG4gICAgICAgIHRvIHx8ICh0byA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLCB7fSkpO1xuICAgICAgICBjb25zdCB7IG9IYXNoLCBpSGFzaCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgYmxvY2tMZW4sIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdG8gPSB0bztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICB0by5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0by5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRvLm9IYXNoID0gb0hhc2guX2Nsb25lSW50byh0by5vSGFzaCk7XG4gICAgICAgIHRvLmlIYXNoID0gaUhhc2guX2Nsb25lSW50byh0by5pSGFzaCk7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9IYXNoLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5pSGFzaC5kZXN0cm95KCk7XG4gICAgfVxufVxuLyoqXG4gKiBITUFDOiBSRkMyMTA0IG1lc3NhZ2UgYXV0aGVudGljYXRpb24gY29kZS5cbiAqIEBwYXJhbSBoYXNoIC0gZnVuY3Rpb24gdGhhdCB3b3VsZCBiZSB1c2VkIGUuZy4gc2hhMjU2XG4gKiBAcGFyYW0ga2V5IC0gbWVzc2FnZSBrZXlcbiAqIEBwYXJhbSBtZXNzYWdlIC0gbWVzc2FnZSBkYXRhXG4gKi9cbmV4cG9ydCBjb25zdCBobWFjID0gKGhhc2gsIGtleSwgbWVzc2FnZSkgPT4gbmV3IEhNQUMoaGFzaCwga2V5KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KCk7XG5obWFjLmNyZWF0ZSA9IChoYXNoLCBrZXkpID0+IG5ldyBITUFDKGhhc2gsIGtleSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1obWFjLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/hmac.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/sha256.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/sha256.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_sha2.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/_sha2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\nconst sha224 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vc2hhMjU2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0M7QUFDaUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMENBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5QkFBeUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSx5QkFBeUIsUUFBUTtBQUNqQztBQUNBO0FBQ0EsdUJBQXVCLCtDQUFJLFdBQVcsK0NBQUk7QUFDMUMsdUJBQXVCLCtDQUFJLFdBQVcsK0NBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsY0FBYyx5QkFBeUI7QUFDdkMsd0JBQXdCLFFBQVE7QUFDaEMsMkJBQTJCLCtDQUFJLFNBQVMsK0NBQUksVUFBVSwrQ0FBSTtBQUMxRDtBQUNBLDJCQUEyQiwrQ0FBSSxTQUFTLCtDQUFJLFVBQVUsK0NBQUk7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sZUFBZSwwREFBZTtBQUM5QixlQUFlLDBEQUFlO0FBQ3JDIiwic291cmNlcyI6WyIvVXNlcnMvcGFibG9mZXJuYW5kZXovdGVzdDEyMy9URU5FWC1wZmttYzkvbWFpbi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWNhY2hlLWRleGllL25vZGVfbW9kdWxlcy9ub3N0ci10b29scy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vc2hhMjU2LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNIQTIgfSBmcm9tICcuL19zaGEyLmpzJztcbmltcG9ydCB7IHJvdHIsIHdyYXBDb25zdHJ1Y3RvciB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gQ2hvaWNlOiBhID8gYiA6IGNcbmNvbnN0IENoaSA9IChhLCBiLCBjKSA9PiAoYSAmIGIpIF4gKH5hICYgYyk7XG4vLyBNYWpvcml0eSBmdW5jdGlvbiwgdHJ1ZSBpZiBhbnkgdHdvIGlucHVzdCBpcyB0cnVlXG5jb25zdCBNYWogPSAoYSwgYiwgYykgPT4gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xuLy8gUm91bmQgY29uc3RhbnRzOlxuLy8gZmlyc3QgMzIgYml0cyBvZiB0aGUgZnJhY3Rpb25hbCBwYXJ0cyBvZiB0aGUgY3ViZSByb290cyBvZiB0aGUgZmlyc3QgNjQgcHJpbWVzIDIuLjMxMSlcbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgU0hBMjU2X0sgPSBuZXcgVWludDMyQXJyYXkoW1xuICAgIDB4NDI4YTJmOTgsIDB4NzEzNzQ0OTEsIDB4YjVjMGZiY2YsIDB4ZTliNWRiYTUsIDB4Mzk1NmMyNWIsIDB4NTlmMTExZjEsIDB4OTIzZjgyYTQsIDB4YWIxYzVlZDUsXG4gICAgMHhkODA3YWE5OCwgMHgxMjgzNWIwMSwgMHgyNDMxODViZSwgMHg1NTBjN2RjMywgMHg3MmJlNWQ3NCwgMHg4MGRlYjFmZSwgMHg5YmRjMDZhNywgMHhjMTliZjE3NCxcbiAgICAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLCAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAgIDB4OTgzZTUxNTIsIDB4YTgzMWM2NmQsIDB4YjAwMzI3YzgsIDB4YmY1OTdmYzcsIDB4YzZlMDBiZjMsIDB4ZDVhNzkxNDcsIDB4MDZjYTYzNTEsIDB4MTQyOTI5NjcsXG4gICAgMHgyN2I3MGE4NSwgMHgyZTFiMjEzOCwgMHg0ZDJjNmRmYywgMHg1MzM4MGQxMywgMHg2NTBhNzM1NCwgMHg3NjZhMGFiYiwgMHg4MWMyYzkyZSwgMHg5MjcyMmM4NSxcbiAgICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLCAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAgIDB4MTlhNGMxMTYsIDB4MWUzNzZjMDgsIDB4Mjc0ODc3NGMsIDB4MzRiMGJjYjUsIDB4MzkxYzBjYjMsIDB4NGVkOGFhNGEsIDB4NWI5Y2NhNGYsIDB4NjgyZTZmZjMsXG4gICAgMHg3NDhmODJlZSwgMHg3OGE1NjM2ZiwgMHg4NGM4NzgxNCwgMHg4Y2M3MDIwOCwgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMlxuXSk7XG4vLyBJbml0aWFsIHN0YXRlIChmaXJzdCAzMiBiaXRzIG9mIHRoZSBmcmFjdGlvbmFsIHBhcnRzIG9mIHRoZSBzcXVhcmUgcm9vdHMgb2YgdGhlIGZpcnN0IDggcHJpbWVzIDIuLjE5KTpcbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgSVYgPSBuZXcgVWludDMyQXJyYXkoW1xuICAgIDB4NmEwOWU2NjcsIDB4YmI2N2FlODUsIDB4M2M2ZWYzNzIsIDB4YTU0ZmY1M2EsIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTlcbl0pO1xuLy8gVGVtcG9yYXJ5IGJ1ZmZlciwgbm90IHVzZWQgdG8gc3RvcmUgYW55dGhpbmcgYmV0d2VlbiBydW5zXG4vLyBOYW1lZCB0aGlzIHdheSBiZWNhdXNlIGl0IG1hdGNoZXMgc3BlY2lmaWNhdGlvbi5cbmNvbnN0IFNIQTI1Nl9XID0gbmV3IFVpbnQzMkFycmF5KDY0KTtcbmNsYXNzIFNIQTI1NiBleHRlbmRzIFNIQTIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcig2NCwgMzIsIDgsIGZhbHNlKTtcbiAgICAgICAgLy8gV2UgY2Fubm90IHVzZSBhcnJheSBoZXJlIHNpbmNlIGFycmF5IGFsbG93cyBpbmRleGluZyBieSB2YXJpYWJsZVxuICAgICAgICAvLyB3aGljaCBtZWFucyBvcHRpbWl6ZXIvY29tcGlsZXIgY2Fubm90IHVzZSByZWdpc3RlcnMuXG4gICAgICAgIHRoaXMuQSA9IElWWzBdIHwgMDtcbiAgICAgICAgdGhpcy5CID0gSVZbMV0gfCAwO1xuICAgICAgICB0aGlzLkMgPSBJVlsyXSB8IDA7XG4gICAgICAgIHRoaXMuRCA9IElWWzNdIHwgMDtcbiAgICAgICAgdGhpcy5FID0gSVZbNF0gfCAwO1xuICAgICAgICB0aGlzLkYgPSBJVls1XSB8IDA7XG4gICAgICAgIHRoaXMuRyA9IElWWzZdIHwgMDtcbiAgICAgICAgdGhpcy5IID0gSVZbN10gfCAwO1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIGNvbnN0IHsgQSwgQiwgQywgRCwgRSwgRiwgRywgSCB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtBLCBCLCBDLCBELCBFLCBGLCBHLCBIXTtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgc2V0KEEsIEIsIEMsIEQsIEUsIEYsIEcsIEgpIHtcbiAgICAgICAgdGhpcy5BID0gQSB8IDA7XG4gICAgICAgIHRoaXMuQiA9IEIgfCAwO1xuICAgICAgICB0aGlzLkMgPSBDIHwgMDtcbiAgICAgICAgdGhpcy5EID0gRCB8IDA7XG4gICAgICAgIHRoaXMuRSA9IEUgfCAwO1xuICAgICAgICB0aGlzLkYgPSBGIHwgMDtcbiAgICAgICAgdGhpcy5HID0gRyB8IDA7XG4gICAgICAgIHRoaXMuSCA9IEggfCAwO1xuICAgIH1cbiAgICBwcm9jZXNzKHZpZXcsIG9mZnNldCkge1xuICAgICAgICAvLyBFeHRlbmQgdGhlIGZpcnN0IDE2IHdvcmRzIGludG8gdGhlIHJlbWFpbmluZyA0OCB3b3JkcyB3WzE2Li42M10gb2YgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgYXJyYXlcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrLCBvZmZzZXQgKz0gNClcbiAgICAgICAgICAgIFNIQTI1Nl9XW2ldID0gdmlldy5nZXRVaW50MzIob2Zmc2V0LCBmYWxzZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxNjsgaSA8IDY0OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IFcxNSA9IFNIQTI1Nl9XW2kgLSAxNV07XG4gICAgICAgICAgICBjb25zdCBXMiA9IFNIQTI1Nl9XW2kgLSAyXTtcbiAgICAgICAgICAgIGNvbnN0IHMwID0gcm90cihXMTUsIDcpIF4gcm90cihXMTUsIDE4KSBeIChXMTUgPj4+IDMpO1xuICAgICAgICAgICAgY29uc3QgczEgPSByb3RyKFcyLCAxNykgXiByb3RyKFcyLCAxOSkgXiAoVzIgPj4+IDEwKTtcbiAgICAgICAgICAgIFNIQTI1Nl9XW2ldID0gKHMxICsgU0hBMjU2X1dbaSAtIDddICsgczAgKyBTSEEyNTZfV1tpIC0gMTZdKSB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29tcHJlc3Npb24gZnVuY3Rpb24gbWFpbiBsb29wLCA2NCByb3VuZHNcbiAgICAgICAgbGV0IHsgQSwgQiwgQywgRCwgRSwgRiwgRywgSCB9ID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzaWdtYTEgPSByb3RyKEUsIDYpIF4gcm90cihFLCAxMSkgXiByb3RyKEUsIDI1KTtcbiAgICAgICAgICAgIGNvbnN0IFQxID0gKEggKyBzaWdtYTEgKyBDaGkoRSwgRiwgRykgKyBTSEEyNTZfS1tpXSArIFNIQTI1Nl9XW2ldKSB8IDA7XG4gICAgICAgICAgICBjb25zdCBzaWdtYTAgPSByb3RyKEEsIDIpIF4gcm90cihBLCAxMykgXiByb3RyKEEsIDIyKTtcbiAgICAgICAgICAgIGNvbnN0IFQyID0gKHNpZ21hMCArIE1haihBLCBCLCBDKSkgfCAwO1xuICAgICAgICAgICAgSCA9IEc7XG4gICAgICAgICAgICBHID0gRjtcbiAgICAgICAgICAgIEYgPSBFO1xuICAgICAgICAgICAgRSA9IChEICsgVDEpIHwgMDtcbiAgICAgICAgICAgIEQgPSBDO1xuICAgICAgICAgICAgQyA9IEI7XG4gICAgICAgICAgICBCID0gQTtcbiAgICAgICAgICAgIEEgPSAoVDEgKyBUMikgfCAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCB0aGUgY29tcHJlc3NlZCBjaHVuayB0byB0aGUgY3VycmVudCBoYXNoIHZhbHVlXG4gICAgICAgIEEgPSAoQSArIHRoaXMuQSkgfCAwO1xuICAgICAgICBCID0gKEIgKyB0aGlzLkIpIHwgMDtcbiAgICAgICAgQyA9IChDICsgdGhpcy5DKSB8IDA7XG4gICAgICAgIEQgPSAoRCArIHRoaXMuRCkgfCAwO1xuICAgICAgICBFID0gKEUgKyB0aGlzLkUpIHwgMDtcbiAgICAgICAgRiA9IChGICsgdGhpcy5GKSB8IDA7XG4gICAgICAgIEcgPSAoRyArIHRoaXMuRykgfCAwO1xuICAgICAgICBIID0gKEggKyB0aGlzLkgpIHwgMDtcbiAgICAgICAgdGhpcy5zZXQoQSwgQiwgQywgRCwgRSwgRiwgRywgSCk7XG4gICAgfVxuICAgIHJvdW5kQ2xlYW4oKSB7XG4gICAgICAgIFNIQTI1Nl9XLmZpbGwoMCk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc2V0KDAsIDAsIDAsIDAsIDAsIDAsIDAsIDApO1xuICAgICAgICB0aGlzLmJ1ZmZlci5maWxsKDApO1xuICAgIH1cbn1cbi8vIENvbnN0YW50cyBmcm9tIGh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9GSVBTL05JU1QuRklQUy4xODAtNC5wZGZcbmNsYXNzIFNIQTIyNCBleHRlbmRzIFNIQTI1NiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuQSA9IDB4YzEwNTllZDggfCAwO1xuICAgICAgICB0aGlzLkIgPSAweDM2N2NkNTA3IHwgMDtcbiAgICAgICAgdGhpcy5DID0gMHgzMDcwZGQxNyB8IDA7XG4gICAgICAgIHRoaXMuRCA9IDB4ZjcwZTU5MzkgfCAwO1xuICAgICAgICB0aGlzLkUgPSAweGZmYzAwYjMxIHwgMDtcbiAgICAgICAgdGhpcy5GID0gMHg2ODU4MTUxMSB8IDA7XG4gICAgICAgIHRoaXMuRyA9IDB4NjRmOThmYTcgfCAwO1xuICAgICAgICB0aGlzLkggPSAweGJlZmE0ZmE0IHwgMDtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSAyODtcbiAgICB9XG59XG4vKipcbiAqIFNIQTItMjU2IGhhc2ggZnVuY3Rpb25cbiAqIEBwYXJhbSBtZXNzYWdlIC0gZGF0YSB0aGF0IHdvdWxkIGJlIGhhc2hlZFxuICovXG5leHBvcnQgY29uc3Qgc2hhMjU2ID0gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBTSEEyNTYoKSk7XG5leHBvcnQgY29uc3Qgc2hhMjI0ID0gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBTSEEyMjQoKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGEyNTYuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/utils.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/utils.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\n\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@scure/base/lib/esm/index.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@scure/base/lib/esm/index.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertNumber: () => (/* binding */ assertNumber),\n/* harmony export */   base16: () => (/* binding */ base16),\n/* harmony export */   base32: () => (/* binding */ base32),\n/* harmony export */   base32crockford: () => (/* binding */ base32crockford),\n/* harmony export */   base32hex: () => (/* binding */ base32hex),\n/* harmony export */   base58: () => (/* binding */ base58),\n/* harmony export */   base58check: () => (/* binding */ base58check),\n/* harmony export */   base58flickr: () => (/* binding */ base58flickr),\n/* harmony export */   base58xmr: () => (/* binding */ base58xmr),\n/* harmony export */   base58xrp: () => (/* binding */ base58xrp),\n/* harmony export */   base64: () => (/* binding */ base64),\n/* harmony export */   base64url: () => (/* binding */ base64url),\n/* harmony export */   bech32: () => (/* binding */ bech32),\n/* harmony export */   bech32m: () => (/* binding */ bech32m),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   bytesToString: () => (/* binding */ bytesToString),\n/* harmony export */   hex: () => (/* binding */ hex),\n/* harmony export */   str: () => (/* binding */ str),\n/* harmony export */   stringToBytes: () => (/* binding */ stringToBytes),\n/* harmony export */   utf8: () => (/* binding */ utf8),\n/* harmony export */   utils: () => (/* binding */ utils)\n/* harmony export */ });\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nconst utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nconst base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nconst base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nconst base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nconst base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nconst base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nconst base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nconst base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nconst base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nconst base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nconst base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nconst base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nconst bech32 = genBech32('bech32');\nconst bech32m = genBech32('bech32m');\nconst utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nconst hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nconst bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nconst str = bytesToString;\nconst stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nconst bytes = stringToBytes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-cache-dexie/node_modules/nostr-tools/node_modules/@scure/base/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-hooks/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-hooks/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BECH32_REGEX: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.BECH32_REGEX),\n/* harmony export */   EMPTY_MUTE_CRITERIA: () => (/* binding */ EMPTY_MUTE_CRITERIA),\n/* harmony export */   NDKAppHandlerEvent: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKAppHandlerEvent),\n/* harmony export */   NDKAppSettings: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKAppSettings),\n/* harmony export */   NDKArticle: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKArticle),\n/* harmony export */   NDKCashuMintList: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKCashuMintList),\n/* harmony export */   NDKCashuToken: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKCashuToken),\n/* harmony export */   NDKCashuWalletTx: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKCashuWalletTx),\n/* harmony export */   NDKClassified: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKClassified),\n/* harmony export */   NDKDVMJobFeedback: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKDVMJobFeedback),\n/* harmony export */   NDKDVMJobResult: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKDVMJobResult),\n/* harmony export */   NDKDVMRequest: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKDVMRequest),\n/* harmony export */   NDKDraft: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKDraft),\n/* harmony export */   NDKDvmJobFeedbackStatus: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKDvmJobFeedbackStatus),\n/* harmony export */   NDKEvent: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKEvent),\n/* harmony export */   NDKHighlight: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKHighlight),\n/* harmony export */   NDKImage: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKImage),\n/* harmony export */   NDKKind: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKKind),\n/* harmony export */   NDKList: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKList),\n/* harmony export */   NDKListKinds: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKListKinds),\n/* harmony export */   NDKNip07Signer: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKNip07Signer),\n/* harmony export */   NDKNip46Backend: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKNip46Backend),\n/* harmony export */   NDKNip46Signer: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKNip46Signer),\n/* harmony export */   NDKNostrRpc: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKNostrRpc),\n/* harmony export */   NDKNutzap: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKNutzap),\n/* harmony export */   NDKPool: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKPool),\n/* harmony export */   NDKPrivateKeySigner: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKPrivateKeySigner),\n/* harmony export */   NDKPublishError: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKPublishError),\n/* harmony export */   NDKRelay: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKRelay),\n/* harmony export */   NDKRelayAuthPolicies: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKRelayAuthPolicies),\n/* harmony export */   NDKRelayList: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKRelayList),\n/* harmony export */   NDKRelaySet: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKRelaySet),\n/* harmony export */   NDKRelayStatus: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKRelayStatus),\n/* harmony export */   NDKRepost: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKRepost),\n/* harmony export */   NDKSessionLocalStorage: () => (/* binding */ NDKSessionLocalStorage),\n/* harmony export */   NDKSimpleGroup: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKSimpleGroup),\n/* harmony export */   NDKSimpleGroupMemberList: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKSimpleGroupMemberList),\n/* harmony export */   NDKSimpleGroupMetadata: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKSimpleGroupMetadata),\n/* harmony export */   NDKStory: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKStory),\n/* harmony export */   NDKStorySticker: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKStorySticker),\n/* harmony export */   NDKStoryStickerType: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKStoryStickerType),\n/* harmony export */   NDKSubscription: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKSubscription),\n/* harmony export */   NDKSubscriptionCacheUsage: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKSubscriptionCacheUsage),\n/* harmony export */   NDKSubscriptionReceipt: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKSubscriptionReceipt),\n/* harmony export */   NDKSubscriptionStart: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKSubscriptionStart),\n/* harmony export */   NDKSubscriptionTier: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKSubscriptionTier),\n/* harmony export */   NDKTranscriptionDVM: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKTranscriptionDVM),\n/* harmony export */   NDKUser: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKUser),\n/* harmony export */   NDKVideo: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKVideo),\n/* harmony export */   NDKWiki: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKWiki),\n/* harmony export */   NDKWikiMergeRequest: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKWikiMergeRequest),\n/* harmony export */   NDKZapper: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKZapper),\n/* harmony export */   NIP33_A_REGEX: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NIP33_A_REGEX),\n/* harmony export */   NdkNutzapStatus: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NdkNutzapStatus),\n/* harmony export */   addOrUpdateStoredSession: () => (/* binding */ addOrUpdateStoredSession),\n/* harmony export */   calculateRelaySetFromEvent: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.calculateRelaySetFromEvent),\n/* harmony export */   calculateTermDurationInSeconds: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.calculateTermDurationInSeconds),\n/* harmony export */   cashuPubkeyToNostrPubkey: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.cashuPubkeyToNostrPubkey),\n/* harmony export */   clearActivePubkey: () => (/* binding */ clearActivePubkey),\n/* harmony export */   compareFilter: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.compareFilter),\n/* harmony export */   createSubscribeStore: () => (/* binding */ createSubscribeStore),\n/* harmony export */   \"default\": () => (/* binding */ index_default),\n/* harmony export */   defaultOpts: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.defaultOpts),\n/* harmony export */   deserialize: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.deserialize),\n/* harmony export */   dvmSchedule: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.dvmSchedule),\n/* harmony export */   eventHasETagMarkers: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.eventHasETagMarkers),\n/* harmony export */   eventIsPartOfThread: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.eventIsPartOfThread),\n/* harmony export */   eventIsReply: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.eventIsReply),\n/* harmony export */   eventReplies: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.eventReplies),\n/* harmony export */   eventThreadIds: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.eventThreadIds),\n/* harmony export */   eventThreads: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.eventThreads),\n/* harmony export */   eventsBySameAuthor: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.eventsBySameAuthor),\n/* harmony export */   filterAndRelaySetFromBech32: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.filterAndRelaySetFromBech32),\n/* harmony export */   filterFingerprint: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.filterFingerprint),\n/* harmony export */   filterForEventsTaggingId: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.filterForEventsTaggingId),\n/* harmony export */   filterFromId: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.filterFromId),\n/* harmony export */   generateContentTags: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.generateContentTags),\n/* harmony export */   generateHashtags: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.generateHashtags),\n/* harmony export */   generateSubId: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.generateSubId),\n/* harmony export */   generateZapRequest: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.generateZapRequest),\n/* harmony export */   getActivePubkey: () => (/* binding */ getActivePubkey),\n/* harmony export */   getEventReplyId: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.getEventReplyId),\n/* harmony export */   getNip57ZapSpecFromLud: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.getNip57ZapSpecFromLud),\n/* harmony export */   getRelayListForUser: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.getRelayListForUser),\n/* harmony export */   getRelayListForUsers: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.getRelayListForUsers),\n/* harmony export */   getReplyTag: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.getReplyTag),\n/* harmony export */   getRootEventId: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.getRootEventId),\n/* harmony export */   getRootTag: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.getRootTag),\n/* harmony export */   giftUnwrap: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.giftUnwrap),\n/* harmony export */   giftWrap: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.giftWrap),\n/* harmony export */   imetaTagToTag: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.imetaTagToTag),\n/* harmony export */   isEventOriginalPost: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.isEventOriginalPost),\n/* harmony export */   isNip33AValue: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.isNip33AValue),\n/* harmony export */   loadSessionsFromStorage: () => (/* binding */ loadSessionsFromStorage),\n/* harmony export */   mapImetaTag: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.mapImetaTag),\n/* harmony export */   matchFilter: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.matchFilter),\n/* harmony export */   mergeFilters: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.mergeFilters),\n/* harmony export */   mergeTags: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.mergeTags),\n/* harmony export */   ndkSignerFromPayload: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.ndkSignerFromPayload),\n/* harmony export */   newAmount: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.newAmount),\n/* harmony export */   normalize: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.normalize),\n/* harmony export */   normalizeRelayUrl: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.normalizeRelayUrl),\n/* harmony export */   normalizeUrl: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.normalizeUrl),\n/* harmony export */   parseTagToSubscriptionAmount: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.parseTagToSubscriptionAmount),\n/* harmony export */   pinEvent: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.pinEvent),\n/* harmony export */   possibleIntervalFrequencies: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.possibleIntervalFrequencies),\n/* harmony export */   profileFromEvent: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.profileFromEvent),\n/* harmony export */   proofP2pk: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.proofP2pk),\n/* harmony export */   proofP2pkNostr: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.proofP2pkNostr),\n/* harmony export */   proofsTotalBalance: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.proofsTotalBalance),\n/* harmony export */   queryFullyFilled: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.queryFullyFilled),\n/* harmony export */   relayListFromKind3: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.relayListFromKind3),\n/* harmony export */   relaysFromBech32: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.relaysFromBech32),\n/* harmony export */   removeStoredSession: () => (/* binding */ removeStoredSession),\n/* harmony export */   saveSessionsToStorage: () => (/* binding */ saveSessionsToStorage),\n/* harmony export */   serialize: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.serialize),\n/* harmony export */   serializeProfile: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.serializeProfile),\n/* harmony export */   signerRegistry: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.signerRegistry),\n/* harmony export */   storeActivePubkey: () => (/* binding */ storeActivePubkey),\n/* harmony export */   strToDimension: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.strToDimension),\n/* harmony export */   strToPosition: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.strToPosition),\n/* harmony export */   tryNormalizeRelayUrl: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.tryNormalizeRelayUrl),\n/* harmony export */   uniqueTag: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.uniqueTag),\n/* harmony export */   useActiveMuteCriteria: () => (/* binding */ useActiveMuteCriteria),\n/* harmony export */   useAvailableSessions: () => (/* binding */ useAvailableSessions),\n/* harmony export */   useCurrentUserProfile: () => (/* binding */ useCurrentUserProfile),\n/* harmony export */   useEvent: () => (/* binding */ useEvent),\n/* harmony export */   useFollows: () => (/* binding */ useFollows),\n/* harmony export */   useIsItemMuted: () => (/* binding */ useIsItemMuted),\n/* harmony export */   useMuteCriteria: () => (/* binding */ useMuteCriteria),\n/* harmony export */   useMuteFilter: () => (/* binding */ useMuteFilter),\n/* harmony export */   useMuteItem: () => (/* binding */ useMuteItem),\n/* harmony export */   useNDK: () => (/* binding */ useNDK),\n/* harmony export */   useNDKCurrentPubkey: () => (/* binding */ useNDKCurrentPubkey),\n/* harmony export */   useNDKCurrentUser: () => (/* binding */ useNDKCurrentUser),\n/* harmony export */   useNDKInit: () => (/* binding */ useNDKInit),\n/* harmony export */   useNDKNutzapMonitor: () => (/* binding */ useNDKNutzapMonitor),\n/* harmony export */   useNDKSessionEvent: () => (/* binding */ useNDKSessionEvent),\n/* harmony export */   useNDKSessionLogin: () => (/* binding */ useNDKSessionLogin),\n/* harmony export */   useNDKSessionLogout: () => (/* binding */ useNDKSessionLogout),\n/* harmony export */   useNDKSessionMonitor: () => (/* binding */ useNDKSessionMonitor),\n/* harmony export */   useNDKSessionSessions: () => (/* binding */ useNDKSessionSessions),\n/* harmony export */   useNDKSessionSigners: () => (/* binding */ useNDKSessionSigners),\n/* harmony export */   useNDKSessionStart: () => (/* binding */ useNDKSessionStart),\n/* harmony export */   useNDKSessionStop: () => (/* binding */ useNDKSessionStop),\n/* harmony export */   useNDKSessionSwitch: () => (/* binding */ useNDKSessionSwitch),\n/* harmony export */   useNDKStore: () => (/* binding */ useNDKStore),\n/* harmony export */   useNDKUnpublishedEvents: () => (/* binding */ useNDKUnpublishedEvents),\n/* harmony export */   useNDKWallet: () => (/* binding */ useNDKWallet),\n/* harmony export */   useObserver: () => (/* binding */ useObserver),\n/* harmony export */   useProfile: () => (/* binding */ useProfile),\n/* harmony export */   useProfileValue: () => (/* binding */ useProfileValue),\n/* harmony export */   usePublishMuteList: () => (/* binding */ usePublishMuteList),\n/* harmony export */   useSetProfile: () => (/* binding */ useSetProfile),\n/* harmony export */   useSubscribe: () => (/* binding */ useSubscribe),\n/* harmony export */   useUnmuteItem: () => (/* binding */ useUnmuteItem),\n/* harmony export */   useUserProfilesStore: () => (/* binding */ useUserProfilesStore),\n/* harmony export */   wrapEvent: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.wrapEvent),\n/* harmony export */   zapInvoiceFromEvent: () => (/* reexport safe */ _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.zapInvoiceFromEvent)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.2.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(ssr)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var zustand_middleware_immer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zustand/middleware/immer */ \"(ssr)/./node_modules/zustand/esm/middleware/immer.mjs\");\n/* harmony import */ var _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @nostr-dev-kit/ndk */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-hooks/node_modules/@nostr-dev-kit/ndk/dist/index.mjs\");\n/* harmony import */ var zustand_shallow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zustand/shallow */ \"(ssr)/./node_modules/zustand/esm/react/shallow.mjs\");\n/* harmony import */ var zustand_vanilla__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zustand/vanilla */ \"(ssr)/./node_modules/zustand/esm/vanilla.mjs\");\n/* harmony import */ var _nostr_dev_kit_ndk_wallet__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @nostr-dev-kit/ndk-wallet */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-wallet/dist/index.js\");\n// src/session/hooks/index.ts\n\n\n// src/ndk/hooks/index.ts\n\n\n// src/profiles/store/index.ts\n\n\n// src/utils/time.ts\nvar inSeconds = (ms) => ms / 1e3;\n\n// src/profiles/store/fetch-profile.ts\nvar fetchProfileImplementation = (set, get, pubkey, opts) => {\n  const force = opts?.refresh;\n  const { ndk, profiles } = get();\n  if (!ndk) {\n    console.error(\"NDK instance is not initialized. Did you use useNDKInit at the beginning of your app?\");\n    return;\n  }\n  if (!pubkey) return;\n  const currentProfile = profiles.get(pubkey);\n  if (currentProfile && !force) return;\n  const user = ndk.getUser({ pubkey });\n  user.fetchProfile(opts?.subOpts).then((profile) => {\n    set((state) => {\n      const profiles2 = new Map(state.profiles);\n      if (profile) profiles2.set(pubkey, profile);\n      const lastFetchedAt = new Map(state.lastFetchedAt);\n      lastFetchedAt.set(pubkey, inSeconds(Date.now()));\n      return { profiles: profiles2, lastFetchedAt };\n    });\n  }).catch((err) => {\n    set((state) => {\n      const lastFetchedAt = new Map(state.lastFetchedAt);\n      lastFetchedAt.set(pubkey, inSeconds(Date.now()));\n      return { lastFetchedAt };\n    });\n  });\n};\n\n// src/profiles/store/initialize.ts\nfunction initializeProfilesStore(set, ndk) {\n  const cacheAdapter = ndk.cacheAdapter;\n  if (cacheAdapter?.getAllProfilesSync) {\n    const keys = cacheAdapter.getAllProfilesSync();\n    const profiles = /* @__PURE__ */ new Map();\n    const lastFetchedAt = /* @__PURE__ */ new Map();\n    for (const [key, profile] of keys) {\n      profiles.set(key, profile);\n      lastFetchedAt.set(key, profile.cachedAt ?? 0);\n    }\n    set({ profiles, lastFetchedAt, ndk });\n  } else {\n    set({ ndk });\n  }\n}\n\n// src/profiles/store/set-profile.ts\nvar setProfileImplementation = (set, pubkey, profile, cachedAt) => {\n  set((state) => {\n    const newProfiles = new Map(state.profiles);\n    newProfiles.set(pubkey, profile);\n    const newLastFetchedAt = new Map(state.lastFetchedAt);\n    newLastFetchedAt.set(pubkey, cachedAt ?? inSeconds(Date.now()));\n    return { profiles: newProfiles, lastFetchedAt: newLastFetchedAt };\n  });\n};\n\n// src/profiles/store/index.ts\nvar useUserProfilesStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set, get) => ({\n  profiles: /* @__PURE__ */ new Map(),\n  lastFetchedAt: /* @__PURE__ */ new Map(),\n  ndk: void 0,\n  /** @internal */\n  initialize: (ndk) => initializeProfilesStore(set, ndk),\n  setProfile: (pubkey, profile, cachedAt) => setProfileImplementation(set, pubkey, profile, cachedAt),\n  fetchProfile: (pubkey, opts) => fetchProfileImplementation(set, get, pubkey, opts)\n}));\n\n// src/session/store/index.ts\n\n\n\n\n// src/session/store/add-session.ts\n\n\n// src/ndk/store/index.ts\n\nvar useNDKStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set) => {\n  return {\n    ndk: null,\n    // currentUser removed\n    setNDK: (ndk) => {\n      set({ ndk });\n    },\n    setSigner: (signer) => {\n      set((state) => {\n        if (state.ndk) {\n          state.ndk.signer = signer;\n        }\n        return { ndk: state.ndk };\n      });\n    }\n  };\n});\n\n// src/mutes/store/index.ts\n\n\n\n\n// src/mutes/store/init.ts\nvar initMutes = (set, get, pubkey) => {\n  set((state) => {\n    if (!state.mutes.has(pubkey)) {\n      state.mutes.set(pubkey, {\n        pubkeys: /* @__PURE__ */ new Set(),\n        hashtags: /* @__PURE__ */ new Set(),\n        words: /* @__PURE__ */ new Set(),\n        eventIds: /* @__PURE__ */ new Set()\n      });\n    }\n  });\n};\n\n// src/mutes/store/load.ts\nvar loadMuteList = (set, get, pubkey, event) => {\n  set((state) => {\n    if (!state.mutes.has(pubkey)) {\n      initMutes(set, get, pubkey);\n    }\n    const userMutes = state.mutes.get(pubkey);\n    if (!userMutes) return;\n    const newMutedPubkeys = /* @__PURE__ */ new Set();\n    const newMutedEvents = /* @__PURE__ */ new Set();\n    const newMutedHashtags = /* @__PURE__ */ new Set();\n    const newMutedWords = /* @__PURE__ */ new Set();\n    for (const tag of event.tags) {\n      if (tag[0] === \"p\") newMutedPubkeys.add(tag[1]);\n      else if (tag[0] === \"e\") newMutedEvents.add(tag[1]);\n      else if (tag[0] === \"t\") newMutedHashtags.add(tag[1]);\n      else if (tag[0] === \"word\") newMutedWords.add(tag[1]);\n    }\n    userMutes.pubkeys = newMutedPubkeys;\n    userMutes.eventIds = newMutedEvents;\n    userMutes.hashtags = newMutedHashtags;\n    userMutes.words = newMutedWords;\n    userMutes.muteListEvent = event;\n  });\n};\n\n// src/mutes/utils/compute-mute-criteria.ts\nfunction computeMuteCriteria(userMutes, extraMutes) {\n  return {\n    pubkeys: /* @__PURE__ */ new Set([\n      ...userMutes?.pubkeys ?? [],\n      ...extraMutes.pubkeys ?? []\n    ]),\n    eventIds: /* @__PURE__ */ new Set([\n      ...userMutes?.eventIds ?? [],\n      ...extraMutes.eventIds ?? []\n    ]),\n    hashtags: /* @__PURE__ */ new Set([\n      ...userMutes?.hashtags ?? [],\n      ...extraMutes.hashtags ?? []\n    ]),\n    words: /* @__PURE__ */ new Set([\n      ...userMutes?.words ?? [],\n      ...extraMutes.words ?? []\n    ])\n  };\n}\n\n// src/mutes/store/mute-item.ts\nvar muteItem = (set, get, pubkey, item, type, options) => {\n  set((state) => {\n    if (!state.mutes.has(pubkey)) {\n      initMutes(set, get, pubkey);\n    }\n    const userMutes = state.mutes.get(pubkey);\n    if (!userMutes) return;\n    switch (type) {\n      case \"pubkey\":\n        userMutes.pubkeys.add(item);\n        break;\n      case \"event\":\n        userMutes.eventIds.add(item);\n        break;\n      case \"hashtag\":\n        userMutes.hashtags.add(item);\n        break;\n      case \"word\":\n        userMutes.words.add(item);\n        break;\n    }\n    if (state.activePubkey === pubkey) {\n      state.muteCriteria = computeMuteCriteria(userMutes, state.extraMutes);\n    }\n  });\n  if (options?.publish !== false) {\n    get().publishMuteList(pubkey);\n  }\n};\n\n// src/mutes/store/unmute-item.ts\nvar unmuteItem = (set, get, pubkey, item, type, options) => {\n  set((state) => {\n    const userMutes = state.mutes.get(pubkey);\n    if (!userMutes) return;\n    switch (type) {\n      case \"pubkey\":\n        userMutes.pubkeys.delete(item);\n        break;\n      case \"event\":\n        userMutes.eventIds.delete(item);\n        break;\n      case \"hashtag\":\n        userMutes.hashtags.delete(item);\n        break;\n      case \"word\":\n        userMutes.words.delete(item);\n        break;\n    }\n    if (state.activePubkey === pubkey) {\n      state.muteCriteria = computeMuteCriteria(userMutes, state.extraMutes);\n    }\n  });\n  if (options?.publish !== false) {\n    get().publishMuteList(pubkey);\n  }\n};\n\n// src/mutes/store/set-active-pubkey.ts\nfunction setActivePubkey(set, pubkey) {\n  set((state) => {\n    state.activePubkey = pubkey;\n    const userMutes = pubkey ? state.mutes.get(pubkey) : void 0;\n    state.muteCriteria = computeMuteCriteria(userMutes, state.extraMutes);\n  });\n}\n\n// src/mutes/store/publish.ts\nvar publishMuteList = async (get, pubkey) => {\n  const userMutes = get().mutes.get(pubkey);\n  if (!userMutes) return void 0;\n  const ndk = useNDKSessions.getState().ndk;\n  if (!ndk) return void 0;\n  const event = new ndk.NDKEvent(ndk);\n  event.kind = 1e4;\n  event.content = \"\";\n  for (const mutedPubkey of userMutes.pubkeys) {\n    event.tags.push([\"p\", mutedPubkey]);\n  }\n  for (const mutedEventId of userMutes.eventIds) {\n    event.tags.push([\"e\", mutedEventId]);\n  }\n  for (const mutedHashtag of userMutes.hashtags) {\n    event.tags.push([\"t\", mutedHashtag]);\n  }\n  for (const mutedWord of userMutes.words) {\n    event.tags.push([\"word\", mutedWord]);\n  }\n  try {\n    await event.sign();\n    await event.publish();\n    get().loadMuteList(pubkey, event);\n    return event;\n  } catch (error) {\n    console.error(\"Failed to publish mute list:\", error);\n    return void 0;\n  }\n};\n\n// src/mutes/utils/identify-mute-item.ts\n\nfunction identifyMuteItem(item) {\n  let itemType;\n  let value;\n  if (item instanceof _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKEvent) {\n    itemType = \"event\";\n    value = item.id;\n  } else if (item instanceof _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKUser) {\n    itemType = \"pubkey\";\n    value = item.pubkey;\n  } else if (typeof item === \"string\") {\n    if (item.startsWith(\"#\") && item.length > 1) {\n      itemType = \"hashtag\";\n      value = item.substring(1);\n    } else {\n      itemType = \"word\";\n      value = item;\n    }\n  } else {\n    console.warn(\"identifyMuteItem: Invalid item type provided.\", item);\n    return void 0;\n  }\n  return { type: itemType, value };\n}\n\n// src/mutes/store/add-extra-mute-items.ts\nvar addExtraMuteItems = (set, get, items) => {\n  set((state) => {\n    for (const item of items) {\n      const identified = identifyMuteItem(item);\n      if (!identified) continue;\n      const { type, value } = identified;\n      switch (type) {\n        case \"pubkey\":\n          state.extraMutes.pubkeys.add(value);\n          break;\n        case \"event\":\n          state.extraMutes.eventIds.add(value);\n          break;\n        case \"hashtag\":\n          state.extraMutes.hashtags.add(value.toLowerCase());\n          break;\n        case \"word\":\n          state.extraMutes.words.add(value.toLowerCase());\n          break;\n      }\n    }\n    const userMutes = state.activePubkey ? state.mutes.get(state.activePubkey) : void 0;\n    state.muteCriteria = computeMuteCriteria(userMutes, state.extraMutes);\n  });\n};\n\n// src/mutes/store/index.ts\n(0,immer__WEBPACK_IMPORTED_MODULE_3__.enableMapSet)();\nvar mutesStateCreator = (set, get) => ({\n  mutes: /* @__PURE__ */ new Map(),\n  extraMutes: {\n    pubkeys: /* @__PURE__ */ new Set(),\n    hashtags: /* @__PURE__ */ new Set(),\n    words: /* @__PURE__ */ new Set(),\n    eventIds: /* @__PURE__ */ new Set()\n  },\n  activePubkey: null,\n  muteCriteria: {\n    pubkeys: /* @__PURE__ */ new Set(),\n    eventIds: /* @__PURE__ */ new Set(),\n    hashtags: /* @__PURE__ */ new Set(),\n    words: /* @__PURE__ */ new Set()\n  },\n  initMutes: (pubkey) => initMutes(set, get, pubkey),\n  loadMuteList: (pubkey, event) => loadMuteList(set, get, pubkey, event),\n  muteItem: (pubkey, item, type, options) => muteItem(set, get, pubkey, item, type, options),\n  unmuteItem: (pubkey, item, type, options) => unmuteItem(set, get, pubkey, item, type, options),\n  setActivePubkey: (pubkey) => setActivePubkey(set, pubkey),\n  addExtraMuteItems: (items) => addExtraMuteItems(set, get, items),\n  publishMuteList: (pubkey) => publishMuteList(get, pubkey)\n});\nvar useNDKMutes = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((0,zustand_middleware_immer__WEBPACK_IMPORTED_MODULE_4__.immer)(mutesStateCreator));\n\n// src/session/store/add-session.ts\nvar createDefaultSession = (pubkey) => ({\n  pubkey,\n  events: /* @__PURE__ */ new Map(),\n  lastActive: Date.now() / 1e3\n});\nvar addSession = async (set, get, userOrSigner, setActive = true) => {\n  let user;\n  let signer = void 0;\n  let userPubkey;\n  if (userOrSigner instanceof _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKUser) {\n    user = userOrSigner;\n    userPubkey = user.pubkey;\n  } else {\n    signer = userOrSigner;\n    try {\n      user = await signer.user();\n      userPubkey = user.pubkey;\n      set((draft) => {\n        draft.signers.set(userPubkey, signer);\n      });\n    } catch (error) {\n      console.error(\"Failed to get user from signer:\", error);\n      throw new Error(\"Could not retrieve user from the provided signer.\");\n    }\n  }\n  set((draft) => {\n    let session = draft.sessions.get(userPubkey);\n    if (!session) {\n      session = createDefaultSession(userPubkey);\n      draft.sessions.set(userPubkey, session);\n    } else {\n      session.lastActive = Date.now() / 1e3;\n      console.debug(`Session already exists for ${userPubkey}, updating lastActive.`);\n    }\n    if (setActive) {\n      draft.activePubkey = userPubkey;\n      useNDKStore.getState().setSigner(signer);\n    }\n  });\n  useNDKMutes.getState().initMutes(userPubkey);\n  if (setActive) {\n    useNDKMutes.getState().setActivePubkey(userPubkey);\n  }\n  return userPubkey;\n};\n\n// src/session/store/init.ts\nvar init = (set, ndk) => {\n  set((draft) => {\n    draft.ndk = ndk;\n  });\n};\n\n// src/session/store/remove-session.ts\nvar removeSession = (set, get, pubkey) => {\n  const state = get();\n  const sessionToRemove = state.sessions.get(pubkey);\n  const signerToRemove = state.signers.get(pubkey);\n  if (!sessionToRemove) {\n    console.warn(`No session found to remove for pubkey: ${pubkey}`);\n    return;\n  }\n  if (sessionToRemove.subscription) {\n    console.debug(`Stopping subscription for removed session ${pubkey}`);\n    try {\n      sessionToRemove.subscription.stop();\n    } catch (error) {\n      console.error(`Error stopping subscription for removed session ${pubkey}:`, error);\n    }\n  }\n  const wasActive = state.activePubkey === pubkey;\n  set((draft) => {\n    draft.sessions.delete(pubkey);\n    draft.signers.delete(pubkey);\n    if (wasActive) {\n      let nextActivePubkey = null;\n      let latestLastActive = 0;\n      for (const [key, session] of draft.sessions.entries()) {\n        if (session.lastActive > latestLastActive) {\n          latestLastActive = session.lastActive;\n          nextActivePubkey = key;\n        }\n      }\n      draft.activePubkey = nextActivePubkey;\n      const nextActiveSigner = nextActivePubkey ? draft.signers.get(nextActivePubkey) : void 0;\n      const ndk = draft.ndk;\n      if (ndk) {\n        ndk.signer = nextActiveSigner;\n      }\n    }\n  });\n};\n\n// src/session/store/start-session.ts\n\nfunction handleProfileEvent(event, sessionDraft) {\n  const profile = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.profileFromEvent)(event);\n  if (profile) {\n    profile.created_at = event.created_at;\n    sessionDraft.profile = profile;\n  }\n}\nfunction handleContactsEvent(event, sessionDraft) {\n  const followSet = new Set(event.tags.filter((t) => t[0] === \"p\").map((t) => t[1]));\n  sessionDraft.followSet = followSet;\n}\nfunction handleOtherEvent(event, sessionDraft, opts) {\n  const existingEvent = sessionDraft.events.get(event.kind);\n  if (!existingEvent || event.created_at > existingEvent.created_at) {\n    sessionDraft.events.set(event.kind, event);\n  }\n  const klassWrapper = opts?.events?.get(event.kind);\n  if (klassWrapper) {\n    const wrappedEvent = klassWrapper.from(event);\n    if (wrappedEvent) sessionDraft.events.set(event.kind, wrappedEvent);\n  }\n}\nfunction handleKindFollowEvent(event, sessionDraft, followed = true, last_updated_at = event.created_at) {\n  const kindFollowSet = sessionDraft.kindFollowSet ?? /* @__PURE__ */ new Map();\n  const kinds = event.getMatchingTags(\"k\").map((t) => Number(t[1]));\n  const followedPubkeys = event.getMatchingTags(\"p\").map((t) => t[1]);\n  for (const kind of kinds) {\n    for (const pubkey of followedPubkeys) {\n      const kindFollows = kindFollowSet.get(kind) || /* @__PURE__ */ new Map();\n      const followedInfo = { followed, last_updated_at };\n      const existingFollowedInfo = kindFollows.get(pubkey);\n      if (!existingFollowedInfo || existingFollowedInfo.last_updated_at < event.created_at) {\n        kindFollows.set(pubkey, followedInfo);\n      }\n      kindFollowSet.set(kind, kindFollows);\n    }\n  }\n  sessionDraft.kindFollowSet = kindFollowSet;\n}\nfunction handkeEventDeletion(event, sessionDraft) {\n  const kindFollowSet = sessionDraft.kindFollowSet;\n  if (!kindFollowSet) return;\n  for (const eTag of event.getMatchingTags(\"e\")) {\n    if (!eTag[1]) continue;\n    if (!event.ndk) continue;\n    const followEventDeleted = event.ndk.fetchEventSync(eTag[1]);\n    if (!followEventDeleted?.[0]) continue;\n    handleKindFollowEvent(followEventDeleted[0], sessionDraft, false, event.created_at);\n  }\n}\nfunction processEvent(event, sessionDraft, opts) {\n  const knownEventForKind = sessionDraft.events?.get(event.kind);\n  if (!(!knownEventForKind || knownEventForKind.created_at < event.created_at) && event.isReplaceable()) {\n    console.log(\"We already have an event of kind \" + event.kind + \" that is newer\", {\n      knownEvent: knownEventForKind.created_at,\n      incomingEvent: event.created_at\n    });\n    return;\n  }\n  try {\n    switch (event.kind) {\n      case _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKKind.Metadata:\n        handleProfileEvent(event, sessionDraft);\n        break;\n      case _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKKind.Contacts:\n        handleContactsEvent(event, sessionDraft);\n        break;\n      case _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKKind.MuteList:\n        useNDKMutes.getState().loadMuteList(sessionDraft.pubkey, event);\n        break;\n      case 967:\n        handleKindFollowEvent(event, sessionDraft);\n        break;\n      case _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKKind.EventDeletion:\n        handkeEventDeletion(event, sessionDraft);\n        break;\n      default:\n        handleOtherEvent(event, sessionDraft, opts);\n    }\n    sessionDraft.events.set(event.kind, event);\n  } catch (error) {\n    console.error(`Error processing event kind ${event.kind} for ${sessionDraft.pubkey}:`, error, event);\n  }\n}\nfunction buildSessionFilter(pubkey, opts) {\n  const mainKindsToFetch = /* @__PURE__ */ new Set();\n  if (opts.profile !== false) mainKindsToFetch.add(_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKKind.Metadata);\n  if (opts.follows !== false) mainKindsToFetch.add(_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKKind.Contacts);\n  mainKindsToFetch.add(_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKKind.MuteList);\n  for (const kind of opts.events?.keys() || []) {\n    mainKindsToFetch.add(kind);\n  }\n  const filter = [{ kinds: Array.from(mainKindsToFetch), authors: [pubkey] }];\n  if (Array.isArray(opts.follows)) {\n    filter.push({ kinds: [967], \"#k\": opts.follows.map((k) => k.toString()), authors: [pubkey] });\n  }\n  return filter;\n}\nvar startSession = (set, get, pubkey, opts) => {\n  console.log(\"calling startSession\", pubkey);\n  const ndk = get().ndk;\n  if (!ndk) {\n    console.error(\"NDK instance not initialized in session store. Cannot start session.\");\n    return;\n  }\n  const existingSession = get().sessions.get(pubkey);\n  if (!existingSession) {\n    return;\n  }\n  if (existingSession.subscription) {\n    existingSession.subscription.stop();\n    set((draft) => {\n      const session = draft.sessions.get(pubkey);\n      if (session) {\n        session.subscription = void 0;\n      }\n    });\n  }\n  const filters = buildSessionFilter(pubkey, opts);\n  if (filters.length === 0) {\n    console.warn(`No filters generated for session start options for pubkey ${pubkey}. No subscription created.`);\n    return;\n  }\n  const onEvent = (event, relay) => {\n    console.log(\"handle session event\", event.pubkey.slice(0, 6), event.kind, relay?.url);\n    set((draft) => {\n      const session = draft.sessions.get(pubkey);\n      if (!session) return;\n      processEvent(event, session, opts);\n    });\n  };\n  const onEvents = (events) => {\n    set((draft) => {\n      const session = draft.sessions.get(pubkey);\n      if (!session) return;\n      for (const event of events) {\n        processEvent(event, session, opts);\n      }\n      console.debug(`Processed ${events.length} cached events for ${pubkey}`);\n    });\n  };\n  const sub = ndk.subscribe(filters, { closeOnEose: false, addSinceFromCache: true }, { onEvent, onEvents });\n  set((draft) => {\n    const session = draft.sessions.get(pubkey);\n    if (session) {\n      session.subscription = sub;\n    }\n  });\n};\n\n// src/session/store/stop-session.ts\nvar stopSession = (set, get, pubkey) => {\n  const session = get().sessions.get(pubkey);\n  if (session?.subscription) {\n    console.debug(`Stopping session subscription for ${pubkey}`);\n    try {\n      session.subscription.stop();\n    } catch (error) {\n      console.error(`Error stopping subscription for ${pubkey}:`, error);\n    }\n    set((draft) => {\n      const draftSession = draft.sessions.get(pubkey);\n      if (draftSession) {\n        draftSession.subscription = void 0;\n      }\n    });\n  } else {\n    console.debug(`No active subscription found for session ${pubkey} to stop.`);\n  }\n};\n\n// src/session/store/switch-to-user.ts\nvar switchToUser = (set, get, pubkey) => {\n  const signers = get().signers;\n  const ndk = get().ndk;\n  if (!ndk) {\n    console.error(\"Cannot switch user: NDK instance not initialized in session store.\");\n    return;\n  }\n  let signer = void 0;\n  if (pubkey !== null) {\n    const session = get().sessions.get(pubkey);\n    if (!session) {\n      console.error(`Cannot switch to user ${pubkey}: Session does not exist.`);\n      return;\n    }\n    signer = signers.get(pubkey);\n  }\n  useNDKStore.getState().setSigner(signer);\n  set((draft) => {\n    draft.activePubkey = pubkey;\n    if (pubkey) {\n      const draftSession = draft.sessions.get(pubkey);\n      if (draftSession) {\n        draftSession.lastActive = Date.now() / 1e3;\n      }\n    }\n  });\n  const muteStore = useNDKMutes.getState();\n  muteStore.setActivePubkey(pubkey);\n  if (pubkey) {\n    muteStore.initMutes(pubkey);\n  }\n};\n\n// src/session/store/update-session.ts\nvar updateSession = (set, get, pubkey, data) => {\n  set((draft) => {\n    const session = draft.sessions.get(pubkey);\n    if (!session) {\n      console.warn(`Attempted to update non-existent session: ${pubkey}`);\n      return;\n    }\n    Object.assign(session, data);\n    session.lastActive = Date.now();\n  });\n};\n\n// src/session/store/index.ts\n(0,immer__WEBPACK_IMPORTED_MODULE_3__.enableMapSet)();\nvar sessionStateCreator = (set, get) => ({\n  ndk: void 0,\n  // Add NDK instance holder\n  sessions: /* @__PURE__ */ new Map(),\n  signers: /* @__PURE__ */ new Map(),\n  // Keep signers map for addSession logic\n  activePubkey: null,\n  // Initialization\n  init: (ndkInstance) => init(set, ndkInstance),\n  /**\n   * Adds the session. This is how we login a user.\n   * @param userOrSigner\n   * @param setActive - If true, sets the session as active.\n   * @returns\n   */\n  addSession: async (userOrSigner, setActive) => {\n    const pubkey = await addSession(set, get, userOrSigner, setActive);\n    if (pubkey && setActive) get().switchToUser(pubkey);\n    return pubkey;\n  },\n  startSession: (pubkey, opts) => startSession(set, get, pubkey, opts),\n  stopSession: (pubkey) => stopSession(set, get, pubkey),\n  switchToUser: (pubkey) => switchToUser(set, get, pubkey),\n  removeSession: (pubkey) => removeSession(set, get, pubkey),\n  // Internal update function\n  updateSession: (pubkey, data) => updateSession(set, get, pubkey, data)\n});\nvar useNDKSessions = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((0,zustand_middleware_immer__WEBPACK_IMPORTED_MODULE_4__.immer)(sessionStateCreator));\n\n// src/ndk/hooks/index.ts\nvar useNDK = () => {\n  const ndk = useNDKStore((state) => state.ndk);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({ ndk }), [ndk]);\n};\nvar useNDKCurrentPubkey = () => useNDKSessions((state) => state.activePubkey);\nvar useNDKCurrentUser = () => {\n  const ndk = useNDKStore((state) => state.ndk);\n  const activePubkey = useNDKCurrentPubkey();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (ndk && activePubkey) {\n      return ndk.getUser({ pubkey: activePubkey });\n    }\n    return null;\n  }, [ndk, activePubkey]);\n};\nfunction useNDKUnpublishedEvents() {\n  const { ndk } = useNDK();\n  const [unpublishedEvents, setUnpublishedEvents] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n  const state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n  const updateStateFromCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {\n    if (!ndk?.cacheAdapter?.getUnpublishedEvents) return;\n    const entries = await ndk.cacheAdapter.getUnpublishedEvents();\n    const previousEntries = new Set(state.current?.map((e) => e.event.id));\n    const newEntries = [];\n    let changed = entries.length !== state.current?.length;\n    if (!changed) {\n      const currentIds = new Set(state.current.map((e) => e.event.id));\n      for (const entry of entries) {\n        if (!currentIds.has(entry.event.id)) {\n          changed = true;\n          break;\n        }\n      }\n    }\n    if (changed) {\n      const freshEntries = entries.map((entry) => ({ ...entry }));\n      state.current = freshEntries;\n      setUnpublishedEvents(freshEntries);\n      for (const entry of freshEntries) {\n        entry.event.on(\"published\", () => {\n          state.current = state.current?.filter((e) => e.event.id !== entry.event.id);\n          setUnpublishedEvents(state.current);\n        });\n      }\n    }\n  }, [ndk]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!ndk?.cacheAdapter?.getUnpublishedEvents) return;\n    updateStateFromCache();\n    const handlePublishFailed = (_event, _error, _relays) => {\n      updateStateFromCache();\n    };\n    ndk?.on(\"event:publish-failed\", handlePublishFailed);\n    return () => {\n      ndk?.off(\"event:publish-failed\", handlePublishFailed);\n    };\n  }, [ndk, updateStateFromCache]);\n  return unpublishedEvents;\n}\nfunction useNDKInit() {\n  const setNDK = useNDKStore((state) => state.setNDK);\n  const initializeProfilesStore2 = useUserProfilesStore((state) => state.initialize);\n  const initializeSessionStore = useNDKSessions((state) => state.init);\n  const initializeNDK = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (ndkInstance) => {\n      if (!ndkInstance) {\n        console.error(\"useNDKInit: Attempted to initialize with a null NDK instance.\");\n        return;\n      }\n      setNDK(ndkInstance);\n      initializeProfilesStore2(ndkInstance);\n      initializeSessionStore(ndkInstance);\n    },\n    [setNDK, initializeProfilesStore2, initializeSessionStore]\n  );\n  return initializeNDK;\n}\n\n// src/profiles/hooks/index.ts\n\n\n\nfunction useProfile(pubkey, forceRefresh) {\n  return useProfileValue(pubkey, { refresh: forceRefresh });\n}\nfunction useProfileValue(pubkey, opts) {\n  const fetchProfile = useUserProfilesStore((state) => state.fetchProfile);\n  const profileSelector = (0,zustand_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)((state) => pubkey ? state.profiles.get(pubkey) : void 0);\n  const profile = useUserProfilesStore(profileSelector);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (pubkey) {\n      fetchProfile(pubkey, opts);\n    }\n  }, [pubkey, fetchProfile, opts]);\n  return profile;\n}\nfunction useSetProfile() {\n  const setProfile = useUserProfilesStore((state) => state.setProfile);\n  const { ndk } = useNDK();\n  const update = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (newProfile) => {\n      if (!ndk) return null;\n      const event = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKEvent(ndk);\n      event.kind = _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKKind.Metadata;\n      event.content = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.serializeProfile)(newProfile);\n      await event.sign();\n      event.publish();\n      setProfile(event.pubkey, newProfile);\n    },\n    [ndk]\n  );\n  return update;\n}\n\n// src/session/hooks/index.ts\nvar EMPTY_SET = /* @__PURE__ */ new Set();\nvar EMPTY_KIND_MAP = /* @__PURE__ */ new Map();\nvar useNDKSessionLogin = () => {\n  const addSession2 = useNDKSessions.getState().addSession;\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (userOrSigner, setActive) => addSession2(userOrSigner, setActive),\n    [addSession2]\n  );\n};\nvar useNDKSessionLogout = () => {\n  const currentPubkey = useNDKCurrentPubkey();\n  const removeSession2 = useNDKSessions.getState().removeSession;\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (pubkey) => {\n      const _pubkey = pubkey ?? currentPubkey;\n      if (!_pubkey) {\n        console.error(\"No pubkey provided for logout\");\n        return;\n      }\n      removeSession2(_pubkey);\n    },\n    [removeSession2, currentPubkey]\n  );\n};\nvar useNDKSessionSwitch = () => {\n  const switchToUser2 = useNDKSessions.getState().switchToUser;\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((pubkey) => switchToUser2(pubkey), [switchToUser2]);\n};\nvar useFollows = () => {\n  const follows = useNDKSessions(\n    (s) => s.activePubkey ? s.sessions.get(s.activePubkey)?.followSet ?? EMPTY_SET : EMPTY_SET\n  );\n  const followKinds = useNDKSessions(\n    (s) => s.activePubkey ? s.sessions.get(s.activePubkey)?.kindFollowSet ?? EMPTY_KIND_MAP : EMPTY_KIND_MAP\n  );\n  const followSet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const set = new Set(follows);\n    for (const kinds of followKinds.values()) {\n      for (const [pubkey, { followed }] of kinds.entries()) {\n        if (followed) {\n          set.add(pubkey);\n        } else {\n          set.delete(pubkey);\n        }\n      }\n    }\n    return set;\n  }, [follows, followKinds]);\n  return followSet;\n};\nfunction useNDKSessionEvent(kind, options = {}) {\n  const { ndk } = useNDK();\n  const { create: create6 } = options;\n  const activePubkey = useNDKSessions((s) => s.activePubkey);\n  const activeSessionEvents = useNDKSessions(\n    (s) => s.activePubkey ? s.sessions.get(s.activePubkey)?.events : void 0\n  );\n  const event = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (!activeSessionEvents || !activePubkey) return void 0;\n    const existingEvent = activeSessionEvents.get(kind);\n    if (existingEvent) return existingEvent;\n    if (create6 && ndk) {\n      try {\n        const newInstance = new create6(ndk);\n        newInstance.pubkey = activePubkey;\n        return newInstance;\n      } catch (error) {\n        console.error(`Failed to create instance for kind ${kind} using provided class:`, error);\n        return void 0;\n      }\n    }\n    return void 0;\n  }, [activeSessionEvents, kind, ndk, activePubkey]);\n  return event;\n}\nvar useCurrentUserProfile = () => {\n  const activePubkey = useNDKSessions((state) => state.activePubkey);\n  const profile = useProfileValue(activePubkey ?? void 0);\n  return profile;\n};\n\n// src/session/hooks/signers.ts\nvar useNDKSessionSigners = () => useNDKSessions((s) => s.signers);\n\n// src/session/hooks/sessions.ts\nvar useNDKSessionSessions = () => useNDKSessions((s) => s.sessions);\n\n// src/session/hooks/control.ts\nvar useNDKSessionStart = () => useNDKSessions((s) => s.startSession);\nvar useNDKSessionStop = () => useNDKSessions((s) => s.stopSession);\n\n// src/session/hooks/use-ndk-session-monitor.ts\n\n\n\n// src/session/storage/index.ts\nvar SESSIONS_STORE_KEY = \"ndk-saved-sessions\";\nvar ACTIVE_PUBKEY_STORE_KEY = \"ndk-active-pubkey\";\nvar NDKSessionLocalStorage = class {\n  /**\n   * Get an item from localStorage.\n   * @param key The key to retrieve.\n   * @returns The stored value or null if not found.\n   */\n  getItem(key) {\n    if (typeof localStorage === \"undefined\") {\n      console.warn(\"localStorage is not available in this environment\");\n      return null;\n    }\n    return localStorage.getItem(key);\n  }\n  /**\n   * Set an item in localStorage.\n   * @param key The key to store.\n   * @param value The value to store.\n   */\n  setItem(key, value) {\n    if (typeof localStorage === \"undefined\") {\n      console.warn(\"localStorage is not available in this environment\");\n      return;\n    }\n    localStorage.setItem(key, value);\n  }\n  /**\n   * Delete an item from localStorage.\n   * @param key The key to delete.\n   */\n  deleteItem(key) {\n    if (typeof localStorage === \"undefined\") {\n      console.warn(\"localStorage is not available in this environment\");\n      return;\n    }\n    localStorage.removeItem(key);\n  }\n};\nfunction loadSessionsFromStorage(storage) {\n  try {\n    const sessionsJson = storage.getItem(SESSIONS_STORE_KEY);\n    if (!sessionsJson) return [];\n    const sessions = JSON.parse(sessionsJson);\n    return sessions;\n  } catch (error) {\n    console.error(\"[NDK] Error loading sessions from storage:\", error);\n    return [];\n  }\n}\nfunction saveSessionsToStorage(storage, sessions) {\n  try {\n    storage.setItem(SESSIONS_STORE_KEY, JSON.stringify(sessions));\n  } catch (error) {\n    console.error(\"[NDK] Error saving sessions to storage:\", error);\n  }\n}\nasync function addOrUpdateStoredSession(storage, pubkey, signerPayload) {\n  try {\n    const sessions = loadSessionsFromStorage(storage);\n    const existingIndex = sessions.findIndex((s) => s.pubkey === pubkey);\n    if (existingIndex !== -1) {\n      if (signerPayload !== void 0) {\n        sessions[existingIndex].signerPayload = signerPayload;\n      }\n    } else {\n      sessions.push({\n        pubkey,\n        signerPayload\n        // Will be undefined for read-only sessions initially\n      });\n    }\n    saveSessionsToStorage(storage, sessions);\n  } catch (error) {\n    console.error(\"[NDK] Error adding/updating stored session:\", error);\n  }\n}\nasync function removeStoredSession(storage, pubkey) {\n  try {\n    const sessions = loadSessionsFromStorage(storage);\n    const updatedSessions = sessions.filter((s) => s.pubkey !== pubkey);\n    saveSessionsToStorage(storage, updatedSessions);\n  } catch (error) {\n    console.error(\"[NDK] Error removing session from storage:\", error);\n  }\n}\nfunction getActivePubkey(storage) {\n  try {\n    const activePubkey = storage.getItem(ACTIVE_PUBKEY_STORE_KEY);\n    return activePubkey || void 0;\n  } catch (error) {\n    console.error(\"[NDK] Error getting active pubkey from storage:\", error);\n    return void 0;\n  }\n}\nfunction storeActivePubkey(storage, pubkey) {\n  try {\n    storage.setItem(ACTIVE_PUBKEY_STORE_KEY, pubkey);\n  } catch (error) {\n    console.error(\"[NDK] Error setting active pubkey in storage:\", error);\n  }\n}\nasync function clearActivePubkey(storage) {\n  try {\n    storage.deleteItem(ACTIVE_PUBKEY_STORE_KEY);\n  } catch (error) {\n    console.error(\"[NDK] Error clearing active pubkey from storage:\", error);\n  }\n}\n\n// src/session/hooks/use-ndk-session-monitor.ts\nfunction useNDKSessionMonitor(sessionStorage, opts) {\n  const { ndk } = useNDK();\n  const isInitialized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  const storedKeys = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(/* @__PURE__ */ new Map());\n  const storedActivePubkey = sessionStorage && getActivePubkey(sessionStorage);\n  const addSession2 = useNDKSessionLogin();\n  const currentUser = useNDKCurrentUser();\n  const signers = useNDKSessionSigners();\n  const sessions = useNDKSessionSessions();\n  const startSession2 = useNDKSessionStart();\n  const stopSession2 = useNDKSessionStop();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!ndk || isInitialized.current || !sessionStorage) return;\n    async function initializeFromStorage() {\n      if (!ndk || !sessionStorage) return;\n      try {\n        const storedSessions = loadSessionsFromStorage(sessionStorage);\n        if (storedSessions.length === 0) {\n          return;\n        }\n        for (const storedSession of storedSessions) {\n          const { pubkey, signerPayload } = storedSession;\n          try {\n            const user = ndk.getUser({ pubkey });\n            let signer = void 0;\n            if (signerPayload) {\n              signer = await (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.ndkSignerFromPayload)(signerPayload, ndk);\n              if (!signer) {\n                console.warn(\n                  `[NDK] Failed to deserialize signer for ${pubkey}, session will be read-only.`\n                );\n              } else {\n                storedKeys.current.set(pubkey, true);\n              }\n            } else {\n              storedKeys.current.set(pubkey, false);\n            }\n            await addSession2(signer ? signer : user, pubkey === storedActivePubkey);\n          } catch (error) {\n            console.error(\n              `[NDK] Failed to process stored session for pubkey ${storedSession.pubkey}:`,\n              error\n            );\n          }\n        }\n      } catch (error) {\n        console.error(\"[NDK] Error initializing sessions from storage:\", error);\n      }\n    }\n    initializeFromStorage().finally(() => {\n      if (storedActivePubkey) {\n        startSession2(storedActivePubkey, opts || {});\n      }\n      isInitialized.current = true;\n    });\n  }, [ndk, sessionStorage]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!ndk || !isInitialized.current || !sessionStorage) return;\n    async function persistSessions() {\n      if (!ndk || !sessionStorage) return;\n      for (const [pubkey, signer] of signers) {\n        if (storedKeys.current.get(pubkey)) continue;\n        const payload = signer.toPayload();\n        if (payload) {\n          await addOrUpdateStoredSession(sessionStorage, pubkey, payload);\n          storedKeys.current.set(pubkey, true);\n        }\n      }\n      for (const pubkey of sessions.keys()) {\n        if (storedKeys.current.has(pubkey)) continue;\n        await addOrUpdateStoredSession(sessionStorage, pubkey);\n        storedKeys.current.set(pubkey, true);\n      }\n    }\n    persistSessions();\n  }, [sessions, signers, ndk, sessionStorage]);\n  const currentActivePubkey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(currentUser?.pubkey);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    console.log(\"Current user pubkey:\", currentUser?.pubkey);\n    if (!ndk || !isInitialized.current || !sessionStorage) return;\n    if (currentUser?.pubkey === currentActivePubkey.current) {\n      console.log(\"No change in active pubkey, skipping update.\");\n      return;\n    }\n    async function updateActivePubkey() {\n      if (!ndk || !sessionStorage) return;\n      if (currentUser?.pubkey) {\n        try {\n          if (currentActivePubkey.current !== currentUser.pubkey) {\n            if (currentActivePubkey.current) {\n              await stopSession2(currentActivePubkey.current);\n            }\n            currentActivePubkey.current = currentUser.pubkey;\n          }\n          console.log(\"Storing active pubkey:\", currentUser.pubkey);\n          storeActivePubkey(sessionStorage, currentUser.pubkey);\n          console.log(\"Starting session for active pubkey:\", currentUser.pubkey);\n          await startSession2(currentUser.pubkey, opts || {});\n        } catch (error) {\n          console.error(`Failed to start session for active pubkey ${currentUser?.pubkey}:`, error);\n        }\n      } else {\n        await clearActivePubkey(sessionStorage);\n      }\n    }\n    updateActivePubkey();\n  }, [currentUser?.pubkey, ndk, sessionStorage]);\n  const prevSessionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(/* @__PURE__ */ new Map());\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!sessionStorage) return;\n    const currentSessions = sessions;\n    const prevSessions = prevSessionsRef.current;\n    prevSessions.forEach((_, pubkey) => {\n      if (!currentSessions.has(pubkey)) {\n        console.log(`Session ${pubkey} detected as removed, updating storage.`);\n        removeStoredSession(sessionStorage, pubkey);\n      }\n    });\n    prevSessionsRef.current = new Map(currentSessions);\n  }, [sessions, sessionStorage]);\n  return null;\n}\n\n// src/mutes/hooks/use-is-item-muted.ts\n\n\n\n// src/mutes/hooks/use-mute-criteria.ts\n\n\n// src/mutes/hooks/use-mute-filter.ts\n\n\n// src/utils/mute.ts\nvar isMuted = (event, criteria) => {\n  if (!criteria) return false;\n  const { pubkeys, eventIds, hashtags, words } = criteria;\n  if (pubkeys.has(event.pubkey)) return true;\n  if (eventIds.has(event.id)) return true;\n  if (eventIds.size > 0 || hashtags.size > 0) {\n    for (const tag of event.tags) {\n      if (tag[0] === \"e\" && eventIds.has(tag[1])) return true;\n      if (tag[0] === \"t\" && hashtags.has(tag[1])) return true;\n    }\n  }\n  if (words && words.size > 0 && event.content) {\n    const wordsInContent = event.content.split(/\\s+/).map((word) => word.toLowerCase());\n    for (const word of wordsInContent) {\n      if (words.has(word)) return true;\n    }\n  }\n  return false;\n};\n\n// src/mutes/hooks/use-mute-filter.ts\nvar EMPTY_MUTE_CRITERIA = {\n  pubkeys: /* @__PURE__ */ new Set(),\n  eventIds: /* @__PURE__ */ new Set(),\n  hashtags: /* @__PURE__ */ new Set(),\n  words: /* @__PURE__ */ new Set()\n};\nfunction useMuteFilter() {\n  const muteCriteria = useActiveMuteCriteria();\n  console.log(\"useMuteFilter\", muteCriteria);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (event) => {\n      return isMuted(event, muteCriteria);\n    },\n    [muteCriteria]\n  );\n}\n\n// src/mutes/hooks/use-mute-criteria.ts\nfunction useActiveMuteCriteria() {\n  return useNDKMutes((s) => s.muteCriteria);\n}\nfunction useMuteCriteria(pubkey) {\n  const mutesForPubkey = useNDKMutes((s) => pubkey ? s.mutes.get(pubkey) : EMPTY_MUTE_CRITERIA);\n  const extraMutes = useNDKMutes((s) => s.extraMutes);\n  const [criteria, setCriteria] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(EMPTY_MUTE_CRITERIA);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const combinedMutes = {\n      eventIds: /* @__PURE__ */ new Set([...mutesForPubkey?.eventIds || [], ...extraMutes?.eventIds || []]),\n      hashtags: /* @__PURE__ */ new Set([...mutesForPubkey?.hashtags || [], ...extraMutes?.hashtags || []]),\n      words: /* @__PURE__ */ new Set([...mutesForPubkey?.words || [], ...extraMutes?.words || []]),\n      pubkeys: /* @__PURE__ */ new Set([...mutesForPubkey?.pubkeys || [], ...extraMutes?.pubkeys || []])\n    };\n    setCriteria(combinedMutes);\n  }, [\n    mutesForPubkey?.eventIds,\n    mutesForPubkey?.hashtags,\n    mutesForPubkey?.words,\n    mutesForPubkey?.pubkeys,\n    extraMutes?.eventIds,\n    extraMutes?.hashtags,\n    extraMutes?.words,\n    extraMutes?.pubkeys\n  ]);\n  return criteria;\n}\n\n// src/mutes/hooks/use-is-item-muted.ts\nfunction useIsItemMuted(item) {\n  const muteCriteria = useActiveMuteCriteria();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    let itemType;\n    let value;\n    if (item instanceof _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKEvent) {\n      itemType = \"event\";\n      value = item.id;\n    } else if (item instanceof _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKUser) {\n      itemType = \"pubkey\";\n      value = item.pubkey;\n    } else if (typeof item === \"string\") {\n      if (item.startsWith(\"#\") && item.length > 1) {\n        itemType = \"hashtag\";\n        value = item.substring(1);\n      } else {\n        itemType = \"word\";\n        value = item;\n      }\n    } else {\n      return false;\n    }\n    switch (itemType) {\n      case \"event\":\n        return muteCriteria.eventIds.has(value);\n      case \"pubkey\":\n        return muteCriteria.pubkeys.has(value);\n      case \"hashtag\":\n        return muteCriteria.hashtags.has(value);\n      case \"word\":\n        return muteCriteria.words.has(value);\n      default:\n        return false;\n    }\n  }, [muteCriteria, item]);\n}\n\n// src/mutes/hooks/use-mute-item.ts\n\nfunction useMuteItem(options) {\n  const currentPubkey = useNDKCurrentPubkey();\n  const muteItem2 = useNDKMutes((s) => s.muteItem);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (item) => {\n      if (!currentPubkey) {\n        console.warn(\"useMuteItem: No active user found. Cannot mute item.\");\n        return;\n      }\n      const identified = identifyMuteItem(item);\n      if (!identified) return;\n      const { type, value } = identified;\n      muteItem2(currentPubkey, value, type, options);\n    },\n    [currentPubkey, muteItem2, options]\n  );\n}\n\n// src/mutes/hooks/use-publish-mute-list.ts\n\nfunction usePublishMuteList() {\n  const currentPubkey = useNDKCurrentPubkey();\n  const publishMuteList2 = useNDKMutes((s) => s.publishMuteList);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {\n    if (!currentPubkey) {\n      console.warn(\"usePublishMuteList: No active user found. Cannot publish mute list.\");\n      return void 0;\n    }\n    return publishMuteList2(currentPubkey);\n  }, [currentPubkey, publishMuteList2]);\n}\n\n// src/mutes/hooks/use-unmute-item.ts\n\n\nfunction useUnmuteItem(options) {\n  const currentPubkey = useNDKCurrentPubkey();\n  const unmuteItem2 = useNDKMutes((s) => s.unmuteItem);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (item) => {\n      if (!currentPubkey) {\n        console.warn(\"useUnmuteItem: No active user found. Cannot unmute item.\");\n        return;\n      }\n      let itemType;\n      let value;\n      if (item instanceof _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKEvent) {\n        itemType = \"event\";\n        value = item.id;\n      } else if (item instanceof _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKUser) {\n        itemType = \"pubkey\";\n        value = item.pubkey;\n      } else if (typeof item === \"string\") {\n        if (item.startsWith(\"#\") && item.length > 1) {\n          itemType = \"hashtag\";\n          value = item.substring(1);\n        } else {\n          itemType = \"word\";\n          value = item;\n        }\n      } else {\n        console.warn(\"useUnmuteItem: Invalid item type provided.\", item);\n        return;\n      }\n      unmuteItem2(currentPubkey, value, itemType, options);\n    },\n    [currentPubkey, unmuteItem2, options]\n  );\n}\n\n// src/observer/hooks/index.ts\n\n\nfunction useObserver(filters, opts = {}, dependencies = []) {\n  const { ndk } = useNDK();\n  const sub = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const [events, setEvents] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n  const buffer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n  const bufferTimeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const addedEventIds = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(/* @__PURE__ */ new Set());\n  console.log(\"useObserver\");\n  const muteFilter = useMuteFilter();\n  dependencies.push(!!filters);\n  const stopFilters = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    if (sub.current) sub.current.stop();\n    sub.current = null;\n    buffer.current = [];\n    if (bufferTimeout.current) {\n      clearTimeout(bufferTimeout.current);\n      bufferTimeout.current = null;\n    }\n    addedEventIds.current.clear();\n    setEvents([]);\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!ndk || !filters) return;\n    let isValid = true;\n    if (sub.current) stopFilters();\n    const processEvent2 = (event) => {\n      if (!isValid) return;\n      if (!opts.includeMuted && muteFilter(event)) return;\n      const tagId = event.tagId();\n      if (addedEventIds.current.has(tagId)) return;\n      addedEventIds.current.add(tagId);\n      buffer.current.push(event);\n      if (!bufferTimeout.current) {\n        bufferTimeout.current = setTimeout(() => {\n          setEvents((prev) => [...prev, ...buffer.current]);\n          buffer.current = [];\n          bufferTimeout.current = null;\n        }, 50);\n      }\n    };\n    sub.current = ndk.subscribe(\n      filters,\n      {\n        closeOnEose: true,\n        cacheUsage: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__.NDKSubscriptionCacheUsage.ONLY_CACHE,\n        groupable: false,\n        wrap: true,\n        ...opts\n      },\n      {\n        onEvent: (event) => {\n          if (!isValid) return;\n          processEvent2(event);\n        },\n        onEvents: (events2) => {\n          const filtered = !opts.includeMuted ? events2.filter((e) => !muteFilter(e)) : events2;\n          setEvents(filtered);\n        }\n      }\n    );\n    if (buffer.current.length > 0) {\n      if (bufferTimeout.current) {\n        clearTimeout(bufferTimeout.current);\n        bufferTimeout.current = null;\n      }\n      buffer.current = [];\n    }\n    return () => {\n      isValid = false;\n      stopFilters();\n    };\n  }, [ndk, ...dependencies]);\n  return events;\n}\n\n// src/subscribe/hooks/subscribe.ts\n\n\n\n// src/subscribe/store/index.ts\n\nvar createSubscribeStore = (bufferMs = 30) => {\n  const store = (0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_6__.createStore)((set, get) => {\n    const buffer = /* @__PURE__ */ new Map();\n    let timeout = null;\n    const flushBuffer = () => {\n      const state = get();\n      const newEventMap = new Map(state.eventMap);\n      let hasChanges = false;\n      for (const [id, event] of buffer.entries()) {\n        const existingEvent = newEventMap.get(id);\n        if (!existingEvent || existingEvent.created_at !== void 0 && event.created_at !== void 0 && event.created_at > existingEvent.created_at) {\n          newEventMap.set(id, event);\n          hasChanges = true;\n        }\n      }\n      buffer.clear();\n      if (hasChanges) {\n        const newEvents = Array.from(newEventMap.values());\n        set({ eventMap: newEventMap, events: newEvents });\n      }\n      timeout = null;\n    };\n    return {\n      events: [],\n      eventMap: /* @__PURE__ */ new Map(),\n      eose: false,\n      subscriptionRef: void 0,\n      addEvent: (event) => {\n        const id = event.tagId();\n        if (bufferMs !== false) {\n          const existingInBuffer = buffer.get(id);\n          const existingInStore = get().eventMap.get(id);\n          if (existingInBuffer && existingInBuffer.created_at !== void 0 && event.created_at !== void 0 && existingInBuffer.created_at >= event.created_at) {\n            return;\n          }\n          if (existingInStore && existingInStore.created_at !== void 0 && event.created_at !== void 0 && existingInStore.created_at >= event.created_at) {\n            return;\n          }\n          buffer.set(id, event);\n          if (!timeout) {\n            timeout = setTimeout(flushBuffer, bufferMs);\n          }\n        } else {\n          const state = get();\n          const newEventMap = new Map(state.eventMap);\n          const existingEvent = newEventMap.get(id);\n          if (existingEvent && existingEvent.created_at !== void 0 && event.created_at !== void 0 && existingEvent.created_at >= event.created_at) {\n            return;\n          }\n          newEventMap.set(id, event);\n          const newEvents = Array.from(newEventMap.values());\n          set({ eventMap: newEventMap, events: newEvents });\n        }\n      },\n      addEvents: (events) => {\n        if (!events || events.length === 0) return;\n        if (bufferMs !== false) {\n          let needsFlush = false;\n          for (const event of events) {\n            if (!event) continue;\n            const id = event.tagId();\n            const existingInBuffer = buffer.get(id);\n            const existingInStore = get().eventMap.get(id);\n            if (existingInBuffer && existingInBuffer.created_at !== void 0 && event.created_at !== void 0 && existingInBuffer.created_at >= event.created_at) {\n              continue;\n            }\n            if (existingInStore && existingInStore.created_at !== void 0 && event.created_at !== void 0 && existingInStore.created_at >= event.created_at) {\n              continue;\n            }\n            buffer.set(id, event);\n            needsFlush = true;\n          }\n          if (needsFlush && !timeout) {\n            timeout = setTimeout(flushBuffer, bufferMs);\n          }\n        } else {\n          const state = get();\n          const newEventMap = new Map(state.eventMap);\n          let hasUpdates = false;\n          for (const event of events) {\n            if (!event) continue;\n            const id = event.tagId();\n            const existingEvent = newEventMap.get(id);\n            if (existingEvent && existingEvent.created_at !== void 0 && event.created_at !== void 0 && existingEvent.created_at >= event.created_at) {\n              continue;\n            }\n            newEventMap.set(id, event);\n            hasUpdates = true;\n          }\n          if (hasUpdates) {\n            const newEvents = Array.from(newEventMap.values());\n            set({ eventMap: newEventMap, events: newEvents });\n          }\n        }\n      },\n      removeEventId: (id) => {\n        const state = get();\n        const newEventMap = new Map(state.eventMap);\n        newEventMap.delete(id);\n        const newEvents = Array.from(newEventMap.values());\n        set({ eventMap: newEventMap, events: newEvents });\n      },\n      filterMutedEvents: (muteFilter) => {\n        const state = get();\n        const currentEventMap = state.eventMap;\n        const newEventMap = /* @__PURE__ */ new Map();\n        for (const [id, event] of currentEventMap.entries()) {\n          if (!muteFilter(event)) {\n            newEventMap.set(id, event);\n          }\n        }\n        const newEvents = Array.from(newEventMap.values());\n        set({ eventMap: newEventMap, events: newEvents });\n      },\n      setEose: () => {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n          flushBuffer();\n        }\n        set({ eose: true });\n        if (bufferMs !== false) {\n          bufferMs = 16;\n        }\n      },\n      reset: () => {\n        buffer.clear();\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        set({\n          events: [],\n          eventMap: /* @__PURE__ */ new Map(),\n          eose: false,\n          subscriptionRef: void 0\n        });\n      }\n    };\n  });\n  return store;\n};\n\n// src/subscribe/hooks/subscribe.ts\nfunction useSubscribe(filters, opts = {}, dependencies = []) {\n  const { ndk } = useNDK();\n  const muteFilter = useMuteFilter();\n  const storeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  if (!storeRef.current) {\n    storeRef.current = createSubscribeStore(opts.bufferMs);\n  }\n  const store = storeRef.current;\n  const subRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!ndk || !filters) return;\n    if (subRef.current) {\n      subRef.current.stop();\n      subRef.current = null;\n    }\n    const setupSubscription = () => {\n      const currentFilters = filters;\n      const handleEvent = (event) => {\n        if (!opts.includeDeleted && event.hasTag(\"deleted\")) {\n          return;\n        }\n        if (!opts.includeMuted && muteFilter(event)) {\n          return;\n        }\n        event.once(\"deleted\", () => {\n          const state2 = store.getState();\n          state2.removeEventId(event.tagId());\n        });\n        const state = store.getState();\n        state.addEvent(event);\n      };\n      const handleCachedEvents = (events2) => {\n        if (events2 && events2.length > 0) {\n          const validEvents = events2.filter((e) => {\n            if (!opts.includeDeleted && e.hasTag(\"deleted\")) return false;\n            if (!opts.includeMuted && muteFilter(e)) return false;\n            return true;\n          });\n          if (validEvents.length > 0) {\n            const state = store.getState();\n            state.addEvents(validEvents);\n            for (const evt of validEvents) {\n              evt.once(\"deleted\", () => {\n                const state2 = store.getState();\n                state2.removeEventId(evt.tagId());\n              });\n            }\n          }\n        }\n      };\n      const handleEose = () => {\n        const state = store.getState();\n        state.setEose();\n      };\n      const sub = ndk.subscribe(currentFilters, opts, {\n        onEvent: handleEvent,\n        onEvents: handleCachedEvents,\n        onEose: handleEose\n      });\n      subRef.current = sub;\n    };\n    setupSubscription();\n    return () => {\n      if (subRef.current) {\n        subRef.current.stop();\n        subRef.current = null;\n      }\n    };\n  }, [ndk, muteFilter, !!filters, ...dependencies]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!opts.includeMuted) {\n      const state = store.getState();\n      state.filterMutedEvents(muteFilter);\n    }\n  }, [muteFilter, store, opts.includeMuted]);\n  const events = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.useStore)(store, (s) => s.events);\n  const eose = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.useStore)(store, (s) => s.eose);\n  return { events, eose };\n}\n\n// src/subscribe/hooks/event.ts\n\nfunction useEvent(idOrFilter, opts = {}, dependencies = []) {\n  const [event, setEvent] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  const { ndk } = useNDK();\n  dependencies.push(!!idOrFilter);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    async function fetchEvent() {\n      if (!ndk || !idOrFilter) return;\n      const events = await ndk.fetchEvent(idOrFilter, opts);\n      setEvent(events);\n    }\n    fetchEvent();\n  }, dependencies);\n  return event;\n}\n\n// src/session/hooks/use-available-sessions.ts\n\nvar useAvailableSessions = () => {\n  const sessions = useNDKSessions((state) => state.sessions);\n  const availablePubkeys = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => Array.from(sessions.keys()),\n    // Get keys from sessions map\n    [sessions]\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({ availablePubkeys }), [availablePubkeys]);\n};\n\n// src/wallet/hooks/index.ts\n\n\n\n\nvar useInternalWalletStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set) => ({\n  activeWallet: null,\n  balance: null,\n  setActiveWallet: (wallet) => set({ activeWallet: wallet }),\n  setBalance: (balance) => set({ balance })\n}));\nvar useNDKWallet = () => {\n  const { ndk } = useNDK();\n  const activeWallet = useInternalWalletStore((s) => s.activeWallet);\n  const storeSetActiveWallet = useInternalWalletStore((s) => s.setActiveWallet);\n  const balance = useInternalWalletStore((s) => s.balance);\n  const setBalance = useInternalWalletStore((s) => s.setBalance);\n  const setActiveWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (wallet) => {\n      if (!ndk) return;\n      let debounceTimer;\n      storeSetActiveWallet(wallet);\n      ndk.wallet = wallet ?? void 0;\n      const updateBalance = () => {\n        if (debounceTimer) clearTimeout(debounceTimer);\n        debounceTimer = setTimeout(() => {\n          const balanceObj = wallet?.balance;\n          const amount = balanceObj?.amount ?? null;\n          setBalance(amount);\n        }, 50);\n      };\n      if (wallet) {\n        wallet.on(\"ready\", updateBalance);\n        wallet.on(\"balance_updated\", updateBalance);\n        wallet.updateBalance?.();\n      } else {\n        setBalance(null);\n      }\n    },\n    [ndk, storeSetActiveWallet, setBalance]\n  );\n  return { activeWallet, setActiveWallet, balance, setBalance };\n};\nvar useInternalNutzapMonitorStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set) => ({\n  nutzapMonitor: null,\n  setNutzapMonitor: (monitor) => set({ nutzapMonitor: monitor })\n}));\nvar useNDKNutzapMonitor = (mintList, start = false) => {\n  const { ndk } = useNDK();\n  const currentUser = useNDKCurrentUser();\n  const { activeWallet } = useNDKWallet();\n  const nutzapMonitor = useInternalNutzapMonitorStore((s) => s.nutzapMonitor);\n  const setNutzapMonitor = useInternalNutzapMonitorStore((s) => s.setNutzapMonitor);\n  const [monitorStarted, setMonitorStarted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const monitorStore = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (ndk?.cacheAdapter?.getAllNutzapStates && ndk?.cacheAdapter?.setNutzapState) {\n      const boundGetAll = ndk.cacheAdapter.getAllNutzapStates.bind(ndk.cacheAdapter);\n      const boundSetState = ndk.cacheAdapter.setNutzapState.bind(ndk.cacheAdapter);\n      return {\n        getAllNutzaps: boundGetAll,\n        setNutzapState: boundSetState\n      };\n    }\n    return void 0;\n  }, [ndk?.cacheAdapter]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!ndk || !currentUser?.pubkey || !activeWallet) {\n      if (nutzapMonitor) {\n        console.log(\"Stopping NDKNutzapMonitor due to missing dependencies\");\n        nutzapMonitor.stop();\n        setNutzapMonitor(null);\n        setMonitorStarted(false);\n      }\n      return;\n    }\n    if (!nutzapMonitor && start) {\n      console.log(\"Initializing NDKNutzapMonitor\");\n      const monitor = new _nostr_dev_kit_ndk_wallet__WEBPACK_IMPORTED_MODULE_7__.NDKNutzapMonitor(ndk, currentUser, {\n        mintList,\n        store: monitorStore\n      });\n      monitor.wallet = activeWallet;\n      setNutzapMonitor(monitor);\n    } else if (nutzapMonitor) {\n      if (nutzapMonitor.wallet?.walletId !== activeWallet.walletId) {\n        console.log(\"Updating wallet in NDKNutzapMonitor\");\n        nutzapMonitor.wallet = activeWallet;\n      }\n      if (nutzapMonitor.mintList !== mintList) {\n        console.log(\"Updating mintList in NDKNutzapMonitor\");\n        nutzapMonitor.mintList = mintList;\n      }\n    }\n  }, [ndk, currentUser, activeWallet, mintList, monitorStore, nutzapMonitor, setNutzapMonitor, start]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (start && nutzapMonitor && !monitorStarted) {\n      console.log(\"Starting NDKNutzapMonitor\");\n      nutzapMonitor.start({\n        filter: { limit: 100 },\n        opts: { skipVerification: true }\n      }).then(() => {\n        setMonitorStarted(true);\n        console.log(\"NDKNutzapMonitor started successfully\");\n      }).catch((err) => {\n        console.error(\"Failed to start NDKNutzapMonitor\", err);\n      });\n    } else if (!start && nutzapMonitor && monitorStarted) {\n      console.log(\"Stopping NDKNutzapMonitor\");\n      nutzapMonitor.stop();\n      setMonitorStarted(false);\n    }\n    return () => {\n      if (nutzapMonitor && monitorStarted) {\n        console.log(\"Stopping NDKNutzapMonitor on cleanup\");\n        nutzapMonitor.stop();\n        setMonitorStarted(false);\n      }\n    };\n  }, [start, nutzapMonitor, monitorStarted]);\n  return { nutzapMonitor };\n};\n\n// src/index.ts\n\n\nvar index_default = _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLWhvb2tzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUN5RTs7QUFFekU7QUFDMEU7O0FBRTFFO0FBQ2lDOztBQUVqQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsZ0JBQWdCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsOEJBQThCO0FBQ3hDLElBQUk7QUFDSixVQUFVLEtBQUs7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLEdBQUc7QUFDSDs7QUFFQTtBQUNBLDJCQUEyQiwrQ0FBTTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDc0Q7QUFDVjtBQUNlOztBQUUzRDtBQUN5RDs7QUFFekQ7QUFDNEM7QUFDNUMsa0JBQWtCLCtDQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxLQUFLO0FBQ2pCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLE9BQU87QUFDUDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNxQztBQUNPO0FBQ0s7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUN1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0RBQVE7QUFDOUI7QUFDQTtBQUNBLElBQUkseUJBQXlCLHVEQUFPO0FBQ3BDO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxjQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxtREFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBa0IsK0NBQU8sQ0FBQywrREFBSzs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix1REFBUTtBQUN0QztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0Esa0RBQWtELFdBQVc7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELE9BQU87QUFDbEU7QUFDQTtBQUNBO0FBQ0EsK0RBQStELE9BQU87QUFDdEU7QUFDQTtBQUNBLE1BQU07QUFDTix1RUFBdUUsT0FBTztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUMrRDtBQUMvRDtBQUNBLGtCQUFrQixvRUFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVEQUFPO0FBQ2xCO0FBQ0E7QUFDQSxXQUFXLHVEQUFPO0FBQ2xCO0FBQ0E7QUFDQSxXQUFXLHVEQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVEQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixpREFBaUQsWUFBWSxNQUFNLG9CQUFvQjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCx1REFBTztBQUMxRCxtREFBbUQsdURBQU87QUFDMUQsdUJBQXVCLHVEQUFPO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3REFBd0Q7QUFDNUU7QUFDQSxrQkFBa0IsOEVBQThFO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsT0FBTztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsZUFBZSxvQkFBb0IsT0FBTztBQUMzRSxLQUFLO0FBQ0w7QUFDQSx1Q0FBdUMsNkNBQTZDLElBQUksbUJBQW1CO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsT0FBTztBQUM5RDtBQUNBO0FBQ0EsTUFBTTtBQUNOLHVEQUF1RCxPQUFPO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0osOERBQThELFFBQVE7QUFDdEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsT0FBTztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxPQUFPO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsbURBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QscUJBQXFCLCtDQUFPLENBQUMsK0RBQU07O0FBRW5DO0FBQ0E7QUFDQTtBQUNBLFNBQVMsOENBQU8sVUFBVSxLQUFLO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDhDQUFPO0FBQ2hCO0FBQ0EsMkJBQTJCLHNCQUFzQjtBQUNqRDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxVQUFVLE1BQU07QUFDaEIsb0RBQW9ELCtDQUFRO0FBQzVELGdCQUFnQiw2Q0FBTTtBQUN0QiwrQkFBK0Isa0RBQVc7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELFVBQVU7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRSxnREFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0RBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUs0QjtBQUNpRDtBQUNoQztBQUM3QztBQUNBLG1DQUFtQyx1QkFBdUI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDJEQUFVO0FBQ3BDO0FBQ0EsRUFBRSxnREFBVTtBQUNaO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsTUFBTTtBQUNoQixpQkFBaUIsa0RBQVk7QUFDN0I7QUFDQTtBQUNBLHdCQUF3Qix3REFBUztBQUNqQyxtQkFBbUIsdURBQVE7QUFDM0Isc0JBQXNCLG9FQUFnQjtBQUN0QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsa0RBQVk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGtEQUFZO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGtEQUFZO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOENBQVE7QUFDNUI7QUFDQTtBQUNBLDRCQUE0QixVQUFVO0FBQ3RDO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsOENBQThDO0FBQzlDLFVBQVUsTUFBTTtBQUNoQixVQUFVLGtCQUFrQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4Q0FBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLDREQUE0RCxNQUFNO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDMEQ7QUFDUzs7QUFFbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxNQUFNO0FBQ2hCLHdCQUF3Qiw2Q0FBTztBQUMvQixxQkFBcUIsNkNBQU87QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLGdEQUFVO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQSw2QkFBNkIsd0VBQW9CO0FBQ2pEO0FBQ0E7QUFDQSw0REFBNEQsT0FBTztBQUNuRTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLG1FQUFtRSxxQkFBcUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLGdEQUFVO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILDhCQUE4Qiw2Q0FBTztBQUNyQyxFQUFFLGdEQUFVO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQsVUFBVTtBQUNWLHFFQUFxRSxvQkFBb0I7QUFDekY7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsMEJBQTBCLDZDQUFPO0FBQ2pDLEVBQUUsZ0RBQVU7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQzRDO0FBQ29DOztBQUVoRjtBQUN1RTs7QUFFdkU7QUFDb0Q7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBLFVBQVUscUNBQXFDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrREFBWTtBQUNyQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywrQ0FBUztBQUMzQyxFQUFFLGdEQUFVO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDhDQUFRO0FBQ2pCO0FBQ0E7QUFDQSx3QkFBd0Isd0RBQVM7QUFDakM7QUFDQTtBQUNBLE1BQU0seUJBQXlCLHVEQUFRO0FBQ3ZDO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ29EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLFNBQVMsa0RBQVk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGNBQWM7QUFDNUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ29EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLFNBQVMsa0RBQVk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNvRDtBQUM0QjtBQUNoRjtBQUNBO0FBQ0E7QUFDQSxTQUFTLGtEQUFZO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHdEQUFTO0FBQ25DO0FBQ0E7QUFDQSxRQUFRLHlCQUF5Qix1REFBUTtBQUN6QztBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBRzRCO0FBQzJGO0FBQ3ZILHVDQUF1QztBQUN2QyxVQUFVLE1BQU07QUFDaEIsY0FBYyw2Q0FBTztBQUNyQiw4QkFBOEIsK0NBQVM7QUFDdkMsaUJBQWlCLDZDQUFPO0FBQ3hCLHdCQUF3Qiw2Q0FBTztBQUMvQix3QkFBd0IsNkNBQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGtEQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFLGdEQUFVO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix5RUFBeUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNtRTtBQUNoQzs7QUFFbkM7QUFDOEM7QUFDOUM7QUFDQSxnQkFBZ0IsNERBQVc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDBDQUEwQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMENBQTBDO0FBQzFEO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMENBQTBDO0FBQzVEO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMENBQTBDO0FBQ3hELE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMENBQTBDO0FBQ3hELE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDO0FBQ3hDLFVBQVUsTUFBTTtBQUNoQjtBQUNBLG1CQUFtQiw2Q0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw2Q0FBTztBQUN4QixFQUFFLGdEQUFVO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFLGdEQUFVO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsaUJBQWlCLGlEQUFRO0FBQ3pCLGVBQWUsaURBQVE7QUFDdkIsV0FBVztBQUNYOztBQUVBO0FBQ3VFO0FBQ3ZFLHVDQUF1QztBQUN2Qyw0QkFBNEIsK0NBQVM7QUFDckMsVUFBVSxNQUFNO0FBQ2hCO0FBQ0EsRUFBRSxnREFBVTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQzRDO0FBQzVDO0FBQ0E7QUFDQSwyQkFBMkIsOENBQVE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDhDQUFRLFVBQVUsa0JBQWtCO0FBQzdDOztBQUVBO0FBQ29EO0FBQ1I7QUFDaUI7QUFDK0I7QUFDNUYsNkJBQTZCLCtDQUFPO0FBQ3BDO0FBQ0E7QUFDQSxxQ0FBcUMsc0JBQXNCO0FBQzNELGlDQUFpQyxTQUFTO0FBQzFDLENBQUM7QUFDRDtBQUNBLFVBQVUsTUFBTTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixrREFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0Esb0NBQW9DLCtDQUFPO0FBQzNDO0FBQ0EsdUNBQXVDLHdCQUF3QjtBQUMvRCxDQUFDO0FBQ0Q7QUFDQSxVQUFVLE1BQU07QUFDaEI7QUFDQSxVQUFVLGVBQWU7QUFDekI7QUFDQTtBQUNBLDhDQUE4QywrQ0FBUztBQUN2RCx1QkFBdUIsOENBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUUsZ0RBQVU7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHVFQUFnQjtBQUMxQztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUUsZ0RBQVU7QUFDWjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QixnQkFBZ0I7QUFDaEIsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsV0FBVztBQUNYOztBQUVBO0FBQ21DO0FBQ0U7QUFDckMsb0JBQW9CLDBEQUFHO0FBK0NyQiIsInNvdXJjZXMiOlsiL1VzZXJzL3BhYmxvZmVybmFuZGV6L3Rlc3QxMjMvVEVORVgtcGZrbWM5L21haW4vbm9kZV9tb2R1bGVzL0Bub3N0ci1kZXYta2l0L25kay1ob29rcy9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zZXNzaW9uL2hvb2tzL2luZGV4LnRzXG5pbXBvcnQgeyB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazMsIHVzZU1lbW8gYXMgdXNlTWVtbzIgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL25kay9ob29rcy9pbmRleC50c1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvcHJvZmlsZXMvc3RvcmUvaW5kZXgudHNcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gXCJ6dXN0YW5kXCI7XG5cbi8vIHNyYy91dGlscy90aW1lLnRzXG52YXIgaW5TZWNvbmRzID0gKG1zKSA9PiBtcyAvIDFlMztcblxuLy8gc3JjL3Byb2ZpbGVzL3N0b3JlL2ZldGNoLXByb2ZpbGUudHNcbnZhciBmZXRjaFByb2ZpbGVJbXBsZW1lbnRhdGlvbiA9IChzZXQsIGdldCwgcHVia2V5LCBvcHRzKSA9PiB7XG4gIGNvbnN0IGZvcmNlID0gb3B0cz8ucmVmcmVzaDtcbiAgY29uc3QgeyBuZGssIHByb2ZpbGVzIH0gPSBnZXQoKTtcbiAgaWYgKCFuZGspIHtcbiAgICBjb25zb2xlLmVycm9yKFwiTkRLIGluc3RhbmNlIGlzIG5vdCBpbml0aWFsaXplZC4gRGlkIHlvdSB1c2UgdXNlTkRLSW5pdCBhdCB0aGUgYmVnaW5uaW5nIG9mIHlvdXIgYXBwP1wiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFwdWJrZXkpIHJldHVybjtcbiAgY29uc3QgY3VycmVudFByb2ZpbGUgPSBwcm9maWxlcy5nZXQocHVia2V5KTtcbiAgaWYgKGN1cnJlbnRQcm9maWxlICYmICFmb3JjZSkgcmV0dXJuO1xuICBjb25zdCB1c2VyID0gbmRrLmdldFVzZXIoeyBwdWJrZXkgfSk7XG4gIHVzZXIuZmV0Y2hQcm9maWxlKG9wdHM/LnN1Yk9wdHMpLnRoZW4oKHByb2ZpbGUpID0+IHtcbiAgICBzZXQoKHN0YXRlKSA9PiB7XG4gICAgICBjb25zdCBwcm9maWxlczIgPSBuZXcgTWFwKHN0YXRlLnByb2ZpbGVzKTtcbiAgICAgIGlmIChwcm9maWxlKSBwcm9maWxlczIuc2V0KHB1YmtleSwgcHJvZmlsZSk7XG4gICAgICBjb25zdCBsYXN0RmV0Y2hlZEF0ID0gbmV3IE1hcChzdGF0ZS5sYXN0RmV0Y2hlZEF0KTtcbiAgICAgIGxhc3RGZXRjaGVkQXQuc2V0KHB1YmtleSwgaW5TZWNvbmRzKERhdGUubm93KCkpKTtcbiAgICAgIHJldHVybiB7IHByb2ZpbGVzOiBwcm9maWxlczIsIGxhc3RGZXRjaGVkQXQgfTtcbiAgICB9KTtcbiAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgIGNvbnN0IGxhc3RGZXRjaGVkQXQgPSBuZXcgTWFwKHN0YXRlLmxhc3RGZXRjaGVkQXQpO1xuICAgICAgbGFzdEZldGNoZWRBdC5zZXQocHVia2V5LCBpblNlY29uZHMoRGF0ZS5ub3coKSkpO1xuICAgICAgcmV0dXJuIHsgbGFzdEZldGNoZWRBdCB9O1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8vIHNyYy9wcm9maWxlcy9zdG9yZS9pbml0aWFsaXplLnRzXG5mdW5jdGlvbiBpbml0aWFsaXplUHJvZmlsZXNTdG9yZShzZXQsIG5kaykge1xuICBjb25zdCBjYWNoZUFkYXB0ZXIgPSBuZGsuY2FjaGVBZGFwdGVyO1xuICBpZiAoY2FjaGVBZGFwdGVyPy5nZXRBbGxQcm9maWxlc1N5bmMpIHtcbiAgICBjb25zdCBrZXlzID0gY2FjaGVBZGFwdGVyLmdldEFsbFByb2ZpbGVzU3luYygpO1xuICAgIGNvbnN0IHByb2ZpbGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBjb25zdCBsYXN0RmV0Y2hlZEF0ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHByb2ZpbGVdIG9mIGtleXMpIHtcbiAgICAgIHByb2ZpbGVzLnNldChrZXksIHByb2ZpbGUpO1xuICAgICAgbGFzdEZldGNoZWRBdC5zZXQoa2V5LCBwcm9maWxlLmNhY2hlZEF0ID8/IDApO1xuICAgIH1cbiAgICBzZXQoeyBwcm9maWxlcywgbGFzdEZldGNoZWRBdCwgbmRrIH0pO1xuICB9IGVsc2Uge1xuICAgIHNldCh7IG5kayB9KTtcbiAgfVxufVxuXG4vLyBzcmMvcHJvZmlsZXMvc3RvcmUvc2V0LXByb2ZpbGUudHNcbnZhciBzZXRQcm9maWxlSW1wbGVtZW50YXRpb24gPSAoc2V0LCBwdWJrZXksIHByb2ZpbGUsIGNhY2hlZEF0KSA9PiB7XG4gIHNldCgoc3RhdGUpID0+IHtcbiAgICBjb25zdCBuZXdQcm9maWxlcyA9IG5ldyBNYXAoc3RhdGUucHJvZmlsZXMpO1xuICAgIG5ld1Byb2ZpbGVzLnNldChwdWJrZXksIHByb2ZpbGUpO1xuICAgIGNvbnN0IG5ld0xhc3RGZXRjaGVkQXQgPSBuZXcgTWFwKHN0YXRlLmxhc3RGZXRjaGVkQXQpO1xuICAgIG5ld0xhc3RGZXRjaGVkQXQuc2V0KHB1YmtleSwgY2FjaGVkQXQgPz8gaW5TZWNvbmRzKERhdGUubm93KCkpKTtcbiAgICByZXR1cm4geyBwcm9maWxlczogbmV3UHJvZmlsZXMsIGxhc3RGZXRjaGVkQXQ6IG5ld0xhc3RGZXRjaGVkQXQgfTtcbiAgfSk7XG59O1xuXG4vLyBzcmMvcHJvZmlsZXMvc3RvcmUvaW5kZXgudHNcbnZhciB1c2VVc2VyUHJvZmlsZXNTdG9yZSA9IGNyZWF0ZSgoc2V0LCBnZXQpID0+ICh7XG4gIHByb2ZpbGVzOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLFxuICBsYXN0RmV0Y2hlZEF0OiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLFxuICBuZGs6IHZvaWQgMCxcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBpbml0aWFsaXplOiAobmRrKSA9PiBpbml0aWFsaXplUHJvZmlsZXNTdG9yZShzZXQsIG5kayksXG4gIHNldFByb2ZpbGU6IChwdWJrZXksIHByb2ZpbGUsIGNhY2hlZEF0KSA9PiBzZXRQcm9maWxlSW1wbGVtZW50YXRpb24oc2V0LCBwdWJrZXksIHByb2ZpbGUsIGNhY2hlZEF0KSxcbiAgZmV0Y2hQcm9maWxlOiAocHVia2V5LCBvcHRzKSA9PiBmZXRjaFByb2ZpbGVJbXBsZW1lbnRhdGlvbihzZXQsIGdldCwgcHVia2V5LCBvcHRzKVxufSkpO1xuXG4vLyBzcmMvc2Vzc2lvbi9zdG9yZS9pbmRleC50c1xuaW1wb3J0IHsgZW5hYmxlTWFwU2V0IGFzIGVuYWJsZU1hcFNldDIgfSBmcm9tIFwiaW1tZXJcIjtcbmltcG9ydCB7IGNyZWF0ZSBhcyBjcmVhdGU0IH0gZnJvbSBcInp1c3RhbmRcIjtcbmltcG9ydCB7IGltbWVyIGFzIGltbWVyMiB9IGZyb20gXCJ6dXN0YW5kL21pZGRsZXdhcmUvaW1tZXJcIjtcblxuLy8gc3JjL3Nlc3Npb24vc3RvcmUvYWRkLXNlc3Npb24udHNcbmltcG9ydCB7IE5ES1VzZXIgYXMgTkRLVXNlcjIgfSBmcm9tIFwiQG5vc3RyLWRldi1raXQvbmRrXCI7XG5cbi8vIHNyYy9uZGsvc3RvcmUvaW5kZXgudHNcbmltcG9ydCB7IGNyZWF0ZSBhcyBjcmVhdGUyIH0gZnJvbSBcInp1c3RhbmRcIjtcbnZhciB1c2VOREtTdG9yZSA9IGNyZWF0ZTIoKHNldCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5kazogbnVsbCxcbiAgICAvLyBjdXJyZW50VXNlciByZW1vdmVkXG4gICAgc2V0TkRLOiAobmRrKSA9PiB7XG4gICAgICBzZXQoeyBuZGsgfSk7XG4gICAgfSxcbiAgICBzZXRTaWduZXI6IChzaWduZXIpID0+IHtcbiAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgaWYgKHN0YXRlLm5kaykge1xuICAgICAgICAgIHN0YXRlLm5kay5zaWduZXIgPSBzaWduZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgbmRrOiBzdGF0ZS5uZGsgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pO1xuXG4vLyBzcmMvbXV0ZXMvc3RvcmUvaW5kZXgudHNcbmltcG9ydCB7IGVuYWJsZU1hcFNldCB9IGZyb20gXCJpbW1lclwiO1xuaW1wb3J0IHsgY3JlYXRlIGFzIGNyZWF0ZTMgfSBmcm9tIFwienVzdGFuZFwiO1xuaW1wb3J0IHsgaW1tZXIgfSBmcm9tIFwienVzdGFuZC9taWRkbGV3YXJlL2ltbWVyXCI7XG5cbi8vIHNyYy9tdXRlcy9zdG9yZS9pbml0LnRzXG52YXIgaW5pdE11dGVzID0gKHNldCwgZ2V0LCBwdWJrZXkpID0+IHtcbiAgc2V0KChzdGF0ZSkgPT4ge1xuICAgIGlmICghc3RhdGUubXV0ZXMuaGFzKHB1YmtleSkpIHtcbiAgICAgIHN0YXRlLm11dGVzLnNldChwdWJrZXksIHtcbiAgICAgICAgcHVia2V5czogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICAgICAgaGFzaHRhZ3M6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gICAgICAgIHdvcmRzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLFxuICAgICAgICBldmVudElkczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIHNyYy9tdXRlcy9zdG9yZS9sb2FkLnRzXG52YXIgbG9hZE11dGVMaXN0ID0gKHNldCwgZ2V0LCBwdWJrZXksIGV2ZW50KSA9PiB7XG4gIHNldCgoc3RhdGUpID0+IHtcbiAgICBpZiAoIXN0YXRlLm11dGVzLmhhcyhwdWJrZXkpKSB7XG4gICAgICBpbml0TXV0ZXMoc2V0LCBnZXQsIHB1YmtleSk7XG4gICAgfVxuICAgIGNvbnN0IHVzZXJNdXRlcyA9IHN0YXRlLm11dGVzLmdldChwdWJrZXkpO1xuICAgIGlmICghdXNlck11dGVzKSByZXR1cm47XG4gICAgY29uc3QgbmV3TXV0ZWRQdWJrZXlzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICBjb25zdCBuZXdNdXRlZEV2ZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgY29uc3QgbmV3TXV0ZWRIYXNodGFncyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgY29uc3QgbmV3TXV0ZWRXb3JkcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgZm9yIChjb25zdCB0YWcgb2YgZXZlbnQudGFncykge1xuICAgICAgaWYgKHRhZ1swXSA9PT0gXCJwXCIpIG5ld011dGVkUHVia2V5cy5hZGQodGFnWzFdKTtcbiAgICAgIGVsc2UgaWYgKHRhZ1swXSA9PT0gXCJlXCIpIG5ld011dGVkRXZlbnRzLmFkZCh0YWdbMV0pO1xuICAgICAgZWxzZSBpZiAodGFnWzBdID09PSBcInRcIikgbmV3TXV0ZWRIYXNodGFncy5hZGQodGFnWzFdKTtcbiAgICAgIGVsc2UgaWYgKHRhZ1swXSA9PT0gXCJ3b3JkXCIpIG5ld011dGVkV29yZHMuYWRkKHRhZ1sxXSk7XG4gICAgfVxuICAgIHVzZXJNdXRlcy5wdWJrZXlzID0gbmV3TXV0ZWRQdWJrZXlzO1xuICAgIHVzZXJNdXRlcy5ldmVudElkcyA9IG5ld011dGVkRXZlbnRzO1xuICAgIHVzZXJNdXRlcy5oYXNodGFncyA9IG5ld011dGVkSGFzaHRhZ3M7XG4gICAgdXNlck11dGVzLndvcmRzID0gbmV3TXV0ZWRXb3JkcztcbiAgICB1c2VyTXV0ZXMubXV0ZUxpc3RFdmVudCA9IGV2ZW50O1xuICB9KTtcbn07XG5cbi8vIHNyYy9tdXRlcy91dGlscy9jb21wdXRlLW11dGUtY3JpdGVyaWEudHNcbmZ1bmN0aW9uIGNvbXB1dGVNdXRlQ3JpdGVyaWEodXNlck11dGVzLCBleHRyYU11dGVzKSB7XG4gIHJldHVybiB7XG4gICAgcHVia2V5czogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgICAgLi4udXNlck11dGVzPy5wdWJrZXlzID8/IFtdLFxuICAgICAgLi4uZXh0cmFNdXRlcy5wdWJrZXlzID8/IFtdXG4gICAgXSksXG4gICAgZXZlbnRJZHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgICAgIC4uLnVzZXJNdXRlcz8uZXZlbnRJZHMgPz8gW10sXG4gICAgICAuLi5leHRyYU11dGVzLmV2ZW50SWRzID8/IFtdXG4gICAgXSksXG4gICAgaGFzaHRhZ3M6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgICAgIC4uLnVzZXJNdXRlcz8uaGFzaHRhZ3MgPz8gW10sXG4gICAgICAuLi5leHRyYU11dGVzLmhhc2h0YWdzID8/IFtdXG4gICAgXSksXG4gICAgd29yZHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgICAgIC4uLnVzZXJNdXRlcz8ud29yZHMgPz8gW10sXG4gICAgICAuLi5leHRyYU11dGVzLndvcmRzID8/IFtdXG4gICAgXSlcbiAgfTtcbn1cblxuLy8gc3JjL211dGVzL3N0b3JlL211dGUtaXRlbS50c1xudmFyIG11dGVJdGVtID0gKHNldCwgZ2V0LCBwdWJrZXksIGl0ZW0sIHR5cGUsIG9wdGlvbnMpID0+IHtcbiAgc2V0KChzdGF0ZSkgPT4ge1xuICAgIGlmICghc3RhdGUubXV0ZXMuaGFzKHB1YmtleSkpIHtcbiAgICAgIGluaXRNdXRlcyhzZXQsIGdldCwgcHVia2V5KTtcbiAgICB9XG4gICAgY29uc3QgdXNlck11dGVzID0gc3RhdGUubXV0ZXMuZ2V0KHB1YmtleSk7XG4gICAgaWYgKCF1c2VyTXV0ZXMpIHJldHVybjtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJwdWJrZXlcIjpcbiAgICAgICAgdXNlck11dGVzLnB1YmtleXMuYWRkKGl0ZW0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJldmVudFwiOlxuICAgICAgICB1c2VyTXV0ZXMuZXZlbnRJZHMuYWRkKGl0ZW0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJoYXNodGFnXCI6XG4gICAgICAgIHVzZXJNdXRlcy5oYXNodGFncy5hZGQoaXRlbSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIndvcmRcIjpcbiAgICAgICAgdXNlck11dGVzLndvcmRzLmFkZChpdGVtKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5hY3RpdmVQdWJrZXkgPT09IHB1YmtleSkge1xuICAgICAgc3RhdGUubXV0ZUNyaXRlcmlhID0gY29tcHV0ZU11dGVDcml0ZXJpYSh1c2VyTXV0ZXMsIHN0YXRlLmV4dHJhTXV0ZXMpO1xuICAgIH1cbiAgfSk7XG4gIGlmIChvcHRpb25zPy5wdWJsaXNoICE9PSBmYWxzZSkge1xuICAgIGdldCgpLnB1Ymxpc2hNdXRlTGlzdChwdWJrZXkpO1xuICB9XG59O1xuXG4vLyBzcmMvbXV0ZXMvc3RvcmUvdW5tdXRlLWl0ZW0udHNcbnZhciB1bm11dGVJdGVtID0gKHNldCwgZ2V0LCBwdWJrZXksIGl0ZW0sIHR5cGUsIG9wdGlvbnMpID0+IHtcbiAgc2V0KChzdGF0ZSkgPT4ge1xuICAgIGNvbnN0IHVzZXJNdXRlcyA9IHN0YXRlLm11dGVzLmdldChwdWJrZXkpO1xuICAgIGlmICghdXNlck11dGVzKSByZXR1cm47XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwicHVia2V5XCI6XG4gICAgICAgIHVzZXJNdXRlcy5wdWJrZXlzLmRlbGV0ZShpdGVtKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZXZlbnRcIjpcbiAgICAgICAgdXNlck11dGVzLmV2ZW50SWRzLmRlbGV0ZShpdGVtKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiaGFzaHRhZ1wiOlxuICAgICAgICB1c2VyTXV0ZXMuaGFzaHRhZ3MuZGVsZXRlKGl0ZW0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ3b3JkXCI6XG4gICAgICAgIHVzZXJNdXRlcy53b3Jkcy5kZWxldGUoaXRlbSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuYWN0aXZlUHVia2V5ID09PSBwdWJrZXkpIHtcbiAgICAgIHN0YXRlLm11dGVDcml0ZXJpYSA9IGNvbXB1dGVNdXRlQ3JpdGVyaWEodXNlck11dGVzLCBzdGF0ZS5leHRyYU11dGVzKTtcbiAgICB9XG4gIH0pO1xuICBpZiAob3B0aW9ucz8ucHVibGlzaCAhPT0gZmFsc2UpIHtcbiAgICBnZXQoKS5wdWJsaXNoTXV0ZUxpc3QocHVia2V5KTtcbiAgfVxufTtcblxuLy8gc3JjL211dGVzL3N0b3JlL3NldC1hY3RpdmUtcHVia2V5LnRzXG5mdW5jdGlvbiBzZXRBY3RpdmVQdWJrZXkoc2V0LCBwdWJrZXkpIHtcbiAgc2V0KChzdGF0ZSkgPT4ge1xuICAgIHN0YXRlLmFjdGl2ZVB1YmtleSA9IHB1YmtleTtcbiAgICBjb25zdCB1c2VyTXV0ZXMgPSBwdWJrZXkgPyBzdGF0ZS5tdXRlcy5nZXQocHVia2V5KSA6IHZvaWQgMDtcbiAgICBzdGF0ZS5tdXRlQ3JpdGVyaWEgPSBjb21wdXRlTXV0ZUNyaXRlcmlhKHVzZXJNdXRlcywgc3RhdGUuZXh0cmFNdXRlcyk7XG4gIH0pO1xufVxuXG4vLyBzcmMvbXV0ZXMvc3RvcmUvcHVibGlzaC50c1xudmFyIHB1Ymxpc2hNdXRlTGlzdCA9IGFzeW5jIChnZXQsIHB1YmtleSkgPT4ge1xuICBjb25zdCB1c2VyTXV0ZXMgPSBnZXQoKS5tdXRlcy5nZXQocHVia2V5KTtcbiAgaWYgKCF1c2VyTXV0ZXMpIHJldHVybiB2b2lkIDA7XG4gIGNvbnN0IG5kayA9IHVzZU5ES1Nlc3Npb25zLmdldFN0YXRlKCkubmRrO1xuICBpZiAoIW5kaykgcmV0dXJuIHZvaWQgMDtcbiAgY29uc3QgZXZlbnQgPSBuZXcgbmRrLk5ES0V2ZW50KG5kayk7XG4gIGV2ZW50LmtpbmQgPSAxZTQ7XG4gIGV2ZW50LmNvbnRlbnQgPSBcIlwiO1xuICBmb3IgKGNvbnN0IG11dGVkUHVia2V5IG9mIHVzZXJNdXRlcy5wdWJrZXlzKSB7XG4gICAgZXZlbnQudGFncy5wdXNoKFtcInBcIiwgbXV0ZWRQdWJrZXldKTtcbiAgfVxuICBmb3IgKGNvbnN0IG11dGVkRXZlbnRJZCBvZiB1c2VyTXV0ZXMuZXZlbnRJZHMpIHtcbiAgICBldmVudC50YWdzLnB1c2goW1wiZVwiLCBtdXRlZEV2ZW50SWRdKTtcbiAgfVxuICBmb3IgKGNvbnN0IG11dGVkSGFzaHRhZyBvZiB1c2VyTXV0ZXMuaGFzaHRhZ3MpIHtcbiAgICBldmVudC50YWdzLnB1c2goW1widFwiLCBtdXRlZEhhc2h0YWddKTtcbiAgfVxuICBmb3IgKGNvbnN0IG11dGVkV29yZCBvZiB1c2VyTXV0ZXMud29yZHMpIHtcbiAgICBldmVudC50YWdzLnB1c2goW1wid29yZFwiLCBtdXRlZFdvcmRdKTtcbiAgfVxuICB0cnkge1xuICAgIGF3YWl0IGV2ZW50LnNpZ24oKTtcbiAgICBhd2FpdCBldmVudC5wdWJsaXNoKCk7XG4gICAgZ2V0KCkubG9hZE11dGVMaXN0KHB1YmtleSwgZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHB1Ymxpc2ggbXV0ZSBsaXN0OlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufTtcblxuLy8gc3JjL211dGVzL3V0aWxzL2lkZW50aWZ5LW11dGUtaXRlbS50c1xuaW1wb3J0IHsgTkRLRXZlbnQsIE5ES1VzZXIgfSBmcm9tIFwiQG5vc3RyLWRldi1raXQvbmRrXCI7XG5mdW5jdGlvbiBpZGVudGlmeU11dGVJdGVtKGl0ZW0pIHtcbiAgbGV0IGl0ZW1UeXBlO1xuICBsZXQgdmFsdWU7XG4gIGlmIChpdGVtIGluc3RhbmNlb2YgTkRLRXZlbnQpIHtcbiAgICBpdGVtVHlwZSA9IFwiZXZlbnRcIjtcbiAgICB2YWx1ZSA9IGl0ZW0uaWQ7XG4gIH0gZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIE5ES1VzZXIpIHtcbiAgICBpdGVtVHlwZSA9IFwicHVia2V5XCI7XG4gICAgdmFsdWUgPSBpdGVtLnB1YmtleTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChpdGVtLnN0YXJ0c1dpdGgoXCIjXCIpICYmIGl0ZW0ubGVuZ3RoID4gMSkge1xuICAgICAgaXRlbVR5cGUgPSBcImhhc2h0YWdcIjtcbiAgICAgIHZhbHVlID0gaXRlbS5zdWJzdHJpbmcoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW1UeXBlID0gXCJ3b3JkXCI7XG4gICAgICB2YWx1ZSA9IGl0ZW07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUud2FybihcImlkZW50aWZ5TXV0ZUl0ZW06IEludmFsaWQgaXRlbSB0eXBlIHByb3ZpZGVkLlwiLCBpdGVtKTtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiB7IHR5cGU6IGl0ZW1UeXBlLCB2YWx1ZSB9O1xufVxuXG4vLyBzcmMvbXV0ZXMvc3RvcmUvYWRkLWV4dHJhLW11dGUtaXRlbXMudHNcbnZhciBhZGRFeHRyYU11dGVJdGVtcyA9IChzZXQsIGdldCwgaXRlbXMpID0+IHtcbiAgc2V0KChzdGF0ZSkgPT4ge1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgY29uc3QgaWRlbnRpZmllZCA9IGlkZW50aWZ5TXV0ZUl0ZW0oaXRlbSk7XG4gICAgICBpZiAoIWlkZW50aWZpZWQpIGNvbnRpbnVlO1xuICAgICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gaWRlbnRpZmllZDtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwicHVia2V5XCI6XG4gICAgICAgICAgc3RhdGUuZXh0cmFNdXRlcy5wdWJrZXlzLmFkZCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJldmVudFwiOlxuICAgICAgICAgIHN0YXRlLmV4dHJhTXV0ZXMuZXZlbnRJZHMuYWRkKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImhhc2h0YWdcIjpcbiAgICAgICAgICBzdGF0ZS5leHRyYU11dGVzLmhhc2h0YWdzLmFkZCh2YWx1ZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIndvcmRcIjpcbiAgICAgICAgICBzdGF0ZS5leHRyYU11dGVzLndvcmRzLmFkZCh2YWx1ZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdXNlck11dGVzID0gc3RhdGUuYWN0aXZlUHVia2V5ID8gc3RhdGUubXV0ZXMuZ2V0KHN0YXRlLmFjdGl2ZVB1YmtleSkgOiB2b2lkIDA7XG4gICAgc3RhdGUubXV0ZUNyaXRlcmlhID0gY29tcHV0ZU11dGVDcml0ZXJpYSh1c2VyTXV0ZXMsIHN0YXRlLmV4dHJhTXV0ZXMpO1xuICB9KTtcbn07XG5cbi8vIHNyYy9tdXRlcy9zdG9yZS9pbmRleC50c1xuZW5hYmxlTWFwU2V0KCk7XG52YXIgbXV0ZXNTdGF0ZUNyZWF0b3IgPSAoc2V0LCBnZXQpID0+ICh7XG4gIG11dGVzOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLFxuICBleHRyYU11dGVzOiB7XG4gICAgcHVia2V5czogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICBoYXNodGFnczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICB3b3JkczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICBldmVudElkczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKVxuICB9LFxuICBhY3RpdmVQdWJrZXk6IG51bGwsXG4gIG11dGVDcml0ZXJpYToge1xuICAgIHB1YmtleXM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gICAgZXZlbnRJZHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gICAgaGFzaHRhZ3M6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gICAgd29yZHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KClcbiAgfSxcbiAgaW5pdE11dGVzOiAocHVia2V5KSA9PiBpbml0TXV0ZXMoc2V0LCBnZXQsIHB1YmtleSksXG4gIGxvYWRNdXRlTGlzdDogKHB1YmtleSwgZXZlbnQpID0+IGxvYWRNdXRlTGlzdChzZXQsIGdldCwgcHVia2V5LCBldmVudCksXG4gIG11dGVJdGVtOiAocHVia2V5LCBpdGVtLCB0eXBlLCBvcHRpb25zKSA9PiBtdXRlSXRlbShzZXQsIGdldCwgcHVia2V5LCBpdGVtLCB0eXBlLCBvcHRpb25zKSxcbiAgdW5tdXRlSXRlbTogKHB1YmtleSwgaXRlbSwgdHlwZSwgb3B0aW9ucykgPT4gdW5tdXRlSXRlbShzZXQsIGdldCwgcHVia2V5LCBpdGVtLCB0eXBlLCBvcHRpb25zKSxcbiAgc2V0QWN0aXZlUHVia2V5OiAocHVia2V5KSA9PiBzZXRBY3RpdmVQdWJrZXkoc2V0LCBwdWJrZXkpLFxuICBhZGRFeHRyYU11dGVJdGVtczogKGl0ZW1zKSA9PiBhZGRFeHRyYU11dGVJdGVtcyhzZXQsIGdldCwgaXRlbXMpLFxuICBwdWJsaXNoTXV0ZUxpc3Q6IChwdWJrZXkpID0+IHB1Ymxpc2hNdXRlTGlzdChnZXQsIHB1YmtleSlcbn0pO1xudmFyIHVzZU5ES011dGVzID0gY3JlYXRlMyhpbW1lcihtdXRlc1N0YXRlQ3JlYXRvcikpO1xuXG4vLyBzcmMvc2Vzc2lvbi9zdG9yZS9hZGQtc2Vzc2lvbi50c1xudmFyIGNyZWF0ZURlZmF1bHRTZXNzaW9uID0gKHB1YmtleSkgPT4gKHtcbiAgcHVia2V5LFxuICBldmVudHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksXG4gIGxhc3RBY3RpdmU6IERhdGUubm93KCkgLyAxZTNcbn0pO1xudmFyIGFkZFNlc3Npb24gPSBhc3luYyAoc2V0LCBnZXQsIHVzZXJPclNpZ25lciwgc2V0QWN0aXZlID0gdHJ1ZSkgPT4ge1xuICBsZXQgdXNlcjtcbiAgbGV0IHNpZ25lciA9IHZvaWQgMDtcbiAgbGV0IHVzZXJQdWJrZXk7XG4gIGlmICh1c2VyT3JTaWduZXIgaW5zdGFuY2VvZiBOREtVc2VyMikge1xuICAgIHVzZXIgPSB1c2VyT3JTaWduZXI7XG4gICAgdXNlclB1YmtleSA9IHVzZXIucHVia2V5O1xuICB9IGVsc2Uge1xuICAgIHNpZ25lciA9IHVzZXJPclNpZ25lcjtcbiAgICB0cnkge1xuICAgICAgdXNlciA9IGF3YWl0IHNpZ25lci51c2VyKCk7XG4gICAgICB1c2VyUHVia2V5ID0gdXNlci5wdWJrZXk7XG4gICAgICBzZXQoKGRyYWZ0KSA9PiB7XG4gICAgICAgIGRyYWZ0LnNpZ25lcnMuc2V0KHVzZXJQdWJrZXksIHNpZ25lcik7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBnZXQgdXNlciBmcm9tIHNpZ25lcjpcIiwgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHJldHJpZXZlIHVzZXIgZnJvbSB0aGUgcHJvdmlkZWQgc2lnbmVyLlwiKTtcbiAgICB9XG4gIH1cbiAgc2V0KChkcmFmdCkgPT4ge1xuICAgIGxldCBzZXNzaW9uID0gZHJhZnQuc2Vzc2lvbnMuZ2V0KHVzZXJQdWJrZXkpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgc2Vzc2lvbiA9IGNyZWF0ZURlZmF1bHRTZXNzaW9uKHVzZXJQdWJrZXkpO1xuICAgICAgZHJhZnQuc2Vzc2lvbnMuc2V0KHVzZXJQdWJrZXksIHNlc3Npb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXNzaW9uLmxhc3RBY3RpdmUgPSBEYXRlLm5vdygpIC8gMWUzO1xuICAgICAgY29uc29sZS5kZWJ1ZyhgU2Vzc2lvbiBhbHJlYWR5IGV4aXN0cyBmb3IgJHt1c2VyUHVia2V5fSwgdXBkYXRpbmcgbGFzdEFjdGl2ZS5gKTtcbiAgICB9XG4gICAgaWYgKHNldEFjdGl2ZSkge1xuICAgICAgZHJhZnQuYWN0aXZlUHVia2V5ID0gdXNlclB1YmtleTtcbiAgICAgIHVzZU5ES1N0b3JlLmdldFN0YXRlKCkuc2V0U2lnbmVyKHNpZ25lcik7XG4gICAgfVxuICB9KTtcbiAgdXNlTkRLTXV0ZXMuZ2V0U3RhdGUoKS5pbml0TXV0ZXModXNlclB1YmtleSk7XG4gIGlmIChzZXRBY3RpdmUpIHtcbiAgICB1c2VOREtNdXRlcy5nZXRTdGF0ZSgpLnNldEFjdGl2ZVB1YmtleSh1c2VyUHVia2V5KTtcbiAgfVxuICByZXR1cm4gdXNlclB1YmtleTtcbn07XG5cbi8vIHNyYy9zZXNzaW9uL3N0b3JlL2luaXQudHNcbnZhciBpbml0ID0gKHNldCwgbmRrKSA9PiB7XG4gIHNldCgoZHJhZnQpID0+IHtcbiAgICBkcmFmdC5uZGsgPSBuZGs7XG4gIH0pO1xufTtcblxuLy8gc3JjL3Nlc3Npb24vc3RvcmUvcmVtb3ZlLXNlc3Npb24udHNcbnZhciByZW1vdmVTZXNzaW9uID0gKHNldCwgZ2V0LCBwdWJrZXkpID0+IHtcbiAgY29uc3Qgc3RhdGUgPSBnZXQoKTtcbiAgY29uc3Qgc2Vzc2lvblRvUmVtb3ZlID0gc3RhdGUuc2Vzc2lvbnMuZ2V0KHB1YmtleSk7XG4gIGNvbnN0IHNpZ25lclRvUmVtb3ZlID0gc3RhdGUuc2lnbmVycy5nZXQocHVia2V5KTtcbiAgaWYgKCFzZXNzaW9uVG9SZW1vdmUpIHtcbiAgICBjb25zb2xlLndhcm4oYE5vIHNlc3Npb24gZm91bmQgdG8gcmVtb3ZlIGZvciBwdWJrZXk6ICR7cHVia2V5fWApO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc2Vzc2lvblRvUmVtb3ZlLnN1YnNjcmlwdGlvbikge1xuICAgIGNvbnNvbGUuZGVidWcoYFN0b3BwaW5nIHN1YnNjcmlwdGlvbiBmb3IgcmVtb3ZlZCBzZXNzaW9uICR7cHVia2V5fWApO1xuICAgIHRyeSB7XG4gICAgICBzZXNzaW9uVG9SZW1vdmUuc3Vic2NyaXB0aW9uLnN0b3AoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3Igc3RvcHBpbmcgc3Vic2NyaXB0aW9uIGZvciByZW1vdmVkIHNlc3Npb24gJHtwdWJrZXl9OmAsIGVycm9yKTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgd2FzQWN0aXZlID0gc3RhdGUuYWN0aXZlUHVia2V5ID09PSBwdWJrZXk7XG4gIHNldCgoZHJhZnQpID0+IHtcbiAgICBkcmFmdC5zZXNzaW9ucy5kZWxldGUocHVia2V5KTtcbiAgICBkcmFmdC5zaWduZXJzLmRlbGV0ZShwdWJrZXkpO1xuICAgIGlmICh3YXNBY3RpdmUpIHtcbiAgICAgIGxldCBuZXh0QWN0aXZlUHVia2V5ID0gbnVsbDtcbiAgICAgIGxldCBsYXRlc3RMYXN0QWN0aXZlID0gMDtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgc2Vzc2lvbl0gb2YgZHJhZnQuc2Vzc2lvbnMuZW50cmllcygpKSB7XG4gICAgICAgIGlmIChzZXNzaW9uLmxhc3RBY3RpdmUgPiBsYXRlc3RMYXN0QWN0aXZlKSB7XG4gICAgICAgICAgbGF0ZXN0TGFzdEFjdGl2ZSA9IHNlc3Npb24ubGFzdEFjdGl2ZTtcbiAgICAgICAgICBuZXh0QWN0aXZlUHVia2V5ID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkcmFmdC5hY3RpdmVQdWJrZXkgPSBuZXh0QWN0aXZlUHVia2V5O1xuICAgICAgY29uc3QgbmV4dEFjdGl2ZVNpZ25lciA9IG5leHRBY3RpdmVQdWJrZXkgPyBkcmFmdC5zaWduZXJzLmdldChuZXh0QWN0aXZlUHVia2V5KSA6IHZvaWQgMDtcbiAgICAgIGNvbnN0IG5kayA9IGRyYWZ0Lm5kaztcbiAgICAgIGlmIChuZGspIHtcbiAgICAgICAgbmRrLnNpZ25lciA9IG5leHRBY3RpdmVTaWduZXI7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIHNyYy9zZXNzaW9uL3N0b3JlL3N0YXJ0LXNlc3Npb24udHNcbmltcG9ydCB7IE5ES0tpbmQsIHByb2ZpbGVGcm9tRXZlbnQgfSBmcm9tIFwiQG5vc3RyLWRldi1raXQvbmRrXCI7XG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlRXZlbnQoZXZlbnQsIHNlc3Npb25EcmFmdCkge1xuICBjb25zdCBwcm9maWxlID0gcHJvZmlsZUZyb21FdmVudChldmVudCk7XG4gIGlmIChwcm9maWxlKSB7XG4gICAgcHJvZmlsZS5jcmVhdGVkX2F0ID0gZXZlbnQuY3JlYXRlZF9hdDtcbiAgICBzZXNzaW9uRHJhZnQucHJvZmlsZSA9IHByb2ZpbGU7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZUNvbnRhY3RzRXZlbnQoZXZlbnQsIHNlc3Npb25EcmFmdCkge1xuICBjb25zdCBmb2xsb3dTZXQgPSBuZXcgU2V0KGV2ZW50LnRhZ3MuZmlsdGVyKCh0KSA9PiB0WzBdID09PSBcInBcIikubWFwKCh0KSA9PiB0WzFdKSk7XG4gIHNlc3Npb25EcmFmdC5mb2xsb3dTZXQgPSBmb2xsb3dTZXQ7XG59XG5mdW5jdGlvbiBoYW5kbGVPdGhlckV2ZW50KGV2ZW50LCBzZXNzaW9uRHJhZnQsIG9wdHMpIHtcbiAgY29uc3QgZXhpc3RpbmdFdmVudCA9IHNlc3Npb25EcmFmdC5ldmVudHMuZ2V0KGV2ZW50LmtpbmQpO1xuICBpZiAoIWV4aXN0aW5nRXZlbnQgfHwgZXZlbnQuY3JlYXRlZF9hdCA+IGV4aXN0aW5nRXZlbnQuY3JlYXRlZF9hdCkge1xuICAgIHNlc3Npb25EcmFmdC5ldmVudHMuc2V0KGV2ZW50LmtpbmQsIGV2ZW50KTtcbiAgfVxuICBjb25zdCBrbGFzc1dyYXBwZXIgPSBvcHRzPy5ldmVudHM/LmdldChldmVudC5raW5kKTtcbiAgaWYgKGtsYXNzV3JhcHBlcikge1xuICAgIGNvbnN0IHdyYXBwZWRFdmVudCA9IGtsYXNzV3JhcHBlci5mcm9tKGV2ZW50KTtcbiAgICBpZiAod3JhcHBlZEV2ZW50KSBzZXNzaW9uRHJhZnQuZXZlbnRzLnNldChldmVudC5raW5kLCB3cmFwcGVkRXZlbnQpO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVLaW5kRm9sbG93RXZlbnQoZXZlbnQsIHNlc3Npb25EcmFmdCwgZm9sbG93ZWQgPSB0cnVlLCBsYXN0X3VwZGF0ZWRfYXQgPSBldmVudC5jcmVhdGVkX2F0KSB7XG4gIGNvbnN0IGtpbmRGb2xsb3dTZXQgPSBzZXNzaW9uRHJhZnQua2luZEZvbGxvd1NldCA/PyAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCBraW5kcyA9IGV2ZW50LmdldE1hdGNoaW5nVGFncyhcImtcIikubWFwKCh0KSA9PiBOdW1iZXIodFsxXSkpO1xuICBjb25zdCBmb2xsb3dlZFB1YmtleXMgPSBldmVudC5nZXRNYXRjaGluZ1RhZ3MoXCJwXCIpLm1hcCgodCkgPT4gdFsxXSk7XG4gIGZvciAoY29uc3Qga2luZCBvZiBraW5kcykge1xuICAgIGZvciAoY29uc3QgcHVia2V5IG9mIGZvbGxvd2VkUHVia2V5cykge1xuICAgICAgY29uc3Qga2luZEZvbGxvd3MgPSBraW5kRm9sbG93U2V0LmdldChraW5kKSB8fCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgY29uc3QgZm9sbG93ZWRJbmZvID0geyBmb2xsb3dlZCwgbGFzdF91cGRhdGVkX2F0IH07XG4gICAgICBjb25zdCBleGlzdGluZ0ZvbGxvd2VkSW5mbyA9IGtpbmRGb2xsb3dzLmdldChwdWJrZXkpO1xuICAgICAgaWYgKCFleGlzdGluZ0ZvbGxvd2VkSW5mbyB8fCBleGlzdGluZ0ZvbGxvd2VkSW5mby5sYXN0X3VwZGF0ZWRfYXQgPCBldmVudC5jcmVhdGVkX2F0KSB7XG4gICAgICAgIGtpbmRGb2xsb3dzLnNldChwdWJrZXksIGZvbGxvd2VkSW5mbyk7XG4gICAgICB9XG4gICAgICBraW5kRm9sbG93U2V0LnNldChraW5kLCBraW5kRm9sbG93cyk7XG4gICAgfVxuICB9XG4gIHNlc3Npb25EcmFmdC5raW5kRm9sbG93U2V0ID0ga2luZEZvbGxvd1NldDtcbn1cbmZ1bmN0aW9uIGhhbmRrZUV2ZW50RGVsZXRpb24oZXZlbnQsIHNlc3Npb25EcmFmdCkge1xuICBjb25zdCBraW5kRm9sbG93U2V0ID0gc2Vzc2lvbkRyYWZ0LmtpbmRGb2xsb3dTZXQ7XG4gIGlmICgha2luZEZvbGxvd1NldCkgcmV0dXJuO1xuICBmb3IgKGNvbnN0IGVUYWcgb2YgZXZlbnQuZ2V0TWF0Y2hpbmdUYWdzKFwiZVwiKSkge1xuICAgIGlmICghZVRhZ1sxXSkgY29udGludWU7XG4gICAgaWYgKCFldmVudC5uZGspIGNvbnRpbnVlO1xuICAgIGNvbnN0IGZvbGxvd0V2ZW50RGVsZXRlZCA9IGV2ZW50Lm5kay5mZXRjaEV2ZW50U3luYyhlVGFnWzFdKTtcbiAgICBpZiAoIWZvbGxvd0V2ZW50RGVsZXRlZD8uWzBdKSBjb250aW51ZTtcbiAgICBoYW5kbGVLaW5kRm9sbG93RXZlbnQoZm9sbG93RXZlbnREZWxldGVkWzBdLCBzZXNzaW9uRHJhZnQsIGZhbHNlLCBldmVudC5jcmVhdGVkX2F0KTtcbiAgfVxufVxuZnVuY3Rpb24gcHJvY2Vzc0V2ZW50KGV2ZW50LCBzZXNzaW9uRHJhZnQsIG9wdHMpIHtcbiAgY29uc3Qga25vd25FdmVudEZvcktpbmQgPSBzZXNzaW9uRHJhZnQuZXZlbnRzPy5nZXQoZXZlbnQua2luZCk7XG4gIGlmICghKCFrbm93bkV2ZW50Rm9yS2luZCB8fCBrbm93bkV2ZW50Rm9yS2luZC5jcmVhdGVkX2F0IDwgZXZlbnQuY3JlYXRlZF9hdCkgJiYgZXZlbnQuaXNSZXBsYWNlYWJsZSgpKSB7XG4gICAgY29uc29sZS5sb2coXCJXZSBhbHJlYWR5IGhhdmUgYW4gZXZlbnQgb2Yga2luZCBcIiArIGV2ZW50LmtpbmQgKyBcIiB0aGF0IGlzIG5ld2VyXCIsIHtcbiAgICAgIGtub3duRXZlbnQ6IGtub3duRXZlbnRGb3JLaW5kLmNyZWF0ZWRfYXQsXG4gICAgICBpbmNvbWluZ0V2ZW50OiBldmVudC5jcmVhdGVkX2F0XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRyeSB7XG4gICAgc3dpdGNoIChldmVudC5raW5kKSB7XG4gICAgICBjYXNlIE5ES0tpbmQuTWV0YWRhdGE6XG4gICAgICAgIGhhbmRsZVByb2ZpbGVFdmVudChldmVudCwgc2Vzc2lvbkRyYWZ0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE5ES0tpbmQuQ29udGFjdHM6XG4gICAgICAgIGhhbmRsZUNvbnRhY3RzRXZlbnQoZXZlbnQsIHNlc3Npb25EcmFmdCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBOREtLaW5kLk11dGVMaXN0OlxuICAgICAgICB1c2VOREtNdXRlcy5nZXRTdGF0ZSgpLmxvYWRNdXRlTGlzdChzZXNzaW9uRHJhZnQucHVia2V5LCBldmVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5Njc6XG4gICAgICAgIGhhbmRsZUtpbmRGb2xsb3dFdmVudChldmVudCwgc2Vzc2lvbkRyYWZ0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE5ES0tpbmQuRXZlbnREZWxldGlvbjpcbiAgICAgICAgaGFuZGtlRXZlbnREZWxldGlvbihldmVudCwgc2Vzc2lvbkRyYWZ0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBoYW5kbGVPdGhlckV2ZW50KGV2ZW50LCBzZXNzaW9uRHJhZnQsIG9wdHMpO1xuICAgIH1cbiAgICBzZXNzaW9uRHJhZnQuZXZlbnRzLnNldChldmVudC5raW5kLCBldmVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgcHJvY2Vzc2luZyBldmVudCBraW5kICR7ZXZlbnQua2luZH0gZm9yICR7c2Vzc2lvbkRyYWZ0LnB1YmtleX06YCwgZXJyb3IsIGV2ZW50KTtcbiAgfVxufVxuZnVuY3Rpb24gYnVpbGRTZXNzaW9uRmlsdGVyKHB1YmtleSwgb3B0cykge1xuICBjb25zdCBtYWluS2luZHNUb0ZldGNoID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgaWYgKG9wdHMucHJvZmlsZSAhPT0gZmFsc2UpIG1haW5LaW5kc1RvRmV0Y2guYWRkKE5ES0tpbmQuTWV0YWRhdGEpO1xuICBpZiAob3B0cy5mb2xsb3dzICE9PSBmYWxzZSkgbWFpbktpbmRzVG9GZXRjaC5hZGQoTkRLS2luZC5Db250YWN0cyk7XG4gIG1haW5LaW5kc1RvRmV0Y2guYWRkKE5ES0tpbmQuTXV0ZUxpc3QpO1xuICBmb3IgKGNvbnN0IGtpbmQgb2Ygb3B0cy5ldmVudHM/LmtleXMoKSB8fCBbXSkge1xuICAgIG1haW5LaW5kc1RvRmV0Y2guYWRkKGtpbmQpO1xuICB9XG4gIGNvbnN0IGZpbHRlciA9IFt7IGtpbmRzOiBBcnJheS5mcm9tKG1haW5LaW5kc1RvRmV0Y2gpLCBhdXRob3JzOiBbcHVia2V5XSB9XTtcbiAgaWYgKEFycmF5LmlzQXJyYXkob3B0cy5mb2xsb3dzKSkge1xuICAgIGZpbHRlci5wdXNoKHsga2luZHM6IFs5NjddLCBcIiNrXCI6IG9wdHMuZm9sbG93cy5tYXAoKGspID0+IGsudG9TdHJpbmcoKSksIGF1dGhvcnM6IFtwdWJrZXldIH0pO1xuICB9XG4gIHJldHVybiBmaWx0ZXI7XG59XG52YXIgc3RhcnRTZXNzaW9uID0gKHNldCwgZ2V0LCBwdWJrZXksIG9wdHMpID0+IHtcbiAgY29uc29sZS5sb2coXCJjYWxsaW5nIHN0YXJ0U2Vzc2lvblwiLCBwdWJrZXkpO1xuICBjb25zdCBuZGsgPSBnZXQoKS5uZGs7XG4gIGlmICghbmRrKSB7XG4gICAgY29uc29sZS5lcnJvcihcIk5ESyBpbnN0YW5jZSBub3QgaW5pdGlhbGl6ZWQgaW4gc2Vzc2lvbiBzdG9yZS4gQ2Fubm90IHN0YXJ0IHNlc3Npb24uXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBleGlzdGluZ1Nlc3Npb24gPSBnZXQoKS5zZXNzaW9ucy5nZXQocHVia2V5KTtcbiAgaWYgKCFleGlzdGluZ1Nlc3Npb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGV4aXN0aW5nU2Vzc2lvbi5zdWJzY3JpcHRpb24pIHtcbiAgICBleGlzdGluZ1Nlc3Npb24uc3Vic2NyaXB0aW9uLnN0b3AoKTtcbiAgICBzZXQoKGRyYWZ0KSA9PiB7XG4gICAgICBjb25zdCBzZXNzaW9uID0gZHJhZnQuc2Vzc2lvbnMuZ2V0KHB1YmtleSk7XG4gICAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgICBzZXNzaW9uLnN1YnNjcmlwdGlvbiA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjb25zdCBmaWx0ZXJzID0gYnVpbGRTZXNzaW9uRmlsdGVyKHB1YmtleSwgb3B0cyk7XG4gIGlmIChmaWx0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnNvbGUud2FybihgTm8gZmlsdGVycyBnZW5lcmF0ZWQgZm9yIHNlc3Npb24gc3RhcnQgb3B0aW9ucyBmb3IgcHVia2V5ICR7cHVia2V5fS4gTm8gc3Vic2NyaXB0aW9uIGNyZWF0ZWQuYCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9uRXZlbnQgPSAoZXZlbnQsIHJlbGF5KSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJoYW5kbGUgc2Vzc2lvbiBldmVudFwiLCBldmVudC5wdWJrZXkuc2xpY2UoMCwgNiksIGV2ZW50LmtpbmQsIHJlbGF5Py51cmwpO1xuICAgIHNldCgoZHJhZnQpID0+IHtcbiAgICAgIGNvbnN0IHNlc3Npb24gPSBkcmFmdC5zZXNzaW9ucy5nZXQocHVia2V5KTtcbiAgICAgIGlmICghc2Vzc2lvbikgcmV0dXJuO1xuICAgICAgcHJvY2Vzc0V2ZW50KGV2ZW50LCBzZXNzaW9uLCBvcHRzKTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3Qgb25FdmVudHMgPSAoZXZlbnRzKSA9PiB7XG4gICAgc2V0KChkcmFmdCkgPT4ge1xuICAgICAgY29uc3Qgc2Vzc2lvbiA9IGRyYWZ0LnNlc3Npb25zLmdldChwdWJrZXkpO1xuICAgICAgaWYgKCFzZXNzaW9uKSByZXR1cm47XG4gICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICBwcm9jZXNzRXZlbnQoZXZlbnQsIHNlc3Npb24sIG9wdHMpO1xuICAgICAgfVxuICAgICAgY29uc29sZS5kZWJ1ZyhgUHJvY2Vzc2VkICR7ZXZlbnRzLmxlbmd0aH0gY2FjaGVkIGV2ZW50cyBmb3IgJHtwdWJrZXl9YCk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHN1YiA9IG5kay5zdWJzY3JpYmUoZmlsdGVycywgeyBjbG9zZU9uRW9zZTogZmFsc2UsIGFkZFNpbmNlRnJvbUNhY2hlOiB0cnVlIH0sIHsgb25FdmVudCwgb25FdmVudHMgfSk7XG4gIHNldCgoZHJhZnQpID0+IHtcbiAgICBjb25zdCBzZXNzaW9uID0gZHJhZnQuc2Vzc2lvbnMuZ2V0KHB1YmtleSk7XG4gICAgaWYgKHNlc3Npb24pIHtcbiAgICAgIHNlc3Npb24uc3Vic2NyaXB0aW9uID0gc3ViO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vLyBzcmMvc2Vzc2lvbi9zdG9yZS9zdG9wLXNlc3Npb24udHNcbnZhciBzdG9wU2Vzc2lvbiA9IChzZXQsIGdldCwgcHVia2V5KSA9PiB7XG4gIGNvbnN0IHNlc3Npb24gPSBnZXQoKS5zZXNzaW9ucy5nZXQocHVia2V5KTtcbiAgaWYgKHNlc3Npb24/LnN1YnNjcmlwdGlvbikge1xuICAgIGNvbnNvbGUuZGVidWcoYFN0b3BwaW5nIHNlc3Npb24gc3Vic2NyaXB0aW9uIGZvciAke3B1YmtleX1gKTtcbiAgICB0cnkge1xuICAgICAgc2Vzc2lvbi5zdWJzY3JpcHRpb24uc3RvcCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBzdG9wcGluZyBzdWJzY3JpcHRpb24gZm9yICR7cHVia2V5fTpgLCBlcnJvcik7XG4gICAgfVxuICAgIHNldCgoZHJhZnQpID0+IHtcbiAgICAgIGNvbnN0IGRyYWZ0U2Vzc2lvbiA9IGRyYWZ0LnNlc3Npb25zLmdldChwdWJrZXkpO1xuICAgICAgaWYgKGRyYWZ0U2Vzc2lvbikge1xuICAgICAgICBkcmFmdFNlc3Npb24uc3Vic2NyaXB0aW9uID0gdm9pZCAwO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZGVidWcoYE5vIGFjdGl2ZSBzdWJzY3JpcHRpb24gZm91bmQgZm9yIHNlc3Npb24gJHtwdWJrZXl9IHRvIHN0b3AuYCk7XG4gIH1cbn07XG5cbi8vIHNyYy9zZXNzaW9uL3N0b3JlL3N3aXRjaC10by11c2VyLnRzXG52YXIgc3dpdGNoVG9Vc2VyID0gKHNldCwgZ2V0LCBwdWJrZXkpID0+IHtcbiAgY29uc3Qgc2lnbmVycyA9IGdldCgpLnNpZ25lcnM7XG4gIGNvbnN0IG5kayA9IGdldCgpLm5kaztcbiAgaWYgKCFuZGspIHtcbiAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IHN3aXRjaCB1c2VyOiBOREsgaW5zdGFuY2Ugbm90IGluaXRpYWxpemVkIGluIHNlc3Npb24gc3RvcmUuXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2lnbmVyID0gdm9pZCAwO1xuICBpZiAocHVia2V5ICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGdldCgpLnNlc3Npb25zLmdldChwdWJrZXkpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgY29uc29sZS5lcnJvcihgQ2Fubm90IHN3aXRjaCB0byB1c2VyICR7cHVia2V5fTogU2Vzc2lvbiBkb2VzIG5vdCBleGlzdC5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2lnbmVyID0gc2lnbmVycy5nZXQocHVia2V5KTtcbiAgfVxuICB1c2VOREtTdG9yZS5nZXRTdGF0ZSgpLnNldFNpZ25lcihzaWduZXIpO1xuICBzZXQoKGRyYWZ0KSA9PiB7XG4gICAgZHJhZnQuYWN0aXZlUHVia2V5ID0gcHVia2V5O1xuICAgIGlmIChwdWJrZXkpIHtcbiAgICAgIGNvbnN0IGRyYWZ0U2Vzc2lvbiA9IGRyYWZ0LnNlc3Npb25zLmdldChwdWJrZXkpO1xuICAgICAgaWYgKGRyYWZ0U2Vzc2lvbikge1xuICAgICAgICBkcmFmdFNlc3Npb24ubGFzdEFjdGl2ZSA9IERhdGUubm93KCkgLyAxZTM7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgbXV0ZVN0b3JlID0gdXNlTkRLTXV0ZXMuZ2V0U3RhdGUoKTtcbiAgbXV0ZVN0b3JlLnNldEFjdGl2ZVB1YmtleShwdWJrZXkpO1xuICBpZiAocHVia2V5KSB7XG4gICAgbXV0ZVN0b3JlLmluaXRNdXRlcyhwdWJrZXkpO1xuICB9XG59O1xuXG4vLyBzcmMvc2Vzc2lvbi9zdG9yZS91cGRhdGUtc2Vzc2lvbi50c1xudmFyIHVwZGF0ZVNlc3Npb24gPSAoc2V0LCBnZXQsIHB1YmtleSwgZGF0YSkgPT4ge1xuICBzZXQoKGRyYWZ0KSA9PiB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGRyYWZ0LnNlc3Npb25zLmdldChwdWJrZXkpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgY29uc29sZS53YXJuKGBBdHRlbXB0ZWQgdG8gdXBkYXRlIG5vbi1leGlzdGVudCBzZXNzaW9uOiAke3B1YmtleX1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzZXNzaW9uLCBkYXRhKTtcbiAgICBzZXNzaW9uLmxhc3RBY3RpdmUgPSBEYXRlLm5vdygpO1xuICB9KTtcbn07XG5cbi8vIHNyYy9zZXNzaW9uL3N0b3JlL2luZGV4LnRzXG5lbmFibGVNYXBTZXQyKCk7XG52YXIgc2Vzc2lvblN0YXRlQ3JlYXRvciA9IChzZXQsIGdldCkgPT4gKHtcbiAgbmRrOiB2b2lkIDAsXG4gIC8vIEFkZCBOREsgaW5zdGFuY2UgaG9sZGVyXG4gIHNlc3Npb25zOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLFxuICBzaWduZXJzOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLFxuICAvLyBLZWVwIHNpZ25lcnMgbWFwIGZvciBhZGRTZXNzaW9uIGxvZ2ljXG4gIGFjdGl2ZVB1YmtleTogbnVsbCxcbiAgLy8gSW5pdGlhbGl6YXRpb25cbiAgaW5pdDogKG5ka0luc3RhbmNlKSA9PiBpbml0KHNldCwgbmRrSW5zdGFuY2UpLFxuICAvKipcbiAgICogQWRkcyB0aGUgc2Vzc2lvbi4gVGhpcyBpcyBob3cgd2UgbG9naW4gYSB1c2VyLlxuICAgKiBAcGFyYW0gdXNlck9yU2lnbmVyXG4gICAqIEBwYXJhbSBzZXRBY3RpdmUgLSBJZiB0cnVlLCBzZXRzIHRoZSBzZXNzaW9uIGFzIGFjdGl2ZS5cbiAgICogQHJldHVybnNcbiAgICovXG4gIGFkZFNlc3Npb246IGFzeW5jICh1c2VyT3JTaWduZXIsIHNldEFjdGl2ZSkgPT4ge1xuICAgIGNvbnN0IHB1YmtleSA9IGF3YWl0IGFkZFNlc3Npb24oc2V0LCBnZXQsIHVzZXJPclNpZ25lciwgc2V0QWN0aXZlKTtcbiAgICBpZiAocHVia2V5ICYmIHNldEFjdGl2ZSkgZ2V0KCkuc3dpdGNoVG9Vc2VyKHB1YmtleSk7XG4gICAgcmV0dXJuIHB1YmtleTtcbiAgfSxcbiAgc3RhcnRTZXNzaW9uOiAocHVia2V5LCBvcHRzKSA9PiBzdGFydFNlc3Npb24oc2V0LCBnZXQsIHB1YmtleSwgb3B0cyksXG4gIHN0b3BTZXNzaW9uOiAocHVia2V5KSA9PiBzdG9wU2Vzc2lvbihzZXQsIGdldCwgcHVia2V5KSxcbiAgc3dpdGNoVG9Vc2VyOiAocHVia2V5KSA9PiBzd2l0Y2hUb1VzZXIoc2V0LCBnZXQsIHB1YmtleSksXG4gIHJlbW92ZVNlc3Npb246IChwdWJrZXkpID0+IHJlbW92ZVNlc3Npb24oc2V0LCBnZXQsIHB1YmtleSksXG4gIC8vIEludGVybmFsIHVwZGF0ZSBmdW5jdGlvblxuICB1cGRhdGVTZXNzaW9uOiAocHVia2V5LCBkYXRhKSA9PiB1cGRhdGVTZXNzaW9uKHNldCwgZ2V0LCBwdWJrZXksIGRhdGEpXG59KTtcbnZhciB1c2VOREtTZXNzaW9ucyA9IGNyZWF0ZTQoaW1tZXIyKHNlc3Npb25TdGF0ZUNyZWF0b3IpKTtcblxuLy8gc3JjL25kay9ob29rcy9pbmRleC50c1xudmFyIHVzZU5ESyA9ICgpID0+IHtcbiAgY29uc3QgbmRrID0gdXNlTkRLU3RvcmUoKHN0YXRlKSA9PiBzdGF0ZS5uZGspO1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiAoeyBuZGsgfSksIFtuZGtdKTtcbn07XG52YXIgdXNlTkRLQ3VycmVudFB1YmtleSA9ICgpID0+IHVzZU5ES1Nlc3Npb25zKChzdGF0ZSkgPT4gc3RhdGUuYWN0aXZlUHVia2V5KTtcbnZhciB1c2VOREtDdXJyZW50VXNlciA9ICgpID0+IHtcbiAgY29uc3QgbmRrID0gdXNlTkRLU3RvcmUoKHN0YXRlKSA9PiBzdGF0ZS5uZGspO1xuICBjb25zdCBhY3RpdmVQdWJrZXkgPSB1c2VOREtDdXJyZW50UHVia2V5KCk7XG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAobmRrICYmIGFjdGl2ZVB1YmtleSkge1xuICAgICAgcmV0dXJuIG5kay5nZXRVc2VyKHsgcHVia2V5OiBhY3RpdmVQdWJrZXkgfSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBbbmRrLCBhY3RpdmVQdWJrZXldKTtcbn07XG5mdW5jdGlvbiB1c2VOREtVbnB1Ymxpc2hlZEV2ZW50cygpIHtcbiAgY29uc3QgeyBuZGsgfSA9IHVzZU5ESygpO1xuICBjb25zdCBbdW5wdWJsaXNoZWRFdmVudHMsIHNldFVucHVibGlzaGVkRXZlbnRzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3Qgc3RhdGUgPSB1c2VSZWYoW10pO1xuICBjb25zdCB1cGRhdGVTdGF0ZUZyb21DYWNoZSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIW5kaz8uY2FjaGVBZGFwdGVyPy5nZXRVbnB1Ymxpc2hlZEV2ZW50cykgcmV0dXJuO1xuICAgIGNvbnN0IGVudHJpZXMgPSBhd2FpdCBuZGsuY2FjaGVBZGFwdGVyLmdldFVucHVibGlzaGVkRXZlbnRzKCk7XG4gICAgY29uc3QgcHJldmlvdXNFbnRyaWVzID0gbmV3IFNldChzdGF0ZS5jdXJyZW50Py5tYXAoKGUpID0+IGUuZXZlbnQuaWQpKTtcbiAgICBjb25zdCBuZXdFbnRyaWVzID0gW107XG4gICAgbGV0IGNoYW5nZWQgPSBlbnRyaWVzLmxlbmd0aCAhPT0gc3RhdGUuY3VycmVudD8ubGVuZ3RoO1xuICAgIGlmICghY2hhbmdlZCkge1xuICAgICAgY29uc3QgY3VycmVudElkcyA9IG5ldyBTZXQoc3RhdGUuY3VycmVudC5tYXAoKGUpID0+IGUuZXZlbnQuaWQpKTtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICBpZiAoIWN1cnJlbnRJZHMuaGFzKGVudHJ5LmV2ZW50LmlkKSkge1xuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICBjb25zdCBmcmVzaEVudHJpZXMgPSBlbnRyaWVzLm1hcCgoZW50cnkpID0+ICh7IC4uLmVudHJ5IH0pKTtcbiAgICAgIHN0YXRlLmN1cnJlbnQgPSBmcmVzaEVudHJpZXM7XG4gICAgICBzZXRVbnB1Ymxpc2hlZEV2ZW50cyhmcmVzaEVudHJpZXMpO1xuICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBmcmVzaEVudHJpZXMpIHtcbiAgICAgICAgZW50cnkuZXZlbnQub24oXCJwdWJsaXNoZWRcIiwgKCkgPT4ge1xuICAgICAgICAgIHN0YXRlLmN1cnJlbnQgPSBzdGF0ZS5jdXJyZW50Py5maWx0ZXIoKGUpID0+IGUuZXZlbnQuaWQgIT09IGVudHJ5LmV2ZW50LmlkKTtcbiAgICAgICAgICBzZXRVbnB1Ymxpc2hlZEV2ZW50cyhzdGF0ZS5jdXJyZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbbmRrXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFuZGs/LmNhY2hlQWRhcHRlcj8uZ2V0VW5wdWJsaXNoZWRFdmVudHMpIHJldHVybjtcbiAgICB1cGRhdGVTdGF0ZUZyb21DYWNoZSgpO1xuICAgIGNvbnN0IGhhbmRsZVB1Ymxpc2hGYWlsZWQgPSAoX2V2ZW50LCBfZXJyb3IsIF9yZWxheXMpID0+IHtcbiAgICAgIHVwZGF0ZVN0YXRlRnJvbUNhY2hlKCk7XG4gICAgfTtcbiAgICBuZGs/Lm9uKFwiZXZlbnQ6cHVibGlzaC1mYWlsZWRcIiwgaGFuZGxlUHVibGlzaEZhaWxlZCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIG5kaz8ub2ZmKFwiZXZlbnQ6cHVibGlzaC1mYWlsZWRcIiwgaGFuZGxlUHVibGlzaEZhaWxlZCk7XG4gICAgfTtcbiAgfSwgW25kaywgdXBkYXRlU3RhdGVGcm9tQ2FjaGVdKTtcbiAgcmV0dXJuIHVucHVibGlzaGVkRXZlbnRzO1xufVxuZnVuY3Rpb24gdXNlTkRLSW5pdCgpIHtcbiAgY29uc3Qgc2V0TkRLID0gdXNlTkRLU3RvcmUoKHN0YXRlKSA9PiBzdGF0ZS5zZXROREspO1xuICBjb25zdCBpbml0aWFsaXplUHJvZmlsZXNTdG9yZTIgPSB1c2VVc2VyUHJvZmlsZXNTdG9yZSgoc3RhdGUpID0+IHN0YXRlLmluaXRpYWxpemUpO1xuICBjb25zdCBpbml0aWFsaXplU2Vzc2lvblN0b3JlID0gdXNlTkRLU2Vzc2lvbnMoKHN0YXRlKSA9PiBzdGF0ZS5pbml0KTtcbiAgY29uc3QgaW5pdGlhbGl6ZU5ESyA9IHVzZUNhbGxiYWNrKFxuICAgIChuZGtJbnN0YW5jZSkgPT4ge1xuICAgICAgaWYgKCFuZGtJbnN0YW5jZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwidXNlTkRLSW5pdDogQXR0ZW1wdGVkIHRvIGluaXRpYWxpemUgd2l0aCBhIG51bGwgTkRLIGluc3RhbmNlLlwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2V0TkRLKG5ka0luc3RhbmNlKTtcbiAgICAgIGluaXRpYWxpemVQcm9maWxlc1N0b3JlMihuZGtJbnN0YW5jZSk7XG4gICAgICBpbml0aWFsaXplU2Vzc2lvblN0b3JlKG5ka0luc3RhbmNlKTtcbiAgICB9LFxuICAgIFtzZXROREssIGluaXRpYWxpemVQcm9maWxlc1N0b3JlMiwgaW5pdGlhbGl6ZVNlc3Npb25TdG9yZV1cbiAgKTtcbiAgcmV0dXJuIGluaXRpYWxpemVOREs7XG59XG5cbi8vIHNyYy9wcm9maWxlcy9ob29rcy9pbmRleC50c1xuaW1wb3J0IHtcbiAgTkRLRXZlbnQgYXMgTkRLRXZlbnQyLFxuICBOREtLaW5kIGFzIE5ES0tpbmQyLFxuICBzZXJpYWxpemVQcm9maWxlXG59IGZyb20gXCJAbm9zdHItZGV2LWtpdC9uZGtcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrIGFzIHVzZUNhbGxiYWNrMiwgdXNlRWZmZWN0IGFzIHVzZUVmZmVjdDIgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNoYWxsb3cgfSBmcm9tIFwienVzdGFuZC9zaGFsbG93XCI7XG5mdW5jdGlvbiB1c2VQcm9maWxlKHB1YmtleSwgZm9yY2VSZWZyZXNoKSB7XG4gIHJldHVybiB1c2VQcm9maWxlVmFsdWUocHVia2V5LCB7IHJlZnJlc2g6IGZvcmNlUmVmcmVzaCB9KTtcbn1cbmZ1bmN0aW9uIHVzZVByb2ZpbGVWYWx1ZShwdWJrZXksIG9wdHMpIHtcbiAgY29uc3QgZmV0Y2hQcm9maWxlID0gdXNlVXNlclByb2ZpbGVzU3RvcmUoKHN0YXRlKSA9PiBzdGF0ZS5mZXRjaFByb2ZpbGUpO1xuICBjb25zdCBwcm9maWxlU2VsZWN0b3IgPSB1c2VTaGFsbG93KChzdGF0ZSkgPT4gcHVia2V5ID8gc3RhdGUucHJvZmlsZXMuZ2V0KHB1YmtleSkgOiB2b2lkIDApO1xuICBjb25zdCBwcm9maWxlID0gdXNlVXNlclByb2ZpbGVzU3RvcmUocHJvZmlsZVNlbGVjdG9yKTtcbiAgdXNlRWZmZWN0MigoKSA9PiB7XG4gICAgaWYgKHB1YmtleSkge1xuICAgICAgZmV0Y2hQcm9maWxlKHB1YmtleSwgb3B0cyk7XG4gICAgfVxuICB9LCBbcHVia2V5LCBmZXRjaFByb2ZpbGUsIG9wdHNdKTtcbiAgcmV0dXJuIHByb2ZpbGU7XG59XG5mdW5jdGlvbiB1c2VTZXRQcm9maWxlKCkge1xuICBjb25zdCBzZXRQcm9maWxlID0gdXNlVXNlclByb2ZpbGVzU3RvcmUoKHN0YXRlKSA9PiBzdGF0ZS5zZXRQcm9maWxlKTtcbiAgY29uc3QgeyBuZGsgfSA9IHVzZU5ESygpO1xuICBjb25zdCB1cGRhdGUgPSB1c2VDYWxsYmFjazIoXG4gICAgYXN5bmMgKG5ld1Byb2ZpbGUpID0+IHtcbiAgICAgIGlmICghbmRrKSByZXR1cm4gbnVsbDtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IE5ES0V2ZW50MihuZGspO1xuICAgICAgZXZlbnQua2luZCA9IE5ES0tpbmQyLk1ldGFkYXRhO1xuICAgICAgZXZlbnQuY29udGVudCA9IHNlcmlhbGl6ZVByb2ZpbGUobmV3UHJvZmlsZSk7XG4gICAgICBhd2FpdCBldmVudC5zaWduKCk7XG4gICAgICBldmVudC5wdWJsaXNoKCk7XG4gICAgICBzZXRQcm9maWxlKGV2ZW50LnB1YmtleSwgbmV3UHJvZmlsZSk7XG4gICAgfSxcbiAgICBbbmRrXVxuICApO1xuICByZXR1cm4gdXBkYXRlO1xufVxuXG4vLyBzcmMvc2Vzc2lvbi9ob29rcy9pbmRleC50c1xudmFyIEVNUFRZX1NFVCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG52YXIgRU1QVFlfS0lORF9NQVAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xudmFyIHVzZU5ES1Nlc3Npb25Mb2dpbiA9ICgpID0+IHtcbiAgY29uc3QgYWRkU2Vzc2lvbjIgPSB1c2VOREtTZXNzaW9ucy5nZXRTdGF0ZSgpLmFkZFNlc3Npb247XG4gIHJldHVybiB1c2VDYWxsYmFjazMoXG4gICAgKHVzZXJPclNpZ25lciwgc2V0QWN0aXZlKSA9PiBhZGRTZXNzaW9uMih1c2VyT3JTaWduZXIsIHNldEFjdGl2ZSksXG4gICAgW2FkZFNlc3Npb24yXVxuICApO1xufTtcbnZhciB1c2VOREtTZXNzaW9uTG9nb3V0ID0gKCkgPT4ge1xuICBjb25zdCBjdXJyZW50UHVia2V5ID0gdXNlTkRLQ3VycmVudFB1YmtleSgpO1xuICBjb25zdCByZW1vdmVTZXNzaW9uMiA9IHVzZU5ES1Nlc3Npb25zLmdldFN0YXRlKCkucmVtb3ZlU2Vzc2lvbjtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrMyhcbiAgICAocHVia2V5KSA9PiB7XG4gICAgICBjb25zdCBfcHVia2V5ID0gcHVia2V5ID8/IGN1cnJlbnRQdWJrZXk7XG4gICAgICBpZiAoIV9wdWJrZXkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk5vIHB1YmtleSBwcm92aWRlZCBmb3IgbG9nb3V0XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZW1vdmVTZXNzaW9uMihfcHVia2V5KTtcbiAgICB9LFxuICAgIFtyZW1vdmVTZXNzaW9uMiwgY3VycmVudFB1YmtleV1cbiAgKTtcbn07XG52YXIgdXNlTkRLU2Vzc2lvblN3aXRjaCA9ICgpID0+IHtcbiAgY29uc3Qgc3dpdGNoVG9Vc2VyMiA9IHVzZU5ES1Nlc3Npb25zLmdldFN0YXRlKCkuc3dpdGNoVG9Vc2VyO1xuICByZXR1cm4gdXNlQ2FsbGJhY2szKChwdWJrZXkpID0+IHN3aXRjaFRvVXNlcjIocHVia2V5KSwgW3N3aXRjaFRvVXNlcjJdKTtcbn07XG52YXIgdXNlRm9sbG93cyA9ICgpID0+IHtcbiAgY29uc3QgZm9sbG93cyA9IHVzZU5ES1Nlc3Npb25zKFxuICAgIChzKSA9PiBzLmFjdGl2ZVB1YmtleSA/IHMuc2Vzc2lvbnMuZ2V0KHMuYWN0aXZlUHVia2V5KT8uZm9sbG93U2V0ID8/IEVNUFRZX1NFVCA6IEVNUFRZX1NFVFxuICApO1xuICBjb25zdCBmb2xsb3dLaW5kcyA9IHVzZU5ES1Nlc3Npb25zKFxuICAgIChzKSA9PiBzLmFjdGl2ZVB1YmtleSA/IHMuc2Vzc2lvbnMuZ2V0KHMuYWN0aXZlUHVia2V5KT8ua2luZEZvbGxvd1NldCA/PyBFTVBUWV9LSU5EX01BUCA6IEVNUFRZX0tJTkRfTUFQXG4gICk7XG4gIGNvbnN0IGZvbGxvd1NldCA9IHVzZU1lbW8yKCgpID0+IHtcbiAgICBjb25zdCBzZXQgPSBuZXcgU2V0KGZvbGxvd3MpO1xuICAgIGZvciAoY29uc3Qga2luZHMgb2YgZm9sbG93S2luZHMudmFsdWVzKCkpIHtcbiAgICAgIGZvciAoY29uc3QgW3B1YmtleSwgeyBmb2xsb3dlZCB9XSBvZiBraW5kcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKGZvbGxvd2VkKSB7XG4gICAgICAgICAgc2V0LmFkZChwdWJrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldC5kZWxldGUocHVia2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2V0O1xuICB9LCBbZm9sbG93cywgZm9sbG93S2luZHNdKTtcbiAgcmV0dXJuIGZvbGxvd1NldDtcbn07XG5mdW5jdGlvbiB1c2VOREtTZXNzaW9uRXZlbnQoa2luZCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHsgbmRrIH0gPSB1c2VOREsoKTtcbiAgY29uc3QgeyBjcmVhdGU6IGNyZWF0ZTYgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGFjdGl2ZVB1YmtleSA9IHVzZU5ES1Nlc3Npb25zKChzKSA9PiBzLmFjdGl2ZVB1YmtleSk7XG4gIGNvbnN0IGFjdGl2ZVNlc3Npb25FdmVudHMgPSB1c2VOREtTZXNzaW9ucyhcbiAgICAocykgPT4gcy5hY3RpdmVQdWJrZXkgPyBzLnNlc3Npb25zLmdldChzLmFjdGl2ZVB1YmtleSk/LmV2ZW50cyA6IHZvaWQgMFxuICApO1xuICBjb25zdCBldmVudCA9IHVzZU1lbW8yKCgpID0+IHtcbiAgICBpZiAoIWFjdGl2ZVNlc3Npb25FdmVudHMgfHwgIWFjdGl2ZVB1YmtleSkgcmV0dXJuIHZvaWQgMDtcbiAgICBjb25zdCBleGlzdGluZ0V2ZW50ID0gYWN0aXZlU2Vzc2lvbkV2ZW50cy5nZXQoa2luZCk7XG4gICAgaWYgKGV4aXN0aW5nRXZlbnQpIHJldHVybiBleGlzdGluZ0V2ZW50O1xuICAgIGlmIChjcmVhdGU2ICYmIG5kaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbmV3SW5zdGFuY2UgPSBuZXcgY3JlYXRlNihuZGspO1xuICAgICAgICBuZXdJbnN0YW5jZS5wdWJrZXkgPSBhY3RpdmVQdWJrZXk7XG4gICAgICAgIHJldHVybiBuZXdJbnN0YW5jZTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgaW5zdGFuY2UgZm9yIGtpbmQgJHtraW5kfSB1c2luZyBwcm92aWRlZCBjbGFzczpgLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG4gIH0sIFthY3RpdmVTZXNzaW9uRXZlbnRzLCBraW5kLCBuZGssIGFjdGl2ZVB1YmtleV0pO1xuICByZXR1cm4gZXZlbnQ7XG59XG52YXIgdXNlQ3VycmVudFVzZXJQcm9maWxlID0gKCkgPT4ge1xuICBjb25zdCBhY3RpdmVQdWJrZXkgPSB1c2VOREtTZXNzaW9ucygoc3RhdGUpID0+IHN0YXRlLmFjdGl2ZVB1YmtleSk7XG4gIGNvbnN0IHByb2ZpbGUgPSB1c2VQcm9maWxlVmFsdWUoYWN0aXZlUHVia2V5ID8/IHZvaWQgMCk7XG4gIHJldHVybiBwcm9maWxlO1xufTtcblxuLy8gc3JjL3Nlc3Npb24vaG9va3Mvc2lnbmVycy50c1xudmFyIHVzZU5ES1Nlc3Npb25TaWduZXJzID0gKCkgPT4gdXNlTkRLU2Vzc2lvbnMoKHMpID0+IHMuc2lnbmVycyk7XG5cbi8vIHNyYy9zZXNzaW9uL2hvb2tzL3Nlc3Npb25zLnRzXG52YXIgdXNlTkRLU2Vzc2lvblNlc3Npb25zID0gKCkgPT4gdXNlTkRLU2Vzc2lvbnMoKHMpID0+IHMuc2Vzc2lvbnMpO1xuXG4vLyBzcmMvc2Vzc2lvbi9ob29rcy9jb250cm9sLnRzXG52YXIgdXNlTkRLU2Vzc2lvblN0YXJ0ID0gKCkgPT4gdXNlTkRLU2Vzc2lvbnMoKHMpID0+IHMuc3RhcnRTZXNzaW9uKTtcbnZhciB1c2VOREtTZXNzaW9uU3RvcCA9ICgpID0+IHVzZU5ES1Nlc3Npb25zKChzKSA9PiBzLnN0b3BTZXNzaW9uKTtcblxuLy8gc3JjL3Nlc3Npb24vaG9va3MvdXNlLW5kay1zZXNzaW9uLW1vbml0b3IudHNcbmltcG9ydCB7IG5ka1NpZ25lckZyb21QYXlsb2FkIH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuaW1wb3J0IHsgdXNlRWZmZWN0IGFzIHVzZUVmZmVjdDMsIHVzZVJlZiBhcyB1c2VSZWYyIH0gZnJvbSBcInJlYWN0XCI7XG5cbi8vIHNyYy9zZXNzaW9uL3N0b3JhZ2UvaW5kZXgudHNcbnZhciBTRVNTSU9OU19TVE9SRV9LRVkgPSBcIm5kay1zYXZlZC1zZXNzaW9uc1wiO1xudmFyIEFDVElWRV9QVUJLRVlfU1RPUkVfS0VZID0gXCJuZGstYWN0aXZlLXB1YmtleVwiO1xudmFyIE5ES1Nlc3Npb25Mb2NhbFN0b3JhZ2UgPSBjbGFzcyB7XG4gIC8qKlxuICAgKiBHZXQgYW4gaXRlbSBmcm9tIGxvY2FsU3RvcmFnZS5cbiAgICogQHBhcmFtIGtleSBUaGUga2V5IHRvIHJldHJpZXZlLlxuICAgKiBAcmV0dXJucyBUaGUgc3RvcmVkIHZhbHVlIG9yIG51bGwgaWYgbm90IGZvdW5kLlxuICAgKi9cbiAgZ2V0SXRlbShrZXkpIHtcbiAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY29uc29sZS53YXJuKFwibG9jYWxTdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgfVxuICAvKipcbiAgICogU2V0IGFuIGl0ZW0gaW4gbG9jYWxTdG9yYWdlLlxuICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gc3RvcmUuXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc3RvcmUuXG4gICAqL1xuICBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY29uc29sZS53YXJuKFwibG9jYWxTdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhbiBpdGVtIGZyb20gbG9jYWxTdG9yYWdlLlxuICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gZGVsZXRlLlxuICAgKi9cbiAgZGVsZXRlSXRlbShrZXkpIHtcbiAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY29uc29sZS53YXJuKFwibG9jYWxTdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGxvYWRTZXNzaW9uc0Zyb21TdG9yYWdlKHN0b3JhZ2UpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzZXNzaW9uc0pzb24gPSBzdG9yYWdlLmdldEl0ZW0oU0VTU0lPTlNfU1RPUkVfS0VZKTtcbiAgICBpZiAoIXNlc3Npb25zSnNvbikgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHNlc3Npb25zID0gSlNPTi5wYXJzZShzZXNzaW9uc0pzb24pO1xuICAgIHJldHVybiBzZXNzaW9ucztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiW05ES10gRXJyb3IgbG9hZGluZyBzZXNzaW9ucyBmcm9tIHN0b3JhZ2U6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbmZ1bmN0aW9uIHNhdmVTZXNzaW9uc1RvU3RvcmFnZShzdG9yYWdlLCBzZXNzaW9ucykge1xuICB0cnkge1xuICAgIHN0b3JhZ2Uuc2V0SXRlbShTRVNTSU9OU19TVE9SRV9LRVksIEpTT04uc3RyaW5naWZ5KHNlc3Npb25zKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIltOREtdIEVycm9yIHNhdmluZyBzZXNzaW9ucyB0byBzdG9yYWdlOlwiLCBlcnJvcik7XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGFkZE9yVXBkYXRlU3RvcmVkU2Vzc2lvbihzdG9yYWdlLCBwdWJrZXksIHNpZ25lclBheWxvYWQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzZXNzaW9ucyA9IGxvYWRTZXNzaW9uc0Zyb21TdG9yYWdlKHN0b3JhZ2UpO1xuICAgIGNvbnN0IGV4aXN0aW5nSW5kZXggPSBzZXNzaW9ucy5maW5kSW5kZXgoKHMpID0+IHMucHVia2V5ID09PSBwdWJrZXkpO1xuICAgIGlmIChleGlzdGluZ0luZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKHNpZ25lclBheWxvYWQgIT09IHZvaWQgMCkge1xuICAgICAgICBzZXNzaW9uc1tleGlzdGluZ0luZGV4XS5zaWduZXJQYXlsb2FkID0gc2lnbmVyUGF5bG9hZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2Vzc2lvbnMucHVzaCh7XG4gICAgICAgIHB1YmtleSxcbiAgICAgICAgc2lnbmVyUGF5bG9hZFxuICAgICAgICAvLyBXaWxsIGJlIHVuZGVmaW5lZCBmb3IgcmVhZC1vbmx5IHNlc3Npb25zIGluaXRpYWxseVxuICAgICAgfSk7XG4gICAgfVxuICAgIHNhdmVTZXNzaW9uc1RvU3RvcmFnZShzdG9yYWdlLCBzZXNzaW9ucyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIltOREtdIEVycm9yIGFkZGluZy91cGRhdGluZyBzdG9yZWQgc2Vzc2lvbjpcIiwgZXJyb3IpO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZW1vdmVTdG9yZWRTZXNzaW9uKHN0b3JhZ2UsIHB1YmtleSkge1xuICB0cnkge1xuICAgIGNvbnN0IHNlc3Npb25zID0gbG9hZFNlc3Npb25zRnJvbVN0b3JhZ2Uoc3RvcmFnZSk7XG4gICAgY29uc3QgdXBkYXRlZFNlc3Npb25zID0gc2Vzc2lvbnMuZmlsdGVyKChzKSA9PiBzLnB1YmtleSAhPT0gcHVia2V5KTtcbiAgICBzYXZlU2Vzc2lvbnNUb1N0b3JhZ2Uoc3RvcmFnZSwgdXBkYXRlZFNlc3Npb25zKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiW05ES10gRXJyb3IgcmVtb3Zpbmcgc2Vzc2lvbiBmcm9tIHN0b3JhZ2U6XCIsIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0QWN0aXZlUHVia2V5KHN0b3JhZ2UpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBhY3RpdmVQdWJrZXkgPSBzdG9yYWdlLmdldEl0ZW0oQUNUSVZFX1BVQktFWV9TVE9SRV9LRVkpO1xuICAgIHJldHVybiBhY3RpdmVQdWJrZXkgfHwgdm9pZCAwO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJbTkRLXSBFcnJvciBnZXR0aW5nIGFjdGl2ZSBwdWJrZXkgZnJvbSBzdG9yYWdlOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufVxuZnVuY3Rpb24gc3RvcmVBY3RpdmVQdWJrZXkoc3RvcmFnZSwgcHVia2V5KSB7XG4gIHRyeSB7XG4gICAgc3RvcmFnZS5zZXRJdGVtKEFDVElWRV9QVUJLRVlfU1RPUkVfS0VZLCBwdWJrZXkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJbTkRLXSBFcnJvciBzZXR0aW5nIGFjdGl2ZSBwdWJrZXkgaW4gc3RvcmFnZTpcIiwgZXJyb3IpO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiBjbGVhckFjdGl2ZVB1YmtleShzdG9yYWdlKSB7XG4gIHRyeSB7XG4gICAgc3RvcmFnZS5kZWxldGVJdGVtKEFDVElWRV9QVUJLRVlfU1RPUkVfS0VZKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiW05ES10gRXJyb3IgY2xlYXJpbmcgYWN0aXZlIHB1YmtleSBmcm9tIHN0b3JhZ2U6XCIsIGVycm9yKTtcbiAgfVxufVxuXG4vLyBzcmMvc2Vzc2lvbi9ob29rcy91c2UtbmRrLXNlc3Npb24tbW9uaXRvci50c1xuZnVuY3Rpb24gdXNlTkRLU2Vzc2lvbk1vbml0b3Ioc2Vzc2lvblN0b3JhZ2UsIG9wdHMpIHtcbiAgY29uc3QgeyBuZGsgfSA9IHVzZU5ESygpO1xuICBjb25zdCBpc0luaXRpYWxpemVkID0gdXNlUmVmMihmYWxzZSk7XG4gIGNvbnN0IHN0b3JlZEtleXMgPSB1c2VSZWYyKC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICBjb25zdCBzdG9yZWRBY3RpdmVQdWJrZXkgPSBzZXNzaW9uU3RvcmFnZSAmJiBnZXRBY3RpdmVQdWJrZXkoc2Vzc2lvblN0b3JhZ2UpO1xuICBjb25zdCBhZGRTZXNzaW9uMiA9IHVzZU5ES1Nlc3Npb25Mb2dpbigpO1xuICBjb25zdCBjdXJyZW50VXNlciA9IHVzZU5ES0N1cnJlbnRVc2VyKCk7XG4gIGNvbnN0IHNpZ25lcnMgPSB1c2VOREtTZXNzaW9uU2lnbmVycygpO1xuICBjb25zdCBzZXNzaW9ucyA9IHVzZU5ES1Nlc3Npb25TZXNzaW9ucygpO1xuICBjb25zdCBzdGFydFNlc3Npb24yID0gdXNlTkRLU2Vzc2lvblN0YXJ0KCk7XG4gIGNvbnN0IHN0b3BTZXNzaW9uMiA9IHVzZU5ES1Nlc3Npb25TdG9wKCk7XG4gIHVzZUVmZmVjdDMoKCkgPT4ge1xuICAgIGlmICghbmRrIHx8IGlzSW5pdGlhbGl6ZWQuY3VycmVudCB8fCAhc2Vzc2lvblN0b3JhZ2UpIHJldHVybjtcbiAgICBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplRnJvbVN0b3JhZ2UoKSB7XG4gICAgICBpZiAoIW5kayB8fCAhc2Vzc2lvblN0b3JhZ2UpIHJldHVybjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN0b3JlZFNlc3Npb25zID0gbG9hZFNlc3Npb25zRnJvbVN0b3JhZ2Uoc2Vzc2lvblN0b3JhZ2UpO1xuICAgICAgICBpZiAoc3RvcmVkU2Vzc2lvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qgc3RvcmVkU2Vzc2lvbiBvZiBzdG9yZWRTZXNzaW9ucykge1xuICAgICAgICAgIGNvbnN0IHsgcHVia2V5LCBzaWduZXJQYXlsb2FkIH0gPSBzdG9yZWRTZXNzaW9uO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyID0gbmRrLmdldFVzZXIoeyBwdWJrZXkgfSk7XG4gICAgICAgICAgICBsZXQgc2lnbmVyID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHNpZ25lclBheWxvYWQpIHtcbiAgICAgICAgICAgICAgc2lnbmVyID0gYXdhaXQgbmRrU2lnbmVyRnJvbVBheWxvYWQoc2lnbmVyUGF5bG9hZCwgbmRrKTtcbiAgICAgICAgICAgICAgaWYgKCFzaWduZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICBgW05ES10gRmFpbGVkIHRvIGRlc2VyaWFsaXplIHNpZ25lciBmb3IgJHtwdWJrZXl9LCBzZXNzaW9uIHdpbGwgYmUgcmVhZC1vbmx5LmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0b3JlZEtleXMuY3VycmVudC5zZXQocHVia2V5LCB0cnVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RvcmVkS2V5cy5jdXJyZW50LnNldChwdWJrZXksIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IGFkZFNlc3Npb24yKHNpZ25lciA/IHNpZ25lciA6IHVzZXIsIHB1YmtleSA9PT0gc3RvcmVkQWN0aXZlUHVia2V5KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgYFtOREtdIEZhaWxlZCB0byBwcm9jZXNzIHN0b3JlZCBzZXNzaW9uIGZvciBwdWJrZXkgJHtzdG9yZWRTZXNzaW9uLnB1YmtleX06YCxcbiAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW05ES10gRXJyb3IgaW5pdGlhbGl6aW5nIHNlc3Npb25zIGZyb20gc3RvcmFnZTpcIiwgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbml0aWFsaXplRnJvbVN0b3JhZ2UoKS5maW5hbGx5KCgpID0+IHtcbiAgICAgIGlmIChzdG9yZWRBY3RpdmVQdWJrZXkpIHtcbiAgICAgICAgc3RhcnRTZXNzaW9uMihzdG9yZWRBY3RpdmVQdWJrZXksIG9wdHMgfHwge30pO1xuICAgICAgfVxuICAgICAgaXNJbml0aWFsaXplZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9KTtcbiAgfSwgW25kaywgc2Vzc2lvblN0b3JhZ2VdKTtcbiAgdXNlRWZmZWN0MygoKSA9PiB7XG4gICAgaWYgKCFuZGsgfHwgIWlzSW5pdGlhbGl6ZWQuY3VycmVudCB8fCAhc2Vzc2lvblN0b3JhZ2UpIHJldHVybjtcbiAgICBhc3luYyBmdW5jdGlvbiBwZXJzaXN0U2Vzc2lvbnMoKSB7XG4gICAgICBpZiAoIW5kayB8fCAhc2Vzc2lvblN0b3JhZ2UpIHJldHVybjtcbiAgICAgIGZvciAoY29uc3QgW3B1YmtleSwgc2lnbmVyXSBvZiBzaWduZXJzKSB7XG4gICAgICAgIGlmIChzdG9yZWRLZXlzLmN1cnJlbnQuZ2V0KHB1YmtleSkpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gc2lnbmVyLnRvUGF5bG9hZCgpO1xuICAgICAgICBpZiAocGF5bG9hZCkge1xuICAgICAgICAgIGF3YWl0IGFkZE9yVXBkYXRlU3RvcmVkU2Vzc2lvbihzZXNzaW9uU3RvcmFnZSwgcHVia2V5LCBwYXlsb2FkKTtcbiAgICAgICAgICBzdG9yZWRLZXlzLmN1cnJlbnQuc2V0KHB1YmtleSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgcHVia2V5IG9mIHNlc3Npb25zLmtleXMoKSkge1xuICAgICAgICBpZiAoc3RvcmVkS2V5cy5jdXJyZW50LmhhcyhwdWJrZXkpKSBjb250aW51ZTtcbiAgICAgICAgYXdhaXQgYWRkT3JVcGRhdGVTdG9yZWRTZXNzaW9uKHNlc3Npb25TdG9yYWdlLCBwdWJrZXkpO1xuICAgICAgICBzdG9yZWRLZXlzLmN1cnJlbnQuc2V0KHB1YmtleSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHBlcnNpc3RTZXNzaW9ucygpO1xuICB9LCBbc2Vzc2lvbnMsIHNpZ25lcnMsIG5kaywgc2Vzc2lvblN0b3JhZ2VdKTtcbiAgY29uc3QgY3VycmVudEFjdGl2ZVB1YmtleSA9IHVzZVJlZjIoY3VycmVudFVzZXI/LnB1YmtleSk7XG4gIHVzZUVmZmVjdDMoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiQ3VycmVudCB1c2VyIHB1YmtleTpcIiwgY3VycmVudFVzZXI/LnB1YmtleSk7XG4gICAgaWYgKCFuZGsgfHwgIWlzSW5pdGlhbGl6ZWQuY3VycmVudCB8fCAhc2Vzc2lvblN0b3JhZ2UpIHJldHVybjtcbiAgICBpZiAoY3VycmVudFVzZXI/LnB1YmtleSA9PT0gY3VycmVudEFjdGl2ZVB1YmtleS5jdXJyZW50KSB7XG4gICAgICBjb25zb2xlLmxvZyhcIk5vIGNoYW5nZSBpbiBhY3RpdmUgcHVia2V5LCBza2lwcGluZyB1cGRhdGUuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhc3luYyBmdW5jdGlvbiB1cGRhdGVBY3RpdmVQdWJrZXkoKSB7XG4gICAgICBpZiAoIW5kayB8fCAhc2Vzc2lvblN0b3JhZ2UpIHJldHVybjtcbiAgICAgIGlmIChjdXJyZW50VXNlcj8ucHVia2V5KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnRBY3RpdmVQdWJrZXkuY3VycmVudCAhPT0gY3VycmVudFVzZXIucHVia2V5KSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudEFjdGl2ZVB1YmtleS5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIGF3YWl0IHN0b3BTZXNzaW9uMihjdXJyZW50QWN0aXZlUHVia2V5LmN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudEFjdGl2ZVB1YmtleS5jdXJyZW50ID0gY3VycmVudFVzZXIucHVia2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlN0b3JpbmcgYWN0aXZlIHB1YmtleTpcIiwgY3VycmVudFVzZXIucHVia2V5KTtcbiAgICAgICAgICBzdG9yZUFjdGl2ZVB1YmtleShzZXNzaW9uU3RvcmFnZSwgY3VycmVudFVzZXIucHVia2V5KTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0aW5nIHNlc3Npb24gZm9yIGFjdGl2ZSBwdWJrZXk6XCIsIGN1cnJlbnRVc2VyLnB1YmtleSk7XG4gICAgICAgICAgYXdhaXQgc3RhcnRTZXNzaW9uMihjdXJyZW50VXNlci5wdWJrZXksIG9wdHMgfHwge30pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBzdGFydCBzZXNzaW9uIGZvciBhY3RpdmUgcHVia2V5ICR7Y3VycmVudFVzZXI/LnB1YmtleX06YCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBjbGVhckFjdGl2ZVB1YmtleShzZXNzaW9uU3RvcmFnZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUFjdGl2ZVB1YmtleSgpO1xuICB9LCBbY3VycmVudFVzZXI/LnB1YmtleSwgbmRrLCBzZXNzaW9uU3RvcmFnZV0pO1xuICBjb25zdCBwcmV2U2Vzc2lvbnNSZWYgPSB1c2VSZWYyKC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICB1c2VFZmZlY3QzKCgpID0+IHtcbiAgICBpZiAoIXNlc3Npb25TdG9yYWdlKSByZXR1cm47XG4gICAgY29uc3QgY3VycmVudFNlc3Npb25zID0gc2Vzc2lvbnM7XG4gICAgY29uc3QgcHJldlNlc3Npb25zID0gcHJldlNlc3Npb25zUmVmLmN1cnJlbnQ7XG4gICAgcHJldlNlc3Npb25zLmZvckVhY2goKF8sIHB1YmtleSkgPT4ge1xuICAgICAgaWYgKCFjdXJyZW50U2Vzc2lvbnMuaGFzKHB1YmtleSkpIHtcbiAgICAgICAgY29uc29sZS5sb2coYFNlc3Npb24gJHtwdWJrZXl9IGRldGVjdGVkIGFzIHJlbW92ZWQsIHVwZGF0aW5nIHN0b3JhZ2UuYCk7XG4gICAgICAgIHJlbW92ZVN0b3JlZFNlc3Npb24oc2Vzc2lvblN0b3JhZ2UsIHB1YmtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcHJldlNlc3Npb25zUmVmLmN1cnJlbnQgPSBuZXcgTWFwKGN1cnJlbnRTZXNzaW9ucyk7XG4gIH0sIFtzZXNzaW9ucywgc2Vzc2lvblN0b3JhZ2VdKTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIHNyYy9tdXRlcy9ob29rcy91c2UtaXMtaXRlbS1tdXRlZC50c1xuaW1wb3J0IHsgdXNlTWVtbyBhcyB1c2VNZW1vNCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTkRLRXZlbnQgYXMgTkRLRXZlbnQzLCBOREtVc2VyIGFzIE5ES1VzZXIzIH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuXG4vLyBzcmMvbXV0ZXMvaG9va3MvdXNlLW11dGUtY3JpdGVyaWEudHNcbmltcG9ydCB7IHVzZUVmZmVjdCBhcyB1c2VFZmZlY3Q0LCB1c2VTdGF0ZSBhcyB1c2VTdGF0ZTIgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL211dGVzL2hvb2tzL3VzZS1tdXRlLWZpbHRlci50c1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgYXMgdXNlQ2FsbGJhY2s0IH0gZnJvbSBcInJlYWN0XCI7XG5cbi8vIHNyYy91dGlscy9tdXRlLnRzXG52YXIgaXNNdXRlZCA9IChldmVudCwgY3JpdGVyaWEpID0+IHtcbiAgaWYgKCFjcml0ZXJpYSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCB7IHB1YmtleXMsIGV2ZW50SWRzLCBoYXNodGFncywgd29yZHMgfSA9IGNyaXRlcmlhO1xuICBpZiAocHVia2V5cy5oYXMoZXZlbnQucHVia2V5KSkgcmV0dXJuIHRydWU7XG4gIGlmIChldmVudElkcy5oYXMoZXZlbnQuaWQpKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKGV2ZW50SWRzLnNpemUgPiAwIHx8IGhhc2h0YWdzLnNpemUgPiAwKSB7XG4gICAgZm9yIChjb25zdCB0YWcgb2YgZXZlbnQudGFncykge1xuICAgICAgaWYgKHRhZ1swXSA9PT0gXCJlXCIgJiYgZXZlbnRJZHMuaGFzKHRhZ1sxXSkpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRhZ1swXSA9PT0gXCJ0XCIgJiYgaGFzaHRhZ3MuaGFzKHRhZ1sxXSkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAod29yZHMgJiYgd29yZHMuc2l6ZSA+IDAgJiYgZXZlbnQuY29udGVudCkge1xuICAgIGNvbnN0IHdvcmRzSW5Db250ZW50ID0gZXZlbnQuY29udGVudC5zcGxpdCgvXFxzKy8pLm1hcCgod29yZCkgPT4gd29yZC50b0xvd2VyQ2FzZSgpKTtcbiAgICBmb3IgKGNvbnN0IHdvcmQgb2Ygd29yZHNJbkNvbnRlbnQpIHtcbiAgICAgIGlmICh3b3Jkcy5oYXMod29yZCkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vLyBzcmMvbXV0ZXMvaG9va3MvdXNlLW11dGUtZmlsdGVyLnRzXG52YXIgRU1QVFlfTVVURV9DUklURVJJQSA9IHtcbiAgcHVia2V5czogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgZXZlbnRJZHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gIGhhc2h0YWdzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLFxuICB3b3JkczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKVxufTtcbmZ1bmN0aW9uIHVzZU11dGVGaWx0ZXIoKSB7XG4gIGNvbnN0IG11dGVDcml0ZXJpYSA9IHVzZUFjdGl2ZU11dGVDcml0ZXJpYSgpO1xuICBjb25zb2xlLmxvZyhcInVzZU11dGVGaWx0ZXJcIiwgbXV0ZUNyaXRlcmlhKTtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrNChcbiAgICAoZXZlbnQpID0+IHtcbiAgICAgIHJldHVybiBpc011dGVkKGV2ZW50LCBtdXRlQ3JpdGVyaWEpO1xuICAgIH0sXG4gICAgW211dGVDcml0ZXJpYV1cbiAgKTtcbn1cblxuLy8gc3JjL211dGVzL2hvb2tzL3VzZS1tdXRlLWNyaXRlcmlhLnRzXG5mdW5jdGlvbiB1c2VBY3RpdmVNdXRlQ3JpdGVyaWEoKSB7XG4gIHJldHVybiB1c2VOREtNdXRlcygocykgPT4gcy5tdXRlQ3JpdGVyaWEpO1xufVxuZnVuY3Rpb24gdXNlTXV0ZUNyaXRlcmlhKHB1YmtleSkge1xuICBjb25zdCBtdXRlc0ZvclB1YmtleSA9IHVzZU5ES011dGVzKChzKSA9PiBwdWJrZXkgPyBzLm11dGVzLmdldChwdWJrZXkpIDogRU1QVFlfTVVURV9DUklURVJJQSk7XG4gIGNvbnN0IGV4dHJhTXV0ZXMgPSB1c2VOREtNdXRlcygocykgPT4gcy5leHRyYU11dGVzKTtcbiAgY29uc3QgW2NyaXRlcmlhLCBzZXRDcml0ZXJpYV0gPSB1c2VTdGF0ZTIoRU1QVFlfTVVURV9DUklURVJJQSk7XG4gIHVzZUVmZmVjdDQoKCkgPT4ge1xuICAgIGNvbnN0IGNvbWJpbmVkTXV0ZXMgPSB7XG4gICAgICBldmVudElkczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoWy4uLm11dGVzRm9yUHVia2V5Py5ldmVudElkcyB8fCBbXSwgLi4uZXh0cmFNdXRlcz8uZXZlbnRJZHMgfHwgW11dKSxcbiAgICAgIGhhc2h0YWdzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4ubXV0ZXNGb3JQdWJrZXk/Lmhhc2h0YWdzIHx8IFtdLCAuLi5leHRyYU11dGVzPy5oYXNodGFncyB8fCBbXV0pLFxuICAgICAgd29yZHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFsuLi5tdXRlc0ZvclB1YmtleT8ud29yZHMgfHwgW10sIC4uLmV4dHJhTXV0ZXM/LndvcmRzIHx8IFtdXSksXG4gICAgICBwdWJrZXlzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4ubXV0ZXNGb3JQdWJrZXk/LnB1YmtleXMgfHwgW10sIC4uLmV4dHJhTXV0ZXM/LnB1YmtleXMgfHwgW11dKVxuICAgIH07XG4gICAgc2V0Q3JpdGVyaWEoY29tYmluZWRNdXRlcyk7XG4gIH0sIFtcbiAgICBtdXRlc0ZvclB1YmtleT8uZXZlbnRJZHMsXG4gICAgbXV0ZXNGb3JQdWJrZXk/Lmhhc2h0YWdzLFxuICAgIG11dGVzRm9yUHVia2V5Py53b3JkcyxcbiAgICBtdXRlc0ZvclB1YmtleT8ucHVia2V5cyxcbiAgICBleHRyYU11dGVzPy5ldmVudElkcyxcbiAgICBleHRyYU11dGVzPy5oYXNodGFncyxcbiAgICBleHRyYU11dGVzPy53b3JkcyxcbiAgICBleHRyYU11dGVzPy5wdWJrZXlzXG4gIF0pO1xuICByZXR1cm4gY3JpdGVyaWE7XG59XG5cbi8vIHNyYy9tdXRlcy9ob29rcy91c2UtaXMtaXRlbS1tdXRlZC50c1xuZnVuY3Rpb24gdXNlSXNJdGVtTXV0ZWQoaXRlbSkge1xuICBjb25zdCBtdXRlQ3JpdGVyaWEgPSB1c2VBY3RpdmVNdXRlQ3JpdGVyaWEoKTtcbiAgcmV0dXJuIHVzZU1lbW80KCgpID0+IHtcbiAgICBsZXQgaXRlbVR5cGU7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgTkRLRXZlbnQzKSB7XG4gICAgICBpdGVtVHlwZSA9IFwiZXZlbnRcIjtcbiAgICAgIHZhbHVlID0gaXRlbS5pZDtcbiAgICB9IGVsc2UgaWYgKGl0ZW0gaW5zdGFuY2VvZiBOREtVc2VyMykge1xuICAgICAgaXRlbVR5cGUgPSBcInB1YmtleVwiO1xuICAgICAgdmFsdWUgPSBpdGVtLnB1YmtleTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBpZiAoaXRlbS5zdGFydHNXaXRoKFwiI1wiKSAmJiBpdGVtLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaXRlbVR5cGUgPSBcImhhc2h0YWdcIjtcbiAgICAgICAgdmFsdWUgPSBpdGVtLnN1YnN0cmluZygxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1UeXBlID0gXCJ3b3JkXCI7XG4gICAgICAgIHZhbHVlID0gaXRlbTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzd2l0Y2ggKGl0ZW1UeXBlKSB7XG4gICAgICBjYXNlIFwiZXZlbnRcIjpcbiAgICAgICAgcmV0dXJuIG11dGVDcml0ZXJpYS5ldmVudElkcy5oYXModmFsdWUpO1xuICAgICAgY2FzZSBcInB1YmtleVwiOlxuICAgICAgICByZXR1cm4gbXV0ZUNyaXRlcmlhLnB1YmtleXMuaGFzKHZhbHVlKTtcbiAgICAgIGNhc2UgXCJoYXNodGFnXCI6XG4gICAgICAgIHJldHVybiBtdXRlQ3JpdGVyaWEuaGFzaHRhZ3MuaGFzKHZhbHVlKTtcbiAgICAgIGNhc2UgXCJ3b3JkXCI6XG4gICAgICAgIHJldHVybiBtdXRlQ3JpdGVyaWEud29yZHMuaGFzKHZhbHVlKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIFttdXRlQ3JpdGVyaWEsIGl0ZW1dKTtcbn1cblxuLy8gc3JjL211dGVzL2hvb2tzL3VzZS1tdXRlLWl0ZW0udHNcbmltcG9ydCB7IHVzZUNhbGxiYWNrIGFzIHVzZUNhbGxiYWNrNSB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlTXV0ZUl0ZW0ob3B0aW9ucykge1xuICBjb25zdCBjdXJyZW50UHVia2V5ID0gdXNlTkRLQ3VycmVudFB1YmtleSgpO1xuICBjb25zdCBtdXRlSXRlbTIgPSB1c2VOREtNdXRlcygocykgPT4gcy5tdXRlSXRlbSk7XG4gIHJldHVybiB1c2VDYWxsYmFjazUoXG4gICAgKGl0ZW0pID0+IHtcbiAgICAgIGlmICghY3VycmVudFB1YmtleSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJ1c2VNdXRlSXRlbTogTm8gYWN0aXZlIHVzZXIgZm91bmQuIENhbm5vdCBtdXRlIGl0ZW0uXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBpZGVudGlmaWVkID0gaWRlbnRpZnlNdXRlSXRlbShpdGVtKTtcbiAgICAgIGlmICghaWRlbnRpZmllZCkgcmV0dXJuO1xuICAgICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gaWRlbnRpZmllZDtcbiAgICAgIG11dGVJdGVtMihjdXJyZW50UHVia2V5LCB2YWx1ZSwgdHlwZSwgb3B0aW9ucyk7XG4gICAgfSxcbiAgICBbY3VycmVudFB1YmtleSwgbXV0ZUl0ZW0yLCBvcHRpb25zXVxuICApO1xufVxuXG4vLyBzcmMvbXV0ZXMvaG9va3MvdXNlLXB1Ymxpc2gtbXV0ZS1saXN0LnRzXG5pbXBvcnQgeyB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazYgfSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZVB1Ymxpc2hNdXRlTGlzdCgpIHtcbiAgY29uc3QgY3VycmVudFB1YmtleSA9IHVzZU5ES0N1cnJlbnRQdWJrZXkoKTtcbiAgY29uc3QgcHVibGlzaE11dGVMaXN0MiA9IHVzZU5ES011dGVzKChzKSA9PiBzLnB1Ymxpc2hNdXRlTGlzdCk7XG4gIHJldHVybiB1c2VDYWxsYmFjazYoYXN5bmMgKCkgPT4ge1xuICAgIGlmICghY3VycmVudFB1YmtleSkge1xuICAgICAgY29uc29sZS53YXJuKFwidXNlUHVibGlzaE11dGVMaXN0OiBObyBhY3RpdmUgdXNlciBmb3VuZC4gQ2Fubm90IHB1Ymxpc2ggbXV0ZSBsaXN0LlwiKTtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBwdWJsaXNoTXV0ZUxpc3QyKGN1cnJlbnRQdWJrZXkpO1xuICB9LCBbY3VycmVudFB1YmtleSwgcHVibGlzaE11dGVMaXN0Ml0pO1xufVxuXG4vLyBzcmMvbXV0ZXMvaG9va3MvdXNlLXVubXV0ZS1pdGVtLnRzXG5pbXBvcnQgeyB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazcgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IE5ES0V2ZW50IGFzIE5ES0V2ZW50NCwgTkRLVXNlciBhcyBOREtVc2VyNCB9IGZyb20gXCJAbm9zdHItZGV2LWtpdC9uZGtcIjtcbmZ1bmN0aW9uIHVzZVVubXV0ZUl0ZW0ob3B0aW9ucykge1xuICBjb25zdCBjdXJyZW50UHVia2V5ID0gdXNlTkRLQ3VycmVudFB1YmtleSgpO1xuICBjb25zdCB1bm11dGVJdGVtMiA9IHVzZU5ES011dGVzKChzKSA9PiBzLnVubXV0ZUl0ZW0pO1xuICByZXR1cm4gdXNlQ2FsbGJhY2s3KFxuICAgIChpdGVtKSA9PiB7XG4gICAgICBpZiAoIWN1cnJlbnRQdWJrZXkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwidXNlVW5tdXRlSXRlbTogTm8gYWN0aXZlIHVzZXIgZm91bmQuIENhbm5vdCB1bm11dGUgaXRlbS5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBpdGVtVHlwZTtcbiAgICAgIGxldCB2YWx1ZTtcbiAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgTkRLRXZlbnQ0KSB7XG4gICAgICAgIGl0ZW1UeXBlID0gXCJldmVudFwiO1xuICAgICAgICB2YWx1ZSA9IGl0ZW0uaWQ7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW0gaW5zdGFuY2VvZiBOREtVc2VyNCkge1xuICAgICAgICBpdGVtVHlwZSA9IFwicHVia2V5XCI7XG4gICAgICAgIHZhbHVlID0gaXRlbS5wdWJrZXk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChpdGVtLnN0YXJ0c1dpdGgoXCIjXCIpICYmIGl0ZW0ubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGl0ZW1UeXBlID0gXCJoYXNodGFnXCI7XG4gICAgICAgICAgdmFsdWUgPSBpdGVtLnN1YnN0cmluZygxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtVHlwZSA9IFwid29yZFwiO1xuICAgICAgICAgIHZhbHVlID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwidXNlVW5tdXRlSXRlbTogSW52YWxpZCBpdGVtIHR5cGUgcHJvdmlkZWQuXCIsIGl0ZW0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB1bm11dGVJdGVtMihjdXJyZW50UHVia2V5LCB2YWx1ZSwgaXRlbVR5cGUsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgW2N1cnJlbnRQdWJrZXksIHVubXV0ZUl0ZW0yLCBvcHRpb25zXVxuICApO1xufVxuXG4vLyBzcmMvb2JzZXJ2ZXIvaG9va3MvaW5kZXgudHNcbmltcG9ydCB7XG4gIE5ES1N1YnNjcmlwdGlvbkNhY2hlVXNhZ2Vcbn0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgYXMgdXNlQ2FsbGJhY2s4LCB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0NSwgdXNlUmVmIGFzIHVzZVJlZjMsIHVzZVN0YXRlIGFzIHVzZVN0YXRlMyB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlT2JzZXJ2ZXIoZmlsdGVycywgb3B0cyA9IHt9LCBkZXBlbmRlbmNpZXMgPSBbXSkge1xuICBjb25zdCB7IG5kayB9ID0gdXNlTkRLKCk7XG4gIGNvbnN0IHN1YiA9IHVzZVJlZjMobnVsbCk7XG4gIGNvbnN0IFtldmVudHMsIHNldEV2ZW50c10gPSB1c2VTdGF0ZTMoW10pO1xuICBjb25zdCBidWZmZXIgPSB1c2VSZWYzKFtdKTtcbiAgY29uc3QgYnVmZmVyVGltZW91dCA9IHVzZVJlZjMobnVsbCk7XG4gIGNvbnN0IGFkZGVkRXZlbnRJZHMgPSB1c2VSZWYzKC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpO1xuICBjb25zb2xlLmxvZyhcInVzZU9ic2VydmVyXCIpO1xuICBjb25zdCBtdXRlRmlsdGVyID0gdXNlTXV0ZUZpbHRlcigpO1xuICBkZXBlbmRlbmNpZXMucHVzaCghIWZpbHRlcnMpO1xuICBjb25zdCBzdG9wRmlsdGVycyA9IHVzZUNhbGxiYWNrOCgoKSA9PiB7XG4gICAgaWYgKHN1Yi5jdXJyZW50KSBzdWIuY3VycmVudC5zdG9wKCk7XG4gICAgc3ViLmN1cnJlbnQgPSBudWxsO1xuICAgIGJ1ZmZlci5jdXJyZW50ID0gW107XG4gICAgaWYgKGJ1ZmZlclRpbWVvdXQuY3VycmVudCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGJ1ZmZlclRpbWVvdXQuY3VycmVudCk7XG4gICAgICBidWZmZXJUaW1lb3V0LmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgICBhZGRlZEV2ZW50SWRzLmN1cnJlbnQuY2xlYXIoKTtcbiAgICBzZXRFdmVudHMoW10pO1xuICB9LCBbXSk7XG4gIHVzZUVmZmVjdDUoKCkgPT4ge1xuICAgIGlmICghbmRrIHx8ICFmaWx0ZXJzKSByZXR1cm47XG4gICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICAgIGlmIChzdWIuY3VycmVudCkgc3RvcEZpbHRlcnMoKTtcbiAgICBjb25zdCBwcm9jZXNzRXZlbnQyID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoIWlzVmFsaWQpIHJldHVybjtcbiAgICAgIGlmICghb3B0cy5pbmNsdWRlTXV0ZWQgJiYgbXV0ZUZpbHRlcihldmVudCkpIHJldHVybjtcbiAgICAgIGNvbnN0IHRhZ0lkID0gZXZlbnQudGFnSWQoKTtcbiAgICAgIGlmIChhZGRlZEV2ZW50SWRzLmN1cnJlbnQuaGFzKHRhZ0lkKSkgcmV0dXJuO1xuICAgICAgYWRkZWRFdmVudElkcy5jdXJyZW50LmFkZCh0YWdJZCk7XG4gICAgICBidWZmZXIuY3VycmVudC5wdXNoKGV2ZW50KTtcbiAgICAgIGlmICghYnVmZmVyVGltZW91dC5jdXJyZW50KSB7XG4gICAgICAgIGJ1ZmZlclRpbWVvdXQuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHNldEV2ZW50cygocHJldikgPT4gWy4uLnByZXYsIC4uLmJ1ZmZlci5jdXJyZW50XSk7XG4gICAgICAgICAgYnVmZmVyLmN1cnJlbnQgPSBbXTtcbiAgICAgICAgICBidWZmZXJUaW1lb3V0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9LCA1MCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzdWIuY3VycmVudCA9IG5kay5zdWJzY3JpYmUoXG4gICAgICBmaWx0ZXJzLFxuICAgICAge1xuICAgICAgICBjbG9zZU9uRW9zZTogdHJ1ZSxcbiAgICAgICAgY2FjaGVVc2FnZTogTkRLU3Vic2NyaXB0aW9uQ2FjaGVVc2FnZS5PTkxZX0NBQ0hFLFxuICAgICAgICBncm91cGFibGU6IGZhbHNlLFxuICAgICAgICB3cmFwOiB0cnVlLFxuICAgICAgICAuLi5vcHRzXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBvbkV2ZW50OiAoZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAoIWlzVmFsaWQpIHJldHVybjtcbiAgICAgICAgICBwcm9jZXNzRXZlbnQyKGV2ZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25FdmVudHM6IChldmVudHMyKSA9PiB7XG4gICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSAhb3B0cy5pbmNsdWRlTXV0ZWQgPyBldmVudHMyLmZpbHRlcigoZSkgPT4gIW11dGVGaWx0ZXIoZSkpIDogZXZlbnRzMjtcbiAgICAgICAgICBzZXRFdmVudHMoZmlsdGVyZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgICBpZiAoYnVmZmVyLmN1cnJlbnQubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKGJ1ZmZlclRpbWVvdXQuY3VycmVudCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoYnVmZmVyVGltZW91dC5jdXJyZW50KTtcbiAgICAgICAgYnVmZmVyVGltZW91dC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGJ1ZmZlci5jdXJyZW50ID0gW107XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICBzdG9wRmlsdGVycygpO1xuICAgIH07XG4gIH0sIFtuZGssIC4uLmRlcGVuZGVuY2llc10pO1xuICByZXR1cm4gZXZlbnRzO1xufVxuXG4vLyBzcmMvc3Vic2NyaWJlL2hvb2tzL3N1YnNjcmliZS50c1xuaW1wb3J0IHsgdXNlRWZmZWN0IGFzIHVzZUVmZmVjdDYsIHVzZVJlZiBhcyB1c2VSZWY0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gXCJ6dXN0YW5kXCI7XG5cbi8vIHNyYy9zdWJzY3JpYmUvc3RvcmUvaW5kZXgudHNcbmltcG9ydCB7IGNyZWF0ZVN0b3JlIH0gZnJvbSBcInp1c3RhbmQvdmFuaWxsYVwiO1xudmFyIGNyZWF0ZVN1YnNjcmliZVN0b3JlID0gKGJ1ZmZlck1zID0gMzApID0+IHtcbiAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZSgoc2V0LCBnZXQpID0+IHtcbiAgICBjb25zdCBidWZmZXIgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIGxldCB0aW1lb3V0ID0gbnVsbDtcbiAgICBjb25zdCBmbHVzaEJ1ZmZlciA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXRlID0gZ2V0KCk7XG4gICAgICBjb25zdCBuZXdFdmVudE1hcCA9IG5ldyBNYXAoc3RhdGUuZXZlbnRNYXApO1xuICAgICAgbGV0IGhhc0NoYW5nZXMgPSBmYWxzZTtcbiAgICAgIGZvciAoY29uc3QgW2lkLCBldmVudF0gb2YgYnVmZmVyLmVudHJpZXMoKSkge1xuICAgICAgICBjb25zdCBleGlzdGluZ0V2ZW50ID0gbmV3RXZlbnRNYXAuZ2V0KGlkKTtcbiAgICAgICAgaWYgKCFleGlzdGluZ0V2ZW50IHx8IGV4aXN0aW5nRXZlbnQuY3JlYXRlZF9hdCAhPT0gdm9pZCAwICYmIGV2ZW50LmNyZWF0ZWRfYXQgIT09IHZvaWQgMCAmJiBldmVudC5jcmVhdGVkX2F0ID4gZXhpc3RpbmdFdmVudC5jcmVhdGVkX2F0KSB7XG4gICAgICAgICAgbmV3RXZlbnRNYXAuc2V0KGlkLCBldmVudCk7XG4gICAgICAgICAgaGFzQ2hhbmdlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1ZmZlci5jbGVhcigpO1xuICAgICAgaWYgKGhhc0NoYW5nZXMpIHtcbiAgICAgICAgY29uc3QgbmV3RXZlbnRzID0gQXJyYXkuZnJvbShuZXdFdmVudE1hcC52YWx1ZXMoKSk7XG4gICAgICAgIHNldCh7IGV2ZW50TWFwOiBuZXdFdmVudE1hcCwgZXZlbnRzOiBuZXdFdmVudHMgfSk7XG4gICAgICB9XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBldmVudHM6IFtdLFxuICAgICAgZXZlbnRNYXA6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksXG4gICAgICBlb3NlOiBmYWxzZSxcbiAgICAgIHN1YnNjcmlwdGlvblJlZjogdm9pZCAwLFxuICAgICAgYWRkRXZlbnQ6IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IGV2ZW50LnRhZ0lkKCk7XG4gICAgICAgIGlmIChidWZmZXJNcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBjb25zdCBleGlzdGluZ0luQnVmZmVyID0gYnVmZmVyLmdldChpZCk7XG4gICAgICAgICAgY29uc3QgZXhpc3RpbmdJblN0b3JlID0gZ2V0KCkuZXZlbnRNYXAuZ2V0KGlkKTtcbiAgICAgICAgICBpZiAoZXhpc3RpbmdJbkJ1ZmZlciAmJiBleGlzdGluZ0luQnVmZmVyLmNyZWF0ZWRfYXQgIT09IHZvaWQgMCAmJiBldmVudC5jcmVhdGVkX2F0ICE9PSB2b2lkIDAgJiYgZXhpc3RpbmdJbkJ1ZmZlci5jcmVhdGVkX2F0ID49IGV2ZW50LmNyZWF0ZWRfYXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGV4aXN0aW5nSW5TdG9yZSAmJiBleGlzdGluZ0luU3RvcmUuY3JlYXRlZF9hdCAhPT0gdm9pZCAwICYmIGV2ZW50LmNyZWF0ZWRfYXQgIT09IHZvaWQgMCAmJiBleGlzdGluZ0luU3RvcmUuY3JlYXRlZF9hdCA+PSBldmVudC5jcmVhdGVkX2F0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlci5zZXQoaWQsIGV2ZW50KTtcbiAgICAgICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZsdXNoQnVmZmVyLCBidWZmZXJNcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0KCk7XG4gICAgICAgICAgY29uc3QgbmV3RXZlbnRNYXAgPSBuZXcgTWFwKHN0YXRlLmV2ZW50TWFwKTtcbiAgICAgICAgICBjb25zdCBleGlzdGluZ0V2ZW50ID0gbmV3RXZlbnRNYXAuZ2V0KGlkKTtcbiAgICAgICAgICBpZiAoZXhpc3RpbmdFdmVudCAmJiBleGlzdGluZ0V2ZW50LmNyZWF0ZWRfYXQgIT09IHZvaWQgMCAmJiBldmVudC5jcmVhdGVkX2F0ICE9PSB2b2lkIDAgJiYgZXhpc3RpbmdFdmVudC5jcmVhdGVkX2F0ID49IGV2ZW50LmNyZWF0ZWRfYXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3RXZlbnRNYXAuc2V0KGlkLCBldmVudCk7XG4gICAgICAgICAgY29uc3QgbmV3RXZlbnRzID0gQXJyYXkuZnJvbShuZXdFdmVudE1hcC52YWx1ZXMoKSk7XG4gICAgICAgICAgc2V0KHsgZXZlbnRNYXA6IG5ld0V2ZW50TWFwLCBldmVudHM6IG5ld0V2ZW50cyB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFkZEV2ZW50czogKGV2ZW50cykgPT4ge1xuICAgICAgICBpZiAoIWV2ZW50cyB8fCBldmVudHMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIGlmIChidWZmZXJNcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBsZXQgbmVlZHNGbHVzaCA9IGZhbHNlO1xuICAgICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50KSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZXZlbnQudGFnSWQoKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSW5CdWZmZXIgPSBidWZmZXIuZ2V0KGlkKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSW5TdG9yZSA9IGdldCgpLmV2ZW50TWFwLmdldChpZCk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdJbkJ1ZmZlciAmJiBleGlzdGluZ0luQnVmZmVyLmNyZWF0ZWRfYXQgIT09IHZvaWQgMCAmJiBldmVudC5jcmVhdGVkX2F0ICE9PSB2b2lkIDAgJiYgZXhpc3RpbmdJbkJ1ZmZlci5jcmVhdGVkX2F0ID49IGV2ZW50LmNyZWF0ZWRfYXQpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdJblN0b3JlICYmIGV4aXN0aW5nSW5TdG9yZS5jcmVhdGVkX2F0ICE9PSB2b2lkIDAgJiYgZXZlbnQuY3JlYXRlZF9hdCAhPT0gdm9pZCAwICYmIGV4aXN0aW5nSW5TdG9yZS5jcmVhdGVkX2F0ID49IGV2ZW50LmNyZWF0ZWRfYXQpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIuc2V0KGlkLCBldmVudCk7XG4gICAgICAgICAgICBuZWVkc0ZsdXNoID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5lZWRzRmx1c2ggJiYgIXRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZsdXNoQnVmZmVyLCBidWZmZXJNcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0KCk7XG4gICAgICAgICAgY29uc3QgbmV3RXZlbnRNYXAgPSBuZXcgTWFwKHN0YXRlLmV2ZW50TWFwKTtcbiAgICAgICAgICBsZXQgaGFzVXBkYXRlcyA9IGZhbHNlO1xuICAgICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50KSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZXZlbnQudGFnSWQoKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nRXZlbnQgPSBuZXdFdmVudE1hcC5nZXQoaWQpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nRXZlbnQgJiYgZXhpc3RpbmdFdmVudC5jcmVhdGVkX2F0ICE9PSB2b2lkIDAgJiYgZXZlbnQuY3JlYXRlZF9hdCAhPT0gdm9pZCAwICYmIGV4aXN0aW5nRXZlbnQuY3JlYXRlZF9hdCA+PSBldmVudC5jcmVhdGVkX2F0KSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3RXZlbnRNYXAuc2V0KGlkLCBldmVudCk7XG4gICAgICAgICAgICBoYXNVcGRhdGVzID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhc1VwZGF0ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0V2ZW50cyA9IEFycmF5LmZyb20obmV3RXZlbnRNYXAudmFsdWVzKCkpO1xuICAgICAgICAgICAgc2V0KHsgZXZlbnRNYXA6IG5ld0V2ZW50TWFwLCBldmVudHM6IG5ld0V2ZW50cyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZW1vdmVFdmVudElkOiAoaWQpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXQoKTtcbiAgICAgICAgY29uc3QgbmV3RXZlbnRNYXAgPSBuZXcgTWFwKHN0YXRlLmV2ZW50TWFwKTtcbiAgICAgICAgbmV3RXZlbnRNYXAuZGVsZXRlKGlkKTtcbiAgICAgICAgY29uc3QgbmV3RXZlbnRzID0gQXJyYXkuZnJvbShuZXdFdmVudE1hcC52YWx1ZXMoKSk7XG4gICAgICAgIHNldCh7IGV2ZW50TWFwOiBuZXdFdmVudE1hcCwgZXZlbnRzOiBuZXdFdmVudHMgfSk7XG4gICAgICB9LFxuICAgICAgZmlsdGVyTXV0ZWRFdmVudHM6IChtdXRlRmlsdGVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRFdmVudE1hcCA9IHN0YXRlLmV2ZW50TWFwO1xuICAgICAgICBjb25zdCBuZXdFdmVudE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgW2lkLCBldmVudF0gb2YgY3VycmVudEV2ZW50TWFwLmVudHJpZXMoKSkge1xuICAgICAgICAgIGlmICghbXV0ZUZpbHRlcihldmVudCkpIHtcbiAgICAgICAgICAgIG5ld0V2ZW50TWFwLnNldChpZCwgZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdFdmVudHMgPSBBcnJheS5mcm9tKG5ld0V2ZW50TWFwLnZhbHVlcygpKTtcbiAgICAgICAgc2V0KHsgZXZlbnRNYXA6IG5ld0V2ZW50TWFwLCBldmVudHM6IG5ld0V2ZW50cyB9KTtcbiAgICAgIH0sXG4gICAgICBzZXRFb3NlOiAoKSA9PiB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIGZsdXNoQnVmZmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0KHsgZW9zZTogdHJ1ZSB9KTtcbiAgICAgICAgaWYgKGJ1ZmZlck1zICE9PSBmYWxzZSkge1xuICAgICAgICAgIGJ1ZmZlck1zID0gMTY7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXNldDogKCkgPT4ge1xuICAgICAgICBidWZmZXIuY2xlYXIoKTtcbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc2V0KHtcbiAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICAgIGV2ZW50TWFwOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLFxuICAgICAgICAgIGVvc2U6IGZhbHNlLFxuICAgICAgICAgIHN1YnNjcmlwdGlvblJlZjogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gc3RvcmU7XG59O1xuXG4vLyBzcmMvc3Vic2NyaWJlL2hvb2tzL3N1YnNjcmliZS50c1xuZnVuY3Rpb24gdXNlU3Vic2NyaWJlKGZpbHRlcnMsIG9wdHMgPSB7fSwgZGVwZW5kZW5jaWVzID0gW10pIHtcbiAgY29uc3QgeyBuZGsgfSA9IHVzZU5ESygpO1xuICBjb25zdCBtdXRlRmlsdGVyID0gdXNlTXV0ZUZpbHRlcigpO1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVJlZjQobnVsbCk7XG4gIGlmICghc3RvcmVSZWYuY3VycmVudCkge1xuICAgIHN0b3JlUmVmLmN1cnJlbnQgPSBjcmVhdGVTdWJzY3JpYmVTdG9yZShvcHRzLmJ1ZmZlck1zKTtcbiAgfVxuICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG4gIGNvbnN0IHN1YlJlZiA9IHVzZVJlZjQobnVsbCk7XG4gIHVzZUVmZmVjdDYoKCkgPT4ge1xuICAgIGlmICghbmRrIHx8ICFmaWx0ZXJzKSByZXR1cm47XG4gICAgaWYgKHN1YlJlZi5jdXJyZW50KSB7XG4gICAgICBzdWJSZWYuY3VycmVudC5zdG9wKCk7XG4gICAgICBzdWJSZWYuY3VycmVudCA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHNldHVwU3Vic2NyaXB0aW9uID0gKCkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudEZpbHRlcnMgPSBmaWx0ZXJzO1xuICAgICAgY29uc3QgaGFuZGxlRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFvcHRzLmluY2x1ZGVEZWxldGVkICYmIGV2ZW50Lmhhc1RhZyhcImRlbGV0ZWRcIikpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRzLmluY2x1ZGVNdXRlZCAmJiBtdXRlRmlsdGVyKGV2ZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5vbmNlKFwiZGVsZXRlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3RhdGUyID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgICBzdGF0ZTIucmVtb3ZlRXZlbnRJZChldmVudC50YWdJZCgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgc3RhdGUuYWRkRXZlbnQoZXZlbnQpO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IGhhbmRsZUNhY2hlZEV2ZW50cyA9IChldmVudHMyKSA9PiB7XG4gICAgICAgIGlmIChldmVudHMyICYmIGV2ZW50czIubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHZhbGlkRXZlbnRzID0gZXZlbnRzMi5maWx0ZXIoKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghb3B0cy5pbmNsdWRlRGVsZXRlZCAmJiBlLmhhc1RhZyhcImRlbGV0ZWRcIikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghb3B0cy5pbmNsdWRlTXV0ZWQgJiYgbXV0ZUZpbHRlcihlKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHZhbGlkRXZlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIHN0YXRlLmFkZEV2ZW50cyh2YWxpZEV2ZW50cyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGV2dCBvZiB2YWxpZEV2ZW50cykge1xuICAgICAgICAgICAgICBldnQub25jZShcImRlbGV0ZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlMiA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgc3RhdGUyLnJlbW92ZUV2ZW50SWQoZXZ0LnRhZ0lkKCkpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCBoYW5kbGVFb3NlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgIHN0YXRlLnNldEVvc2UoKTtcbiAgICAgIH07XG4gICAgICBjb25zdCBzdWIgPSBuZGsuc3Vic2NyaWJlKGN1cnJlbnRGaWx0ZXJzLCBvcHRzLCB7XG4gICAgICAgIG9uRXZlbnQ6IGhhbmRsZUV2ZW50LFxuICAgICAgICBvbkV2ZW50czogaGFuZGxlQ2FjaGVkRXZlbnRzLFxuICAgICAgICBvbkVvc2U6IGhhbmRsZUVvc2VcbiAgICAgIH0pO1xuICAgICAgc3ViUmVmLmN1cnJlbnQgPSBzdWI7XG4gICAgfTtcbiAgICBzZXR1cFN1YnNjcmlwdGlvbigpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoc3ViUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgc3ViUmVmLmN1cnJlbnQuc3RvcCgpO1xuICAgICAgICBzdWJSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW25kaywgbXV0ZUZpbHRlciwgISFmaWx0ZXJzLCAuLi5kZXBlbmRlbmNpZXNdKTtcbiAgdXNlRWZmZWN0NigoKSA9PiB7XG4gICAgaWYgKCFvcHRzLmluY2x1ZGVNdXRlZCkge1xuICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgc3RhdGUuZmlsdGVyTXV0ZWRFdmVudHMobXV0ZUZpbHRlcik7XG4gICAgfVxuICB9LCBbbXV0ZUZpbHRlciwgc3RvcmUsIG9wdHMuaW5jbHVkZU11dGVkXSk7XG4gIGNvbnN0IGV2ZW50cyA9IHVzZVN0b3JlKHN0b3JlLCAocykgPT4gcy5ldmVudHMpO1xuICBjb25zdCBlb3NlID0gdXNlU3RvcmUoc3RvcmUsIChzKSA9PiBzLmVvc2UpO1xuICByZXR1cm4geyBldmVudHMsIGVvc2UgfTtcbn1cblxuLy8gc3JjL3N1YnNjcmliZS9ob29rcy9ldmVudC50c1xuaW1wb3J0IHsgdXNlRWZmZWN0IGFzIHVzZUVmZmVjdDcsIHVzZVN0YXRlIGFzIHVzZVN0YXRlNCB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlRXZlbnQoaWRPckZpbHRlciwgb3B0cyA9IHt9LCBkZXBlbmRlbmNpZXMgPSBbXSkge1xuICBjb25zdCBbZXZlbnQsIHNldEV2ZW50XSA9IHVzZVN0YXRlNCgpO1xuICBjb25zdCB7IG5kayB9ID0gdXNlTkRLKCk7XG4gIGRlcGVuZGVuY2llcy5wdXNoKCEhaWRPckZpbHRlcik7XG4gIHVzZUVmZmVjdDcoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoRXZlbnQoKSB7XG4gICAgICBpZiAoIW5kayB8fCAhaWRPckZpbHRlcikgcmV0dXJuO1xuICAgICAgY29uc3QgZXZlbnRzID0gYXdhaXQgbmRrLmZldGNoRXZlbnQoaWRPckZpbHRlciwgb3B0cyk7XG4gICAgICBzZXRFdmVudChldmVudHMpO1xuICAgIH1cbiAgICBmZXRjaEV2ZW50KCk7XG4gIH0sIGRlcGVuZGVuY2llcyk7XG4gIHJldHVybiBldmVudDtcbn1cblxuLy8gc3JjL3Nlc3Npb24vaG9va3MvdXNlLWF2YWlsYWJsZS1zZXNzaW9ucy50c1xuaW1wb3J0IHsgdXNlTWVtbyBhcyB1c2VNZW1vNSB9IGZyb20gXCJyZWFjdFwiO1xudmFyIHVzZUF2YWlsYWJsZVNlc3Npb25zID0gKCkgPT4ge1xuICBjb25zdCBzZXNzaW9ucyA9IHVzZU5ES1Nlc3Npb25zKChzdGF0ZSkgPT4gc3RhdGUuc2Vzc2lvbnMpO1xuICBjb25zdCBhdmFpbGFibGVQdWJrZXlzID0gdXNlTWVtbzUoXG4gICAgKCkgPT4gQXJyYXkuZnJvbShzZXNzaW9ucy5rZXlzKCkpLFxuICAgIC8vIEdldCBrZXlzIGZyb20gc2Vzc2lvbnMgbWFwXG4gICAgW3Nlc3Npb25zXVxuICApO1xuICByZXR1cm4gdXNlTWVtbzUoKCkgPT4gKHsgYXZhaWxhYmxlUHVia2V5cyB9KSwgW2F2YWlsYWJsZVB1YmtleXNdKTtcbn07XG5cbi8vIHNyYy93YWxsZXQvaG9va3MvaW5kZXgudHNcbmltcG9ydCB7IHVzZUNhbGxiYWNrIGFzIHVzZUNhbGxiYWNrOSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlIGFzIGNyZWF0ZTUgfSBmcm9tIFwienVzdGFuZFwiO1xuaW1wb3J0IHsgTkRLTnV0emFwTW9uaXRvciB9IGZyb20gXCJAbm9zdHItZGV2LWtpdC9uZGstd2FsbGV0XCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0OCwgdXNlTWVtbyBhcyB1c2VNZW1vNiwgdXNlU3RhdGUgYXMgdXNlU3RhdGU1IH0gZnJvbSBcInJlYWN0XCI7XG52YXIgdXNlSW50ZXJuYWxXYWxsZXRTdG9yZSA9IGNyZWF0ZTUoKHNldCkgPT4gKHtcbiAgYWN0aXZlV2FsbGV0OiBudWxsLFxuICBiYWxhbmNlOiBudWxsLFxuICBzZXRBY3RpdmVXYWxsZXQ6ICh3YWxsZXQpID0+IHNldCh7IGFjdGl2ZVdhbGxldDogd2FsbGV0IH0pLFxuICBzZXRCYWxhbmNlOiAoYmFsYW5jZSkgPT4gc2V0KHsgYmFsYW5jZSB9KVxufSkpO1xudmFyIHVzZU5ES1dhbGxldCA9ICgpID0+IHtcbiAgY29uc3QgeyBuZGsgfSA9IHVzZU5ESygpO1xuICBjb25zdCBhY3RpdmVXYWxsZXQgPSB1c2VJbnRlcm5hbFdhbGxldFN0b3JlKChzKSA9PiBzLmFjdGl2ZVdhbGxldCk7XG4gIGNvbnN0IHN0b3JlU2V0QWN0aXZlV2FsbGV0ID0gdXNlSW50ZXJuYWxXYWxsZXRTdG9yZSgocykgPT4gcy5zZXRBY3RpdmVXYWxsZXQpO1xuICBjb25zdCBiYWxhbmNlID0gdXNlSW50ZXJuYWxXYWxsZXRTdG9yZSgocykgPT4gcy5iYWxhbmNlKTtcbiAgY29uc3Qgc2V0QmFsYW5jZSA9IHVzZUludGVybmFsV2FsbGV0U3RvcmUoKHMpID0+IHMuc2V0QmFsYW5jZSk7XG4gIGNvbnN0IHNldEFjdGl2ZVdhbGxldCA9IHVzZUNhbGxiYWNrOShcbiAgICAod2FsbGV0KSA9PiB7XG4gICAgICBpZiAoIW5kaykgcmV0dXJuO1xuICAgICAgbGV0IGRlYm91bmNlVGltZXI7XG4gICAgICBzdG9yZVNldEFjdGl2ZVdhbGxldCh3YWxsZXQpO1xuICAgICAgbmRrLndhbGxldCA9IHdhbGxldCA/PyB2b2lkIDA7XG4gICAgICBjb25zdCB1cGRhdGVCYWxhbmNlID0gKCkgPT4ge1xuICAgICAgICBpZiAoZGVib3VuY2VUaW1lcikgY2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZXIpO1xuICAgICAgICBkZWJvdW5jZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgYmFsYW5jZU9iaiA9IHdhbGxldD8uYmFsYW5jZTtcbiAgICAgICAgICBjb25zdCBhbW91bnQgPSBiYWxhbmNlT2JqPy5hbW91bnQgPz8gbnVsbDtcbiAgICAgICAgICBzZXRCYWxhbmNlKGFtb3VudCk7XG4gICAgICAgIH0sIDUwKTtcbiAgICAgIH07XG4gICAgICBpZiAod2FsbGV0KSB7XG4gICAgICAgIHdhbGxldC5vbihcInJlYWR5XCIsIHVwZGF0ZUJhbGFuY2UpO1xuICAgICAgICB3YWxsZXQub24oXCJiYWxhbmNlX3VwZGF0ZWRcIiwgdXBkYXRlQmFsYW5jZSk7XG4gICAgICAgIHdhbGxldC51cGRhdGVCYWxhbmNlPy4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEJhbGFuY2UobnVsbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbbmRrLCBzdG9yZVNldEFjdGl2ZVdhbGxldCwgc2V0QmFsYW5jZV1cbiAgKTtcbiAgcmV0dXJuIHsgYWN0aXZlV2FsbGV0LCBzZXRBY3RpdmVXYWxsZXQsIGJhbGFuY2UsIHNldEJhbGFuY2UgfTtcbn07XG52YXIgdXNlSW50ZXJuYWxOdXR6YXBNb25pdG9yU3RvcmUgPSBjcmVhdGU1KChzZXQpID0+ICh7XG4gIG51dHphcE1vbml0b3I6IG51bGwsXG4gIHNldE51dHphcE1vbml0b3I6IChtb25pdG9yKSA9PiBzZXQoeyBudXR6YXBNb25pdG9yOiBtb25pdG9yIH0pXG59KSk7XG52YXIgdXNlTkRLTnV0emFwTW9uaXRvciA9IChtaW50TGlzdCwgc3RhcnQgPSBmYWxzZSkgPT4ge1xuICBjb25zdCB7IG5kayB9ID0gdXNlTkRLKCk7XG4gIGNvbnN0IGN1cnJlbnRVc2VyID0gdXNlTkRLQ3VycmVudFVzZXIoKTtcbiAgY29uc3QgeyBhY3RpdmVXYWxsZXQgfSA9IHVzZU5ES1dhbGxldCgpO1xuICBjb25zdCBudXR6YXBNb25pdG9yID0gdXNlSW50ZXJuYWxOdXR6YXBNb25pdG9yU3RvcmUoKHMpID0+IHMubnV0emFwTW9uaXRvcik7XG4gIGNvbnN0IHNldE51dHphcE1vbml0b3IgPSB1c2VJbnRlcm5hbE51dHphcE1vbml0b3JTdG9yZSgocykgPT4gcy5zZXROdXR6YXBNb25pdG9yKTtcbiAgY29uc3QgW21vbml0b3JTdGFydGVkLCBzZXRNb25pdG9yU3RhcnRlZF0gPSB1c2VTdGF0ZTUoZmFsc2UpO1xuICBjb25zdCBtb25pdG9yU3RvcmUgPSB1c2VNZW1vNigoKSA9PiB7XG4gICAgaWYgKG5kaz8uY2FjaGVBZGFwdGVyPy5nZXRBbGxOdXR6YXBTdGF0ZXMgJiYgbmRrPy5jYWNoZUFkYXB0ZXI/LnNldE51dHphcFN0YXRlKSB7XG4gICAgICBjb25zdCBib3VuZEdldEFsbCA9IG5kay5jYWNoZUFkYXB0ZXIuZ2V0QWxsTnV0emFwU3RhdGVzLmJpbmQobmRrLmNhY2hlQWRhcHRlcik7XG4gICAgICBjb25zdCBib3VuZFNldFN0YXRlID0gbmRrLmNhY2hlQWRhcHRlci5zZXROdXR6YXBTdGF0ZS5iaW5kKG5kay5jYWNoZUFkYXB0ZXIpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0QWxsTnV0emFwczogYm91bmRHZXRBbGwsXG4gICAgICAgIHNldE51dHphcFN0YXRlOiBib3VuZFNldFN0YXRlXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9LCBbbmRrPy5jYWNoZUFkYXB0ZXJdKTtcbiAgdXNlRWZmZWN0OCgoKSA9PiB7XG4gICAgaWYgKCFuZGsgfHwgIWN1cnJlbnRVc2VyPy5wdWJrZXkgfHwgIWFjdGl2ZVdhbGxldCkge1xuICAgICAgaWYgKG51dHphcE1vbml0b3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJTdG9wcGluZyBOREtOdXR6YXBNb25pdG9yIGR1ZSB0byBtaXNzaW5nIGRlcGVuZGVuY2llc1wiKTtcbiAgICAgICAgbnV0emFwTW9uaXRvci5zdG9wKCk7XG4gICAgICAgIHNldE51dHphcE1vbml0b3IobnVsbCk7XG4gICAgICAgIHNldE1vbml0b3JTdGFydGVkKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFudXR6YXBNb25pdG9yICYmIHN0YXJ0KSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkluaXRpYWxpemluZyBOREtOdXR6YXBNb25pdG9yXCIpO1xuICAgICAgY29uc3QgbW9uaXRvciA9IG5ldyBOREtOdXR6YXBNb25pdG9yKG5kaywgY3VycmVudFVzZXIsIHtcbiAgICAgICAgbWludExpc3QsXG4gICAgICAgIHN0b3JlOiBtb25pdG9yU3RvcmVcbiAgICAgIH0pO1xuICAgICAgbW9uaXRvci53YWxsZXQgPSBhY3RpdmVXYWxsZXQ7XG4gICAgICBzZXROdXR6YXBNb25pdG9yKG1vbml0b3IpO1xuICAgIH0gZWxzZSBpZiAobnV0emFwTW9uaXRvcikge1xuICAgICAgaWYgKG51dHphcE1vbml0b3Iud2FsbGV0Py53YWxsZXRJZCAhPT0gYWN0aXZlV2FsbGV0LndhbGxldElkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgd2FsbGV0IGluIE5ES051dHphcE1vbml0b3JcIik7XG4gICAgICAgIG51dHphcE1vbml0b3Iud2FsbGV0ID0gYWN0aXZlV2FsbGV0O1xuICAgICAgfVxuICAgICAgaWYgKG51dHphcE1vbml0b3IubWludExpc3QgIT09IG1pbnRMaXN0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgbWludExpc3QgaW4gTkRLTnV0emFwTW9uaXRvclwiKTtcbiAgICAgICAgbnV0emFwTW9uaXRvci5taW50TGlzdCA9IG1pbnRMaXN0O1xuICAgICAgfVxuICAgIH1cbiAgfSwgW25kaywgY3VycmVudFVzZXIsIGFjdGl2ZVdhbGxldCwgbWludExpc3QsIG1vbml0b3JTdG9yZSwgbnV0emFwTW9uaXRvciwgc2V0TnV0emFwTW9uaXRvciwgc3RhcnRdKTtcbiAgdXNlRWZmZWN0OCgoKSA9PiB7XG4gICAgaWYgKHN0YXJ0ICYmIG51dHphcE1vbml0b3IgJiYgIW1vbml0b3JTdGFydGVkKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0aW5nIE5ES051dHphcE1vbml0b3JcIik7XG4gICAgICBudXR6YXBNb25pdG9yLnN0YXJ0KHtcbiAgICAgICAgZmlsdGVyOiB7IGxpbWl0OiAxMDAgfSxcbiAgICAgICAgb3B0czogeyBza2lwVmVyaWZpY2F0aW9uOiB0cnVlIH1cbiAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICBzZXRNb25pdG9yU3RhcnRlZCh0cnVlKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJOREtOdXR6YXBNb25pdG9yIHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHN0YXJ0IE5ES051dHphcE1vbml0b3JcIiwgZXJyKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIXN0YXJ0ICYmIG51dHphcE1vbml0b3IgJiYgbW9uaXRvclN0YXJ0ZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiU3RvcHBpbmcgTkRLTnV0emFwTW9uaXRvclwiKTtcbiAgICAgIG51dHphcE1vbml0b3Iuc3RvcCgpO1xuICAgICAgc2V0TW9uaXRvclN0YXJ0ZWQoZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKG51dHphcE1vbml0b3IgJiYgbW9uaXRvclN0YXJ0ZWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJTdG9wcGluZyBOREtOdXR6YXBNb25pdG9yIG9uIGNsZWFudXBcIik7XG4gICAgICAgIG51dHphcE1vbml0b3Iuc3RvcCgpO1xuICAgICAgICBzZXRNb25pdG9yU3RhcnRlZChmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW3N0YXJ0LCBudXR6YXBNb25pdG9yLCBtb25pdG9yU3RhcnRlZF0pO1xuICByZXR1cm4geyBudXR6YXBNb25pdG9yIH07XG59O1xuXG4vLyBzcmMvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJAbm9zdHItZGV2LWtpdC9uZGtcIjtcbmltcG9ydCBOREsgZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xudmFyIGluZGV4X2RlZmF1bHQgPSBOREs7XG5leHBvcnQge1xuICBFTVBUWV9NVVRFX0NSSVRFUklBLFxuICBOREtTZXNzaW9uTG9jYWxTdG9yYWdlLFxuICBhZGRPclVwZGF0ZVN0b3JlZFNlc3Npb24sXG4gIGNsZWFyQWN0aXZlUHVia2V5LFxuICBjcmVhdGVTdWJzY3JpYmVTdG9yZSxcbiAgaW5kZXhfZGVmYXVsdCBhcyBkZWZhdWx0LFxuICBnZXRBY3RpdmVQdWJrZXksXG4gIGxvYWRTZXNzaW9uc0Zyb21TdG9yYWdlLFxuICByZW1vdmVTdG9yZWRTZXNzaW9uLFxuICBzYXZlU2Vzc2lvbnNUb1N0b3JhZ2UsXG4gIHN0b3JlQWN0aXZlUHVia2V5LFxuICB1c2VBY3RpdmVNdXRlQ3JpdGVyaWEsXG4gIHVzZUF2YWlsYWJsZVNlc3Npb25zLFxuICB1c2VDdXJyZW50VXNlclByb2ZpbGUsXG4gIHVzZUV2ZW50LFxuICB1c2VGb2xsb3dzLFxuICB1c2VJc0l0ZW1NdXRlZCxcbiAgdXNlTXV0ZUNyaXRlcmlhLFxuICB1c2VNdXRlRmlsdGVyLFxuICB1c2VNdXRlSXRlbSxcbiAgdXNlTkRLLFxuICB1c2VOREtDdXJyZW50UHVia2V5LFxuICB1c2VOREtDdXJyZW50VXNlcixcbiAgdXNlTkRLSW5pdCxcbiAgdXNlTkRLTnV0emFwTW9uaXRvcixcbiAgdXNlTkRLU2Vzc2lvbkV2ZW50LFxuICB1c2VOREtTZXNzaW9uTG9naW4sXG4gIHVzZU5ES1Nlc3Npb25Mb2dvdXQsXG4gIHVzZU5ES1Nlc3Npb25Nb25pdG9yLFxuICB1c2VOREtTZXNzaW9uU2Vzc2lvbnMsXG4gIHVzZU5ES1Nlc3Npb25TaWduZXJzLFxuICB1c2VOREtTZXNzaW9uU3RhcnQsXG4gIHVzZU5ES1Nlc3Npb25TdG9wLFxuICB1c2VOREtTZXNzaW9uU3dpdGNoLFxuICB1c2VOREtTdG9yZSxcbiAgdXNlTkRLVW5wdWJsaXNoZWRFdmVudHMsXG4gIHVzZU5ES1dhbGxldCxcbiAgdXNlT2JzZXJ2ZXIsXG4gIHVzZVByb2ZpbGUsXG4gIHVzZVByb2ZpbGVWYWx1ZSxcbiAgdXNlUHVibGlzaE11dGVMaXN0LFxuICB1c2VTZXRQcm9maWxlLFxuICB1c2VTdWJzY3JpYmUsXG4gIHVzZVVubXV0ZUl0ZW0sXG4gIHVzZVVzZXJQcm9maWxlc1N0b3JlXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-hooks/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-hooks/node_modules/@nostr-dev-kit/ndk/dist/index.mjs":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-hooks/node_modules/@nostr-dev-kit/ndk/dist/index.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BECH32_REGEX: () => (/* binding */ BECH32_REGEX),\n/* harmony export */   NDKAppHandlerEvent: () => (/* binding */ NDKAppHandlerEvent),\n/* harmony export */   NDKAppSettings: () => (/* binding */ NDKAppSettings),\n/* harmony export */   NDKArticle: () => (/* binding */ NDKArticle),\n/* harmony export */   NDKCashuMintList: () => (/* binding */ NDKCashuMintList),\n/* harmony export */   NDKCashuToken: () => (/* binding */ NDKCashuToken),\n/* harmony export */   NDKCashuWalletTx: () => (/* binding */ NDKCashuWalletTx),\n/* harmony export */   NDKClassified: () => (/* binding */ NDKClassified),\n/* harmony export */   NDKDVMJobFeedback: () => (/* binding */ NDKDVMJobFeedback),\n/* harmony export */   NDKDVMJobResult: () => (/* binding */ NDKDVMJobResult),\n/* harmony export */   NDKDVMRequest: () => (/* binding */ NDKDVMRequest),\n/* harmony export */   NDKDraft: () => (/* binding */ NDKDraft),\n/* harmony export */   NDKDvmJobFeedbackStatus: () => (/* binding */ NDKDvmJobFeedbackStatus),\n/* harmony export */   NDKEvent: () => (/* binding */ NDKEvent),\n/* harmony export */   NDKHighlight: () => (/* binding */ NDKHighlight),\n/* harmony export */   NDKImage: () => (/* binding */ NDKImage),\n/* harmony export */   NDKKind: () => (/* binding */ NDKKind),\n/* harmony export */   NDKList: () => (/* binding */ NDKList),\n/* harmony export */   NDKListKinds: () => (/* binding */ NDKListKinds),\n/* harmony export */   NDKNip07Signer: () => (/* binding */ NDKNip07Signer),\n/* harmony export */   NDKNip46Backend: () => (/* binding */ NDKNip46Backend),\n/* harmony export */   NDKNip46Signer: () => (/* binding */ NDKNip46Signer),\n/* harmony export */   NDKNostrRpc: () => (/* binding */ NDKNostrRpc),\n/* harmony export */   NDKNutzap: () => (/* binding */ NDKNutzap),\n/* harmony export */   NDKPool: () => (/* binding */ NDKPool),\n/* harmony export */   NDKPrivateKeySigner: () => (/* binding */ NDKPrivateKeySigner),\n/* harmony export */   NDKPublishError: () => (/* binding */ NDKPublishError),\n/* harmony export */   NDKRelay: () => (/* binding */ NDKRelay),\n/* harmony export */   NDKRelayAuthPolicies: () => (/* binding */ NDKRelayAuthPolicies),\n/* harmony export */   NDKRelayList: () => (/* binding */ NDKRelayList),\n/* harmony export */   NDKRelaySet: () => (/* binding */ NDKRelaySet),\n/* harmony export */   NDKRelayStatus: () => (/* binding */ NDKRelayStatus),\n/* harmony export */   NDKRepost: () => (/* binding */ NDKRepost),\n/* harmony export */   NDKSimpleGroup: () => (/* binding */ NDKSimpleGroup),\n/* harmony export */   NDKSimpleGroupMemberList: () => (/* binding */ NDKSimpleGroupMemberList),\n/* harmony export */   NDKSimpleGroupMetadata: () => (/* binding */ NDKSimpleGroupMetadata),\n/* harmony export */   NDKStory: () => (/* binding */ NDKStory),\n/* harmony export */   NDKStorySticker: () => (/* binding */ NDKStorySticker),\n/* harmony export */   NDKStoryStickerType: () => (/* binding */ NDKStoryStickerType),\n/* harmony export */   NDKSubscription: () => (/* binding */ NDKSubscription),\n/* harmony export */   NDKSubscriptionCacheUsage: () => (/* binding */ NDKSubscriptionCacheUsage),\n/* harmony export */   NDKSubscriptionReceipt: () => (/* binding */ NDKSubscriptionReceipt),\n/* harmony export */   NDKSubscriptionStart: () => (/* binding */ NDKSubscriptionStart),\n/* harmony export */   NDKSubscriptionTier: () => (/* binding */ NDKSubscriptionTier),\n/* harmony export */   NDKTranscriptionDVM: () => (/* binding */ NDKTranscriptionDVM),\n/* harmony export */   NDKUser: () => (/* binding */ NDKUser),\n/* harmony export */   NDKVideo: () => (/* binding */ NDKVideo),\n/* harmony export */   NDKWiki: () => (/* binding */ NDKWiki),\n/* harmony export */   NDKWikiMergeRequest: () => (/* binding */ NDKWikiMergeRequest),\n/* harmony export */   NDKZapper: () => (/* binding */ NDKZapper),\n/* harmony export */   NIP33_A_REGEX: () => (/* binding */ NIP33_A_REGEX),\n/* harmony export */   NdkNutzapStatus: () => (/* binding */ NdkNutzapStatus),\n/* harmony export */   calculateRelaySetFromEvent: () => (/* binding */ calculateRelaySetFromEvent),\n/* harmony export */   calculateTermDurationInSeconds: () => (/* binding */ calculateTermDurationInSeconds),\n/* harmony export */   cashuPubkeyToNostrPubkey: () => (/* binding */ cashuPubkeyToNostrPubkey),\n/* harmony export */   compareFilter: () => (/* binding */ compareFilter),\n/* harmony export */   \"default\": () => (/* binding */ NDK),\n/* harmony export */   defaultOpts: () => (/* binding */ defaultOpts),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   dvmSchedule: () => (/* binding */ dvmSchedule),\n/* harmony export */   eventHasETagMarkers: () => (/* binding */ eventHasETagMarkers),\n/* harmony export */   eventIsPartOfThread: () => (/* binding */ eventIsPartOfThread),\n/* harmony export */   eventIsReply: () => (/* binding */ eventIsReply),\n/* harmony export */   eventReplies: () => (/* binding */ eventReplies),\n/* harmony export */   eventThreadIds: () => (/* binding */ eventThreadIds),\n/* harmony export */   eventThreads: () => (/* binding */ eventThreads),\n/* harmony export */   eventsBySameAuthor: () => (/* binding */ eventsBySameAuthor),\n/* harmony export */   filterAndRelaySetFromBech32: () => (/* binding */ filterAndRelaySetFromBech32),\n/* harmony export */   filterFingerprint: () => (/* binding */ filterFingerprint),\n/* harmony export */   filterForEventsTaggingId: () => (/* binding */ filterForEventsTaggingId),\n/* harmony export */   filterFromId: () => (/* binding */ filterFromId),\n/* harmony export */   generateContentTags: () => (/* binding */ generateContentTags),\n/* harmony export */   generateHashtags: () => (/* binding */ generateHashtags),\n/* harmony export */   generateSubId: () => (/* binding */ generateSubId),\n/* harmony export */   generateZapRequest: () => (/* binding */ generateZapRequest),\n/* harmony export */   getEventReplyId: () => (/* binding */ getEventReplyId),\n/* harmony export */   getNip57ZapSpecFromLud: () => (/* binding */ getNip57ZapSpecFromLud),\n/* harmony export */   getRelayListForUser: () => (/* binding */ getRelayListForUser),\n/* harmony export */   getRelayListForUsers: () => (/* binding */ getRelayListForUsers),\n/* harmony export */   getReplyTag: () => (/* binding */ getReplyTag),\n/* harmony export */   getRootEventId: () => (/* binding */ getRootEventId),\n/* harmony export */   getRootTag: () => (/* binding */ getRootTag),\n/* harmony export */   giftUnwrap: () => (/* binding */ giftUnwrap),\n/* harmony export */   giftWrap: () => (/* binding */ giftWrap),\n/* harmony export */   imetaTagToTag: () => (/* binding */ imetaTagToTag),\n/* harmony export */   isEventOriginalPost: () => (/* binding */ isEventOriginalPost),\n/* harmony export */   isNip33AValue: () => (/* binding */ isNip33AValue),\n/* harmony export */   mapImetaTag: () => (/* binding */ mapImetaTag),\n/* harmony export */   matchFilter: () => (/* binding */ matchFilter),\n/* harmony export */   mergeFilters: () => (/* binding */ mergeFilters),\n/* harmony export */   mergeTags: () => (/* binding */ mergeTags),\n/* harmony export */   ndkSignerFromPayload: () => (/* binding */ ndkSignerFromPayload),\n/* harmony export */   newAmount: () => (/* binding */ newAmount),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeRelayUrl: () => (/* binding */ normalizeRelayUrl),\n/* harmony export */   normalizeUrl: () => (/* binding */ normalizeUrl),\n/* harmony export */   parseTagToSubscriptionAmount: () => (/* binding */ parseTagToSubscriptionAmount),\n/* harmony export */   pinEvent: () => (/* binding */ pinEvent),\n/* harmony export */   possibleIntervalFrequencies: () => (/* binding */ possibleIntervalFrequencies),\n/* harmony export */   profileFromEvent: () => (/* binding */ profileFromEvent),\n/* harmony export */   proofP2pk: () => (/* binding */ proofP2pk),\n/* harmony export */   proofP2pkNostr: () => (/* binding */ proofP2pkNostr),\n/* harmony export */   proofsTotalBalance: () => (/* binding */ proofsTotalBalance),\n/* harmony export */   queryFullyFilled: () => (/* binding */ queryFullyFilled),\n/* harmony export */   relayListFromKind3: () => (/* binding */ relayListFromKind3),\n/* harmony export */   relaysFromBech32: () => (/* binding */ relaysFromBech32),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serializeProfile: () => (/* binding */ serializeProfile),\n/* harmony export */   signerRegistry: () => (/* binding */ signerRegistry),\n/* harmony export */   strToDimension: () => (/* binding */ strToDimension),\n/* harmony export */   strToPosition: () => (/* binding */ strToPosition),\n/* harmony export */   tryNormalizeRelayUrl: () => (/* binding */ tryNormalizeRelayUrl),\n/* harmony export */   uniqueTag: () => (/* binding */ uniqueTag),\n/* harmony export */   wrapEvent: () => (/* binding */ wrapEvent),\n/* harmony export */   zapInvoiceFromEvent: () => (/* binding */ zapInvoiceFromEvent)\n/* harmony export */ });\n/* harmony import */ var tseep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tseep */ \"(ssr)/./node_modules/tseep/lib/index.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! nostr-tools */ \"(ssr)/./node_modules/.pnpm/nostr-tools@2.14.2_typescript@5.8.3/node_modules/nostr-tools/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! typescript-lru-cache */ \"(ssr)/./node_modules/typescript-lru-cache/dist/index.js\");\n/* harmony import */ var light_bolt11_decoder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! light-bolt11-decoder */ \"(ssr)/./node_modules/light-bolt11-decoder/bolt11.js\");\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@scure/base/lib/esm/index.js\");\n// src/types.ts\nvar NdkNutzapStatus = /* @__PURE__ */ ((NdkNutzapStatus2) => {\n  NdkNutzapStatus2[\"INITIAL\"] = \"initial\";\n  NdkNutzapStatus2[\"PROCESSING\"] = \"processing\";\n  NdkNutzapStatus2[\"REDEEMED\"] = \"redeemed\";\n  NdkNutzapStatus2[\"SPENT\"] = \"spent\";\n  NdkNutzapStatus2[\"MISSING_PRIVKEY\"] = \"missing_privkey\";\n  NdkNutzapStatus2[\"TEMPORARY_ERROR\"] = \"temporary_error\";\n  NdkNutzapStatus2[\"PERMANENT_ERROR\"] = \"permanent_error\";\n  NdkNutzapStatus2[\"INVALID_NUTZAP\"] = \"invalid_nutzap\";\n  return NdkNutzapStatus2;\n})(NdkNutzapStatus || {});\n\n// src/events/kinds/index.ts\nvar NDKKind = /* @__PURE__ */ ((NDKKind2) => {\n  NDKKind2[NDKKind2[\"Metadata\"] = 0] = \"Metadata\";\n  NDKKind2[NDKKind2[\"Text\"] = 1] = \"Text\";\n  NDKKind2[NDKKind2[\"RecommendRelay\"] = 2] = \"RecommendRelay\";\n  NDKKind2[NDKKind2[\"Contacts\"] = 3] = \"Contacts\";\n  NDKKind2[NDKKind2[\"EncryptedDirectMessage\"] = 4] = \"EncryptedDirectMessage\";\n  NDKKind2[NDKKind2[\"EventDeletion\"] = 5] = \"EventDeletion\";\n  NDKKind2[NDKKind2[\"Repost\"] = 6] = \"Repost\";\n  NDKKind2[NDKKind2[\"Reaction\"] = 7] = \"Reaction\";\n  NDKKind2[NDKKind2[\"BadgeAward\"] = 8] = \"BadgeAward\";\n  NDKKind2[NDKKind2[\"GroupChat\"] = 9] = \"GroupChat\";\n  NDKKind2[NDKKind2[\"GroupNote\"] = 11] = \"GroupNote\";\n  NDKKind2[NDKKind2[\"GroupReply\"] = 12] = \"GroupReply\";\n  NDKKind2[NDKKind2[\"GiftWrapSeal\"] = 13] = \"GiftWrapSeal\";\n  NDKKind2[NDKKind2[\"PrivateDirectMessage\"] = 14] = \"PrivateDirectMessage\";\n  NDKKind2[NDKKind2[\"Image\"] = 20] = \"Image\";\n  NDKKind2[NDKKind2[\"Video\"] = 21] = \"Video\";\n  NDKKind2[NDKKind2[\"ShortVideo\"] = 22] = \"ShortVideo\";\n  NDKKind2[NDKKind2[\"Story\"] = 23] = \"Story\";\n  NDKKind2[NDKKind2[\"Vanish\"] = 62] = \"Vanish\";\n  NDKKind2[NDKKind2[\"CashuWalletBackup\"] = 375] = \"CashuWalletBackup\";\n  NDKKind2[NDKKind2[\"GiftWrap\"] = 1059] = \"GiftWrap\";\n  NDKKind2[NDKKind2[\"GenericRepost\"] = 16] = \"GenericRepost\";\n  NDKKind2[NDKKind2[\"ChannelCreation\"] = 40] = \"ChannelCreation\";\n  NDKKind2[NDKKind2[\"ChannelMetadata\"] = 41] = \"ChannelMetadata\";\n  NDKKind2[NDKKind2[\"ChannelMessage\"] = 42] = \"ChannelMessage\";\n  NDKKind2[NDKKind2[\"ChannelHideMessage\"] = 43] = \"ChannelHideMessage\";\n  NDKKind2[NDKKind2[\"ChannelMuteUser\"] = 44] = \"ChannelMuteUser\";\n  NDKKind2[NDKKind2[\"WikiMergeRequest\"] = 818] = \"WikiMergeRequest\";\n  NDKKind2[NDKKind2[\"GenericReply\"] = 1111] = \"GenericReply\";\n  NDKKind2[NDKKind2[\"Media\"] = 1063] = \"Media\";\n  NDKKind2[NDKKind2[\"Report\"] = 1984] = \"Report\";\n  NDKKind2[NDKKind2[\"Label\"] = 1985] = \"Label\";\n  NDKKind2[NDKKind2[\"DVMReqTextExtraction\"] = 5e3] = \"DVMReqTextExtraction\";\n  NDKKind2[NDKKind2[\"DVMReqTextSummarization\"] = 5001] = \"DVMReqTextSummarization\";\n  NDKKind2[NDKKind2[\"DVMReqTextTranslation\"] = 5002] = \"DVMReqTextTranslation\";\n  NDKKind2[NDKKind2[\"DVMReqTextGeneration\"] = 5050] = \"DVMReqTextGeneration\";\n  NDKKind2[NDKKind2[\"DVMReqImageGeneration\"] = 5100] = \"DVMReqImageGeneration\";\n  NDKKind2[NDKKind2[\"DVMReqTextToSpeech\"] = 5250] = \"DVMReqTextToSpeech\";\n  NDKKind2[NDKKind2[\"DVMReqDiscoveryNostrContent\"] = 5300] = \"DVMReqDiscoveryNostrContent\";\n  NDKKind2[NDKKind2[\"DVMReqDiscoveryNostrPeople\"] = 5301] = \"DVMReqDiscoveryNostrPeople\";\n  NDKKind2[NDKKind2[\"DVMReqTimestamping\"] = 5900] = \"DVMReqTimestamping\";\n  NDKKind2[NDKKind2[\"DVMEventSchedule\"] = 5905] = \"DVMEventSchedule\";\n  NDKKind2[NDKKind2[\"DVMJobFeedback\"] = 7e3] = \"DVMJobFeedback\";\n  NDKKind2[NDKKind2[\"Subscribe\"] = 7001] = \"Subscribe\";\n  NDKKind2[NDKKind2[\"Unsubscribe\"] = 7002] = \"Unsubscribe\";\n  NDKKind2[NDKKind2[\"SubscriptionReceipt\"] = 7003] = \"SubscriptionReceipt\";\n  NDKKind2[NDKKind2[\"CashuReserve\"] = 7373] = \"CashuReserve\";\n  NDKKind2[NDKKind2[\"CashuQuote\"] = 7374] = \"CashuQuote\";\n  NDKKind2[NDKKind2[\"CashuToken\"] = 7375] = \"CashuToken\";\n  NDKKind2[NDKKind2[\"CashuWalletTx\"] = 7376] = \"CashuWalletTx\";\n  NDKKind2[NDKKind2[\"GroupAdminAddUser\"] = 9e3] = \"GroupAdminAddUser\";\n  NDKKind2[NDKKind2[\"GroupAdminRemoveUser\"] = 9001] = \"GroupAdminRemoveUser\";\n  NDKKind2[NDKKind2[\"GroupAdminEditMetadata\"] = 9002] = \"GroupAdminEditMetadata\";\n  NDKKind2[NDKKind2[\"GroupAdminEditStatus\"] = 9006] = \"GroupAdminEditStatus\";\n  NDKKind2[NDKKind2[\"GroupAdminCreateGroup\"] = 9007] = \"GroupAdminCreateGroup\";\n  NDKKind2[NDKKind2[\"GroupAdminRequestJoin\"] = 9021] = \"GroupAdminRequestJoin\";\n  NDKKind2[NDKKind2[\"MuteList\"] = 1e4] = \"MuteList\";\n  NDKKind2[NDKKind2[\"PinList\"] = 10001] = \"PinList\";\n  NDKKind2[NDKKind2[\"RelayList\"] = 10002] = \"RelayList\";\n  NDKKind2[NDKKind2[\"BookmarkList\"] = 10003] = \"BookmarkList\";\n  NDKKind2[NDKKind2[\"CommunityList\"] = 10004] = \"CommunityList\";\n  NDKKind2[NDKKind2[\"PublicChatList\"] = 10005] = \"PublicChatList\";\n  NDKKind2[NDKKind2[\"BlockRelayList\"] = 10006] = \"BlockRelayList\";\n  NDKKind2[NDKKind2[\"SearchRelayList\"] = 10007] = \"SearchRelayList\";\n  NDKKind2[NDKKind2[\"SimpleGroupList\"] = 10009] = \"SimpleGroupList\";\n  NDKKind2[NDKKind2[\"InterestList\"] = 10015] = \"InterestList\";\n  NDKKind2[NDKKind2[\"CashuMintList\"] = 10019] = \"CashuMintList\";\n  NDKKind2[NDKKind2[\"EmojiList\"] = 10030] = \"EmojiList\";\n  NDKKind2[NDKKind2[\"DirectMessageReceiveRelayList\"] = 10050] = \"DirectMessageReceiveRelayList\";\n  NDKKind2[NDKKind2[\"BlossomList\"] = 10063] = \"BlossomList\";\n  NDKKind2[NDKKind2[\"NostrWaletConnectInfo\"] = 13194] = \"NostrWaletConnectInfo\";\n  NDKKind2[NDKKind2[\"TierList\"] = 17e3] = \"TierList\";\n  NDKKind2[NDKKind2[\"CashuWallet\"] = 17375] = \"CashuWallet\";\n  NDKKind2[NDKKind2[\"FollowSet\"] = 3e4] = \"FollowSet\";\n  NDKKind2[NDKKind2[\"CategorizedPeopleList\"] = 3e4 /* FollowSet */] = \"CategorizedPeopleList\";\n  NDKKind2[NDKKind2[\"CategorizedBookmarkList\"] = 30001] = \"CategorizedBookmarkList\";\n  NDKKind2[NDKKind2[\"RelaySet\"] = 30002] = \"RelaySet\";\n  NDKKind2[NDKKind2[\"CategorizedRelayList\"] = 30002 /* RelaySet */] = \"CategorizedRelayList\";\n  NDKKind2[NDKKind2[\"BookmarkSet\"] = 30003] = \"BookmarkSet\";\n  NDKKind2[NDKKind2[\"CurationSet\"] = 30004] = \"CurationSet\";\n  NDKKind2[NDKKind2[\"ArticleCurationSet\"] = 30004] = \"ArticleCurationSet\";\n  NDKKind2[NDKKind2[\"VideoCurationSet\"] = 30005] = \"VideoCurationSet\";\n  NDKKind2[NDKKind2[\"ImageCurationSet\"] = 30006] = \"ImageCurationSet\";\n  NDKKind2[NDKKind2[\"InterestSet\"] = 30015] = \"InterestSet\";\n  NDKKind2[NDKKind2[\"InterestsList\"] = 30015 /* InterestSet */] = \"InterestsList\";\n  NDKKind2[NDKKind2[\"EmojiSet\"] = 30030] = \"EmojiSet\";\n  NDKKind2[NDKKind2[\"ModularArticle\"] = 30040] = \"ModularArticle\";\n  NDKKind2[NDKKind2[\"ModularArticleItem\"] = 30041] = \"ModularArticleItem\";\n  NDKKind2[NDKKind2[\"Wiki\"] = 30818] = \"Wiki\";\n  NDKKind2[NDKKind2[\"Draft\"] = 31234] = \"Draft\";\n  NDKKind2[NDKKind2[\"SubscriptionTier\"] = 37001] = \"SubscriptionTier\";\n  NDKKind2[NDKKind2[\"EcashMintRecommendation\"] = 38e3] = \"EcashMintRecommendation\";\n  NDKKind2[NDKKind2[\"HighlightSet\"] = 39802] = \"HighlightSet\";\n  NDKKind2[NDKKind2[\"CategorizedHighlightList\"] = 39802 /* HighlightSet */] = \"CategorizedHighlightList\";\n  NDKKind2[NDKKind2[\"Nutzap\"] = 9321] = \"Nutzap\";\n  NDKKind2[NDKKind2[\"ZapRequest\"] = 9734] = \"ZapRequest\";\n  NDKKind2[NDKKind2[\"Zap\"] = 9735] = \"Zap\";\n  NDKKind2[NDKKind2[\"Highlight\"] = 9802] = \"Highlight\";\n  NDKKind2[NDKKind2[\"ClientAuth\"] = 22242] = \"ClientAuth\";\n  NDKKind2[NDKKind2[\"NostrWalletConnectReq\"] = 23194] = \"NostrWalletConnectReq\";\n  NDKKind2[NDKKind2[\"NostrWalletConnectRes\"] = 23195] = \"NostrWalletConnectRes\";\n  NDKKind2[NDKKind2[\"NostrConnect\"] = 24133] = \"NostrConnect\";\n  NDKKind2[NDKKind2[\"BlossomUpload\"] = 24242] = \"BlossomUpload\";\n  NDKKind2[NDKKind2[\"HttpAuth\"] = 27235] = \"HttpAuth\";\n  NDKKind2[NDKKind2[\"ProfileBadge\"] = 30008] = \"ProfileBadge\";\n  NDKKind2[NDKKind2[\"BadgeDefinition\"] = 30009] = \"BadgeDefinition\";\n  NDKKind2[NDKKind2[\"MarketStall\"] = 30017] = \"MarketStall\";\n  NDKKind2[NDKKind2[\"MarketProduct\"] = 30018] = \"MarketProduct\";\n  NDKKind2[NDKKind2[\"Article\"] = 30023] = \"Article\";\n  NDKKind2[NDKKind2[\"AppSpecificData\"] = 30078] = \"AppSpecificData\";\n  NDKKind2[NDKKind2[\"Classified\"] = 30402] = \"Classified\";\n  NDKKind2[NDKKind2[\"HorizontalVideo\"] = 34235] = \"HorizontalVideo\";\n  NDKKind2[NDKKind2[\"VerticalVideo\"] = 34236] = \"VerticalVideo\";\n  NDKKind2[NDKKind2[\"LegacyCashuWallet\"] = 37375] = \"LegacyCashuWallet\";\n  NDKKind2[NDKKind2[\"GroupMetadata\"] = 39e3] = \"GroupMetadata\";\n  NDKKind2[NDKKind2[\"GroupAdmins\"] = 39001] = \"GroupAdmins\";\n  NDKKind2[NDKKind2[\"GroupMembers\"] = 39002] = \"GroupMembers\";\n  NDKKind2[NDKKind2[\"AppRecommendation\"] = 31989] = \"AppRecommendation\";\n  NDKKind2[NDKKind2[\"AppHandler\"] = 31990] = \"AppHandler\";\n  return NDKKind2;\n})(NDKKind || {});\nvar NDKListKinds = [\n  1e4 /* MuteList */,\n  10001 /* PinList */,\n  10002 /* RelayList */,\n  10003 /* BookmarkList */,\n  10004 /* CommunityList */,\n  10005 /* PublicChatList */,\n  10006 /* BlockRelayList */,\n  10007 /* SearchRelayList */,\n  10015 /* InterestList */,\n  10030 /* EmojiList */,\n  10050 /* DirectMessageReceiveRelayList */,\n  3e4 /* FollowSet */,\n  30003 /* BookmarkSet */,\n  30001 /* CategorizedBookmarkList */,\n  // Backwards compatibility\n  30002 /* RelaySet */,\n  30004 /* ArticleCurationSet */,\n  30005 /* VideoCurationSet */,\n  30015 /* InterestSet */,\n  30030 /* EmojiSet */,\n  39802 /* HighlightSet */\n];\n\n// src/events/index.ts\n\n\n// src/relay/sets/calculate.ts\n\n\n// src/outbox/write.ts\nfunction getRelaysForSync(ndk, author, type = \"write\") {\n  if (!ndk.outboxTracker) return void 0;\n  const item = ndk.outboxTracker.data.get(author);\n  if (!item) return void 0;\n  if (type === \"write\") {\n    return item.writeRelays;\n  }\n  return item.readRelays;\n}\nasync function getWriteRelaysFor(ndk, author, type = \"write\") {\n  if (!ndk.outboxTracker) return void 0;\n  if (!ndk.outboxTracker.data.has(author)) {\n    await ndk.outboxTracker.trackUsers([author]);\n  }\n  return getRelaysForSync(ndk, author, type);\n}\n\n// src/outbox/relay-ranking.ts\nfunction getTopRelaysForAuthors(ndk, authors) {\n  const relaysWithCount = /* @__PURE__ */ new Map();\n  authors.forEach((author) => {\n    const writeRelays = getRelaysForSync(ndk, author);\n    if (writeRelays) {\n      writeRelays.forEach((relay) => {\n        const count = relaysWithCount.get(relay) || 0;\n        relaysWithCount.set(relay, count + 1);\n      });\n    }\n  });\n  const sortedRelays = Array.from(relaysWithCount.entries()).sort((a, b) => b[1] - a[1]);\n  return sortedRelays.map((entry) => entry[0]);\n}\n\n// src/outbox/index.ts\nfunction getAllRelaysForAllPubkeys(ndk, pubkeys, type = \"read\") {\n  const pubkeysToRelays = /* @__PURE__ */ new Map();\n  const authorsMissingRelays = /* @__PURE__ */ new Set();\n  pubkeys.forEach((pubkey) => {\n    const relays = getRelaysForSync(ndk, pubkey, type);\n    if (relays && relays.size > 0) {\n      relays.forEach((relay) => {\n        const pubkeysInRelay = pubkeysToRelays.get(relay) || /* @__PURE__ */ new Set();\n        pubkeysInRelay.add(pubkey);\n      });\n      pubkeysToRelays.set(pubkey, relays);\n    } else {\n      authorsMissingRelays.add(pubkey);\n    }\n  });\n  return { pubkeysToRelays, authorsMissingRelays };\n}\nfunction chooseRelayCombinationForPubkeys(ndk, pubkeys, type, { count, preferredRelays } = {}) {\n  count ??= 2;\n  preferredRelays ??= /* @__PURE__ */ new Set();\n  const pool = ndk.pool;\n  const connectedRelays = pool.connectedRelays();\n  connectedRelays.forEach((relay) => {\n    preferredRelays?.add(relay.url);\n  });\n  const relayToAuthorsMap = /* @__PURE__ */ new Map();\n  const { pubkeysToRelays, authorsMissingRelays } = getAllRelaysForAllPubkeys(ndk, pubkeys, type);\n  const sortedRelays = getTopRelaysForAuthors(ndk, pubkeys);\n  const addAuthorToRelay = (author, relay) => {\n    const authorsInRelay = relayToAuthorsMap.get(relay) || [];\n    authorsInRelay.push(author);\n    relayToAuthorsMap.set(relay, authorsInRelay);\n  };\n  for (const [author, authorRelays] of pubkeysToRelays.entries()) {\n    let missingRelayCount = count;\n    for (const relay of connectedRelays) {\n      if (authorRelays.has(relay.url)) {\n        addAuthorToRelay(author, relay.url);\n        missingRelayCount--;\n      }\n    }\n    for (const authorRelay of authorRelays) {\n      if (relayToAuthorsMap.has(authorRelay)) {\n        addAuthorToRelay(author, authorRelay);\n        missingRelayCount--;\n      }\n    }\n    if (missingRelayCount <= 0) continue;\n    for (const relay of sortedRelays) {\n      if (missingRelayCount <= 0) break;\n      if (authorRelays.has(relay)) {\n        addAuthorToRelay(author, relay);\n        missingRelayCount--;\n      }\n    }\n  }\n  for (const author of authorsMissingRelays) {\n    pool.permanentAndConnectedRelays().forEach((relay) => {\n      const authorsInRelay = relayToAuthorsMap.get(relay.url) || [];\n      authorsInRelay.push(author);\n      relayToAuthorsMap.set(relay.url, authorsInRelay);\n    });\n  }\n  return relayToAuthorsMap;\n}\n\n// src/outbox/read/with-authors.ts\nfunction getRelaysForFilterWithAuthors(ndk, authors, relayGoalPerAuthor = 2) {\n  return chooseRelayCombinationForPubkeys(ndk, authors, \"write\", { count: relayGoalPerAuthor });\n}\n\n// src/utils/normalize-url.ts\nfunction tryNormalizeRelayUrl(url) {\n  try {\n    return normalizeRelayUrl(url);\n  } catch {\n    return void 0;\n  }\n}\nfunction normalizeRelayUrl(url) {\n  let r = normalizeUrl(url, {\n    stripAuthentication: false,\n    stripWWW: false,\n    stripHash: true\n  });\n  if (!r.endsWith(\"/\")) {\n    r += \"/\";\n  }\n  return r;\n}\nfunction normalize(urls) {\n  const normalized = /* @__PURE__ */ new Set();\n  for (const url of urls) {\n    try {\n      normalized.add(normalizeRelayUrl(url));\n    } catch {\n    }\n  }\n  return Array.from(normalized);\n}\nvar DATA_URL_DEFAULT_MIME_TYPE = \"text/plain\";\nvar DATA_URL_DEFAULT_CHARSET = \"us-ascii\";\nvar testParameter = (name, filters) => filters.some((filter) => filter instanceof RegExp ? filter.test(name) : filter === name);\nvar supportedProtocols = /* @__PURE__ */ new Set([\"https:\", \"http:\", \"file:\"]);\nvar hasCustomProtocol = (urlString) => {\n  try {\n    const { protocol } = new URL(urlString);\n    return protocol.endsWith(\":\") && !protocol.includes(\".\") && !supportedProtocols.has(protocol);\n  } catch {\n    return false;\n  }\n};\nvar normalizeDataURL = (urlString, { stripHash }) => {\n  const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n  if (!match) {\n    throw new Error(`Invalid URL: ${urlString}`);\n  }\n  const type = match.groups?.type ?? \"\";\n  const data = match.groups?.data ?? \"\";\n  let hash = match.groups?.hash ?? \"\";\n  const mediaType = type.split(\";\");\n  hash = stripHash ? \"\" : hash;\n  let isBase64 = false;\n  if (mediaType[mediaType.length - 1] === \"base64\") {\n    mediaType.pop();\n    isBase64 = true;\n  }\n  const mimeType = mediaType.shift()?.toLowerCase() ?? \"\";\n  const attributes = mediaType.map((attribute) => {\n    let [key, value = \"\"] = attribute.split(\"=\").map((string) => string.trim());\n    if (key === \"charset\") {\n      value = value.toLowerCase();\n      if (value === DATA_URL_DEFAULT_CHARSET) {\n        return \"\";\n      }\n    }\n    return `${key}${value ? `=${value}` : \"\"}`;\n  }).filter(Boolean);\n  const normalizedMediaType = [...attributes];\n  if (isBase64) {\n    normalizedMediaType.push(\"base64\");\n  }\n  if (normalizedMediaType.length > 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {\n    normalizedMediaType.unshift(mimeType);\n  }\n  return `data:${normalizedMediaType.join(\";\")},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : \"\"}`;\n};\nfunction normalizeUrl(urlString, options = {}) {\n  options = {\n    defaultProtocol: \"http\",\n    normalizeProtocol: true,\n    forceHttp: false,\n    forceHttps: false,\n    stripAuthentication: true,\n    stripHash: false,\n    stripTextFragment: true,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeSingleSlash: true,\n    removeDirectoryIndex: false,\n    removeExplicitPort: false,\n    sortQueryParameters: true,\n    ...options\n  };\n  if (typeof options.defaultProtocol === \"string\" && !options.defaultProtocol.endsWith(\":\")) {\n    options.defaultProtocol = `${options.defaultProtocol}:`;\n  }\n  urlString = urlString.trim();\n  if (/^data:/i.test(urlString)) {\n    return normalizeDataURL(urlString, options);\n  }\n  if (hasCustomProtocol(urlString)) {\n    return urlString;\n  }\n  const hasRelativeProtocol = urlString.startsWith(\"//\");\n  const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n  if (!isRelativeUrl) {\n    urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n  }\n  const urlObject = new URL(urlString);\n  urlObject.hostname = urlObject.hostname.toLowerCase();\n  if (options.forceHttp && options.forceHttps) {\n    throw new Error(\"The `forceHttp` and `forceHttps` options cannot be used together\");\n  }\n  if (options.forceHttp && urlObject.protocol === \"https:\") {\n    urlObject.protocol = \"http:\";\n  }\n  if (options.forceHttps && urlObject.protocol === \"http:\") {\n    urlObject.protocol = \"https:\";\n  }\n  if (options.stripAuthentication) {\n    urlObject.username = \"\";\n    urlObject.password = \"\";\n  }\n  if (options.stripHash) {\n    urlObject.hash = \"\";\n  } else if (options.stripTextFragment) {\n    urlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, \"\");\n  }\n  if (urlObject.pathname) {\n    const protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\n    let lastIndex = 0;\n    let result = \"\";\n    for (; ; ) {\n      const match = protocolRegex.exec(urlObject.pathname);\n      if (!match) {\n        break;\n      }\n      const protocol = match[0];\n      const protocolAtIndex = match.index;\n      const intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\n      result += intermediate.replace(/\\/{2,}/g, \"/\");\n      result += protocol;\n      lastIndex = protocolAtIndex + protocol.length;\n    }\n    const remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\n    result += remnant.replace(/\\/{2,}/g, \"/\");\n    urlObject.pathname = result;\n  }\n  if (urlObject.pathname) {\n    try {\n      urlObject.pathname = decodeURI(urlObject.pathname);\n    } catch {\n    }\n  }\n  if (options.removeDirectoryIndex === true) {\n    options.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n  if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n    let pathComponents = urlObject.pathname.split(\"/\");\n    const lastComponent = pathComponents[pathComponents.length - 1];\n    if (testParameter(lastComponent, options.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, -1);\n      urlObject.pathname = `${pathComponents.slice(1).join(\"/\")}/`;\n    }\n  }\n  if (urlObject.hostname) {\n    urlObject.hostname = urlObject.hostname.replace(/\\.$/, \"\");\n    if (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\n      urlObject.hostname = urlObject.hostname.replace(/^www\\./, \"\");\n    }\n  }\n  if (Array.isArray(options.removeQueryParameters)) {\n    for (const key of [...urlObject.searchParams.keys()]) {\n      if (testParameter(key, options.removeQueryParameters)) {\n        urlObject.searchParams.delete(key);\n      }\n    }\n  }\n  if (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\n    urlObject.search = \"\";\n  }\n  if (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\n    for (const key of [...urlObject.searchParams.keys()]) {\n      if (!testParameter(key, options.keepQueryParameters)) {\n        urlObject.searchParams.delete(key);\n      }\n    }\n  }\n  if (options.sortQueryParameters) {\n    urlObject.searchParams.sort();\n    try {\n      urlObject.search = decodeURIComponent(urlObject.search);\n    } catch {\n    }\n  }\n  if (options.removeTrailingSlash) {\n    urlObject.pathname = urlObject.pathname.replace(/\\/$/, \"\");\n  }\n  if (options.removeExplicitPort && urlObject.port) {\n    urlObject.port = \"\";\n  }\n  const oldUrlString = urlString;\n  urlString = urlObject.toString();\n  if (!options.removeSingleSlash && urlObject.pathname === \"/\" && !oldUrlString.endsWith(\"/\") && urlObject.hash === \"\") {\n    urlString = urlString.replace(/\\/$/, \"\");\n  }\n  if ((options.removeTrailingSlash || urlObject.pathname === \"/\") && urlObject.hash === \"\" && options.removeSingleSlash) {\n    urlString = urlString.replace(/\\/$/, \"\");\n  }\n  if (hasRelativeProtocol && !options.normalizeProtocol) {\n    urlString = urlString.replace(/^http:\\/\\//, \"//\");\n  }\n  if (options.stripProtocol) {\n    urlString = urlString.replace(/^(?:https?:)?\\/\\//, \"\");\n  }\n  return urlString;\n}\n\n// src/relay/index.ts\n\n\n\n// src/relay/connectivity.ts\nvar MAX_RECONNECT_ATTEMPTS = 5;\nvar FLAPPING_THRESHOLD_MS = 1e3;\nvar NDKRelayConnectivity = class {\n  ndkRelay;\n  ws;\n  _status;\n  timeoutMs;\n  connectedAt;\n  _connectionStats = {\n    attempts: 0,\n    success: 0,\n    durations: []\n  };\n  debug;\n  netDebug;\n  connectTimeout;\n  reconnectTimeout;\n  ndk;\n  openSubs = /* @__PURE__ */ new Map();\n  openCountRequests = /* @__PURE__ */ new Map();\n  openEventPublishes = /* @__PURE__ */ new Map();\n  serial = 0;\n  baseEoseTimeout = 4400;\n  constructor(ndkRelay, ndk) {\n    this.ndkRelay = ndkRelay;\n    this._status = 1 /* DISCONNECTED */;\n    const rand = Math.floor(Math.random() * 1e3);\n    this.debug = this.ndkRelay.debug.extend(`connectivity${rand}`);\n    this.ndk = ndk;\n  }\n  /**\n   * Connects to the NDK relay and handles the connection lifecycle.\n   *\n   * This method attempts to establish a WebSocket connection to the NDK relay specified in the `ndkRelay` object.\n   * If the connection is successful, it updates the connection statistics, sets the connection status to `CONNECTED`,\n   * and emits `connect` and `ready` events on the `ndkRelay` object.\n   *\n   * If the connection attempt fails, it handles the error by either initiating a reconnection attempt or emitting a\n   * `delayed-connect` event on the `ndkRelay` object, depending on the `reconnect` parameter.\n   *\n   * @param timeoutMs - The timeout in milliseconds for the connection attempt. If not provided, the default timeout from the `ndkRelay` object is used.\n   * @param reconnect - Indicates whether a reconnection should be attempted if the connection fails. Defaults to `true`.\n   * @returns A Promise that resolves when the connection is established, or rejects if the connection fails.\n   */\n  async connect(timeoutMs, reconnect = true) {\n    if (this._status !== 2 /* RECONNECTING */ && this._status !== 1 /* DISCONNECTED */ || this.reconnectTimeout) {\n      this.debug(\n        \"Relay requested to be connected but was in state %s or it had a reconnect timeout\",\n        this._status\n      );\n      return;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = void 0;\n    }\n    if (this.connectTimeout) {\n      clearTimeout(this.connectTimeout);\n      this.connectTimeout = void 0;\n    }\n    timeoutMs ??= this.timeoutMs;\n    if (!this.timeoutMs && timeoutMs) this.timeoutMs = timeoutMs;\n    if (this.timeoutMs) this.connectTimeout = setTimeout(() => this.onConnectionError(reconnect), this.timeoutMs);\n    try {\n      this.updateConnectionStats.attempt();\n      if (this._status === 1 /* DISCONNECTED */) this._status = 4 /* CONNECTING */;\n      else this._status = 2 /* RECONNECTING */;\n      this.ws = new WebSocket(this.ndkRelay.url);\n      this.ws.onopen = this.onConnect.bind(this);\n      this.ws.onclose = this.onDisconnect.bind(this);\n      this.ws.onmessage = this.onMessage.bind(this);\n      this.ws.onerror = this.onError.bind(this);\n    } catch (e) {\n      this.debug(`Failed to connect to ${this.ndkRelay.url}`, e);\n      this._status = 1 /* DISCONNECTED */;\n      if (reconnect) this.handleReconnection();\n      else this.ndkRelay.emit(\"delayed-connect\", 2 * 24 * 60 * 60 * 1e3);\n      throw e;\n    }\n  }\n  /**\n   * Disconnects the WebSocket connection to the NDK relay.\n   * This method sets the connection status to `NDKRelayStatus.DISCONNECTING`,\n   * attempts to close the WebSocket connection, and sets the status to\n   * `NDKRelayStatus.DISCONNECTED` if the disconnect operation fails.\n   */\n  disconnect() {\n    this._status = 0 /* DISCONNECTING */;\n    try {\n      this.ws?.close();\n    } catch (e) {\n      this.debug(\"Failed to disconnect\", e);\n      this._status = 1 /* DISCONNECTED */;\n    }\n  }\n  /**\n   * Handles the error that occurred when attempting to connect to the NDK relay.\n   * If `reconnect` is `true`, this method will initiate a reconnection attempt.\n   * Otherwise, it will emit a `delayed-connect` event on the `ndkRelay` object,\n   * indicating that a reconnection should be attempted after a delay.\n   *\n   * @param reconnect - Indicates whether a reconnection should be attempted.\n   */\n  onConnectionError(reconnect) {\n    this.debug(`Error connecting to ${this.ndkRelay.url}`, this.timeoutMs);\n    if (reconnect && !this.reconnectTimeout) {\n      this.handleReconnection();\n    }\n  }\n  /**\n   * Handles the connection event when the WebSocket connection is established.\n   * This method is called when the WebSocket connection is successfully opened.\n   * It clears any existing connection and reconnection timeouts, updates the connection statistics,\n   * sets the connection status to `CONNECTED`, and emits `connect` and `ready` events on the `ndkRelay` object.\n   */\n  onConnect() {\n    this.netDebug?.(\"connected\", this.ndkRelay);\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = void 0;\n    }\n    if (this.connectTimeout) {\n      clearTimeout(this.connectTimeout);\n      this.connectTimeout = void 0;\n    }\n    this.updateConnectionStats.connected();\n    this._status = 5 /* CONNECTED */;\n    this.ndkRelay.emit(\"connect\");\n    this.ndkRelay.emit(\"ready\");\n  }\n  /**\n   * Handles the disconnection event when the WebSocket connection is closed.\n   * This method is called when the WebSocket connection is successfully closed.\n   * It updates the connection statistics, sets the connection status to `DISCONNECTED`,\n   * initiates a reconnection attempt if we didn't disconnect ourselves,\n   * and emits a `disconnect` event on the `ndkRelay` object.\n   */\n  onDisconnect() {\n    this.netDebug?.(\"disconnected\", this.ndkRelay);\n    this.updateConnectionStats.disconnected();\n    if (this._status === 5 /* CONNECTED */) {\n      this.handleReconnection();\n    }\n    this._status = 1 /* DISCONNECTED */;\n    this.ndkRelay.emit(\"disconnect\");\n  }\n  /**\n   * Handles incoming messages from the NDK relay WebSocket connection.\n   * This method is called whenever a message is received from the relay.\n   * It parses the message data and dispatches the appropriate handling logic based on the message type.\n   *\n   * @param event - The MessageEvent containing the received message data.\n   */\n  onMessage(event) {\n    this.netDebug?.(event.data, this.ndkRelay, \"recv\");\n    try {\n      const data = JSON.parse(event.data);\n      const [cmd, id, ..._rest] = data;\n      switch (cmd) {\n        case \"EVENT\": {\n          const so = this.openSubs.get(id);\n          const event2 = data[2];\n          if (!so) {\n            this.debug(`Received event for unknown subscription ${id}`);\n            return;\n          }\n          so.onevent(event2);\n          return;\n        }\n        case \"COUNT\": {\n          const payload = data[2];\n          const cr = this.openCountRequests.get(id);\n          if (cr) {\n            cr.resolve(payload.count);\n            this.openCountRequests.delete(id);\n          }\n          return;\n        }\n        case \"EOSE\": {\n          const so = this.openSubs.get(id);\n          if (!so) return;\n          so.oneose(id);\n          return;\n        }\n        case \"OK\": {\n          const ok = data[2];\n          const reason = data[3];\n          const ep = this.openEventPublishes.get(id);\n          const firstEp = ep?.pop();\n          if (!ep || !firstEp) {\n            this.debug(\"Received OK for unknown event publish\", id);\n            return;\n          }\n          if (ok) firstEp.resolve(reason);\n          else firstEp.reject(new Error(reason));\n          if (ep.length === 0) {\n            this.openEventPublishes.delete(id);\n          } else {\n            this.openEventPublishes.set(id, ep);\n          }\n          return;\n        }\n        case \"CLOSED\": {\n          const so = this.openSubs.get(id);\n          if (!so) return;\n          so.onclosed(data[2]);\n          return;\n        }\n        case \"NOTICE\":\n          this.onNotice(data[1]);\n          return;\n        case \"AUTH\": {\n          this.onAuthRequested(data[1]);\n          return;\n        }\n      }\n    } catch (error) {\n      this.debug(`Error parsing message from ${this.ndkRelay.url}: ${error.message}`, error?.stack);\n      return;\n    }\n  }\n  /**\n   * Handles an authentication request from the NDK relay.\n   *\n   * If an authentication policy is configured, it will be used to authenticate the connection.\n   * Otherwise, the `auth` event will be emitted to allow the application to handle the authentication.\n   *\n   * @param challenge - The authentication challenge provided by the NDK relay.\n   */\n  async onAuthRequested(challenge) {\n    const authPolicy = this.ndkRelay.authPolicy ?? this.ndk?.relayAuthDefaultPolicy;\n    this.debug(\"Relay requested authentication\", {\n      havePolicy: !!authPolicy\n    });\n    if (this._status === 7 /* AUTHENTICATING */) {\n      this.debug(\"Already authenticating, ignoring\");\n      return;\n    }\n    this._status = 6 /* AUTH_REQUESTED */;\n    if (authPolicy) {\n      if (this._status >= 5 /* CONNECTED */) {\n        this._status = 7 /* AUTHENTICATING */;\n        let res;\n        try {\n          res = await authPolicy(this.ndkRelay, challenge);\n        } catch (e) {\n          this.debug(\"Authentication policy threw an error\", e);\n          res = false;\n        }\n        this.debug(\"Authentication policy returned\", !!res);\n        if (res instanceof NDKEvent || res === true) {\n          if (res instanceof NDKEvent) {\n            await this.auth(res);\n          }\n          const authenticate = async () => {\n            if (this._status >= 5 /* CONNECTED */ && this._status < 8 /* AUTHENTICATED */) {\n              const event = new NDKEvent(this.ndk);\n              event.kind = 22242 /* ClientAuth */;\n              event.tags = [\n                [\"relay\", this.ndkRelay.url],\n                [\"challenge\", challenge]\n              ];\n              await event.sign();\n              this.auth(event).then(() => {\n                this._status = 8 /* AUTHENTICATED */;\n                this.ndkRelay.emit(\"authed\");\n                this.debug(\"Authentication successful\");\n              }).catch((e) => {\n                this._status = 6 /* AUTH_REQUESTED */;\n                this.ndkRelay.emit(\"auth:failed\", e);\n                this.debug(\"Authentication failed\", e);\n              });\n            } else {\n              this.debug(\"Authentication failed, it changed status, status is %d\", this._status);\n            }\n          };\n          if (res === true) {\n            if (!this.ndk?.signer) {\n              this.debug(\"No signer available for authentication localhost\");\n              this.ndk?.once(\"signer:ready\", authenticate);\n            } else {\n              authenticate().catch((e) => {\n                console.error(\"Error authenticating\", e);\n              });\n            }\n          }\n          this._status = 5 /* CONNECTED */;\n          this.ndkRelay.emit(\"authed\");\n        }\n      }\n    } else {\n      this.ndkRelay.emit(\"auth\", challenge);\n    }\n  }\n  /**\n   * Handles errors that occur on the WebSocket connection to the relay.\n   * @param error - The error or event that occurred.\n   */\n  onError(error) {\n    this.debug(`WebSocket error on ${this.ndkRelay.url}:`, error);\n  }\n  /**\n   * Gets the current status of the NDK relay connection.\n   * @returns {NDKRelayStatus} The current status of the NDK relay connection.\n   */\n  get status() {\n    return this._status;\n  }\n  /**\n   * Checks if the NDK relay connection is currently available.\n   * @returns {boolean} `true` if the relay connection is in the `CONNECTED` status, `false` otherwise.\n   */\n  isAvailable() {\n    return this._status === 5 /* CONNECTED */;\n  }\n  /**\n   * Checks if the NDK relay connection is flapping, which means the connection is rapidly\n   * disconnecting and reconnecting. This is determined by analyzing the durations of the\n   * last three connection attempts. If the standard deviation of the durations is less\n   * than 1000 milliseconds, the connection is considered to be flapping.\n   *\n   * @returns {boolean} `true` if the connection is flapping, `false` otherwise.\n   */\n  isFlapping() {\n    const durations = this._connectionStats.durations;\n    if (durations.length % 3 !== 0) return false;\n    const sum = durations.reduce((a, b) => a + b, 0);\n    const avg = sum / durations.length;\n    const variance = durations.map((x) => (x - avg) ** 2).reduce((a, b) => a + b, 0) / durations.length;\n    const stdDev = Math.sqrt(variance);\n    const isFlapping = stdDev < FLAPPING_THRESHOLD_MS;\n    return isFlapping;\n  }\n  /**\n   * Handles a notice received from the NDK relay.\n   * If the notice indicates the relay is complaining (e.g. \"too many\" or \"maximum\"),\n   * the method disconnects from the relay and attempts to reconnect after a 2-second delay.\n   * A debug message is logged with the relay URL and the notice text.\n   * The \"notice\" event is emitted on the ndkRelay instance with the notice text.\n   *\n   * @param notice - The notice text received from the NDK relay.\n   */\n  async onNotice(notice) {\n    this.ndkRelay.emit(\"notice\", notice);\n  }\n  /**\n   * Attempts to reconnect to the NDK relay after a connection is lost.\n   * This function is called recursively to handle multiple reconnection attempts.\n   * It checks if the relay is flapping and emits a \"flapping\" event if so.\n   * It then calculates a delay before the next reconnection attempt based on the number of previous attempts.\n   * The function sets a timeout to execute the next reconnection attempt after the calculated delay.\n   * If the maximum number of reconnection attempts is reached, a debug message is logged.\n   *\n   * @param attempt - The current attempt number (default is 0).\n   */\n  handleReconnection(attempt = 0) {\n    if (this.reconnectTimeout) return;\n    if (this.isFlapping()) {\n      this.ndkRelay.emit(\"flapping\", this._connectionStats);\n      this._status = 3 /* FLAPPING */;\n      return;\n    }\n    const reconnectDelay = this.connectedAt ? Math.max(0, 6e4 - (Date.now() - this.connectedAt)) : 5e3 * (this._connectionStats.attempts + 1);\n    this.reconnectTimeout = setTimeout(() => {\n      this.reconnectTimeout = void 0;\n      this._status = 2 /* RECONNECTING */;\n      this.connect().catch((_err) => {\n        if (attempt < MAX_RECONNECT_ATTEMPTS) {\n          setTimeout(\n            () => {\n              this.handleReconnection(attempt + 1);\n            },\n            1e3 * (attempt + 1) ^ 4\n          );\n        } else {\n          this.debug(\"Reconnect failed\");\n        }\n      });\n    }, reconnectDelay);\n    this.ndkRelay.emit(\"delayed-connect\", reconnectDelay);\n    this.debug(\"Reconnecting in\", reconnectDelay);\n    this._connectionStats.nextReconnectAt = Date.now() + reconnectDelay;\n  }\n  /**\n   * Sends a message to the NDK relay if the connection is in the CONNECTED state and the WebSocket is open.\n   * If the connection is not in the CONNECTED state or the WebSocket is not open, logs a debug message and throws an error.\n   *\n   * @param message - The message to send to the NDK relay.\n   * @throws {Error} If attempting to send on a closed relay connection.\n   */\n  async send(message) {\n    if (this._status >= 5 /* CONNECTED */ && this.ws?.readyState === WebSocket.OPEN) {\n      this.ws?.send(message);\n      this.netDebug?.(message, this.ndkRelay, \"send\");\n    } else {\n      this.debug(`Not connected to ${this.ndkRelay.url} (%d), not sending message ${message}`, this._status);\n    }\n  }\n  /**\n   * Authenticates the NDK event by sending it to the NDK relay and returning a promise that resolves with the result.\n   *\n   * @param event - The NDK event to authenticate.\n   * @returns A promise that resolves with the authentication result.\n   */\n  async auth(event) {\n    const ret = new Promise((resolve, reject) => {\n      const val = this.openEventPublishes.get(event.id) ?? [];\n      val.push({ resolve, reject });\n      this.openEventPublishes.set(event.id, val);\n    });\n    this.send(`[\"AUTH\",${JSON.stringify(event.rawEvent())}]`);\n    return ret;\n  }\n  /**\n   * Publishes an NDK event to the relay and returns a promise that resolves with the result.\n   *\n   * @param event - The NDK event to publish.\n   * @returns A promise that resolves with the result of the event publication.\n   * @throws {Error} If attempting to publish on a closed relay connection.\n   */\n  async publish(event) {\n    const ret = new Promise((resolve, reject) => {\n      const val = this.openEventPublishes.get(event.id) ?? [];\n      if (val.length > 0) {\n        console.warn(`Duplicate event publishing detected, you are publishing event ${event.id} twice`);\n      }\n      val.push({ resolve, reject });\n      this.openEventPublishes.set(event.id, val);\n    });\n    this.send(`[\"EVENT\",${JSON.stringify(event)}]`);\n    return ret;\n  }\n  /**\n   * Counts the number of events that match the provided filters.\n   *\n   * @param filters - The filters to apply to the count request.\n   * @param params - An optional object containing a custom id for the count request.\n   * @returns A promise that resolves with the number of matching events.\n   * @throws {Error} If attempting to send the count request on a closed relay connection.\n   */\n  async count(filters, params) {\n    this.serial++;\n    const id = params?.id || `count:${this.serial}`;\n    const ret = new Promise((resolve, reject) => {\n      this.openCountRequests.set(id, { resolve, reject });\n    });\n    this.send(`[\"COUNT\",\"${id}\",${JSON.stringify(filters).substring(1)}`);\n    return ret;\n  }\n  close(subId, reason) {\n    this.send(`[\"CLOSE\",\"${subId}\"]`);\n    const sub = this.openSubs.get(subId);\n    this.openSubs.delete(subId);\n    if (sub) sub.onclose(reason);\n  }\n  /**\n   * Subscribes to the NDK relay with the provided filters and parameters.\n   *\n   * @param filters - The filters to apply to the subscription.\n   * @param params - The subscription parameters, including an optional custom id.\n   * @returns A new NDKRelaySubscription instance.\n   */\n  req(relaySub) {\n    `${this.send(`[\"REQ\",\"${relaySub.subId}\",${JSON.stringify(relaySub.executeFilters).substring(1)}`)}]`;\n    this.openSubs.set(relaySub.subId, relaySub);\n  }\n  /**\n   * Utility functions to update the connection stats.\n   */\n  updateConnectionStats = {\n    connected: () => {\n      this._connectionStats.success++;\n      this._connectionStats.connectedAt = Date.now();\n    },\n    disconnected: () => {\n      if (this._connectionStats.connectedAt) {\n        this._connectionStats.durations.push(Date.now() - this._connectionStats.connectedAt);\n        if (this._connectionStats.durations.length > 100) {\n          this._connectionStats.durations.shift();\n        }\n      }\n      this._connectionStats.connectedAt = void 0;\n    },\n    attempt: () => {\n      this._connectionStats.attempts++;\n      this._connectionStats.connectedAt = Date.now();\n    }\n  };\n  /** Returns the connection stats. */\n  get connectionStats() {\n    return this._connectionStats;\n  }\n  /** Returns the relay URL */\n  get url() {\n    return this.ndkRelay.url;\n  }\n  get connected() {\n    return this._status >= 5 /* CONNECTED */ && this.ws?.readyState === WebSocket.OPEN;\n  }\n};\n\n// src/relay/publisher.ts\nvar NDKRelayPublisher = class {\n  ndkRelay;\n  debug;\n  constructor(ndkRelay) {\n    this.ndkRelay = ndkRelay;\n    this.debug = ndkRelay.debug.extend(\"publisher\");\n  }\n  /**\n   * Published an event to the relay; if the relay is not connected, it will\n   * wait for the relay to connect before publishing the event.\n   *\n   * If the relay does not connect within the timeout, the publish operation\n   * will fail.\n   * @param event  The event to publish\n   * @param timeoutMs  The timeout for the publish operation in milliseconds\n   * @returns A promise that resolves when the event has been published or rejects if the operation times out\n   */\n  async publish(event, timeoutMs = 2500) {\n    let timeout;\n    const publishConnected = () => {\n      return new Promise((resolve, reject) => {\n        try {\n          this.publishEvent(event).then((_result) => {\n            this.ndkRelay.emit(\"published\", event);\n            event.emit(\"relay:published\", this.ndkRelay);\n            resolve(true);\n          }).catch(reject);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    };\n    const timeoutPromise = new Promise((_, reject) => {\n      timeout = setTimeout(() => {\n        timeout = void 0;\n        reject(new Error(`Timeout: ${timeoutMs}ms`));\n      }, timeoutMs);\n    });\n    const onConnectHandler = () => {\n      publishConnected().then((result) => connectResolve(result)).catch((err) => connectReject(err));\n    };\n    let connectResolve;\n    let connectReject;\n    const onError = (err) => {\n      this.ndkRelay.debug(\"Publish failed\", err, event.id);\n      this.ndkRelay.emit(\"publish:failed\", event, err);\n      event.emit(\"relay:publish:failed\", this.ndkRelay, err);\n      throw err;\n    };\n    const onFinally = () => {\n      if (timeout) clearTimeout(timeout);\n      this.ndkRelay.removeListener(\"connect\", onConnectHandler);\n    };\n    if (this.ndkRelay.status >= 5 /* CONNECTED */) {\n      return Promise.race([publishConnected(), timeoutPromise]).catch(onError).finally(onFinally);\n    }\n    if (this.ndkRelay.status <= 1 /* DISCONNECTED */) {\n      console.warn(\"Relay is disconnected, trying to connect to publish an event\", this.ndkRelay.url);\n      this.ndkRelay.connect();\n    } else {\n      console.warn(\"Relay not connected, waiting for connection to publish an event\", this.ndkRelay.url);\n    }\n    return Promise.race([\n      new Promise((resolve, reject) => {\n        connectResolve = resolve;\n        connectReject = reject;\n        this.ndkRelay.once(\"connect\", onConnectHandler);\n      }),\n      timeoutPromise\n    ]).catch(onError).finally(onFinally);\n  }\n  async publishEvent(event) {\n    return this.ndkRelay.connectivity.publish(event.rawEvent());\n  }\n};\n\n// src/subscription/grouping.ts\nfunction filterFingerprint(filters, closeOnEose) {\n  const elements = [];\n  for (const filter of filters) {\n    const keys = Object.entries(filter || {}).map(([key, values]) => {\n      if ([\"since\", \"until\"].includes(key)) {\n        return `${key}:${values}`;\n      }\n      return key;\n    }).sort().join(\"-\");\n    elements.push(keys);\n  }\n  let id = closeOnEose ? \"+\" : \"\";\n  id += elements.join(\"|\");\n  return id;\n}\nfunction mergeFilters(filters) {\n  const result = [];\n  const lastResult = {};\n  filters.filter((f) => !!f.limit).forEach((filterWithLimit) => result.push(filterWithLimit));\n  filters = filters.filter((f) => !f.limit);\n  if (filters.length === 0) return result;\n  filters.forEach((filter) => {\n    Object.entries(filter).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        if (lastResult[key] === void 0) {\n          lastResult[key] = [...value];\n        } else {\n          lastResult[key] = Array.from(/* @__PURE__ */ new Set([...lastResult[key], ...value]));\n        }\n      } else {\n        lastResult[key] = value;\n      }\n    });\n  });\n  return [...result, lastResult];\n}\n\n// src/relay/subscription.ts\nvar NDKRelaySubscription = class {\n  fingerprint;\n  items = /* @__PURE__ */ new Map();\n  topSubManager;\n  debug;\n  /**\n   * Tracks the status of this REQ.\n   */\n  status = 0 /* INITIAL */;\n  onClose;\n  relay;\n  /**\n   * Whether this subscription has reached EOSE.\n   */\n  eosed = false;\n  /**\n   * Timeout at which this subscription will\n   * start executing.\n   */\n  executionTimer;\n  /**\n   * Track the time at which this subscription will fire.\n   */\n  fireTime;\n  /**\n   * The delay type that the current fireTime was calculated with.\n   */\n  delayType;\n  /**\n   * The filters that have been executed.\n   */\n  executeFilters;\n  id = Math.random().toString(36).substring(7);\n  /**\n   *\n   * @param fingerprint The fingerprint of this subscription.\n   */\n  constructor(relay, fingerprint, topSubManager) {\n    this.relay = relay;\n    this.topSubManager = topSubManager;\n    this.debug = relay.debug.extend(`sub[${this.id}]`);\n    this.fingerprint = fingerprint || Math.random().toString(36).substring(7);\n  }\n  _subId;\n  get subId() {\n    if (this._subId) return this._subId;\n    this._subId = this.fingerprint.slice(0, 15);\n    return this._subId;\n  }\n  subIdParts = /* @__PURE__ */ new Set();\n  addSubIdPart(part) {\n    this.subIdParts.add(part);\n  }\n  addItem(subscription, filters) {\n    this.debug(\"Adding item\", {\n      filters,\n      internalId: subscription.internalId,\n      status: this.status,\n      fingerprint: this.fingerprint,\n      id: this.subId,\n      items: this.items,\n      itemsSize: this.items.size\n    });\n    if (this.items.has(subscription.internalId)) return;\n    subscription.on(\"close\", this.removeItem.bind(this, subscription));\n    this.items.set(subscription.internalId, { subscription, filters });\n    if (this.status !== 3 /* RUNNING */) {\n      if (subscription.subId && (!this._subId || this._subId.length < 48)) {\n        if (this.status === 0 /* INITIAL */ || this.status === 1 /* PENDING */) {\n          this.addSubIdPart(subscription.subId);\n        }\n      }\n    }\n    switch (this.status) {\n      case 0 /* INITIAL */:\n        this.evaluateExecutionPlan(subscription);\n        break;\n      case 3 /* RUNNING */:\n        break;\n      case 1 /* PENDING */:\n        this.evaluateExecutionPlan(subscription);\n        break;\n      case 4 /* CLOSED */:\n        this.debug(\"Subscription is closed, cannot add new items %o (%o)\", subscription, filters);\n        throw new Error(\"Cannot add new items to a closed subscription\");\n    }\n  }\n  /**\n   * A subscription has been closed, remove it from the list of items.\n   * @param subscription\n   */\n  removeItem(subscription) {\n    this.items.delete(subscription.internalId);\n    if (this.items.size === 0) {\n      if (!this.eosed) return;\n      this.close();\n      this.cleanup();\n    }\n  }\n  close() {\n    if (this.status === 4 /* CLOSED */) return;\n    const prevStatus = this.status;\n    this.status = 4 /* CLOSED */;\n    if (prevStatus === 3 /* RUNNING */) {\n      try {\n        this.relay.close(this.subId);\n      } catch (e) {\n        this.debug(\"Error closing subscription\", e, this);\n      }\n    } else {\n      this.debug(\"Subscription wanted to close but it wasn't running, this is probably ok\", {\n        subId: this.subId,\n        prevStatus,\n        sub: this\n      });\n    }\n    this.cleanup();\n  }\n  cleanup() {\n    if (this.executionTimer) clearTimeout(this.executionTimer);\n    this.relay.off(\"ready\", this.executeOnRelayReady);\n    this.relay.off(\"authed\", this.reExecuteAfterAuth);\n    if (this.onClose) this.onClose(this);\n  }\n  evaluateExecutionPlan(subscription) {\n    if (!subscription.isGroupable()) {\n      this.status = 1 /* PENDING */;\n      this.execute();\n      return;\n    }\n    if (subscription.filters.find((filter) => !!filter.limit)) {\n      this.executeFilters = this.compileFilters();\n      if (this.executeFilters.length >= 10) {\n        this.status = 1 /* PENDING */;\n        this.execute();\n        return;\n      }\n    }\n    const delay = subscription.groupableDelay;\n    const delayType = subscription.groupableDelayType;\n    if (!delay) throw new Error(\"Cannot group a subscription without a delay\");\n    if (this.status === 0 /* INITIAL */) {\n      this.schedule(delay, delayType);\n    } else {\n      const existingDelayType = this.delayType;\n      const timeUntilFire = this.fireTime - Date.now();\n      if (existingDelayType === \"at-least\" && delayType === \"at-least\") {\n        if (timeUntilFire < delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else if (existingDelayType === \"at-least\" && delayType === \"at-most\") {\n        if (timeUntilFire > delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else if (existingDelayType === \"at-most\" && delayType === \"at-most\") {\n        if (timeUntilFire > delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else if (existingDelayType === \"at-most\" && delayType === \"at-least\") {\n        if (timeUntilFire > delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else {\n        throw new Error(`Unknown delay type combination ${existingDelayType} ${delayType}`);\n      }\n    }\n  }\n  schedule(delay, delayType) {\n    this.status = 1 /* PENDING */;\n    const currentTime = Date.now();\n    this.fireTime = currentTime + delay;\n    this.delayType = delayType;\n    const timer = setTimeout(this.execute.bind(this), delay);\n    if (delayType === \"at-least\") {\n      this.executionTimer = timer;\n    }\n  }\n  executeOnRelayReady = () => {\n    if (this.status !== 2 /* WAITING */) return;\n    if (this.items.size === 0) {\n      this.debug(\"No items to execute; this relay was probably too slow to respond and the caller gave up\", {\n        status: this.status,\n        fingerprint: this.fingerprint,\n        items: this.items,\n        itemsSize: this.items.size,\n        id: this.id,\n        subId: this.subId\n      });\n      this.cleanup();\n      return;\n    }\n    this.debug(\"Executing on relay ready\", {\n      status: this.status,\n      fingerprint: this.fingerprint,\n      items: this.items,\n      itemsSize: this.items.size\n    });\n    this.status = 1 /* PENDING */;\n    this.execute();\n  };\n  finalizeSubId() {\n    if (this.subIdParts.size > 0) {\n      this._subId = Array.from(this.subIdParts).join(\"-\");\n    } else {\n      this._subId = this.fingerprint.slice(0, 15);\n    }\n    this._subId += `-${Math.random().toString(36).substring(2, 7)}`;\n  }\n  // we do it this way so that we can remove the listener\n  reExecuteAfterAuth = (() => {\n    const oldSubId = this.subId;\n    this.debug(\"Re-executing after auth\", this.items.size);\n    if (this.eosed) {\n      this.relay.close(this.subId);\n    } else {\n      this.debug(\"We are abandoning an opened subscription, once it EOSE's, the handler will close it\", {\n        oldSubId\n      });\n    }\n    this._subId = void 0;\n    this.status = 1 /* PENDING */;\n    this.execute();\n    this.debug(\"Re-executed after auth %s \\u{1F449} %s\", oldSubId, this.subId);\n  }).bind(this);\n  execute() {\n    if (this.status !== 1 /* PENDING */) {\n      return;\n    }\n    if (!this.relay.connected) {\n      this.status = 2 /* WAITING */;\n      this.debug(\"Waiting for relay to be ready\", {\n        status: this.status,\n        id: this.subId,\n        fingerprint: this.fingerprint,\n        items: this.items,\n        itemsSize: this.items.size\n      });\n      this.relay.once(\"ready\", this.executeOnRelayReady);\n      return;\n    }\n    if (this.relay.status < 8 /* AUTHENTICATED */) {\n      this.relay.once(\"authed\", this.reExecuteAfterAuth);\n    }\n    this.status = 3 /* RUNNING */;\n    this.finalizeSubId();\n    this.executeFilters = this.compileFilters();\n    this.relay.req(this);\n  }\n  onstart() {\n  }\n  onevent(event) {\n    this.topSubManager.dispatchEvent(event, this.relay);\n  }\n  oneose(subId) {\n    this.eosed = true;\n    if (subId !== this.subId) {\n      this.debug(\"Received EOSE for an abandoned subscription\", subId, this.subId);\n      this.relay.close(subId);\n      return;\n    }\n    if (this.items.size === 0) {\n      this.close();\n    }\n    for (const { subscription } of this.items.values()) {\n      subscription.eoseReceived(this.relay);\n      if (subscription.closeOnEose) {\n        this.debug(\"Removing item because of EOSE\", {\n          filters: subscription.filters,\n          internalId: subscription.internalId,\n          status: this.status,\n          fingerprint: this.fingerprint,\n          items: this.items,\n          itemsSize: this.items.size\n        });\n        this.removeItem(subscription);\n      }\n    }\n  }\n  onclose(_reason) {\n    this.status = 4 /* CLOSED */;\n  }\n  onclosed(reason) {\n    if (!reason) return;\n    for (const { subscription } of this.items.values()) {\n      subscription.closedReceived(this.relay, reason);\n    }\n  }\n  /**\n   * Grabs the filters from all the subscriptions\n   * and merges them into a single filter.\n   */\n  compileFilters() {\n    const mergedFilters = [];\n    const filters = Array.from(this.items.values()).map((item) => item.filters);\n    if (!filters[0]) {\n      this.debug(\"\\u{1F440} No filters to merge\", this.items);\n      console.error(\"BUG: No filters to merge!\", this.items);\n      return [];\n    }\n    const filterCount = filters[0].length;\n    for (let i = 0; i < filterCount; i++) {\n      const allFiltersAtIndex = filters.map((filter) => filter[i]);\n      mergedFilters.push(...mergeFilters(allFiltersAtIndex));\n    }\n    return mergedFilters;\n  }\n};\n\n// src/relay/sub-manager.ts\nvar NDKRelaySubscriptionManager = class {\n  relay;\n  subscriptions;\n  generalSubManager;\n  /**\n   * @param relay - The relay instance.\n   * @param generalSubManager - The subscription manager instance.\n   */\n  constructor(relay, generalSubManager) {\n    this.relay = relay;\n    this.subscriptions = /* @__PURE__ */ new Map();\n    this.generalSubManager = generalSubManager;\n  }\n  /**\n   * Adds a subscription to the manager.\n   */\n  addSubscription(sub, filters) {\n    let relaySub;\n    if (!sub.isGroupable()) {\n      relaySub = this.createSubscription(sub, filters);\n    } else {\n      const filterFp = filterFingerprint(filters, sub.closeOnEose);\n      if (filterFp) {\n        const existingSubs = this.subscriptions.get(filterFp);\n        relaySub = (existingSubs || []).find((sub2) => sub2.status < 3 /* RUNNING */);\n      }\n      relaySub ??= this.createSubscription(sub, filters, filterFp);\n    }\n    relaySub.addItem(sub, filters);\n  }\n  createSubscription(_sub, _filters, fingerprint) {\n    const relaySub = new NDKRelaySubscription(this.relay, fingerprint || null, this.generalSubManager);\n    relaySub.onClose = this.onRelaySubscriptionClose.bind(this);\n    const currentVal = this.subscriptions.get(relaySub.fingerprint) ?? [];\n    this.subscriptions.set(relaySub.fingerprint, [...currentVal, relaySub]);\n    return relaySub;\n  }\n  onRelaySubscriptionClose(sub) {\n    let currentVal = this.subscriptions.get(sub.fingerprint) ?? [];\n    if (!currentVal) {\n      console.warn(\"Unexpectedly did not find a subscription with fingerprint\", sub.fingerprint);\n    } else if (currentVal.length === 1) {\n      this.subscriptions.delete(sub.fingerprint);\n    } else {\n      currentVal = currentVal.filter((s) => s.id !== sub.id);\n      this.subscriptions.set(sub.fingerprint, currentVal);\n    }\n  }\n};\n\n// src/relay/index.ts\nvar NDKRelayStatus = /* @__PURE__ */ ((NDKRelayStatus2) => {\n  NDKRelayStatus2[NDKRelayStatus2[\"DISCONNECTING\"] = 0] = \"DISCONNECTING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n  NDKRelayStatus2[NDKRelayStatus2[\"RECONNECTING\"] = 2] = \"RECONNECTING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"FLAPPING\"] = 3] = \"FLAPPING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"CONNECTING\"] = 4] = \"CONNECTING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"CONNECTED\"] = 5] = \"CONNECTED\";\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTH_REQUESTED\"] = 6] = \"AUTH_REQUESTED\";\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTHENTICATING\"] = 7] = \"AUTHENTICATING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTHENTICATED\"] = 8] = \"AUTHENTICATED\";\n  return NDKRelayStatus2;\n})(NDKRelayStatus || {});\nvar NDKRelay = class _NDKRelay extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  url;\n  scores;\n  connectivity;\n  subs;\n  publisher;\n  authPolicy;\n  /**\n   * The lowest validation ratio this relay can reach.\n   */\n  lowestValidationRatio;\n  /**\n   * Current validation ratio this relay is targeting.\n   */\n  targetValidationRatio;\n  validationRatioFn;\n  /**\n   * This tracks events that have been seen by this relay\n   * with a valid signature.\n   */\n  validatedEventCount = 0;\n  /**\n   * This tracks events that have been seen by this relay\n   * but have not been validated.\n   */\n  nonValidatedEventCount = 0;\n  /**\n   * Whether this relay is trusted.\n   *\n   * Trusted relay's events do not get their signature verified.\n   */\n  trusted = false;\n  complaining = false;\n  debug;\n  static defaultValidationRatioUpdateFn = (relay, validatedCount, _nonValidatedCount) => {\n    if (relay.lowestValidationRatio === void 0 || relay.targetValidationRatio === void 0) return 1;\n    let newRatio = relay.validationRatio;\n    if (relay.validationRatio > relay.targetValidationRatio) {\n      const factor = validatedCount / 100;\n      newRatio = Math.max(relay.lowestValidationRatio, relay.validationRatio - factor);\n    }\n    if (newRatio < relay.validationRatio) {\n      return newRatio;\n    }\n    return relay.validationRatio;\n  };\n  constructor(url, authPolicy, ndk) {\n    super();\n    this.url = normalizeRelayUrl(url);\n    this.scores = /* @__PURE__ */ new Map();\n    this.debug = debug__WEBPACK_IMPORTED_MODULE_1__(`ndk:relay:${url}`);\n    this.connectivity = new NDKRelayConnectivity(this, ndk);\n    this.connectivity.netDebug = ndk?.netDebug;\n    this.req = this.connectivity.req.bind(this.connectivity);\n    this.close = this.connectivity.close.bind(this.connectivity);\n    this.subs = new NDKRelaySubscriptionManager(this, ndk.subManager);\n    this.publisher = new NDKRelayPublisher(this);\n    this.authPolicy = authPolicy;\n    this.targetValidationRatio = ndk?.initialValidationRatio;\n    this.lowestValidationRatio = ndk?.lowestValidationRatio;\n    this.validationRatioFn = (ndk?.validationRatioFn ?? _NDKRelay.defaultValidationRatioUpdateFn).bind(this);\n    this.updateValidationRatio();\n    if (!ndk) {\n      console.trace(\"relay created without ndk\");\n    }\n  }\n  updateValidationRatio() {\n    setTimeout(() => {\n      this.updateValidationRatio();\n    }, 3e4);\n  }\n  get status() {\n    return this.connectivity.status;\n  }\n  get connectionStats() {\n    return this.connectivity.connectionStats;\n  }\n  /**\n   * Connects to the relay.\n   */\n  async connect(timeoutMs, reconnect = true) {\n    return this.connectivity.connect(timeoutMs, reconnect);\n  }\n  /**\n   * Disconnects from the relay.\n   */\n  disconnect() {\n    if (this.status === 1 /* DISCONNECTED */) {\n      return;\n    }\n    this.connectivity.disconnect();\n  }\n  /**\n   * Queues or executes the subscription of a specific set of filters\n   * within this relay.\n   *\n   * @param subscription NDKSubscription this filters belong to.\n   * @param filters Filters to execute\n   */\n  subscribe(subscription, filters) {\n    this.subs.addSubscription(subscription, filters);\n  }\n  /**\n   * Publishes an event to the relay with an optional timeout.\n   *\n   * If the relay is not connected, the event will be published when the relay connects,\n   * unless the timeout is reached before the relay connects.\n   *\n   * @param event The event to publish\n   * @param timeoutMs The timeout for the publish operation in milliseconds\n   * @returns A promise that resolves when the event has been published or rejects if the operation times out\n   */\n  async publish(event, timeoutMs = 2500) {\n    return this.publisher.publish(event, timeoutMs);\n  }\n  referenceTags() {\n    return [[\"r\", this.url]];\n  }\n  addValidatedEvent() {\n    this.validatedEventCount++;\n  }\n  addNonValidatedEvent() {\n    this.nonValidatedEventCount++;\n  }\n  /**\n   * The current validation ratio this relay has achieved.\n   */\n  get validationRatio() {\n    if (this.nonValidatedEventCount === 0) {\n      return 1;\n    }\n    return this.validatedEventCount / (this.validatedEventCount + this.nonValidatedEventCount);\n  }\n  shouldValidateEvent() {\n    if (this.trusted) {\n      return false;\n    }\n    if (this.targetValidationRatio === void 0) {\n      return true;\n    }\n    return this.validationRatio < this.targetValidationRatio;\n  }\n  get connected() {\n    return this.connectivity.connected;\n  }\n  req;\n  close;\n};\n\n// src/relay/sets/index.ts\nvar NDKPublishError = class extends Error {\n  errors;\n  publishedToRelays;\n  /**\n   * Intended relay set where the publishing was intended to happen.\n   */\n  intendedRelaySet;\n  constructor(message, errors, publishedToRelays, intendedRelaySet) {\n    super(message);\n    this.errors = errors;\n    this.publishedToRelays = publishedToRelays;\n    this.intendedRelaySet = intendedRelaySet;\n  }\n  get relayErrors() {\n    const errors = [];\n    for (const [relay, err] of this.errors) {\n      errors.push(`${relay.url}: ${err}`);\n    }\n    return errors.join(\"\\n\");\n  }\n};\nvar NDKRelaySet = class _NDKRelaySet {\n  relays;\n  debug;\n  ndk;\n  pool;\n  constructor(relays, ndk, pool) {\n    this.relays = relays;\n    this.ndk = ndk;\n    this.pool = pool ?? ndk.pool;\n    this.debug = ndk.debug.extend(\"relayset\");\n  }\n  /**\n   * Adds a relay to this set.\n   */\n  addRelay(relay) {\n    this.relays.add(relay);\n  }\n  get relayUrls() {\n    return Array.from(this.relays).map((r) => r.url);\n  }\n  /**\n   * Creates a relay set from a list of relay URLs.\n   *\n   * If no connection to the relay is found in the pool it will temporarily\n   * connect to it.\n   *\n   * @param relayUrls - list of relay URLs to include in this set\n   * @param ndk\n   * @param connect - whether to connect to the relay immediately if it was already in the pool but not connected\n   * @returns NDKRelaySet\n   */\n  static fromRelayUrls(relayUrls, ndk, connect = true, pool) {\n    pool = pool ?? ndk.pool;\n    if (!pool) throw new Error(\"No pool provided\");\n    const relays = /* @__PURE__ */ new Set();\n    for (const url of relayUrls) {\n      const relay = pool.relays.get(normalizeRelayUrl(url));\n      if (relay) {\n        if (relay.status < 5 /* CONNECTED */ && connect) {\n          relay.connect();\n        }\n        relays.add(relay);\n      } else {\n        const temporaryRelay = new NDKRelay(normalizeRelayUrl(url), ndk?.relayAuthDefaultPolicy, ndk);\n        pool.useTemporaryRelay(temporaryRelay, void 0, `requested from fromRelayUrls ${relayUrls}`);\n        relays.add(temporaryRelay);\n      }\n    }\n    return new _NDKRelaySet(new Set(relays), ndk, pool);\n  }\n  /**\n   * Publish an event to all relays in this relay set.\n   *\n   * This method implements a robust mechanism for publishing events to multiple relays with\n   * built-in handling for race conditions, timeouts, and partial failures. The implementation\n   * uses a dual-tracking mechanism to ensure accurate reporting of which relays successfully\n   * received an event.\n   *\n   * Key aspects of this implementation:\n   *\n   * 1. DUAL-TRACKING MECHANISM:\n   *    - Promise-based tracking: Records successes/failures from the promises returned by relay.publish()\n   *    - Event-based tracking: Listens for 'relay:published' events that indicate successful publishing\n   *    This approach ensures we don't miss successful publishes even if there are subsequent errors in\n   *    the promise chain.\n   *\n   * 2. RACE CONDITION HANDLING:\n   *    - If a relay emits a success event but later fails in the promise chain, we still count it as a success\n   *    - If a relay times out after successfully publishing, we still count it as a success\n   *    - All relay operations happen in parallel, with proper tracking regardless of completion order\n   *\n   * 3. TIMEOUT MANAGEMENT:\n   *    - Individual timeouts for each relay operation\n   *    - Proper cleanup of timeouts to prevent memory leaks\n   *    - Clear timeout error reporting\n   *\n   * 4. ERROR HANDLING:\n   *    - Detailed tracking of specific errors for each failed relay\n   *    - Special handling for ephemeral events (which don't expect acknowledgement)\n   *    - RequiredRelayCount parameter to control the minimum success threshold\n   *\n   * @param event Event to publish\n   * @param timeoutMs Timeout in milliseconds for each relay publish operation\n   * @param requiredRelayCount The minimum number of relays we expect the event to be published to\n   * @returns A set of relays the event was published to\n   * @throws {NDKPublishError} If the event could not be published to at least `requiredRelayCount` relays\n   * @example\n   * ```typescript\n   * const relaySet = new NDKRelaySet(new Set([relay1, relay2]), ndk);\n   * const publishedToRelays = await relaySet.publish(event);\n   * // publishedToRelays can contain relay1, relay2, both, or none\n   * // depending on which relays the event was successfully published to\n   * if (publishedToRelays.size > 0) {\n   *   console.log(\"Event published to at least one relay\");\n   * }\n   * ```\n   */\n  async publish(event, timeoutMs, requiredRelayCount = 1) {\n    const publishedToRelays = /* @__PURE__ */ new Set();\n    const errors = /* @__PURE__ */ new Map();\n    const isEphemeral2 = event.isEphemeral();\n    event.publishStatus = \"pending\";\n    const relayPublishedHandler = (relay) => {\n      publishedToRelays.add(relay);\n    };\n    event.on(\"relay:published\", relayPublishedHandler);\n    try {\n      const promises = Array.from(this.relays).map((relay) => {\n        return new Promise((resolve) => {\n          const timeoutId = timeoutMs ? setTimeout(() => {\n            if (!publishedToRelays.has(relay)) {\n              errors.set(relay, new Error(`Publish timeout after ${timeoutMs}ms`));\n              resolve(false);\n            }\n          }, timeoutMs) : null;\n          relay.publish(event, timeoutMs).then((success) => {\n            if (timeoutId) clearTimeout(timeoutId);\n            if (success) {\n              publishedToRelays.add(relay);\n              resolve(true);\n            } else {\n              resolve(false);\n            }\n          }).catch((err) => {\n            if (timeoutId) clearTimeout(timeoutId);\n            if (!isEphemeral2) {\n              errors.set(relay, err);\n            }\n            resolve(false);\n          });\n        });\n      });\n      await Promise.all(promises);\n      if (publishedToRelays.size < requiredRelayCount) {\n        if (!isEphemeral2) {\n          const error = new NDKPublishError(\n            \"Not enough relays received the event\",\n            errors,\n            publishedToRelays,\n            this\n          );\n          event.publishStatus = \"error\";\n          event.publishError = error;\n          this.ndk?.emit(\"event:publish-failed\", event, error, this.relayUrls);\n          throw error;\n        }\n      } else {\n        event.publishStatus = \"success\";\n        event.emit(\"published\", { relaySet: this, publishedToRelays });\n      }\n      return publishedToRelays;\n    } finally {\n      event.off(\"relay:published\", relayPublishedHandler);\n    }\n  }\n  get size() {\n    return this.relays.size;\n  }\n};\n\n// src/relay/sets/calculate.ts\nvar d = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:outbox:calculate\");\nasync function calculateRelaySetFromEvent(ndk, event) {\n  const relays = /* @__PURE__ */ new Set();\n  const authorWriteRelays = await getWriteRelaysFor(ndk, event.pubkey);\n  if (authorWriteRelays) {\n    authorWriteRelays.forEach((relayUrl) => {\n      const relay = ndk.pool?.getRelay(relayUrl);\n      if (relay) relays.add(relay);\n    });\n  }\n  let relayHints = event.tags.filter((tag) => [\"a\", \"e\"].includes(tag[0])).map((tag) => tag[2]).filter((url) => url?.startsWith(\"wss://\")).filter((url) => {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }).map((url) => normalizeRelayUrl(url));\n  relayHints = Array.from(new Set(relayHints)).slice(0, 5);\n  relayHints.forEach((relayUrl) => {\n    const relay = ndk.pool?.getRelay(relayUrl, true, true);\n    if (relay) {\n      d(\"Adding relay hint %s\", relayUrl);\n      relays.add(relay);\n    }\n  });\n  const pTags = event.getMatchingTags(\"p\").map((tag) => tag[1]);\n  if (pTags.length < 5) {\n    const pTaggedRelays = Array.from(\n      chooseRelayCombinationForPubkeys(ndk, pTags, \"read\", {\n        preferredRelays: new Set(authorWriteRelays)\n      }).keys()\n    );\n    pTaggedRelays.forEach((relayUrl) => {\n      const relay = ndk.pool?.getRelay(relayUrl, false, true);\n      if (relay) {\n        d(\"Adding p-tagged relay %s\", relayUrl);\n        relays.add(relay);\n      }\n    });\n  } else {\n    d(\"Too many p-tags to consider %d\", pTags.length);\n  }\n  ndk.pool?.permanentAndConnectedRelays().forEach((relay) => relays.add(relay));\n  return new NDKRelaySet(relays, ndk);\n}\nfunction calculateRelaySetsFromFilter(ndk, filters, pool) {\n  const result = /* @__PURE__ */ new Map();\n  const authors = /* @__PURE__ */ new Set();\n  filters.forEach((filter) => {\n    if (filter.authors) {\n      filter.authors.forEach((author) => authors.add(author));\n    }\n  });\n  if (authors.size > 0) {\n    const authorToRelaysMap = getRelaysForFilterWithAuthors(ndk, Array.from(authors));\n    for (const relayUrl of authorToRelaysMap.keys()) {\n      result.set(relayUrl, []);\n    }\n    for (const filter of filters) {\n      if (filter.authors) {\n        for (const [relayUrl, authors2] of authorToRelaysMap.entries()) {\n          const authorFilterAndRelayPubkeyIntersection = filter.authors.filter(\n            (author) => authors2.includes(author)\n          );\n          result.set(relayUrl, [\n            ...result.get(relayUrl),\n            {\n              ...filter,\n              // Overwrite authors sent to this relay with the authors that were\n              // present in the filter and are also present in the relay\n              authors: authorFilterAndRelayPubkeyIntersection\n            }\n          ]);\n        }\n      } else {\n        for (const relayUrl of authorToRelaysMap.keys()) {\n          result.set(relayUrl, [...result.get(relayUrl), filter]);\n        }\n      }\n    }\n  } else {\n    if (ndk.explicitRelayUrls) {\n      ndk.explicitRelayUrls.forEach((relayUrl) => {\n        result.set(relayUrl, filters);\n      });\n    }\n  }\n  if (result.size === 0) {\n    pool.permanentAndConnectedRelays().slice(0, 5).forEach((relay) => {\n      result.set(relay.url, filters);\n    });\n  }\n  return result;\n}\nfunction calculateRelaySetsFromFilters(ndk, filters, pool) {\n  const a = calculateRelaySetsFromFilter(ndk, filters, pool);\n  return a;\n}\n\n// src/events/content-tagger.ts\n\nfunction mergeTags(tags1, tags2) {\n  const tagMap = /* @__PURE__ */ new Map();\n  const generateKey = (tag) => tag.join(\",\");\n  const isContained = (smaller, larger) => {\n    return smaller.every((value, index) => value === larger[index]);\n  };\n  const processTag = (tag) => {\n    for (const [key, existingTag] of tagMap) {\n      if (isContained(existingTag, tag) || isContained(tag, existingTag)) {\n        if (tag.length >= existingTag.length) {\n          tagMap.set(key, tag);\n        }\n        return;\n      }\n    }\n    tagMap.set(generateKey(tag), tag);\n  };\n  tags1.concat(tags2).forEach(processTag);\n  return Array.from(tagMap.values());\n}\nfunction uniqueTag(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  const sameLength = aLength === bLength;\n  if (sameLength) {\n    if (a.every((v, i) => v === b[i])) {\n      return [a];\n    }\n    return [a, b];\n  }\n  if (aLength > bLength && a.every((v, i) => v === b[i])) {\n    return [a];\n  }\n  if (bLength > aLength && b.every((v, i) => v === a[i])) {\n    return [b];\n  }\n  return [a, b];\n}\nvar hashtagRegex = /(?<=\\s|^)(#[^\\s!@#$%^&*()=+./,[{\\]};:'\"?><]+)/g;\nfunction generateHashtags(content) {\n  const hashtags = content.match(hashtagRegex);\n  const tagIds = /* @__PURE__ */ new Set();\n  const tag = /* @__PURE__ */ new Set();\n  if (hashtags) {\n    for (const hashtag of hashtags) {\n      if (tagIds.has(hashtag.slice(1))) continue;\n      tag.add(hashtag.slice(1));\n      tagIds.add(hashtag.slice(1));\n    }\n  }\n  return Array.from(tag);\n}\nasync function generateContentTags(content, tags = []) {\n  const tagRegex = /(@|nostr:)(npub|nprofile|note|nevent|naddr)[a-zA-Z0-9]+/g;\n  const promises = [];\n  const addTagIfNew = (t) => {\n    if (!tags.find((t2) => [\"q\", t[0]].includes(t2[0]) && t2[1] === t[1])) {\n      tags.push(t);\n    }\n  };\n  content = content.replace(tagRegex, (tag) => {\n    try {\n      const entity = tag.split(/(@|nostr:)/)[2];\n      const { type, data } = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(entity);\n      let t;\n      switch (type) {\n        case \"npub\":\n          t = [\"p\", data];\n          break;\n        case \"nprofile\":\n          t = [\"p\", data.pubkey];\n          break;\n        case \"note\":\n          promises.push(\n            new Promise(async (resolve) => {\n              addTagIfNew([\"q\", data, await maybeGetEventRelayUrl(entity)]);\n              resolve();\n            })\n          );\n          break;\n        case \"nevent\":\n          promises.push(\n            new Promise(async (resolve) => {\n              const { id, author } = data;\n              let { relays } = data;\n              if (!relays || relays.length === 0) {\n                relays = [await maybeGetEventRelayUrl(entity)];\n              }\n              addTagIfNew([\"q\", id, relays[0]]);\n              if (author) addTagIfNew([\"p\", author]);\n              resolve();\n            })\n          );\n          break;\n        case \"naddr\":\n          promises.push(\n            new Promise(async (resolve) => {\n              const id = [data.kind, data.pubkey, data.identifier].join(\":\");\n              let relays = data.relays ?? [];\n              if (relays.length === 0) {\n                relays = [await maybeGetEventRelayUrl(entity)];\n              }\n              addTagIfNew([\"q\", id, relays[0]]);\n              addTagIfNew([\"p\", data.pubkey]);\n              resolve();\n            })\n          );\n          break;\n        default:\n          return tag;\n      }\n      if (t) addTagIfNew(t);\n      return `nostr:${entity}`;\n    } catch (_error) {\n      return tag;\n    }\n  });\n  await Promise.all(promises);\n  const newTags = generateHashtags(content).map((hashtag) => [\"t\", hashtag]);\n  tags = mergeTags(tags, newTags);\n  return { content, tags };\n}\nasync function maybeGetEventRelayUrl(_nip19Id) {\n  return \"\";\n}\n\n// src/events/encryption.ts\nasync function encrypt(recipient, signer, scheme = \"nip44\") {\n  let encrypted;\n  if (!this.ndk) throw new Error(\"No NDK instance found!\");\n  let currentSigner = signer;\n  if (!currentSigner) {\n    this.ndk.assertSigner();\n    currentSigner = this.ndk.signer;\n  }\n  if (!currentSigner) throw new Error(\"no NDK signer\");\n  const currentRecipient = recipient || (() => {\n    const pTags = this.getMatchingTags(\"p\");\n    if (pTags.length !== 1) {\n      throw new Error(\"No recipient could be determined and no explicit recipient was provided\");\n    }\n    return this.ndk.getUser({ pubkey: pTags[0][1] });\n  })();\n  if (scheme === \"nip44\" && await isEncryptionEnabled(currentSigner, \"nip44\")) {\n    encrypted = await currentSigner.encrypt(currentRecipient, this.content, \"nip44\");\n  }\n  if ((!encrypted || scheme === \"nip04\") && await isEncryptionEnabled(currentSigner, \"nip04\")) {\n    encrypted = await currentSigner.encrypt(currentRecipient, this.content, \"nip04\");\n  }\n  if (!encrypted) throw new Error(\"Failed to encrypt event.\");\n  this.content = encrypted;\n}\nasync function decrypt(sender, signer, scheme) {\n  if (this.ndk?.cacheAdapter?.getDecryptedEvent) {\n    let cachedEvent = null;\n    if (typeof this.ndk.cacheAdapter.getDecryptedEvent === \"function\") {\n      cachedEvent = this.ndk.cacheAdapter.getDecryptedEvent(this.id);\n    }\n    if (cachedEvent) {\n      this.content = cachedEvent.content;\n      return;\n    }\n  }\n  let decrypted;\n  if (!this.ndk) throw new Error(\"No NDK instance found!\");\n  let currentSigner = signer;\n  if (!currentSigner) {\n    this.ndk.assertSigner();\n    currentSigner = this.ndk.signer;\n  }\n  if (!currentSigner) throw new Error(\"no NDK signer\");\n  const currentSender = sender || this.author;\n  if (!currentSender) throw new Error(\"No sender provided and no author available\");\n  const currentScheme = scheme || (this.content.match(/\\\\?iv=/) ? \"nip04\" : \"nip44\");\n  if ((currentScheme === \"nip04\" || this.kind === 4) && await isEncryptionEnabled(currentSigner, \"nip04\") && this.content.search(\"\\\\?iv=\")) {\n    decrypted = await currentSigner.decrypt(currentSender, this.content, \"nip04\");\n  }\n  if (!decrypted && currentScheme === \"nip44\" && await isEncryptionEnabled(currentSigner, \"nip44\")) {\n    decrypted = await currentSigner.decrypt(currentSender, this.content, \"nip44\");\n  }\n  if (!decrypted) throw new Error(\"Failed to decrypt event.\");\n  this.content = decrypted;\n  if (this.ndk?.cacheAdapter?.addDecryptedEvent) {\n    this.ndk.cacheAdapter.addDecryptedEvent(this);\n  }\n}\nasync function isEncryptionEnabled(signer, scheme) {\n  if (!signer.encryptionEnabled) return false;\n  if (!scheme) return true;\n  return Boolean(await signer.encryptionEnabled(scheme));\n}\n\n// src/thread/index.ts\nfunction eventsBySameAuthor(op, events) {\n  const eventsByAuthor = /* @__PURE__ */ new Map();\n  eventsByAuthor.set(op.id, op);\n  events.forEach((event) => {\n    if (event.pubkey === op.pubkey) {\n      eventsByAuthor.set(event.id, event);\n    }\n  });\n  return eventsByAuthor;\n}\nvar hasMarkers = (event, tagType) => {\n  return event.getMatchingTags(tagType).some((tag) => tag[3] && tag[3] !== \"\");\n};\nfunction eventIsReply(op, event, threadIds = /* @__PURE__ */ new Set(), tagType) {\n  tagType ??= op.tagType();\n  const tags = event.getMatchingTags(tagType);\n  threadIds.add(op.tagId());\n  if (threadIds.has(event.tagId())) return false;\n  const heedExplicitReplyMarker = () => {\n    let eventIsTagged = false;\n    for (const tag of tags) {\n      if (tag[3] === \"reply\") return threadIds.has(tag[1]);\n      const markerIsEmpty = tag[3] === \"\" || tag[3] === void 0;\n      const markerIsRoot = tag[3] === \"root\";\n      if (tag[1] === op.tagId() && (markerIsEmpty || markerIsRoot)) {\n        eventIsTagged = markerIsRoot ? \"root\" : true;\n      }\n    }\n    if (!eventIsTagged) return false;\n    if (eventIsTagged === \"root\") return true;\n  };\n  const explicitReplyMarker = heedExplicitReplyMarker();\n  if (explicitReplyMarker !== void 0) return explicitReplyMarker;\n  if (hasMarkers(event, tagType)) return false;\n  const expectedTags = op.getMatchingTags(\"e\").map((tag) => tag[1]);\n  expectedTags.push(op.id);\n  return event.getMatchingTags(\"e\").every((tag) => expectedTags.includes(tag[1]));\n}\nfunction eventThreads(op, events) {\n  const eventsByAuthor = eventsBySameAuthor(op, events);\n  const threadEvents = events.filter((event) => eventIsPartOfThread(op, event, eventsByAuthor));\n  return threadEvents.sort((a, b) => a.created_at - b.created_at);\n}\nfunction getEventReplyId(event) {\n  const replyTag = getReplyTag(event);\n  if (replyTag) return replyTag[1];\n  const rootTag = getRootTag(event);\n  if (rootTag) return rootTag[1];\n}\nfunction isEventOriginalPost(event) {\n  return getEventReplyId(event) === void 0;\n}\nfunction eventThreadIds(op, events) {\n  const threadIds = /* @__PURE__ */ new Map();\n  const threadEvents = eventThreads(op, events);\n  threadEvents.forEach((event) => threadIds.set(event.id, event));\n  return threadIds;\n}\nfunction eventReplies(op, events, threadEventIds) {\n  threadEventIds ??= new Set(eventThreadIds(op, events).keys());\n  return events.filter((event) => eventIsReply(op, event, threadEventIds));\n}\nfunction eventIsPartOfThread(op, event, eventsByAuthor) {\n  if (op.pubkey !== event.pubkey) return false;\n  const taggedEventIds = event.getMatchingTags(\"e\").map((tag) => tag[1]);\n  const allTaggedEventsAreByOriginalAuthor = taggedEventIds.every((id) => eventsByAuthor.has(id));\n  return allTaggedEventsAreByOriginalAuthor;\n}\nfunction eventHasETagMarkers(event) {\n  for (const tag of event.tags) {\n    if (tag[0] === \"e\" && (tag[3] ?? \"\").length > 0) return true;\n  }\n  return false;\n}\nfunction getRootEventId(event, searchTag) {\n  searchTag ??= event.tagType();\n  const rootEventTag = getRootTag(event, searchTag);\n  if (rootEventTag) return rootEventTag[1];\n  const replyTag = getReplyTag(event, searchTag);\n  return replyTag?.[1];\n}\nfunction getRootTag(event, searchTag) {\n  searchTag ??= event.tagType();\n  const rootEventTag = event.tags.find(isTagRootTag);\n  if (!rootEventTag) {\n    if (eventHasETagMarkers(event)) return;\n    const matchingTags = event.getMatchingTags(searchTag);\n    if (matchingTags.length < 3) return matchingTags[0];\n  }\n  return rootEventTag;\n}\nvar nip22RootTags = /* @__PURE__ */ new Set([\"A\", \"E\", \"I\"]);\nvar nip22ReplyTags = /* @__PURE__ */ new Set([\"a\", \"e\", \"i\"]);\nfunction getReplyTag(event, searchTag) {\n  if (event.kind === 1111 /* GenericReply */) {\n    let replyTag2;\n    for (const tag of event.tags) {\n      if (nip22RootTags.has(tag[0])) replyTag2 = tag;\n      else if (nip22ReplyTags.has(tag[0])) {\n        replyTag2 = tag;\n        break;\n      }\n    }\n    return replyTag2;\n  }\n  searchTag ??= event.tagType();\n  let hasMarkers2 = false;\n  let replyTag;\n  for (const tag of event.tags) {\n    if (tag[0] !== searchTag) continue;\n    if ((tag[3] ?? \"\").length > 0) hasMarkers2 = true;\n    if (hasMarkers2 && tag[3] === \"reply\") return tag;\n    if (hasMarkers2 && tag[3] === \"root\") replyTag = tag;\n    if (!hasMarkers2) replyTag = tag;\n  }\n  return replyTag;\n}\nfunction isTagRootTag(tag) {\n  return tag[0] === \"E\" || tag[3] === \"root\";\n}\n\n// src/events/fetch-tagged-event.ts\nasync function fetchTaggedEvent(tag, marker) {\n  if (!this.ndk) throw new Error(\"NDK instance not found\");\n  const t = this.getMatchingTags(tag, marker);\n  if (t.length === 0) return void 0;\n  const [_, id, hint] = t[0];\n  let relay = hint !== \"\" ? this.ndk.pool.getRelay(hint) : void 0;\n  const event = await this.ndk.fetchEvent(id, {}, relay);\n  return event;\n}\nasync function fetchRootEvent(subOpts) {\n  if (!this.ndk) throw new Error(\"NDK instance not found\");\n  const rootTag = getRootTag(this);\n  if (!rootTag) return void 0;\n  return this.ndk.fetchEventFromTag(rootTag, this, subOpts);\n}\nasync function fetchReplyEvent(subOpts) {\n  if (!this.ndk) throw new Error(\"NDK instance not found\");\n  const replyTag = getReplyTag(this);\n  if (!replyTag) return void 0;\n  return this.ndk.fetchEventFromTag(replyTag, this, subOpts);\n}\n\n// src/events/kind.ts\nfunction isReplaceable() {\n  if (this.kind === void 0) throw new Error(\"Kind not set\");\n  return [0, 3].includes(this.kind) || this.kind >= 1e4 && this.kind < 2e4 || this.kind >= 3e4 && this.kind < 4e4;\n}\nfunction isEphemeral() {\n  if (this.kind === void 0) throw new Error(\"Kind not set\");\n  return this.kind >= 2e4 && this.kind < 3e4;\n}\nfunction isParamReplaceable() {\n  if (this.kind === void 0) throw new Error(\"Kind not set\");\n  return this.kind >= 3e4 && this.kind < 4e4;\n}\n\n// src/events/nip19.ts\n\nvar DEFAULT_RELAY_COUNT = 2;\nfunction encode(maxRelayCount = DEFAULT_RELAY_COUNT) {\n  let relays = [];\n  if (this.onRelays.length > 0) {\n    relays = this.onRelays.map((relay) => relay.url);\n  } else if (this.relay) {\n    relays = [this.relay.url];\n  }\n  if (relays.length > maxRelayCount) {\n    relays = relays.slice(0, maxRelayCount);\n  }\n  if (this.isParamReplaceable()) {\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.naddrEncode({\n      kind: this.kind,\n      pubkey: this.pubkey,\n      identifier: this.replaceableDTag(),\n      relays\n    });\n  }\n  if (relays.length > 0) {\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.neventEncode({\n      id: this.tagId(),\n      relays,\n      author: this.pubkey\n    });\n  }\n  return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.noteEncode(this.tagId());\n}\n\n// src/events/repost.ts\nasync function repost(publish = true, signer) {\n  if (!signer && publish) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    signer = this.ndk.signer;\n  }\n  const e = new NDKEvent(this.ndk, {\n    kind: getKind(this)\n  });\n  if (!this.isProtected) e.content = JSON.stringify(this.rawEvent());\n  e.tag(this);\n  if (this.kind !== 1 /* Text */) {\n    e.tags.push([\"k\", `${this.kind}`]);\n  }\n  if (signer) await e.sign(signer);\n  if (publish) await e.publish();\n  return e;\n}\nfunction getKind(event) {\n  if (event.kind === 1) {\n    return 6 /* Repost */;\n  }\n  return 16 /* GenericRepost */;\n}\n\n// src/events/serializer.ts\nfunction serialize(includeSig = false, includeId = false) {\n  const payload = [0, this.pubkey, this.created_at, this.kind, this.tags, this.content];\n  if (includeSig) payload.push(this.sig);\n  if (includeId) payload.push(this.id);\n  return JSON.stringify(payload);\n}\nfunction deserialize(serializedEvent) {\n  const eventArray = JSON.parse(serializedEvent);\n  const ret = {\n    pubkey: eventArray[1],\n    created_at: eventArray[2],\n    kind: eventArray[3],\n    tags: eventArray[4],\n    content: eventArray[5]\n  };\n  if (eventArray.length >= 7) {\n    const first = eventArray[6];\n    const second = eventArray[7];\n    if (first && first.length === 128) {\n      ret.sig = first;\n      if (second && second.length === 64) {\n        ret.id = second;\n      }\n    } else if (first && first.length === 64) {\n      ret.id = first;\n      if (second && second.length === 128) {\n        ret.sig = second;\n      }\n    }\n  }\n  return ret;\n}\n\n// src/events/validation.ts\n\n\n\n\n\n// src/events/signature.ts\nvar worker;\nvar processingQueue = {};\nfunction signatureVerificationInit(w) {\n  worker = w;\n  worker.onmessage = (msg) => {\n    const [eventId, result] = msg.data;\n    const record = processingQueue[eventId];\n    if (!record) {\n      console.error(\"No record found for event\", eventId);\n      return;\n    }\n    delete processingQueue[eventId];\n    for (const resolve of record.resolves) {\n      resolve(result);\n    }\n  };\n}\nasync function verifySignatureAsync(event, _persist) {\n  const promise = new Promise((resolve) => {\n    const serialized = event.serialize();\n    let enqueue = false;\n    if (!processingQueue[event.id]) {\n      processingQueue[event.id] = { event, resolves: [] };\n      enqueue = true;\n    }\n    processingQueue[event.id].resolves.push(resolve);\n    if (!enqueue) return;\n    worker?.postMessage({\n      serialized,\n      id: event.id,\n      sig: event.sig,\n      pubkey: event.pubkey\n    });\n  });\n  return promise;\n}\n\n// src/events/validation.ts\nvar PUBKEY_REGEX = /^[a-f0-9]{64}$/;\nfunction validate() {\n  if (typeof this.kind !== \"number\") return false;\n  if (typeof this.content !== \"string\") return false;\n  if (typeof this.created_at !== \"number\") return false;\n  if (typeof this.pubkey !== \"string\") return false;\n  if (!this.pubkey.match(PUBKEY_REGEX)) return false;\n  if (!Array.isArray(this.tags)) return false;\n  for (let i = 0; i < this.tags.length; i++) {\n    const tag = this.tags[i];\n    if (!Array.isArray(tag)) return false;\n    for (let j = 0; j < tag.length; j++) {\n      if (typeof tag[j] === \"object\") return false;\n    }\n  }\n  return true;\n}\nvar verifiedSignatures = new typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__.LRUCache({\n  maxSize: 1e3,\n  entryExpirationTimeInMS: 6e4\n});\nfunction verifySignature(persist) {\n  if (typeof this.signatureVerified === \"boolean\") return this.signatureVerified;\n  const prevVerification = verifiedSignatures.get(this.id);\n  if (prevVerification !== null) {\n    this.signatureVerified = !!prevVerification;\n    return this.signatureVerified;\n  }\n  try {\n    if (this.ndk?.asyncSigVerification) {\n      verifySignatureAsync(this, persist).then((result) => {\n        if (persist) {\n          this.signatureVerified = result;\n          if (result) verifiedSignatures.set(this.id, this.sig);\n        }\n        if (!result) {\n          this.ndk?.emit(\"event:invalid-sig\", this);\n          verifiedSignatures.set(this.id, false);\n        }\n      });\n    } else {\n      const hash = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(new TextEncoder().encode(this.serialize()));\n      const res = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__.schnorr.verify(this.sig, hash, this.pubkey);\n      if (res) verifiedSignatures.set(this.id, this.sig);\n      else verifiedSignatures.set(this.id, false);\n      this.signatureVerified = res;\n      return res;\n    }\n  } catch (_err) {\n    this.signatureVerified = false;\n    return false;\n  }\n}\nfunction getEventHash() {\n  return getEventHashFromSerializedEvent(this.serialize());\n}\nfunction getEventHashFromSerializedEvent(serializedEvent) {\n  const eventHash = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(new TextEncoder().encode(serializedEvent));\n  return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(eventHash);\n}\n\n// src/events/index.ts\nvar skipClientTagOnKinds = /* @__PURE__ */ new Set([\n  0 /* Metadata */,\n  4 /* EncryptedDirectMessage */,\n  1059 /* GiftWrap */,\n  13 /* GiftWrapSeal */,\n  3 /* Contacts */,\n  9734 /* ZapRequest */,\n  5 /* EventDeletion */\n]);\nvar NDKEvent = class _NDKEvent extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  ndk;\n  created_at;\n  content = \"\";\n  tags = [];\n  kind;\n  id = \"\";\n  sig;\n  pubkey = \"\";\n  signatureVerified;\n  _author = void 0;\n  /**\n   * The relay that this event was first received from.\n   */\n  relay;\n  /**\n   * The relays that this event was received from and/or successfully published to.\n   */\n  get onRelays() {\n    let res = [];\n    if (!this.ndk) {\n      if (this.relay) res.push(this.relay);\n    } else {\n      res = this.ndk.subManager.seenEvents.get(this.id) || [];\n    }\n    return res;\n  }\n  /**\n   * The status of the publish operation.\n   */\n  publishStatus = \"success\";\n  publishError;\n  constructor(ndk, event) {\n    super();\n    this.ndk = ndk;\n    this.created_at = event?.created_at;\n    this.content = event?.content || \"\";\n    this.tags = event?.tags || [];\n    this.id = event?.id || \"\";\n    this.sig = event?.sig;\n    this.pubkey = event?.pubkey || \"\";\n    this.kind = event?.kind;\n    if (event instanceof _NDKEvent) {\n      if (this.relay) {\n        this.relay = event.relay;\n        this.ndk?.subManager.seenEvent(event.id, this.relay);\n      }\n      this.publishStatus = event.publishStatus;\n      this.publishError = event.publishError;\n    }\n  }\n  /**\n   * Deserialize an NDKEvent from a serialized payload.\n   * @param ndk\n   * @param event\n   * @returns\n   */\n  static deserialize(ndk, event) {\n    return new _NDKEvent(ndk, deserialize(event));\n  }\n  /**\n   * Returns the event as is.\n   */\n  rawEvent() {\n    return {\n      created_at: this.created_at,\n      content: this.content,\n      tags: this.tags,\n      kind: this.kind,\n      pubkey: this.pubkey,\n      id: this.id,\n      sig: this.sig\n    };\n  }\n  set author(user) {\n    this.pubkey = user.pubkey;\n    this._author = user;\n    this._author.ndk ??= this.ndk;\n  }\n  /**\n   * Returns an NDKUser for the author of the event.\n   */\n  get author() {\n    if (this._author) return this._author;\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    const user = this.ndk.getUser({ pubkey: this.pubkey });\n    this._author = user;\n    return user;\n  }\n  /**\n   * NIP-73 tagging of external entities\n   * @param entity to be tagged\n   * @param type of the entity\n   * @param markerUrl to be used as the marker URL\n   *\n   * @example\n   * ```typescript\n   * event.tagExternal(\"https://example.com/article/123#nostr\", \"url\");\n   * event.tags => [[\"i\", \"https://example.com/123\"], [\"k\", \"https://example.com\"]]\n   * ```\n   *\n   * @example tag a podcast:item:guid\n   * ```typescript\n   * event.tagExternal(\"e32b4890-b9ea-4aef-a0bf-54b787833dc5\", \"podcast:item:guid\");\n   * event.tags => [[\"i\", \"podcast:item:guid:e32b4890-b9ea-4aef-a0bf-54b787833dc5\"], [\"k\", \"podcast:item:guid\"]]\n   * ```\n   *\n   * @see https://github.com/nostr-protocol/nips/blob/master/73.md\n   */\n  tagExternal(entity, type, markerUrl) {\n    const iTag = [\"i\"];\n    const kTag = [\"k\"];\n    switch (type) {\n      case \"url\": {\n        const url = new URL(entity);\n        url.hash = \"\";\n        iTag.push(url.toString());\n        kTag.push(`${url.protocol}//${url.host}`);\n        break;\n      }\n      case \"hashtag\":\n        iTag.push(`#${entity.toLowerCase()}`);\n        kTag.push(\"#\");\n        break;\n      case \"geohash\":\n        iTag.push(`geo:${entity.toLowerCase()}`);\n        kTag.push(\"geo\");\n        break;\n      case \"isbn\":\n        iTag.push(`isbn:${entity.replace(/-/g, \"\")}`);\n        kTag.push(\"isbn\");\n        break;\n      case \"podcast:guid\":\n        iTag.push(`podcast:guid:${entity}`);\n        kTag.push(\"podcast:guid\");\n        break;\n      case \"podcast:item:guid\":\n        iTag.push(`podcast:item:guid:${entity}`);\n        kTag.push(\"podcast:item:guid\");\n        break;\n      case \"podcast:publisher:guid\":\n        iTag.push(`podcast:publisher:guid:${entity}`);\n        kTag.push(\"podcast:publisher:guid\");\n        break;\n      case \"isan\":\n        iTag.push(`isan:${entity.split(\"-\").slice(0, 4).join(\"-\")}`);\n        kTag.push(\"isan\");\n        break;\n      case \"doi\":\n        iTag.push(`doi:${entity.toLowerCase()}`);\n        kTag.push(\"doi\");\n        break;\n      default:\n        throw new Error(`Unsupported NIP-73 entity type: ${type}`);\n    }\n    if (markerUrl) {\n      iTag.push(markerUrl);\n    }\n    this.tags.push(iTag);\n    this.tags.push(kTag);\n  }\n  /**\n   * Tag a user with an optional marker.\n   * @param target What is to be tagged. Can be an NDKUser, NDKEvent, or an NDKTag.\n   * @param marker The marker to use in the tag.\n   * @param skipAuthorTag Whether to explicitly skip adding the author tag of the event.\n   * @param forceTag Force a specific tag to be used instead of the default \"e\" or \"a\" tag.\n   * @example\n   * ```typescript\n   * reply.tag(opEvent, \"reply\");\n   * // reply.tags => [[\"e\", <id>, <relay>, \"reply\"]]\n   * ```\n   */\n  tag(target, marker, skipAuthorTag, forceTag) {\n    let tags = [];\n    const isNDKUser = target.fetchProfile !== void 0;\n    if (isNDKUser) {\n      forceTag ??= \"p\";\n      const tag = [forceTag, target.pubkey];\n      if (marker) tag.push(...[\"\", marker]);\n      tags.push(tag);\n    } else if (target instanceof _NDKEvent) {\n      const event = target;\n      skipAuthorTag ??= event?.pubkey === this.pubkey;\n      tags = event.referenceTags(marker, skipAuthorTag, forceTag);\n      for (const pTag of event.getMatchingTags(\"p\")) {\n        if (pTag[1] === this.pubkey) continue;\n        if (this.tags.find((t) => t[0] === \"p\" && t[1] === pTag[1])) continue;\n        this.tags.push([\"p\", pTag[1]]);\n      }\n    } else if (Array.isArray(target)) {\n      tags = [target];\n    } else {\n      throw new Error(\"Invalid argument\", target);\n    }\n    this.tags = mergeTags(this.tags, tags);\n  }\n  /**\n   * Return a NostrEvent object, trying to fill in missing fields\n   * when possible, adding tags when necessary.\n   * @param pubkey {string} The pubkey of the user who the event belongs to.\n   * @returns {Promise<NostrEvent>} A promise that resolves to a NostrEvent.\n   */\n  async toNostrEvent(pubkey) {\n    if (!pubkey && this.pubkey === \"\") {\n      const user = await this.ndk?.signer?.user();\n      this.pubkey = user?.pubkey || \"\";\n    }\n    if (!this.created_at) {\n      this.created_at = Math.floor(Date.now() / 1e3);\n    }\n    const { content, tags } = await this.generateTags();\n    this.content = content || \"\";\n    this.tags = tags;\n    try {\n      this.id = this.getEventHash();\n    } catch (_e) {\n    }\n    return this.rawEvent();\n  }\n  serialize = serialize.bind(this);\n  getEventHash = getEventHash.bind(this);\n  validate = validate.bind(this);\n  verifySignature = verifySignature.bind(this);\n  /**\n   * Is this event replaceable (whether parameterized or not)?\n   *\n   * This will return true for kind 0, 3, 10k-20k and 30k-40k\n   */\n  isReplaceable = isReplaceable.bind(this);\n  isEphemeral = isEphemeral.bind(this);\n  isDvm = () => this.kind && this.kind >= 5e3 && this.kind <= 7e3;\n  /**\n   * Is this event parameterized replaceable?\n   *\n   * This will return true for kind 30k-40k\n   */\n  isParamReplaceable = isParamReplaceable.bind(this);\n  /**\n   * Encodes a bech32 id.\n   *\n   * @param relays {string[]} The relays to encode in the id\n   * @returns {string} - Encoded naddr, note or nevent.\n   */\n  encode = encode.bind(this);\n  encrypt = encrypt.bind(this);\n  decrypt = decrypt.bind(this);\n  /**\n   * Get all tags with the given name\n   * @param tagName {string} The name of the tag to search for\n   * @returns {NDKTag[]} An array of the matching tags\n   */\n  getMatchingTags(tagName, marker) {\n    const t = this.tags.filter((tag) => tag[0] === tagName);\n    if (marker === void 0) return t;\n    return t.filter((tag) => tag[3] === marker);\n  }\n  /**\n   * Check if the event has a tag with the given name\n   * @param tagName\n   * @param marker\n   * @returns\n   */\n  hasTag(tagName, marker) {\n    return this.tags.some((tag) => tag[0] === tagName && (!marker || tag[3] === marker));\n  }\n  /**\n   * Get the first tag with the given name\n   * @param tagName Tag name to search for\n   * @returns The value of the first tag with the given name, or undefined if no such tag exists\n   */\n  tagValue(tagName, marker) {\n    const tags = this.getMatchingTags(tagName, marker);\n    if (tags.length === 0) return void 0;\n    return tags[0][1];\n  }\n  /**\n   * Gets the NIP-31 \"alt\" tag of the event.\n   */\n  get alt() {\n    return this.tagValue(\"alt\");\n  }\n  /**\n   * Sets the NIP-31 \"alt\" tag of the event. Use this to set an alt tag so\n   * clients that don't handle a particular event kind can display something\n   * useful for users.\n   */\n  set alt(alt) {\n    this.removeTag(\"alt\");\n    if (alt) this.tags.push([\"alt\", alt]);\n  }\n  /**\n   * Gets the NIP-33 \"d\" tag of the event.\n   */\n  get dTag() {\n    return this.tagValue(\"d\");\n  }\n  /**\n   * Sets the NIP-33 \"d\" tag of the event.\n   */\n  set dTag(value) {\n    this.removeTag(\"d\");\n    if (value) this.tags.push([\"d\", value]);\n  }\n  /**\n   * Remove all tags with the given name (e.g. \"d\", \"a\", \"p\")\n   * @param tagName Tag name(s) to search for and remove\n   * @param marker Optional marker to check for too\n   *\n   * @example\n   * Remove a tags with a \"defer\" marker\n   * ```typescript\n   * event.tags = [\n   *   [\"a\", \"....\", \"defer\"],\n   *   [\"a\", \"....\", \"no-defer\"],\n   * ]\n   *\n   * event.removeTag(\"a\", \"defer\");\n   *\n   * // event.tags => [[\"a\", \"....\", \"no-defer\"]]\n   *\n   * @returns {void}\n   */\n  removeTag(tagName, marker) {\n    const tagNames = Array.isArray(tagName) ? tagName : [tagName];\n    this.tags = this.tags.filter((tag) => {\n      const include = tagNames.includes(tag[0]);\n      const hasMarker = marker ? tag[3] === marker : true;\n      return !(include && hasMarker);\n    });\n  }\n  /**\n   * Replace a tag with a new value. If not found, it will be added.\n   * @param tag The tag to replace.\n   * @param value The new value for the tag.\n   */\n  replaceTag(tag) {\n    this.removeTag(tag[0]);\n    this.tags.push(tag);\n  }\n  /**\n   * Sign the event if a signer is present.\n   *\n   * It will generate tags.\n   * Repleacable events will have their created_at field set to the current time.\n   * @param signer {NDKSigner} The NDKSigner to use to sign the event\n   * @returns {Promise<string>} A Promise that resolves to the signature of the signed event.\n   */\n  async sign(signer) {\n    if (!signer) {\n      this.ndk?.assertSigner();\n      signer = this.ndk?.signer;\n    } else {\n      this.author = await signer.user();\n    }\n    const nostrEvent = await this.toNostrEvent();\n    this.sig = await signer.sign(nostrEvent);\n    return this.sig;\n  }\n  /**\n   *\n   * @param relaySet\n   * @param timeoutMs\n   * @param requiredRelayCount\n   * @returns\n   */\n  async publishReplaceable(relaySet, timeoutMs, requiredRelayCount) {\n    this.id = \"\";\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.sig = \"\";\n    return this.publish(relaySet, timeoutMs, requiredRelayCount);\n  }\n  /**\n   * Attempt to sign and then publish an NDKEvent to a given relaySet.\n   * If no relaySet is provided, the relaySet will be calculated by NDK.\n   * @param relaySet {NDKRelaySet} The relaySet to publish the even to.\n   * @param timeoutM {number} The timeout for the publish operation in milliseconds.\n   * @param requiredRelayCount The number of relays that must receive the event for the publish to be considered successful.\n   * @returns A promise that resolves to the relays the event was published to.\n   */\n  async publish(relaySet, timeoutMs, requiredRelayCount) {\n    if (!this.sig) await this.sign();\n    if (!this.ndk) throw new Error(\"NDKEvent must be associated with an NDK instance to publish\");\n    if (!relaySet || relaySet.size === 0) {\n      relaySet = this.ndk.devWriteRelaySet || await calculateRelaySetFromEvent(this.ndk, this);\n    }\n    if (this.kind === 5 /* EventDeletion */ && this.ndk.cacheAdapter?.deleteEventIds) {\n      const eTags = this.getMatchingTags(\"e\").map((tag) => tag[1]);\n      this.ndk.cacheAdapter.deleteEventIds(eTags);\n    }\n    const rawEvent = this.rawEvent();\n    if (this.ndk.cacheAdapter?.addUnpublishedEvent && shouldTrackUnpublishedEvent(this)) {\n      try {\n        this.ndk.cacheAdapter.addUnpublishedEvent(this, relaySet.relayUrls);\n      } catch (e) {\n        console.error(\"Error adding unpublished event to cache\", e);\n      }\n    }\n    if (this.kind === 5 /* EventDeletion */ && this.ndk.cacheAdapter?.deleteEventIds) {\n      this.ndk.cacheAdapter.deleteEventIds(this.getMatchingTags(\"e\").map((tag) => tag[1]));\n    }\n    this.ndk.subManager.dispatchEvent(rawEvent, void 0, true);\n    const relays = await relaySet.publish(this, timeoutMs, requiredRelayCount);\n    relays.forEach((relay) => this.ndk?.subManager.seenEvent(this.id, relay));\n    return relays;\n  }\n  /**\n   * Generates tags for users, notes, and other events tagged in content.\n   * Will also generate random \"d\" tag for parameterized replaceable events where needed.\n   * @returns {ContentTag} The tags and content of the event.\n   */\n  async generateTags() {\n    let tags = [];\n    const g = await generateContentTags(this.content, this.tags);\n    const content = g.content;\n    tags = g.tags;\n    if (this.kind && this.isParamReplaceable()) {\n      const dTag = this.getMatchingTags(\"d\")[0];\n      if (!dTag) {\n        const title = this.tagValue(\"title\");\n        const randLength = title ? 6 : 16;\n        let str = [...Array(randLength)].map(() => Math.random().toString(36)[2]).join(\"\");\n        if (title && title.length > 0) {\n          str = `${title.replace(/[^a-z0-9]+/gi, \"-\").replace(/^-|-$/g, \"\")}-${str}`;\n        }\n        tags.push([\"d\", str]);\n      }\n    }\n    if (this.shouldAddClientTag) {\n      const clientTag = [\"client\", this.ndk?.clientName ?? \"\"];\n      if (this.ndk?.clientNip89) clientTag.push(this.ndk?.clientNip89);\n      tags.push(clientTag);\n    } else if (this.shouldStripClientTag) {\n      tags = tags.filter((tag) => tag[0] !== \"client\");\n    }\n    return { content: content || \"\", tags };\n  }\n  get shouldAddClientTag() {\n    if (!this.ndk?.clientName && !this.ndk?.clientNip89) return false;\n    if (skipClientTagOnKinds.has(this.kind)) return false;\n    if (this.isEphemeral()) return false;\n    if (this.isReplaceable() && !this.isParamReplaceable()) return false;\n    if (this.isDvm()) return false;\n    if (this.hasTag(\"client\")) return false;\n    return true;\n  }\n  get shouldStripClientTag() {\n    return skipClientTagOnKinds.has(this.kind);\n  }\n  muted() {\n    const authorMutedEntry = this.ndk?.mutedIds.get(this.pubkey);\n    if (authorMutedEntry && authorMutedEntry === \"p\") return \"author\";\n    const eventTagReference = this.tagReference();\n    const eventMutedEntry = this.ndk?.mutedIds.get(eventTagReference[1]);\n    if (eventMutedEntry && eventMutedEntry === eventTagReference[0]) return \"event\";\n    return null;\n  }\n  /**\n   * Returns the \"d\" tag of a parameterized replaceable event or throws an error if the event isn't\n   * a parameterized replaceable event.\n   * @returns {string} the \"d\" tag of the event.\n   *\n   * @deprecated Use `dTag` instead.\n   */\n  replaceableDTag() {\n    if (this.kind && this.kind >= 3e4 && this.kind <= 4e4) {\n      const dTag = this.getMatchingTags(\"d\")[0];\n      const dTagId = dTag ? dTag[1] : \"\";\n      return dTagId;\n    }\n    throw new Error(\"Event is not a parameterized replaceable event\");\n  }\n  /**\n   * Provides a deduplication key for the event.\n   *\n   * For kinds 0, 3, 10k-20k this will be the event <kind>:<pubkey>\n   * For kinds 30k-40k this will be the event <kind>:<pubkey>:<d-tag>\n   * For all other kinds this will be the event id\n   */\n  deduplicationKey() {\n    if (this.kind === 0 || this.kind === 3 || this.kind && this.kind >= 1e4 && this.kind < 2e4) {\n      return `${this.kind}:${this.pubkey}`;\n    }\n    return this.tagId();\n  }\n  /**\n   * Returns the id of the event or, if it's a parameterized event, the generated id of the event using \"d\" tag, pubkey, and kind.\n   * @returns {string} The id\n   */\n  tagId() {\n    if (this.isParamReplaceable()) {\n      return this.tagAddress();\n    }\n    return this.id;\n  }\n  /**\n   * Returns a stable reference value for a replaceable event.\n   *\n   * Param replaceable events are returned in the expected format of `<kind>:<pubkey>:<d-tag>`.\n   * Kind-replaceable events are returned in the format of `<kind>:<pubkey>:`.\n   *\n   * @returns {string} A stable reference value for replaceable events\n   */\n  tagAddress() {\n    if (this.isParamReplaceable()) {\n      const dTagId = this.dTag ?? \"\";\n      return `${this.kind}:${this.pubkey}:${dTagId}`;\n    }\n    if (this.isReplaceable()) {\n      return `${this.kind}:${this.pubkey}:`;\n    }\n    throw new Error(\"Event is not a replaceable event\");\n  }\n  /**\n   * Determines the type of tag that can be used to reference this event from another event.\n   * @returns {string} The tag type\n   * @example\n   * event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   * event.tagType(); // \"a\"\n   */\n  tagType() {\n    return this.isParamReplaceable() ? \"a\" : \"e\";\n  }\n  /**\n   * Get the tag that can be used to reference this event from another event.\n   *\n   * Consider using referenceTags() instead (unless you have a good reason to use this)\n   *\n   * @example\n   *     event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   *     event.tagReference(); // [\"a\", \"30000:pubkey:d-code\"]\n   *\n   *     event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\n   *     event.tagReference(); // [\"e\", \"eventid\"]\n   * @returns {NDKTag} The NDKTag object referencing this event\n   */\n  tagReference(marker) {\n    let tag;\n    if (this.isParamReplaceable()) {\n      tag = [\"a\", this.tagAddress()];\n    } else {\n      tag = [\"e\", this.tagId()];\n    }\n    if (this.relay) {\n      tag.push(this.relay.url);\n    } else {\n      tag.push(\"\");\n    }\n    tag.push(marker ?? \"\");\n    if (!this.isParamReplaceable()) {\n      tag.push(this.pubkey);\n    }\n    return tag;\n  }\n  /**\n   * Get the tags that can be used to reference this event from another event\n   * @param marker The marker to use in the tag\n   * @param skipAuthorTag Whether to explicitly skip adding the author tag of the event\n   * @param forceTag Force a specific tag to be used instead of the default \"e\" or \"a\" tag\n   * @example\n   *     event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   *     event.referenceTags(); // [[\"a\", \"30000:pubkey:d-code\"], [\"e\", \"parent-id\"]]\n   *\n   *     event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\n   *     event.referenceTags(); // [[\"e\", \"parent-id\"]]\n   * @returns {NDKTag} The NDKTag object referencing this event\n   */\n  referenceTags(marker, skipAuthorTag, forceTag) {\n    let tags = [];\n    if (this.isParamReplaceable()) {\n      tags = [\n        [forceTag ?? \"a\", this.tagAddress()],\n        [forceTag ?? \"e\", this.id]\n      ];\n    } else {\n      tags = [[forceTag ?? \"e\", this.id]];\n    }\n    tags = tags.map((tag) => {\n      if (tag[0] === \"e\" || marker) {\n        tag.push(this.relay?.url ?? \"\");\n      } else if (this.relay?.url) {\n        tag.push(this.relay?.url);\n      }\n      return tag;\n    });\n    tags.forEach((tag) => {\n      if (tag[0] === \"e\") {\n        tag.push(marker ?? \"\");\n        tag.push(this.pubkey);\n      } else if (marker) {\n        tag.push(marker);\n      }\n    });\n    tags = [...tags, ...this.getMatchingTags(\"h\")];\n    if (!skipAuthorTag) tags.push(...this.author.referenceTags());\n    return tags;\n  }\n  /**\n   * Provides the filter that will return matching events for this event.\n   *\n   * @example\n   *    event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   *    event.filter(); // { \"#a\": [\"30000:pubkey:d-code\"] }\n   * @example\n   *    event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\n   *    event.filter(); // { \"#e\": [\"eventid\"] }\n   *\n   * @returns The filter that will return matching events for this event\n   */\n  filter() {\n    if (this.isParamReplaceable()) {\n      return { \"#a\": [this.tagId()] };\n    }\n    return { \"#e\": [this.tagId()] };\n  }\n  nip22Filter() {\n    if (this.isParamReplaceable()) {\n      return { \"#A\": [this.tagId()] };\n    }\n    return { \"#E\": [this.tagId()] };\n  }\n  /**\n   * Generates a deletion event of the current event\n   *\n   * @param reason The reason for the deletion\n   * @param publish Whether to publish the deletion event automatically\n   * @returns The deletion event\n   */\n  async delete(reason, publish = true) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    const e = new _NDKEvent(this.ndk, {\n      kind: 5 /* EventDeletion */,\n      content: reason || \"\"\n    });\n    e.tag(this, void 0, true);\n    e.tags.push([\"k\", this.kind?.toString()]);\n    if (publish) {\n      this.emit(\"deleted\");\n      await e.publish();\n    }\n    return e;\n  }\n  /**\n   * Establishes whether this is a NIP-70-protectede event.\n   * @@satisfies NIP-70\n   */\n  set isProtected(val) {\n    this.removeTag(\"-\");\n    if (val) this.tags.push([\"-\"]);\n  }\n  /**\n   * Whether this is a NIP-70-protected event.\n   * @@satisfies NIP-70\n   */\n  get isProtected() {\n    return this.hasTag(\"-\");\n  }\n  /**\n   * Fetch an event tagged with the given tag following relay hints if provided.\n   * @param tag The tag to search for\n   * @param marker The marker to use in the tag (e.g. \"root\")\n   * @returns The fetched event or null if no event was found, undefined if no matching tag was found in the event\n   * * @example\n   * const replyEvent = await ndk.fetchEvent(\"nevent1qqs8x8vnycyha73grv380gmvlury4wtmx0nr9a5ds2dngqwgu87wn6gpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3ql2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqz4cwjd\")\n   * const originalEvent = await replyEvent.fetchTaggedEvent(\"e\", \"reply\");\n   * console.log(replyEvent.encode() + \" is a reply to event \" + originalEvent?.encode());\n   */\n  fetchTaggedEvent = fetchTaggedEvent.bind(this);\n  /**\n   * Fetch the root event of the current event.\n   * @returns The fetched root event or null if no event was found\n   * @example\n   * const replyEvent = await ndk.fetchEvent(\"nevent1qqs8x8vnycyha73grv380gmvlury4wtmx0nr9a5ds2dngqwgu87wn6gpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3ql2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqz4cwjd\")\n   * const rootEvent = await replyEvent.fetchRootEvent();\n   * console.log(replyEvent.encode() + \" is a reply in the thread \" + rootEvent?.encode());\n   */\n  fetchRootEvent = fetchRootEvent.bind(this);\n  /**\n   * Fetch the event the current event is replying to.\n   * @returns The fetched reply event or null if no event was found\n   */\n  fetchReplyEvent = fetchReplyEvent.bind(this);\n  /**\n   * NIP-18 reposting event.\n   *\n   * @param publish Whether to publish the reposted event automatically @default true\n   * @param signer The signer to use for signing the reposted event\n   * @returns The reposted event\n   *\n   * @function\n   */\n  repost = repost.bind(this);\n  /**\n   * React to an existing event\n   *\n   * @param content The content of the reaction\n   */\n  async react(content, publish = true) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    const e = new _NDKEvent(this.ndk, {\n      kind: 7 /* Reaction */,\n      content\n    });\n    e.tag(this);\n    if (publish) await e.publish();\n    return e;\n  }\n  /**\n   * Checks whether the event is valid per underlying NIPs.\n   *\n   * This method is meant to be overridden by subclasses that implement specific NIPs\n   * to allow the enforcement of NIP-specific validation rules.\n   *\n   * Otherwise, it will only check for basic event properties.\n   *\n   */\n  get isValid() {\n    return this.validate();\n  }\n  get inspect() {\n    return JSON.stringify(this.rawEvent(), null, 4);\n  }\n  /**\n   * Dump the event to console for debugging purposes.\n   * Prints a JSON stringified version of rawEvent() with indentation\n   * and also lists all relay URLs for onRelays.\n   */\n  dump() {\n    console.debug(JSON.stringify(this.rawEvent(), null, 4));\n    console.debug(\"Event on relays:\", this.onRelays.map((relay) => relay.url).join(\", \"));\n  }\n  /**\n   * Creates a reply event for the current event.\n   *\n   * This function will use NIP-22 when appropriate (i.e. replies to non-kind:1 events).\n   * This function does not have side-effects; it will just return an event with the appropriate tags\n   * to generate the reply event; the caller is responsible for publishing the event.\n   */\n  reply() {\n    const reply = new _NDKEvent(this.ndk);\n    if (this.kind === 1) {\n      reply.kind = 1;\n      const opHasETag = this.hasTag(\"e\");\n      if (opHasETag) {\n        reply.tags = [\n          ...reply.tags,\n          ...this.getMatchingTags(\"e\"),\n          ...this.getMatchingTags(\"p\"),\n          ...this.getMatchingTags(\"a\"),\n          ...this.referenceTags(\"reply\")\n        ];\n      } else {\n        reply.tag(this, \"root\");\n      }\n    } else {\n      reply.kind = 1111 /* GenericReply */;\n      const carryOverTags = [\"A\", \"E\", \"I\", \"P\"];\n      const rootTags = this.tags.filter((tag) => carryOverTags.includes(tag[0]));\n      if (rootTags.length > 0) {\n        const rootKind = this.tagValue(\"K\");\n        reply.tags.push(...rootTags);\n        if (rootKind) reply.tags.push([\"K\", rootKind]);\n        const [type, id, _, ...extra] = this.tagReference();\n        const tag = [type, id, ...extra];\n        reply.tags.push(tag);\n      } else {\n        const [type, id, _, relayHint] = this.tagReference();\n        const tag = [type, id, relayHint ?? \"\"];\n        if (type === \"e\") tag.push(this.pubkey);\n        reply.tags.push(tag);\n        const uppercaseTag = [...tag];\n        uppercaseTag[0] = uppercaseTag[0].toUpperCase();\n        reply.tags.push(uppercaseTag);\n        reply.tags.push([\"K\", this.kind?.toString()]);\n        reply.tags.push([\"P\", this.pubkey]);\n      }\n      reply.tags.push([\"k\", this.kind?.toString()]);\n      reply.tags.push(...this.getMatchingTags(\"p\"));\n      reply.tags.push([\"p\", this.pubkey]);\n    }\n    return reply;\n  }\n};\nvar untrackedUnpublishedEvents = /* @__PURE__ */ new Set([\n  24133 /* NostrConnect */,\n  13194 /* NostrWaletConnectInfo */,\n  23194 /* NostrWalletConnectReq */,\n  23195 /* NostrWalletConnectRes */\n]);\nfunction shouldTrackUnpublishedEvent(event) {\n  return !untrackedUnpublishedEvents.has(event.kind);\n}\n\n// src/relay/pool/index.ts\n\nvar NDKPool = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  // TODO: This should probably be an LRU cache\n  _relays = /* @__PURE__ */ new Map();\n  status = \"idle\";\n  autoConnectRelays = /* @__PURE__ */ new Set();\n  poolBlacklistRelayUrls = /* @__PURE__ */ new Set();\n  debug;\n  temporaryRelayTimers = /* @__PURE__ */ new Map();\n  flappingRelays = /* @__PURE__ */ new Set();\n  // A map to store timeouts for each flapping relay.\n  backoffTimes = /* @__PURE__ */ new Map();\n  ndk;\n  get blacklistRelayUrls() {\n    const val = new Set(this.ndk.blacklistRelayUrls);\n    this.poolBlacklistRelayUrls.forEach((url) => val.add(url));\n    return val;\n  }\n  /**\n   * @param relayUrls - The URLs of the relays to connect to.\n   * @param blacklistedRelayUrls - URLs to blacklist for this pool IN ADDITION to those blacklisted at the ndk-level\n   * @param ndk - The NDK instance.\n   * @param opts - Options for the pool.\n   */\n  constructor(relayUrls, blacklistedRelayUrls, ndk, {\n    debug: debug8,\n    name\n  } = {}) {\n    super();\n    this.debug = debug8 ?? ndk.debug.extend(\"pool\");\n    if (name) this._name = name;\n    this.ndk = ndk;\n    this.relayUrls = relayUrls;\n    this.poolBlacklistRelayUrls = new Set(blacklistedRelayUrls);\n    this.ndk.pools.push(this);\n  }\n  get relays() {\n    return this._relays;\n  }\n  set relayUrls(urls) {\n    this._relays.clear();\n    for (const relayUrl of urls) {\n      const relay = new NDKRelay(relayUrl, void 0, this.ndk);\n      relay.connectivity.netDebug = this.ndk.netDebug;\n      this.addRelay(relay);\n    }\n  }\n  _name = \"unnamed\";\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._name = name;\n    this.debug = this.debug.extend(name);\n  }\n  /**\n   * Adds a relay to the pool, and sets a timer to remove it if it is not used within the specified time.\n   * @param relay - The relay to add to the pool.\n   * @param removeIfUnusedAfter - The time in milliseconds to wait before removing the relay from the pool after it is no longer used.\n   */\n  useTemporaryRelay(relay, removeIfUnusedAfter = 3e4, filters) {\n    const relayAlreadyInPool = this.relays.has(relay.url);\n    if (!relayAlreadyInPool) {\n      this.addRelay(relay);\n      this.debug(\"Adding temporary relay %s for filters %o\", relay.url, filters);\n    }\n    const existingTimer = this.temporaryRelayTimers.get(relay.url);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n    }\n    if (!relayAlreadyInPool || existingTimer) {\n      const timer = setTimeout(() => {\n        if (this.ndk.explicitRelayUrls?.includes(relay.url)) return;\n        this.removeRelay(relay.url);\n      }, removeIfUnusedAfter);\n      this.temporaryRelayTimers.set(relay.url, timer);\n    }\n  }\n  /**\n   * Adds a relay to the pool.\n   *\n   * @param relay - The relay to add to the pool.\n   * @param connect - Whether or not to connect to the relay.\n   */\n  addRelay(relay, connect = true) {\n    const isAlreadyInPool = this.relays.has(relay.url);\n    const isBlacklisted = this.blacklistRelayUrls?.has(relay.url);\n    const isCustomRelayUrl = relay.url.includes(\"/npub1\");\n    let reconnect = true;\n    const relayUrl = relay.url;\n    if (isAlreadyInPool) return;\n    if (isBlacklisted) {\n      this.debug(`Refusing to add relay ${relayUrl}: blacklisted`);\n      return;\n    }\n    if (isCustomRelayUrl) {\n      this.debug(`Refusing to add relay ${relayUrl}: is a filter relay`);\n      return;\n    }\n    if (this.ndk.cacheAdapter?.getRelayStatus) {\n      const info = this.ndk.cacheAdapter.getRelayStatus(relayUrl);\n      if (info?.dontConnectBefore) {\n        if (info.dontConnectBefore > Date.now()) {\n          const delay = info.dontConnectBefore - Date.now();\n          this.debug(`Refusing to add relay ${relayUrl}: delayed connect for ${delay}ms`);\n          setTimeout(() => {\n            this.addRelay(relay, connect);\n          }, delay);\n          return;\n        }\n        reconnect = false;\n      }\n    }\n    const noticeHandler = (notice) => this.emit(\"notice\", relay, notice);\n    const connectHandler = () => this.handleRelayConnect(relayUrl);\n    const readyHandler = () => this.handleRelayReady(relay);\n    const disconnectHandler = () => this.emit(\"relay:disconnect\", relay);\n    const flappingHandler = () => this.handleFlapping(relay);\n    const authHandler = (challenge) => this.emit(\"relay:auth\", relay, challenge);\n    const authedHandler = () => this.emit(\"relay:authed\", relay);\n    relay.off(\"notice\", noticeHandler);\n    relay.off(\"connect\", connectHandler);\n    relay.off(\"ready\", readyHandler);\n    relay.off(\"disconnect\", disconnectHandler);\n    relay.off(\"flapping\", flappingHandler);\n    relay.off(\"auth\", authHandler);\n    relay.off(\"authed\", authedHandler);\n    relay.on(\"notice\", noticeHandler);\n    relay.on(\"connect\", connectHandler);\n    relay.on(\"ready\", readyHandler);\n    relay.on(\"disconnect\", disconnectHandler);\n    relay.on(\"flapping\", flappingHandler);\n    relay.on(\"auth\", authHandler);\n    relay.on(\"authed\", authedHandler);\n    relay.on(\"delayed-connect\", (delay) => {\n      if (this.ndk.cacheAdapter?.updateRelayStatus) {\n        this.ndk.cacheAdapter.updateRelayStatus(relay.url, {\n          dontConnectBefore: Date.now() + delay\n        });\n      }\n    });\n    this._relays.set(relayUrl, relay);\n    if (connect) this.autoConnectRelays.add(relayUrl);\n    if (connect && this.status === \"active\") {\n      this.emit(\"relay:connecting\", relay);\n      relay.connect(void 0, reconnect).catch((e) => {\n        this.debug(`Failed to connect to relay ${relayUrl}`, e);\n      });\n    }\n  }\n  /**\n   * Removes a relay from the pool.\n   * @param relayUrl - The URL of the relay to remove.\n   * @returns {boolean} True if the relay was removed, false if it was not found.\n   */\n  removeRelay(relayUrl) {\n    const relay = this.relays.get(relayUrl);\n    if (relay) {\n      relay.disconnect();\n      this.relays.delete(relayUrl);\n      this.autoConnectRelays.delete(relayUrl);\n      this.emit(\"relay:disconnect\", relay);\n      return true;\n    }\n    const existingTimer = this.temporaryRelayTimers.get(relayUrl);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n      this.temporaryRelayTimers.delete(relayUrl);\n    }\n    return false;\n  }\n  /**\n   * Checks whether a relay is already connected in the pool.\n   */\n  isRelayConnected(url) {\n    const normalizedUrl = normalizeRelayUrl(url);\n    const relay = this.relays.get(normalizedUrl);\n    if (!relay) return false;\n    return relay.status === 5 /* CONNECTED */;\n  }\n  /**\n   * Fetches a relay from the pool, or creates a new one if it does not exist.\n   *\n   * New relays will be attempted to be connected.\n   */\n  getRelay(url, connect = true, temporary = false, filters) {\n    let relay = this.relays.get(normalizeRelayUrl(url));\n    if (!relay) {\n      relay = new NDKRelay(url, void 0, this.ndk);\n      relay.connectivity.netDebug = this.ndk.netDebug;\n      if (temporary) {\n        this.useTemporaryRelay(relay, 3e4, filters);\n      } else {\n        this.addRelay(relay, connect);\n      }\n    }\n    return relay;\n  }\n  handleRelayConnect(relayUrl) {\n    const relay = this.relays.get(relayUrl);\n    if (!relay) {\n      console.error(\"NDK BUG: relay not found in pool\", { relayUrl });\n      return;\n    }\n    this.emit(\"relay:connect\", relay);\n    if (this.stats().connected === this.relays.size) {\n      this.emit(\"connect\");\n    }\n  }\n  handleRelayReady(relay) {\n    this.emit(\"relay:ready\", relay);\n  }\n  /**\n   * Attempts to establish a connection to each relay in the pool.\n   *\n   * @async\n   * @param {number} [timeoutMs] - Optional timeout in milliseconds for each connection attempt.\n   * @returns {Promise<void>} A promise that resolves when all connection attempts have completed.\n   * @throws {Error} If any of the connection attempts result in an error or timeout.\n   */\n  async connect(timeoutMs) {\n    const promises = [];\n    this.status = \"active\";\n    this.debug(`Connecting to ${this.relays.size} relays${timeoutMs ? `, timeout ${timeoutMs}...` : \"\"}`);\n    const relaysToConnect = new Set(this.autoConnectRelays.keys());\n    for (const relayUrl of relaysToConnect) {\n      const relay = this.relays.get(relayUrl);\n      if (!relay) {\n        continue;\n      }\n      const connectPromise = new Promise((resolve, reject) => {\n        this.emit(\"relay:connecting\", relay);\n        return relay.connect(timeoutMs).then(resolve).catch(reject);\n      });\n      if (timeoutMs) {\n        const timeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => reject(`Timed out after ${timeoutMs}ms`), timeoutMs);\n        });\n        promises.push(\n          Promise.race([connectPromise, timeoutPromise]).catch((e) => {\n            this.debug(`Failed to connect to relay ${relay.url}: ${e ?? \"No reason specified\"}`);\n          })\n        );\n      } else {\n        promises.push(connectPromise);\n      }\n    }\n    const maybeEmitConnect = () => {\n      const allConnected = this.stats().connected === this.relays.size;\n      const someConnected = this.stats().connected > 0;\n      if (!allConnected && someConnected) {\n        this.emit(\"connect\");\n      }\n    };\n    if (timeoutMs) setTimeout(maybeEmitConnect, timeoutMs);\n    await Promise.all(promises);\n    maybeEmitConnect();\n  }\n  checkOnFlappingRelays() {\n    const flappingRelaysCount = this.flappingRelays.size;\n    const totalRelays = this.relays.size;\n    if (flappingRelaysCount / totalRelays >= 0.8) {\n      for (const relayUrl of this.flappingRelays) {\n        this.backoffTimes.set(relayUrl, 0);\n      }\n    }\n  }\n  handleFlapping(relay) {\n    this.debug(`Relay ${relay.url} is flapping`);\n    let currentBackoff = this.backoffTimes.get(relay.url) || 5e3;\n    currentBackoff = currentBackoff * 2;\n    this.backoffTimes.set(relay.url, currentBackoff);\n    this.debug(`Backoff time for ${relay.url} is ${currentBackoff}ms`);\n    setTimeout(() => {\n      this.debug(`Attempting to reconnect to ${relay.url}`);\n      this.emit(\"relay:connecting\", relay);\n      relay.connect();\n      this.checkOnFlappingRelays();\n    }, currentBackoff);\n    relay.disconnect();\n    this.emit(\"flapping\", relay);\n  }\n  size() {\n    return this.relays.size;\n  }\n  /**\n   * Returns the status of each relay in the pool.\n   * @returns {NDKPoolStats} An object containing the number of relays in each status.\n   */\n  stats() {\n    const stats = {\n      total: 0,\n      connected: 0,\n      disconnected: 0,\n      connecting: 0\n    };\n    for (const relay of this.relays.values()) {\n      stats.total++;\n      if (relay.status === 5 /* CONNECTED */) {\n        stats.connected++;\n      } else if (relay.status === 1 /* DISCONNECTED */) {\n        stats.disconnected++;\n      } else if (relay.status === 4 /* CONNECTING */) {\n        stats.connecting++;\n      }\n    }\n    return stats;\n  }\n  connectedRelays() {\n    return Array.from(this.relays.values()).filter((relay) => relay.status >= 5 /* CONNECTED */);\n  }\n  permanentAndConnectedRelays() {\n    return Array.from(this.relays.values()).filter(\n      (relay) => relay.status >= 5 /* CONNECTED */ && !this.temporaryRelayTimers.has(relay.url)\n    );\n  }\n  /**\n   * Get a list of all relay urls in the pool.\n   */\n  urls() {\n    return Array.from(this.relays.keys());\n  }\n};\n\n// src/user/index.ts\n\n\n// src/events/kinds/nutzap/mint-list.ts\nvar NDKCashuMintList = class _NDKCashuMintList extends NDKEvent {\n  static kind = 10019 /* CashuMintList */;\n  static kinds = [10019 /* CashuMintList */];\n  _p2pk;\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 10019 /* CashuMintList */;\n  }\n  static from(event) {\n    return new _NDKCashuMintList(event.ndk, event);\n  }\n  set relays(urls) {\n    this.tags = this.tags.filter((t) => t[0] !== \"relay\");\n    for (const url of urls) {\n      this.tags.push([\"relay\", url]);\n    }\n  }\n  get relays() {\n    const r = [];\n    for (const tag of this.tags) {\n      if (tag[0] === \"relay\") {\n        r.push(tag[1]);\n      }\n    }\n    return r;\n  }\n  set mints(urls) {\n    this.tags = this.tags.filter((t) => t[0] !== \"mint\");\n    for (const url of urls) {\n      this.tags.push([\"mint\", url]);\n    }\n  }\n  get mints() {\n    const r = [];\n    for (const tag of this.tags) {\n      if (tag[0] === \"mint\") {\n        r.push(tag[1]);\n      }\n    }\n    return Array.from(new Set(r));\n  }\n  get p2pk() {\n    if (this._p2pk) {\n      return this._p2pk;\n    }\n    this._p2pk = this.tagValue(\"pubkey\") ?? this.pubkey;\n    return this._p2pk;\n  }\n  set p2pk(pubkey) {\n    this._p2pk = pubkey;\n    this.removeTag(\"pubkey\");\n    if (pubkey) {\n      this.tags.push([\"pubkey\", pubkey]);\n    }\n  }\n  get relaySet() {\n    return NDKRelaySet.fromRelayUrls(this.relays, this.ndk);\n  }\n};\n\n// src/subscription/index.ts\n\n\n// src/events/kinds/article.ts\nvar NDKArticle = class _NDKArticle extends NDKEvent {\n  static kind = 30023 /* Article */;\n  static kinds = [30023 /* Article */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30023 /* Article */;\n  }\n  /**\n   * Creates a NDKArticle from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKArticle from.\n   * @returns NDKArticle\n   */\n  static from(event) {\n    return new _NDKArticle(event.ndk, event);\n  }\n  /**\n   * Getter for the article title.\n   *\n   * @returns {string | undefined} - The article title if available, otherwise undefined.\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the article title.\n   *\n   * @param {string | undefined} title - The title to set for the article.\n   */\n  set title(title) {\n    this.removeTag(\"title\");\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Getter for the article image.\n   *\n   * @returns {string | undefined} - The article image if available, otherwise undefined.\n   */\n  get image() {\n    return this.tagValue(\"image\");\n  }\n  /**\n   * Setter for the article image.\n   *\n   * @param {string | undefined} image - The image to set for the article.\n   */\n  set image(image) {\n    this.removeTag(\"image\");\n    if (image) this.tags.push([\"image\", image]);\n  }\n  get summary() {\n    return this.tagValue(\"summary\");\n  }\n  set summary(summary) {\n    this.removeTag(\"summary\");\n    if (summary) this.tags.push([\"summary\", summary]);\n  }\n  /**\n   * Getter for the article's publication timestamp.\n   *\n   * @returns {number | undefined} - The Unix timestamp of when the article was published or undefined.\n   */\n  get published_at() {\n    const tag = this.tagValue(\"published_at\");\n    if (tag) {\n      let val = Number.parseInt(tag);\n      if (val > 1e12) {\n        val = Math.floor(val / 1e3);\n      }\n      return val;\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the article's publication timestamp.\n   *\n   * @param {number | undefined} timestamp - The Unix timestamp to set for the article's publication date.\n   */\n  set published_at(timestamp) {\n    this.removeTag(\"published_at\");\n    if (timestamp !== void 0) {\n      this.tags.push([\"published_at\", timestamp.toString()]);\n    }\n  }\n  /**\n   * Generates content tags for the article.\n   *\n   * This method first checks and sets the publication date if not available,\n   * and then generates content tags based on the base NDKEvent class.\n   *\n   * @returns {ContentTag} - The generated content tags.\n   */\n  async generateTags() {\n    super.generateTags();\n    if (!this.published_at) {\n      this.published_at = this.created_at;\n    }\n    return super.generateTags();\n  }\n  /**\n   * Getter for the article's URL.\n   *\n   * @returns {string | undefined} - The article's URL if available, otherwise undefined.\n   */\n  get url() {\n    return this.tagValue(\"url\");\n  }\n  /**\n   * Setter for the article's URL.\n   *\n   * @param {string | undefined} url - The URL to set for the article.\n   */\n  set url(url) {\n    if (url) {\n      this.tags.push([\"url\", url]);\n    } else {\n      this.removeTag(\"url\");\n    }\n  }\n};\n\n// src/events/kinds/cashu/token.ts\nfunction proofsTotalBalance(proofs) {\n  return proofs.reduce((acc, proof) => {\n    if (proof.amount < 0) {\n      throw new Error(\"proof amount is negative\");\n    }\n    return acc + proof.amount;\n  }, 0);\n}\nvar NDKCashuToken = class _NDKCashuToken extends NDKEvent {\n  _proofs = [];\n  _mint;\n  static kind = 7375 /* CashuToken */;\n  static kinds = [7375 /* CashuToken */];\n  /**\n   * Tokens that this token superseeds\n   */\n  _deletes = [];\n  original;\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 7375 /* CashuToken */;\n  }\n  static async from(event) {\n    const token = new _NDKCashuToken(event.ndk, event);\n    token.original = event;\n    try {\n      await token.decrypt();\n    } catch {\n      token.content = token.original.content;\n    }\n    try {\n      const content = JSON.parse(token.content);\n      token.proofs = content.proofs;\n      token.mint = content.mint ?? token.tagValue(\"mint\");\n      token.deletedTokens = content.del ?? [];\n      if (!Array.isArray(token.proofs)) return;\n    } catch (_e) {\n      return;\n    }\n    return token;\n  }\n  get proofs() {\n    return this._proofs;\n  }\n  set proofs(proofs) {\n    const cs = /* @__PURE__ */ new Set();\n    this._proofs = proofs.filter((proof) => {\n      if (cs.has(proof.C)) {\n        console.warn(\"Passed in proofs had duplicates, ignoring\", proof.C);\n        return false;\n      }\n      if (proof.amount < 0) {\n        console.warn(\"Invalid proof with negative amount\", proof);\n        return false;\n      }\n      cs.add(proof.C);\n      return true;\n    }).map(this.cleanProof);\n  }\n  /**\n   * Returns a minimal proof object with only essential properties\n   */\n  cleanProof(proof) {\n    return {\n      id: proof.id,\n      amount: proof.amount,\n      C: proof.C,\n      secret: proof.secret\n    };\n  }\n  async toNostrEvent(pubkey) {\n    if (!this.ndk) throw new Error(\"no ndk\");\n    if (!this.ndk.signer) throw new Error(\"no signer\");\n    const payload = {\n      proofs: this.proofs.map(this.cleanProof),\n      mint: this.mint,\n      del: this.deletedTokens ?? []\n    };\n    this.content = JSON.stringify(payload);\n    const user = await this.ndk.signer.user();\n    await this.encrypt(user, void 0, \"nip44\");\n    return super.toNostrEvent(pubkey);\n  }\n  set mint(mint) {\n    this._mint = mint;\n  }\n  get mint() {\n    return this._mint;\n  }\n  /**\n   * Tokens that were deleted by the creation of this token.\n   */\n  get deletedTokens() {\n    return this._deletes;\n  }\n  /**\n   * Marks tokens that were deleted by the creation of this token.\n   */\n  set deletedTokens(tokenIds) {\n    this._deletes = tokenIds;\n  }\n  get amount() {\n    return proofsTotalBalance(this.proofs);\n  }\n  async publish(relaySet, timeoutMs, requiredRelayCount) {\n    if (this.original) {\n      return this.original.publish(relaySet, timeoutMs, requiredRelayCount);\n    }\n    return super.publish(relaySet, timeoutMs, requiredRelayCount);\n  }\n};\n\n// src/events/kinds/highlight.ts\n\nvar NDKHighlight = class _NDKHighlight extends NDKEvent {\n  _article;\n  static kind = 9802 /* Highlight */;\n  static kinds = [9802 /* Highlight */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 9802 /* Highlight */;\n  }\n  static from(event) {\n    return new _NDKHighlight(event.ndk, event);\n  }\n  get url() {\n    return this.tagValue(\"r\");\n  }\n  /**\n   * Context tag.\n   */\n  set context(context) {\n    if (context === void 0) {\n      this.tags = this.tags.filter(([tag, _value]) => tag !== \"context\");\n    } else {\n      this.tags = this.tags.filter(([tag, _value]) => tag !== \"context\");\n      this.tags.push([\"context\", context]);\n    }\n  }\n  get context() {\n    return this.tags.find(([tag, _value]) => tag === \"context\")?.[1] ?? void 0;\n  }\n  /**\n   * Will return the article URL or NDKEvent if they have already been\n   * set (it won't attempt to load remote events)\n   */\n  get article() {\n    return this._article;\n  }\n  /**\n   * Article the highlight is coming from.\n   *\n   * @param article Article URL or NDKEvent.\n   */\n  set article(article) {\n    this._article = article;\n    if (typeof article === \"string\") {\n      this.tags.push([\"r\", article]);\n    } else {\n      this.tag(article);\n    }\n  }\n  getArticleTag() {\n    return this.getMatchingTags(\"a\")[0] || this.getMatchingTags(\"e\")[0] || this.getMatchingTags(\"r\")[0];\n  }\n  async getArticle() {\n    if (this._article !== void 0) return this._article;\n    let taggedBech32;\n    const articleTag = this.getArticleTag();\n    if (!articleTag) return void 0;\n    switch (articleTag[0]) {\n      case \"a\": {\n        const [kind, pubkey, identifier] = articleTag[1].split(\":\");\n        taggedBech32 = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.naddrEncode({\n          kind: Number.parseInt(kind),\n          pubkey,\n          identifier\n        });\n        break;\n      }\n      case \"e\":\n        taggedBech32 = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.noteEncode(articleTag[1]);\n        break;\n      case \"r\":\n        this._article = articleTag[1];\n        break;\n    }\n    if (taggedBech32) {\n      let a = await this.ndk?.fetchEvent(taggedBech32);\n      if (a) {\n        if (a.kind === 30023 /* Article */) {\n          a = NDKArticle.from(a);\n        }\n        this._article = a;\n      }\n    }\n    return this._article;\n  }\n};\n\n// src/utils/imeta.ts\nfunction mapImetaTag(tag) {\n  const data = {};\n  if (tag.length === 2) {\n    const parts = tag[1].split(\" \");\n    for (let i = 0; i < parts.length; i += 2) {\n      const key = parts[i];\n      const value = parts[i + 1];\n      if (key === \"fallback\") {\n        if (!data.fallback) data.fallback = [];\n        data.fallback.push(value);\n      } else {\n        data[key] = value;\n      }\n    }\n    return data;\n  }\n  const tags = tag.slice(1);\n  for (const val of tags) {\n    const parts = val.split(\" \");\n    const key = parts[0];\n    const value = parts.slice(1).join(\" \");\n    if (key === \"fallback\") {\n      if (!data.fallback) data.fallback = [];\n      data.fallback.push(value);\n    } else {\n      data[key] = value;\n    }\n  }\n  return data;\n}\nfunction imetaTagToTag(imeta) {\n  const tag = [\"imeta\"];\n  for (const [key, value] of Object.entries(imeta)) {\n    if (Array.isArray(value)) {\n      for (const v of value) {\n        tag.push(`${key} ${v}`);\n      }\n    } else if (value) {\n      tag.push(`${key} ${value}`);\n    }\n  }\n  return tag;\n}\n\n// src/events/kinds/image.ts\nvar NDKImage = class _NDKImage extends NDKEvent {\n  static kind = 20 /* Image */;\n  static kinds = [20 /* Image */];\n  _imetas;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 20 /* Image */;\n  }\n  /**\n   * Creates a NDKImage from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKImage from.\n   * @returns NDKImage\n   */\n  static from(event) {\n    return new _NDKImage(event.ndk, event.rawEvent());\n  }\n  get isValid() {\n    return this.imetas.length > 0;\n  }\n  get imetas() {\n    if (this._imetas) return this._imetas;\n    this._imetas = this.tags.filter((tag) => tag[0] === \"imeta\").map(mapImetaTag).filter((imeta) => !!imeta.url);\n    return this._imetas;\n  }\n  set imetas(tags) {\n    this._imetas = tags;\n    this.tags = this.tags.filter((tag) => tag[0] !== \"imeta\");\n    this.tags.push(...tags.map(imetaTagToTag));\n  }\n};\n\n// src/events/kinds/lists/index.ts\nvar NDKList = class _NDKList extends NDKEvent {\n  _encryptedTags;\n  static kinds = [\n    10063 /* BlossomList */,\n    30001 /* CategorizedBookmarkList */,\n    10004 /* CommunityList */,\n    10050 /* DirectMessageReceiveRelayList */,\n    10030 /* EmojiList */,\n    10015 /* InterestList */,\n    10001 /* PinList */,\n    10002 /* RelayList */,\n    10007 /* SearchRelayList */,\n    10006 /* BlockRelayList */,\n    10003 /* BookmarkList */\n  ];\n  /**\n   * Stores the number of bytes the content was before decryption\n   * to expire the cache when the content changes.\n   */\n  encryptedTagsLength;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30001 /* CategorizedBookmarkList */;\n  }\n  /**\n   * Wrap a NDKEvent into a NDKList\n   */\n  static from(ndkEvent) {\n    return new _NDKList(ndkEvent.ndk, ndkEvent);\n  }\n  /**\n   * Returns the title of the list. Falls back on fetching the name tag value.\n   */\n  get title() {\n    const titleTag = this.tagValue(\"title\") || this.tagValue(\"name\");\n    if (titleTag) return titleTag;\n    if (this.kind === 3 /* Contacts */) {\n      return \"Contacts\";\n    }\n    if (this.kind === 1e4 /* MuteList */) {\n      return \"Mute\";\n    }\n    if (this.kind === 10001 /* PinList */) {\n      return \"Pinned Notes\";\n    }\n    if (this.kind === 10002 /* RelayList */) {\n      return \"Relay Metadata\";\n    }\n    if (this.kind === 10003 /* BookmarkList */) {\n      return \"Bookmarks\";\n    }\n    if (this.kind === 10004 /* CommunityList */) {\n      return \"Communities\";\n    }\n    if (this.kind === 10005 /* PublicChatList */) {\n      return \"Public Chats\";\n    }\n    if (this.kind === 10006 /* BlockRelayList */) {\n      return \"Blocked Relays\";\n    }\n    if (this.kind === 10007 /* SearchRelayList */) {\n      return \"Search Relays\";\n    }\n    if (this.kind === 10050 /* DirectMessageReceiveRelayList */) {\n      return \"Direct Message Receive Relays\";\n    }\n    if (this.kind === 10015 /* InterestList */) {\n      return \"Interests\";\n    }\n    if (this.kind === 10030 /* EmojiList */) {\n      return \"Emojis\";\n    }\n    return this.tagValue(\"d\");\n  }\n  /**\n   * Sets the title of the list.\n   */\n  set title(title) {\n    this.removeTag([\"title\", \"name\"]);\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Returns the name of the list.\n   * @deprecated Please use \"title\" instead.\n   */\n  get name() {\n    return this.title;\n  }\n  /**\n   * Sets the name of the list.\n   * @deprecated Please use \"title\" instead. This method will use the `title` tag instead.\n   */\n  set name(name) {\n    this.title = name;\n  }\n  /**\n   * Returns the description of the list.\n   */\n  get description() {\n    return this.tagValue(\"description\");\n  }\n  /**\n   * Sets the description of the list.\n   */\n  set description(name) {\n    this.removeTag(\"description\");\n    if (name) this.tags.push([\"description\", name]);\n  }\n  /**\n   * Returns the image of the list.\n   */\n  get image() {\n    return this.tagValue(\"image\");\n  }\n  /**\n   * Sets the image of the list.\n   */\n  set image(name) {\n    this.removeTag(\"image\");\n    if (name) this.tags.push([\"image\", name]);\n  }\n  isEncryptedTagsCacheValid() {\n    return !!(this._encryptedTags && this.encryptedTagsLength === this.content.length);\n  }\n  /**\n   * Returns the decrypted content of the list.\n   */\n  async encryptedTags(useCache = true) {\n    if (useCache && this.isEncryptedTagsCacheValid()) return this._encryptedTags;\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    const user = await this.ndk.signer.user();\n    try {\n      if (this.content.length > 0) {\n        try {\n          const decryptedContent = await this.ndk.signer.decrypt(user, this.content);\n          const a = JSON.parse(decryptedContent);\n          if (a?.[0]) {\n            this.encryptedTagsLength = this.content.length;\n            return this._encryptedTags = a;\n          }\n          this.encryptedTagsLength = this.content.length;\n          return this._encryptedTags = [];\n        } catch (_e) {\n        }\n      }\n    } catch (_e) {\n    }\n    return [];\n  }\n  /**\n   * This method can be overriden to validate that a tag is valid for this list.\n   *\n   * (i.e. the NDKPersonList can validate that items are NDKUser instances)\n   */\n  validateTag(_tagValue) {\n    return true;\n  }\n  getItems(type) {\n    return this.tags.filter((tag) => tag[0] === type);\n  }\n  /**\n   * Returns the unecrypted items in this list.\n   */\n  get items() {\n    return this.tags.filter((t) => {\n      return ![\n        \"d\",\n        \"L\",\n        \"l\",\n        \"title\",\n        \"name\",\n        \"description\",\n        \"published_at\",\n        \"summary\",\n        \"image\",\n        \"thumb\",\n        \"alt\",\n        \"expiration\",\n        \"subject\",\n        \"client\"\n      ].includes(t[0]);\n    });\n  }\n  /**\n   * Adds a new item to the list.\n   * @param relay Relay to add\n   * @param mark Optional mark to add to the item\n   * @param encrypted Whether to encrypt the item\n   * @param position Where to add the item in the list (top or bottom)\n   */\n  async addItem(item, mark = void 0, encrypted = false, position = \"bottom\") {\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    let tags;\n    if (item instanceof NDKEvent) {\n      tags = [item.tagReference(mark)];\n    } else if (item instanceof NDKUser) {\n      tags = item.referenceTags();\n    } else if (item instanceof NDKRelay) {\n      tags = item.referenceTags();\n    } else if (Array.isArray(item)) {\n      tags = [item];\n    } else {\n      throw new Error(\"Invalid object type\");\n    }\n    if (mark) tags[0].push(mark);\n    if (encrypted) {\n      const user = await this.ndk.signer.user();\n      const currentList = await this.encryptedTags();\n      if (position === \"top\") currentList.unshift(...tags);\n      else currentList.push(...tags);\n      this._encryptedTags = currentList;\n      this.encryptedTagsLength = this.content.length;\n      this.content = JSON.stringify(currentList);\n      await this.encrypt(user);\n    } else {\n      if (position === \"top\") this.tags.unshift(...tags);\n      else this.tags.push(...tags);\n    }\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.emit(\"change\");\n  }\n  /**\n   * Removes an item from the list from both the encrypted and unencrypted lists.\n   * @param value value of item to remove from the list\n   * @param publish whether to publish the change\n   * @returns\n   */\n  async removeItemByValue(value, publish = true) {\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    const index = this.tags.findIndex((tag) => tag[1] === value);\n    if (index >= 0) {\n      this.tags.splice(index, 1);\n    }\n    const user = await this.ndk.signer.user();\n    const encryptedTags = await this.encryptedTags();\n    const encryptedIndex = encryptedTags.findIndex((tag) => tag[1] === value);\n    if (encryptedIndex >= 0) {\n      encryptedTags.splice(encryptedIndex, 1);\n      this._encryptedTags = encryptedTags;\n      this.encryptedTagsLength = this.content.length;\n      this.content = JSON.stringify(encryptedTags);\n      await this.encrypt(user);\n    }\n    if (publish) {\n      return this.publishReplaceable();\n    }\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.emit(\"change\");\n  }\n  /**\n   * Removes an item from the list.\n   *\n   * @param index The index of the item to remove.\n   * @param encrypted Whether to remove from the encrypted list or not.\n   */\n  async removeItem(index, encrypted) {\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    if (encrypted) {\n      const user = await this.ndk.signer.user();\n      const currentList = await this.encryptedTags();\n      currentList.splice(index, 1);\n      this._encryptedTags = currentList;\n      this.encryptedTagsLength = this.content.length;\n      this.content = JSON.stringify(currentList);\n      await this.encrypt(user);\n    } else {\n      this.tags.splice(index, 1);\n    }\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.emit(\"change\");\n    return this;\n  }\n  has(item) {\n    return this.items.some((tag) => tag[1] === item);\n  }\n  /**\n   * Creates a filter that will result in fetching\n   * the items of this list\n   * @example\n   * const list = new NDKList(...);\n   * const filters = list.filterForItems();\n   * const events = await ndk.fetchEvents(filters);\n   */\n  filterForItems() {\n    const ids = /* @__PURE__ */ new Set();\n    const nip33Queries = /* @__PURE__ */ new Map();\n    const filters = [];\n    for (const tag of this.items) {\n      if (tag[0] === \"e\" && tag[1]) {\n        ids.add(tag[1]);\n      } else if (tag[0] === \"a\" && tag[1]) {\n        const [kind, pubkey, dTag] = tag[1].split(\":\");\n        if (!kind || !pubkey) continue;\n        const key = `${kind}:${pubkey}`;\n        const item = nip33Queries.get(key) || [];\n        item.push(dTag || \"\");\n        nip33Queries.set(key, item);\n      }\n    }\n    if (ids.size > 0) {\n      filters.push({ ids: Array.from(ids) });\n    }\n    if (nip33Queries.size > 0) {\n      for (const [key, values] of nip33Queries.entries()) {\n        const [kind, pubkey] = key.split(\":\");\n        filters.push({\n          kinds: [Number.parseInt(kind)],\n          authors: [pubkey],\n          \"#d\": values\n        });\n      }\n    }\n    return filters;\n  }\n};\nvar lists_default = NDKList;\n\n// src/events/kinds/nutzap/index.ts\n\nvar NDKNutzap = class _NDKNutzap extends NDKEvent {\n  debug;\n  _proofs = [];\n  static kind = 9321 /* Nutzap */;\n  static kinds = [_NDKNutzap.kind];\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 9321 /* Nutzap */;\n    this.debug = ndk?.debug.extend(\"nutzap\") ?? debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:nutzap\");\n    if (!this.alt) this.alt = \"This is a nutzap\";\n    try {\n      const proofTags = this.getMatchingTags(\"proof\");\n      if (proofTags.length) {\n        this._proofs = proofTags.map((tag) => JSON.parse(tag[1]));\n      } else {\n        this._proofs = JSON.parse(this.content);\n      }\n    } catch {\n      return;\n    }\n  }\n  static from(event) {\n    const e = new _NDKNutzap(event.ndk, event);\n    if (!e._proofs || !e._proofs.length) return;\n    return e;\n  }\n  set comment(comment) {\n    this.content = comment ?? \"\";\n  }\n  get comment() {\n    const c = this.tagValue(\"comment\");\n    if (c) return c;\n    return this.content;\n  }\n  set proofs(proofs) {\n    this._proofs = proofs;\n    this.tags = this.tags.filter((tag) => tag[0] !== \"proof\");\n    for (const proof of proofs) {\n      this.tags.push([\"proof\", JSON.stringify(proof)]);\n    }\n  }\n  get proofs() {\n    return this._proofs;\n  }\n  get rawP2pk() {\n    const firstProof = this.proofs[0];\n    try {\n      const secret = JSON.parse(firstProof.secret);\n      let payload;\n      if (typeof secret === \"string\") {\n        payload = JSON.parse(secret);\n        this.debug(\"stringified payload\", firstProof.secret);\n      } else if (typeof secret === \"object\") {\n        payload = secret;\n      }\n      if (Array.isArray(payload) && payload[0] === \"P2PK\" && payload.length > 1 && typeof payload[1] === \"object\" && payload[1] !== null) {\n        return payload[1].data;\n      }\n      if (typeof payload === \"object\" && payload !== null && typeof payload[1]?.data === \"string\") {\n        return payload[1].data;\n      }\n    } catch (e) {\n      this.debug(\"error parsing p2pk pubkey\", e, this.proofs[0]);\n    }\n    return void 0;\n  }\n  /**\n   * Gets the p2pk pubkey that is embedded in the first proof.\n   *\n   * Note that this returns a nostr pubkey, not a cashu pubkey (no \"02\" prefix)\n   */\n  get p2pk() {\n    const rawP2pk = this.rawP2pk;\n    if (!rawP2pk) return;\n    return rawP2pk.startsWith(\"02\") ? rawP2pk.slice(2) : rawP2pk;\n  }\n  /**\n   * Get the mint where this nutzap proofs exist\n   */\n  get mint() {\n    return this.tagValue(\"u\");\n  }\n  set mint(value) {\n    this.replaceTag([\"u\", value]);\n  }\n  get unit() {\n    let _unit = this.tagValue(\"unit\") ?? \"sat\";\n    if (_unit?.startsWith(\"msat\")) _unit = \"sat\";\n    return _unit;\n  }\n  set unit(value) {\n    this.removeTag(\"unit\");\n    if (value?.startsWith(\"msat\")) throw new Error(\"msat is not allowed, use sat denomination instead\");\n    if (value) this.tag([\"unit\", value]);\n  }\n  get amount() {\n    const amount = this.proofs.reduce((total, proof) => total + proof.amount, 0);\n    return amount;\n  }\n  sender = this.author;\n  /**\n   * Set the target of the nutzap\n   * @param target The target of the nutzap (a user or an event)\n   */\n  set target(target) {\n    this.tags = this.tags.filter((t) => t[0] !== \"p\");\n    if (target instanceof NDKEvent) {\n      this.tags.push(target.tagReference());\n    }\n  }\n  set recipientPubkey(pubkey) {\n    this.removeTag(\"p\");\n    this.tag([\"p\", pubkey]);\n  }\n  get recipientPubkey() {\n    return this.tagValue(\"p\");\n  }\n  get recipient() {\n    const pubkey = this.recipientPubkey;\n    if (this.ndk) return this.ndk.getUser({ pubkey });\n    return new NDKUser({ pubkey });\n  }\n  async toNostrEvent() {\n    if (this.unit === \"msat\") {\n      this.unit = \"sat\";\n    }\n    this.removeTag(\"amount\");\n    this.tags.push([\"amount\", this.amount.toString()]);\n    const event = await super.toNostrEvent();\n    event.content = this.comment;\n    return event;\n  }\n  /**\n   * Validates that the nutzap conforms to NIP-61\n   */\n  get isValid() {\n    let eTagCount = 0;\n    let pTagCount = 0;\n    let mintTagCount = 0;\n    for (const tag of this.tags) {\n      if (tag[0] === \"e\") eTagCount++;\n      if (tag[0] === \"p\") pTagCount++;\n      if (tag[0] === \"u\") mintTagCount++;\n    }\n    return (\n      // exactly one recipient and mint\n      pTagCount === 1 && mintTagCount === 1 && // must have at most one e tag\n      eTagCount <= 1 && // must have at least one proof\n      this.proofs.length > 0\n    );\n  }\n};\nfunction proofP2pk(proof) {\n  try {\n    const secret = JSON.parse(proof.secret);\n    let payload = {};\n    if (typeof secret === \"string\") {\n      payload = JSON.parse(secret);\n    } else if (typeof secret === \"object\") {\n      payload = secret;\n    }\n    const isP2PKLocked = payload[0] === \"P2PK\" && payload[1]?.data;\n    if (isP2PKLocked) {\n      return payload[1].data;\n    }\n  } catch (e) {\n    console.error(\"error parsing p2pk pubkey\", e, proof);\n  }\n}\nfunction proofP2pkNostr(proof) {\n  const p2pk = proofP2pk(proof);\n  if (!p2pk) return;\n  if (p2pk.startsWith(\"02\") && p2pk.length === 66) return p2pk.slice(2);\n  return p2pk;\n}\nfunction cashuPubkeyToNostrPubkey(cashuPubkey) {\n  if (cashuPubkey.startsWith(\"02\") && cashuPubkey.length === 66) return cashuPubkey.slice(2);\n  return void 0;\n}\n\n// src/events/kinds/simple-group/member-list.ts\nvar NDKSimpleGroupMemberList = class _NDKSimpleGroupMemberList extends NDKEvent {\n  relaySet;\n  memberSet = /* @__PURE__ */ new Set();\n  static kind = 39002 /* GroupMembers */;\n  static kinds = [39002 /* GroupMembers */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 39002 /* GroupMembers */;\n    this.memberSet = new Set(this.members);\n  }\n  static from(event) {\n    return new _NDKSimpleGroupMemberList(event.ndk, event);\n  }\n  get members() {\n    return this.getMatchingTags(\"p\").map((tag) => tag[1]);\n  }\n  hasMember(member) {\n    return this.memberSet.has(member);\n  }\n  async publish(relaySet, timeoutMs, requiredRelayCount) {\n    relaySet ??= this.relaySet;\n    return super.publishReplaceable(relaySet, timeoutMs, requiredRelayCount);\n  }\n};\n\n// src/events/kinds/simple-group/metadata.ts\nvar NDKSimpleGroupMetadata = class _NDKSimpleGroupMetadata extends NDKEvent {\n  static kind = 39e3 /* GroupMetadata */;\n  static kinds = [39e3 /* GroupMetadata */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 39e3 /* GroupMetadata */;\n  }\n  static from(event) {\n    return new _NDKSimpleGroupMetadata(event.ndk, event);\n  }\n  get name() {\n    return this.tagValue(\"name\");\n  }\n  get picture() {\n    return this.tagValue(\"picture\");\n  }\n  get about() {\n    return this.tagValue(\"about\");\n  }\n  get scope() {\n    if (this.getMatchingTags(\"public\").length > 0) return \"public\";\n    if (this.getMatchingTags(\"public\").length > 0) return \"private\";\n    return void 0;\n  }\n  set scope(scope) {\n    this.removeTag(\"public\");\n    this.removeTag(\"private\");\n    if (scope === \"public\") {\n      this.tags.push([\"public\", \"\"]);\n    } else if (scope === \"private\") {\n      this.tags.push([\"private\", \"\"]);\n    }\n  }\n  get access() {\n    if (this.getMatchingTags(\"open\").length > 0) return \"open\";\n    if (this.getMatchingTags(\"closed\").length > 0) return \"closed\";\n    return void 0;\n  }\n  set access(access) {\n    this.removeTag(\"open\");\n    this.removeTag(\"closed\");\n    if (access === \"open\") {\n      this.tags.push([\"open\", \"\"]);\n    } else if (access === \"closed\") {\n      this.tags.push([\"closed\", \"\"]);\n    }\n  }\n};\n\n// src/events/kinds/story.ts\nvar NDKStoryStickerType = /* @__PURE__ */ ((NDKStoryStickerType2) => {\n  NDKStoryStickerType2[\"Pubkey\"] = \"pubkey\";\n  NDKStoryStickerType2[\"Event\"] = \"event\";\n  NDKStoryStickerType2[\"Prompt\"] = \"prompt\";\n  NDKStoryStickerType2[\"Text\"] = \"text\";\n  NDKStoryStickerType2[\"Countdown\"] = \"countdown\";\n  return NDKStoryStickerType2;\n})(NDKStoryStickerType || {});\nfunction strToPosition(positionStr) {\n  const [x, y] = positionStr.split(\",\").map(Number);\n  return { x, y };\n}\nfunction strToDimension(dimensionStr) {\n  const [width, height] = dimensionStr.split(\"x\").map(Number);\n  return { width, height };\n}\nvar NDKStorySticker = class _NDKStorySticker {\n  static Text = \"text\" /* Text */;\n  static Pubkey = \"pubkey\" /* Pubkey */;\n  static Event = \"event\" /* Event */;\n  static Prompt = \"prompt\" /* Prompt */;\n  static Countdown = \"countdown\" /* Countdown */;\n  type;\n  value;\n  position;\n  dimension;\n  properties;\n  constructor(arg) {\n    if (Array.isArray(arg)) {\n      const tag = arg;\n      if (tag[0] !== \"sticker\" || tag.length < 5) {\n        throw new Error(\"Invalid sticker tag\");\n      }\n      this.type = tag[1];\n      this.value = tag[2];\n      this.position = strToPosition(tag[3]);\n      this.dimension = strToDimension(tag[4]);\n      const props = {};\n      for (let i = 5; i < tag.length; i++) {\n        const [key, ...rest] = tag[i].split(\" \");\n        props[key] = rest.join(\" \");\n      }\n      if (Object.keys(props).length > 0) {\n        this.properties = props;\n      }\n    } else {\n      this.type = arg;\n      this.value = void 0;\n      this.position = { x: 0, y: 0 };\n      this.dimension = { width: 0, height: 0 };\n    }\n  }\n  static fromTag(tag) {\n    try {\n      return new _NDKStorySticker(tag);\n    } catch {\n      return null;\n    }\n  }\n  get style() {\n    return this.properties?.style;\n  }\n  set style(style) {\n    if (style) this.properties = { ...this.properties, style };\n    else delete this.properties?.style;\n  }\n  get rotation() {\n    return this.properties?.rot ? Number.parseFloat(this.properties.rot) : void 0;\n  }\n  set rotation(rotation) {\n    if (rotation !== void 0) {\n      this.properties = { ...this.properties, rot: rotation.toString() };\n    } else {\n      delete this.properties?.rot;\n    }\n  }\n  /**\n   * Checks if the sticker is valid.\n   *\n   * @returns {boolean} - True if the sticker is valid, false otherwise.\n   */\n  get isValid() {\n    return this.hasValidDimensions() && this.hasValidPosition();\n  }\n  hasValidDimensions = () => {\n    return typeof this.dimension.width === \"number\" && typeof this.dimension.height === \"number\" && !Number.isNaN(this.dimension.width) && !Number.isNaN(this.dimension.height);\n  };\n  hasValidPosition = () => {\n    return typeof this.position.x === \"number\" && typeof this.position.y === \"number\" && !Number.isNaN(this.position.x) && !Number.isNaN(this.position.y);\n  };\n  toTag() {\n    if (!this.isValid) {\n      const errors = [\n        !this.hasValidDimensions() ? \"dimensions is invalid\" : void 0,\n        !this.hasValidPosition() ? \"position is invalid\" : void 0\n      ].filter(Boolean);\n      throw new Error(`Invalid sticker: ${errors.join(\", \")}`);\n    }\n    let value;\n    switch (this.type) {\n      case \"event\" /* Event */:\n        value = this.value.tagId();\n        break;\n      case \"pubkey\" /* Pubkey */:\n        value = this.value.pubkey;\n        break;\n      default:\n        value = this.value;\n    }\n    const tag = [\"sticker\", this.type, value, coordinates(this.position), dimension(this.dimension)];\n    if (this.properties) {\n      for (const [key, propValue] of Object.entries(this.properties)) {\n        tag.push(`${key} ${propValue}`);\n      }\n    }\n    return tag;\n  }\n};\nvar NDKStory = class _NDKStory extends NDKEvent {\n  static kind = 23 /* Story */;\n  static kinds = [23 /* Story */];\n  _imeta;\n  _dimensions;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 23 /* Story */;\n    if (rawEvent) {\n      for (const tag of rawEvent.tags) {\n        switch (tag[0]) {\n          case \"imeta\":\n            this._imeta = mapImetaTag(tag);\n            break;\n          case \"dim\":\n            this.dimensions = strToDimension(tag[1]);\n            break;\n        }\n      }\n    }\n  }\n  /**\n   * Creates a NDKStory from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKStory from.\n   * @returns NDKStory\n   */\n  static from(event) {\n    return new _NDKStory(event.ndk, event);\n  }\n  /**\n   * Checks if the story is valid (has exactly one imeta tag).\n   */\n  get isValid() {\n    return !!this.imeta;\n  }\n  /**\n   * Gets the first imeta tag (there should only be one).\n   */\n  get imeta() {\n    return this._imeta;\n  }\n  /**\n   * Sets a single imeta tag, replacing any existing ones.\n   */\n  set imeta(tag) {\n    this._imeta = tag;\n    this.tags = this.tags.filter((t) => t[0] !== \"imeta\");\n    if (tag) {\n      this.tags.push(imetaTagToTag(tag));\n    }\n  }\n  /**\n   * Getter for the story dimensions.\n   *\n   * @returns {NDKStoryDimension | undefined} - The story dimensions if available, otherwise undefined.\n   */\n  get dimensions() {\n    const dimTag = this.tagValue(\"dim\");\n    if (!dimTag) return void 0;\n    return strToDimension(dimTag);\n  }\n  /**\n   * Setter for the story dimensions.\n   *\n   * @param {NDKStoryDimension | undefined} dimensions - The dimensions to set for the story.\n   */\n  set dimensions(dimensions) {\n    this.removeTag(\"dim\");\n    if (dimensions) {\n      this.tags.push([\"dim\", `${dimensions.width}x${dimensions.height}`]);\n    }\n  }\n  /**\n   * Getter for the story duration.\n   *\n   * @returns {number | undefined} - The story duration in seconds if available, otherwise undefined.\n   */\n  get duration() {\n    const durTag = this.tagValue(\"dur\");\n    if (!durTag) return void 0;\n    return Number.parseInt(durTag);\n  }\n  /**\n   * Setter for the story duration.\n   *\n   * @param {number | undefined} duration - The duration in seconds to set for the story.\n   */\n  set duration(duration) {\n    this.removeTag(\"dur\");\n    if (duration !== void 0) {\n      this.tags.push([\"dur\", duration.toString()]);\n    }\n  }\n  /**\n   * Gets all stickers from the story.\n   *\n   * @returns {NDKStorySticker[]} - Array of stickers in the story.\n   */\n  get stickers() {\n    const stickers = [];\n    for (const tag of this.tags) {\n      if (tag[0] !== \"sticker\" || tag.length < 5) continue;\n      const sticker = NDKStorySticker.fromTag(tag);\n      if (sticker) stickers.push(sticker);\n    }\n    return stickers;\n  }\n  /**\n   * Adds a sticker to the story.\n   *\n   * @param {NDKStorySticker|StorySticker} sticker - The sticker to add.\n   */\n  addSticker(sticker) {\n    let stickerToAdd;\n    if (sticker instanceof NDKStorySticker) {\n      stickerToAdd = sticker;\n    } else {\n      const tag = [\n        \"sticker\",\n        sticker.type,\n        typeof sticker.value === \"string\" ? sticker.value : \"\",\n        coordinates(sticker.position),\n        dimension(sticker.dimension)\n      ];\n      if (sticker.properties) {\n        for (const [key, value] of Object.entries(sticker.properties)) {\n          tag.push(`${key} ${value}`);\n        }\n      }\n      stickerToAdd = new NDKStorySticker(tag);\n      stickerToAdd.value = sticker.value;\n    }\n    if (stickerToAdd.type === \"pubkey\" /* Pubkey */) {\n      this.tag(stickerToAdd.value);\n    } else if (stickerToAdd.type === \"event\" /* Event */) {\n      this.tag(stickerToAdd.value);\n    }\n    this.tags.push(stickerToAdd.toTag());\n  }\n  /**\n   * Removes a sticker from the story.\n   *\n   * @param {number} index - The index of the sticker to remove.\n   */\n  removeSticker(index) {\n    const stickers = this.stickers;\n    if (index < 0 || index >= stickers.length) return;\n    let stickerCount = 0;\n    for (let i = 0; i < this.tags.length; i++) {\n      if (this.tags[i][0] === \"sticker\") {\n        if (stickerCount === index) {\n          this.tags.splice(i, 1);\n          break;\n        }\n        stickerCount++;\n      }\n    }\n  }\n};\nvar coordinates = (position) => `${position.x},${position.y}`;\nvar dimension = (dimension2) => `${dimension2.width}x${dimension2.height}`;\n\n// src/events/kinds/subscriptions/amount.ts\nvar possibleIntervalFrequencies = [\n  \"daily\",\n  \"weekly\",\n  \"monthly\",\n  \"quarterly\",\n  \"yearly\"\n];\nfunction calculateTermDurationInSeconds(term) {\n  switch (term) {\n    case \"daily\":\n      return 24 * 60 * 60;\n    case \"weekly\":\n      return 7 * 24 * 60 * 60;\n    case \"monthly\":\n      return 30 * 24 * 60 * 60;\n    case \"quarterly\":\n      return 3 * 30 * 24 * 60 * 60;\n    case \"yearly\":\n      return 365 * 24 * 60 * 60;\n  }\n}\nfunction newAmount(amount, currency, term) {\n  return [\"amount\", amount.toString(), currency, term];\n}\nfunction parseTagToSubscriptionAmount(tag) {\n  const amount = Number.parseInt(tag[1]);\n  if (Number.isNaN(amount) || amount === void 0 || amount === null || amount <= 0) return void 0;\n  const currency = tag[2];\n  if (currency === void 0 || currency === \"\") return void 0;\n  const term = tag[3];\n  if (term === void 0) return void 0;\n  if (!possibleIntervalFrequencies.includes(term)) return void 0;\n  return {\n    amount,\n    currency,\n    term\n  };\n}\n\n// src/events/kinds/subscriptions/tier.ts\nvar NDKSubscriptionTier = class _NDKSubscriptionTier extends NDKArticle {\n  static kind = 37001 /* SubscriptionTier */;\n  static kinds = [37001 /* SubscriptionTier */];\n  constructor(ndk, rawEvent) {\n    const k = rawEvent?.kind ?? 37001 /* SubscriptionTier */;\n    super(ndk, rawEvent);\n    this.kind = k;\n  }\n  /**\n   * Creates a new NDKSubscriptionTier from an event\n   * @param event\n   * @returns NDKSubscriptionTier\n   */\n  static from(event) {\n    return new _NDKSubscriptionTier(event.ndk, event);\n  }\n  /**\n   * Returns perks for this tier\n   */\n  get perks() {\n    return this.getMatchingTags(\"perk\").map((tag) => tag[1]).filter((perk) => perk !== void 0);\n  }\n  /**\n   * Adds a perk to this tier\n   */\n  addPerk(perk) {\n    this.tags.push([\"perk\", perk]);\n  }\n  /**\n   * Returns the amount for this tier\n   */\n  get amounts() {\n    return this.getMatchingTags(\"amount\").map((tag) => parseTagToSubscriptionAmount(tag)).filter((a) => a !== void 0);\n  }\n  /**\n   * Adds an amount to this tier\n   * @param amount Amount in the smallest unit of the currency (e.g. cents, msats)\n   * @param currency Currency code. Use msat for millisatoshis\n   * @param term One of daily, weekly, monthly, quarterly, yearly\n   */\n  addAmount(amount, currency, term) {\n    this.tags.push(newAmount(amount, currency, term));\n  }\n  /**\n   * Sets a relay where content related to this tier can be found\n   * @param relayUrl URL of the relay\n   */\n  set relayUrl(relayUrl) {\n    this.tags.push([\"r\", relayUrl]);\n  }\n  /**\n   * Returns the relay URLs for this tier\n   */\n  get relayUrls() {\n    return this.getMatchingTags(\"r\").map((tag) => tag[1]).filter((relay) => relay !== void 0);\n  }\n  /**\n   * Gets the verifier pubkey for this tier. This is the pubkey that will generate\n   * subscription payment receipts\n   */\n  get verifierPubkey() {\n    return this.tagValue(\"p\");\n  }\n  /**\n   * Sets the verifier pubkey for this tier.\n   */\n  set verifierPubkey(pubkey) {\n    this.removeTag(\"p\");\n    if (pubkey) this.tags.push([\"p\", pubkey]);\n  }\n  /**\n   * Checks if this tier is valid\n   */\n  get isValid() {\n    return this.title !== void 0 && // Must have a title\n    this.amounts.length > 0;\n  }\n};\n\n// src/events/kinds/video.ts\nvar NDKVideo = class _NDKVideo extends NDKEvent {\n  static kind = 21 /* Video */;\n  static kinds = [34235 /* HorizontalVideo */, 34236 /* VerticalVideo */, 22 /* ShortVideo */, 21 /* Video */];\n  _imetas;\n  /**\n   * Creates a NDKArticle from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKArticle from.\n   * @returns NDKArticle\n   */\n  static from(event) {\n    return new _NDKVideo(event.ndk, event.rawEvent());\n  }\n  /**\n   * Getter for the article title.\n   *\n   * @returns {string | undefined} - The article title if available, otherwise undefined.\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the article title.\n   *\n   * @param {string | undefined} title - The title to set for the article.\n   */\n  set title(title) {\n    this.removeTag(\"title\");\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Getter for the article thumbnail.\n   *\n   * @returns {string | undefined} - The article thumbnail if available, otherwise undefined.\n   */\n  get thumbnail() {\n    let thumbnail;\n    if (this.imetas && this.imetas.length > 0) {\n      thumbnail = this.imetas[0].image?.[0];\n    }\n    return thumbnail ?? this.tagValue(\"thumb\");\n  }\n  get imetas() {\n    if (this._imetas) return this._imetas;\n    this._imetas = this.tags.filter((tag) => tag[0] === \"imeta\").map(mapImetaTag);\n    return this._imetas;\n  }\n  set imetas(tags) {\n    this._imetas = tags;\n    this.tags = this.tags.filter((tag) => tag[0] !== \"imeta\");\n    this.tags.push(...tags.map(imetaTagToTag));\n  }\n  get url() {\n    if (this.imetas && this.imetas.length > 0) {\n      return this.imetas[0].url;\n    }\n    return this.tagValue(\"url\");\n  }\n  /**\n   * Getter for the article's publication timestamp.\n   *\n   * @returns {number | undefined} - The Unix timestamp of when the article was published or undefined.\n   */\n  get published_at() {\n    const tag = this.tagValue(\"published_at\");\n    if (tag) {\n      return Number.parseInt(tag);\n    }\n    return void 0;\n  }\n  /**\n   * Generates content tags for the article.\n   *\n   * This method first checks and sets the publication date if not available,\n   * and then generates content tags based on the base NDKEvent class.\n   *\n   * @returns {ContentTag} - The generated content tags.\n   */\n  async generateTags() {\n    super.generateTags();\n    if (!this.kind) {\n      if (this.imetas?.[0]?.dim) {\n        const [width, height] = this.imetas[0].dim.split(\"x\");\n        const isPortrait = width && height && Number.parseInt(width) < Number.parseInt(height);\n        const isShort = this.duration && this.duration < 120;\n        if (isShort && isPortrait) this.kind = 22 /* ShortVideo */;\n        else this.kind = 21 /* Video */;\n      }\n    }\n    return super.generateTags();\n  }\n  get duration() {\n    const tag = this.tagValue(\"duration\");\n    if (tag) {\n      return Number.parseInt(tag);\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the video's duration\n   *\n   * @param {number | undefined} duration - The duration to set for the video (in seconds)\n   */\n  set duration(dur) {\n    this.removeTag(\"duration\");\n    if (dur !== void 0) {\n      this.tags.push([\"duration\", Math.floor(dur).toString()]);\n    }\n  }\n};\n\n// src/events/kinds/wiki.ts\nvar NDKWiki = class _NDKWiki extends NDKArticle {\n  static kind = 30818 /* Wiki */;\n  static kinds = [30818 /* Wiki */];\n  static from(event) {\n    return new _NDKWiki(event.ndk, event.rawEvent());\n  }\n  get isDefered() {\n    return this.hasTag(\"a\", \"defer\");\n  }\n  get deferedId() {\n    return this.tagValue(\"a\", \"defer\");\n  }\n  /**\n   * Defers the author's wiki event to another wiki event.\n   *\n   * Wiki-events can tag other wiki-events with a `defer` marker to indicate that it considers someone else's entry as a \"better\" version of itself. If using a `defer` marker both `a` and `e` tags SHOULD be used.\n   *\n   * @example\n   * myWiki.defer = betterWikiEntryOnTheSameTopic;\n   * myWiki.publishReplaceable()\n   */\n  set defer(deferedTo) {\n    this.removeTag(\"a\", \"defer\");\n    this.tag(deferedTo, \"defer\");\n  }\n};\nvar NDKWikiMergeRequest = class _NDKWikiMergeRequest extends NDKEvent {\n  static kind = 818 /* WikiMergeRequest */;\n  static kinds = [818 /* WikiMergeRequest */];\n  static from(event) {\n    return new _NDKWikiMergeRequest(event.ndk, event.rawEvent());\n  }\n  /**\n   * The target ID (<kind:pubkey:d-tag>) of the wiki event to merge into.\n   */\n  get targetId() {\n    return this.tagValue(\"a\");\n  }\n  /**\n   * Sets the target ID (<kind:pubkey:d-tag>) of the wiki event to merge into.\n   */\n  set target(targetEvent) {\n    this.tags = this.tags.filter((tag) => {\n      if (tag[0] === \"a\") return true;\n      if (tag[0] === \"e\" && tag[3] !== \"source\") return true;\n    });\n    this.tag(targetEvent);\n  }\n  /**\n   * The source ID of the wiki event to merge from.\n   */\n  get sourceId() {\n    return this.tagValue(\"e\", \"source\");\n  }\n  /**\n   * Sets the event we are asking to get merged into the target.\n   */\n  set source(sourceEvent) {\n    this.removeTag(\"e\", \"source\");\n    this.tag(sourceEvent, \"source\", false, \"e\");\n  }\n};\n\n// src/events/wrap.ts\nfunction wrapEvent(event) {\n  const eventWrappingMap = /* @__PURE__ */ new Map();\n  for (const klass2 of [\n    NDKImage,\n    NDKVideo,\n    NDKCashuMintList,\n    NDKArticle,\n    NDKHighlight,\n    NDKWiki,\n    NDKNutzap,\n    NDKSimpleGroupMemberList,\n    NDKSimpleGroupMetadata,\n    NDKSubscriptionTier,\n    NDKCashuToken,\n    NDKList,\n    NDKStory\n  ]) {\n    for (const kind of klass2.kinds) {\n      eventWrappingMap.set(kind, klass2);\n    }\n  }\n  const klass = eventWrappingMap.get(event.kind);\n  if (klass) return klass.from(event);\n  return event;\n}\n\n// src/subscription/utils.ts\n\nvar MAX_SUBID_LENGTH = 20;\nfunction queryFullyFilled(subscription) {\n  if (filterIncludesIds(subscription.filter)) {\n    if (resultHasAllRequestedIds(subscription)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction compareFilter(filter1, filter2) {\n  if (Object.keys(filter1).length !== Object.keys(filter2).length) return false;\n  for (const [key, value] of Object.entries(filter1)) {\n    const valuesInFilter2 = filter2[key];\n    if (!valuesInFilter2) return false;\n    if (Array.isArray(value) && Array.isArray(valuesInFilter2)) {\n      const v = value;\n      for (const valueInFilter2 of valuesInFilter2) {\n        const val = valueInFilter2;\n        if (!v.includes(val)) {\n          return false;\n        }\n      }\n    } else {\n      if (valuesInFilter2 !== value) return false;\n    }\n  }\n  return true;\n}\nfunction filterIncludesIds(filter) {\n  return !!filter.ids;\n}\nfunction resultHasAllRequestedIds(subscription) {\n  const ids = subscription.filter.ids;\n  return !!ids && ids.length === subscription.eventFirstSeen.size;\n}\nfunction generateSubId(subscriptions, filters) {\n  const subIds = subscriptions.map((sub) => sub.subId).filter(Boolean);\n  const subIdParts = [];\n  const filterNonKindKeys = /* @__PURE__ */ new Set();\n  const filterKinds = /* @__PURE__ */ new Set();\n  if (subIds.length > 0) {\n    subIdParts.push(Array.from(new Set(subIds)).join(\",\"));\n  } else {\n    for (const filter of filters) {\n      for (const key of Object.keys(filter)) {\n        if (key === \"kinds\") {\n          filter.kinds?.forEach((k) => filterKinds.add(k));\n        } else {\n          filterNonKindKeys.add(key);\n        }\n      }\n    }\n    if (filterKinds.size > 0) {\n      subIdParts.push(`kinds:${Array.from(filterKinds).join(\",\")}`);\n    }\n    if (filterNonKindKeys.size > 0) {\n      subIdParts.push(Array.from(filterNonKindKeys).join(\",\"));\n    }\n  }\n  let subId = subIdParts.join(\"-\");\n  if (subId.length > MAX_SUBID_LENGTH) subId = subId.substring(0, MAX_SUBID_LENGTH);\n  subId += `-${Math.floor(Math.random() * 999).toString()}`;\n  return subId;\n}\nfunction filterForEventsTaggingId(id) {\n  try {\n    const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(id);\n    switch (decoded.type) {\n      case \"naddr\":\n        return {\n          \"#a\": [`${decoded.data.kind}:${decoded.data.pubkey}:${decoded.data.identifier}`]\n        };\n      case \"nevent\":\n        return { \"#e\": [decoded.data.id] };\n      case \"note\":\n        return { \"#e\": [decoded.data] };\n      case \"nprofile\":\n        return { \"#p\": [decoded.data.pubkey] };\n      case \"npub\":\n        return { \"#p\": [decoded.data] };\n    }\n  } catch {\n  }\n}\nfunction filterAndRelaySetFromBech32(beche2, ndk) {\n  const filter = filterFromId(beche2);\n  const relays = relaysFromBech32(beche2, ndk);\n  if (relays.length === 0) return { filter };\n  return {\n    filter,\n    relaySet: new NDKRelaySet(new Set(relays), ndk)\n  };\n}\nfunction filterFromId(id) {\n  let decoded;\n  if (id.match(NIP33_A_REGEX)) {\n    const [kind, pubkey, identifier] = id.split(\":\");\n    const filter = {\n      authors: [pubkey],\n      kinds: [Number.parseInt(kind)]\n    };\n    if (identifier) {\n      filter[\"#d\"] = [identifier];\n    }\n    return filter;\n  }\n  if (id.match(BECH32_REGEX)) {\n    try {\n      decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(id);\n      switch (decoded.type) {\n        case \"nevent\": {\n          const filter = { ids: [decoded.data.id] };\n          if (decoded.data.author) filter.authors = [decoded.data.author];\n          if (decoded.data.kind) filter.kinds = [decoded.data.kind];\n          return filter;\n        }\n        case \"note\":\n          return { ids: [decoded.data] };\n        case \"naddr\": {\n          const filter = {\n            authors: [decoded.data.pubkey],\n            kinds: [decoded.data.kind]\n          };\n          if (decoded.data.identifier) filter[\"#d\"] = [decoded.data.identifier];\n          return filter;\n        }\n      }\n    } catch (e) {\n      console.error(\"Error decoding\", id, e);\n    }\n  }\n  return { ids: [id] };\n}\nfunction isNip33AValue(value) {\n  return value.match(NIP33_A_REGEX) !== null;\n}\nvar NIP33_A_REGEX = /^(\\d+):([0-9A-Fa-f]+)(?::(.*))?$/;\nvar BECH32_REGEX = /^n(event|ote|profile|pub|addr)1[\\d\\w]+$/;\nfunction relaysFromBech32(bech322, ndk) {\n  try {\n    const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(bech322);\n    if ([\"naddr\", \"nevent\"].includes(decoded?.type)) {\n      const data = decoded.data;\n      if (data?.relays) {\n        return data.relays.map((r) => new NDKRelay(r, ndk.relayAuthDefaultPolicy, ndk));\n      }\n    }\n  } catch (_e) {\n  }\n  return [];\n}\n\n// src/subscription/index.ts\nvar NDKSubscriptionCacheUsage = /* @__PURE__ */ ((NDKSubscriptionCacheUsage2) => {\n  NDKSubscriptionCacheUsage2[\"ONLY_CACHE\"] = \"ONLY_CACHE\";\n  NDKSubscriptionCacheUsage2[\"CACHE_FIRST\"] = \"CACHE_FIRST\";\n  NDKSubscriptionCacheUsage2[\"PARALLEL\"] = \"PARALLEL\";\n  NDKSubscriptionCacheUsage2[\"ONLY_RELAY\"] = \"ONLY_RELAY\";\n  return NDKSubscriptionCacheUsage2;\n})(NDKSubscriptionCacheUsage || {});\nvar defaultOpts = {\n  closeOnEose: false,\n  cacheUsage: \"CACHE_FIRST\" /* CACHE_FIRST */,\n  dontSaveToCache: false,\n  groupable: true,\n  groupableDelay: 100,\n  groupableDelayType: \"at-most\",\n  cacheUnconstrainFilter: [\"limit\", \"since\", \"until\"]\n};\nvar NDKSubscription = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  subId;\n  filters;\n  opts;\n  pool;\n  skipVerification = false;\n  skipValidation = false;\n  /**\n   * Tracks the filters as they are executed on each relay\n   */\n  relayFilters;\n  relaySet;\n  ndk;\n  debug;\n  /**\n   * Events that have been seen by the subscription, with the time they were first seen.\n   */\n  eventFirstSeen = /* @__PURE__ */ new Map();\n  /**\n   * Relays that have sent an EOSE.\n   */\n  eosesSeen = /* @__PURE__ */ new Set();\n  /**\n   * The time the last event was received by the subscription.\n   * This is used to calculate when EOSE should be emitted.\n   */\n  lastEventReceivedAt;\n  /**\n   * The most recent event timestamp from cache results.\n   * This is used for addSinceFromCache functionality.\n   */\n  mostRecentCacheEventTimestamp;\n  internalId;\n  /**\n   * Whether the subscription should close when all relays have reached the end of the event stream.\n   */\n  closeOnEose;\n  /**\n   * Pool monitor callback\n   */\n  poolMonitor;\n  skipOptimisticPublishEvent = false;\n  /**\n   * Filters to remove when querying the cache.\n   */\n  cacheUnconstrainFilter;\n  constructor(ndk, filters, opts, subId) {\n    super();\n    this.ndk = ndk;\n    this.opts = { ...defaultOpts, ...opts || {} };\n    this.pool = this.opts.pool || ndk.pool;\n    this.filters = Array.isArray(filters) ? filters : [filters];\n    this.subId = subId || this.opts.subId;\n    this.internalId = Math.random().toString(36).substring(7);\n    this.debug = ndk.debug.extend(`subscription[${this.opts.subId ?? this.internalId}]`);\n    if (this.opts.relaySet) {\n      this.relaySet = this.opts.relaySet;\n    } else if (this.opts.relayUrls) {\n      this.relaySet = NDKRelaySet.fromRelayUrls(this.opts.relayUrls, this.ndk);\n    }\n    this.skipVerification = this.opts.skipVerification || false;\n    this.skipValidation = this.opts.skipValidation || false;\n    this.closeOnEose = this.opts.closeOnEose || false;\n    this.skipOptimisticPublishEvent = this.opts.skipOptimisticPublishEvent || false;\n    this.cacheUnconstrainFilter = this.opts.cacheUnconstrainFilter;\n  }\n  /**\n   * Returns the relays that have not yet sent an EOSE.\n   */\n  relaysMissingEose() {\n    if (!this.relayFilters) return [];\n    const relaysMissingEose = Array.from(this.relayFilters?.keys()).filter(\n      (url) => !this.eosesSeen.has(this.pool.getRelay(url, false, false))\n    );\n    return relaysMissingEose;\n  }\n  /**\n   * Provides access to the first filter of the subscription for\n   * backwards compatibility.\n   */\n  get filter() {\n    return this.filters[0];\n  }\n  get groupableDelay() {\n    if (!this.isGroupable()) return void 0;\n    return this.opts?.groupableDelay;\n  }\n  get groupableDelayType() {\n    return this.opts?.groupableDelayType || \"at-most\";\n  }\n  isGroupable() {\n    return this.opts?.groupable || false;\n  }\n  shouldQueryCache() {\n    if (this.opts.addSinceFromCache) return true;\n    if (this.opts?.cacheUsage === \"ONLY_RELAY\" /* ONLY_RELAY */) return false;\n    const hasNonEphemeralKind = this.filters.some((f) => f.kinds?.some((k) => kindIsEphemeral(k)));\n    if (hasNonEphemeralKind) return true;\n    return true;\n  }\n  shouldQueryRelays() {\n    return this.opts?.cacheUsage !== \"ONLY_CACHE\" /* ONLY_CACHE */;\n  }\n  shouldWaitForCache() {\n    if (this.opts.addSinceFromCache) return true;\n    return (\n      // Must want to close on EOSE; subscriptions\n      // that want to receive further updates must\n      // always hit the relay\n      !!this.opts.closeOnEose && // Cache adapter must claim to be fast\n      !!this.ndk.cacheAdapter?.locking && // If explicitly told to run in parallel, then\n      // we should not wait for the cache\n      this.opts.cacheUsage !== \"PARALLEL\" /* PARALLEL */\n    );\n  }\n  /**\n   * Start the subscription. This is the main method that should be called\n   * after creating a subscription.\n   *\n   * @param emitCachedEvents - Whether to emit events coming from a synchronous cache\n   *\n   * When using a synchronous cache, the events will be returned immediately\n   * by this function. If you will use those returned events, you should\n   * set emitCachedEvents to false to prevent seeing them as duplicate events.\n   */\n  start(emitCachedEvents = true) {\n    let cacheResult;\n    const updateStateFromCacheResults = (events) => {\n      if (emitCachedEvents) {\n        for (const event of events) {\n          if (!this.mostRecentCacheEventTimestamp || event.created_at > this.mostRecentCacheEventTimestamp) {\n            this.mostRecentCacheEventTimestamp = event.created_at;\n          }\n          this.eventReceived(event, void 0, true, false);\n        }\n      } else {\n        cacheResult = [];\n        for (const event of events) {\n          if (!this.mostRecentCacheEventTimestamp || event.created_at > this.mostRecentCacheEventTimestamp) {\n            this.mostRecentCacheEventTimestamp = event.created_at;\n          }\n          event.ndk = this.ndk;\n          const e = this.opts.wrap ? wrapEvent(event) : event;\n          if (!e) break;\n          if (e instanceof Promise) {\n            e.then((wrappedEvent) => {\n              this.emitEvent(false, wrappedEvent, void 0, true, false);\n            });\n            break;\n          }\n          this.eventFirstSeen.set(e.id, Date.now());\n          cacheResult.push(e);\n        }\n      }\n    };\n    const loadFromRelays = () => {\n      if (this.shouldQueryRelays()) {\n        this.startWithRelays();\n        this.startPoolMonitor();\n      } else {\n        this.emit(\"eose\", this);\n      }\n    };\n    if (this.shouldQueryCache()) {\n      cacheResult = this.startWithCache();\n      if (cacheResult instanceof Promise) {\n        if (this.shouldWaitForCache()) {\n          cacheResult.then((events) => {\n            updateStateFromCacheResults(events);\n            if (queryFullyFilled(this)) {\n              this.emit(\"eose\", this);\n              return;\n            }\n            loadFromRelays();\n          });\n          return null;\n        }\n        cacheResult.then((events) => {\n          updateStateFromCacheResults(events);\n        });\n        loadFromRelays();\n        return null;\n      }\n      updateStateFromCacheResults(cacheResult);\n      if (queryFullyFilled(this)) {\n        this.emit(\"eose\", this);\n      } else {\n        loadFromRelays();\n      }\n      return cacheResult;\n    }\n    loadFromRelays();\n    return null;\n  }\n  /**\n   * We want to monitor for new relays that are coming online, in case\n   * they should be part of this subscription.\n   */\n  startPoolMonitor() {\n    const _d = this.debug.extend(\"pool-monitor\");\n    this.poolMonitor = (relay) => {\n      if (this.relayFilters?.has(relay.url)) return;\n      const calc = calculateRelaySetsFromFilters(this.ndk, this.filters, this.pool);\n      if (calc.get(relay.url)) {\n        this.relayFilters?.set(relay.url, this.filters);\n        relay.subscribe(this, this.filters);\n      }\n    };\n    this.pool.on(\"relay:connect\", this.poolMonitor);\n  }\n  onStopped;\n  stop() {\n    this.emit(\"close\", this);\n    this.poolMonitor && this.pool.off(\"relay:connect\", this.poolMonitor);\n    this.onStopped?.();\n  }\n  /**\n   * @returns Whether the subscription has an authors filter.\n   */\n  hasAuthorsFilter() {\n    return this.filters.some((f) => f.authors?.length);\n  }\n  startWithCache() {\n    if (this.ndk.cacheAdapter?.query) {\n      return this.ndk.cacheAdapter.query(this);\n    }\n    return [];\n  }\n  /**\n   * Find available relays that should be part of this subscription and execute in them.\n   *\n   * Note that this is executed in addition to using the pool monitor, so even if the relay set\n   * that is computed (i.e. we don't have any relays available), when relays come online, we will\n   * check if we need to execute in them.\n   */\n  startWithRelays() {\n    let filters = this.filters;\n    if (this.opts.addSinceFromCache && this.mostRecentCacheEventTimestamp) {\n      const sinceTimestamp = this.mostRecentCacheEventTimestamp + 1;\n      filters = filters.map((filter) => ({\n        ...filter,\n        since: Math.max(filter.since || 0, sinceTimestamp)\n      }));\n    }\n    if (!this.relaySet || this.relaySet.relays.size === 0) {\n      this.relayFilters = calculateRelaySetsFromFilters(this.ndk, filters, this.pool);\n    } else {\n      this.relayFilters = /* @__PURE__ */ new Map();\n      for (const relay of this.relaySet.relays) {\n        this.relayFilters.set(relay.url, filters);\n      }\n    }\n    for (const [relayUrl, filters2] of this.relayFilters) {\n      const relay = this.pool.getRelay(relayUrl, true, true, filters2);\n      relay.subscribe(this, filters2);\n    }\n  }\n  // EVENT handling\n  /**\n   * Called when an event is received from a relay or the cache\n   * @param event\n   * @param relay\n   * @param fromCache Whether the event was received from the cache\n   * @param optimisticPublish Whether this event is coming from an optimistic publish\n   */\n  eventReceived(event, relay, fromCache = false, optimisticPublish = false) {\n    const eventId = event.id;\n    const eventAlreadySeen = this.eventFirstSeen.has(eventId);\n    let ndkEvent;\n    if (event instanceof NDKEvent) ndkEvent = event;\n    if (!eventAlreadySeen) {\n      ndkEvent ??= new NDKEvent(this.ndk, event);\n      ndkEvent.ndk = this.ndk;\n      ndkEvent.relay = relay;\n      if (!fromCache && !optimisticPublish) {\n        if (!this.skipValidation) {\n          if (!ndkEvent.isValid) {\n            this.debug(\"Event failed validation %s from relay %s\", eventId, relay?.url);\n            return;\n          }\n        }\n        if (relay) {\n          if (relay?.shouldValidateEvent() !== false) {\n            if (!this.skipVerification) {\n              if (!ndkEvent.verifySignature(true) && !this.ndk.asyncSigVerification) {\n                this.debug(\"Event failed signature validation\", event);\n                return;\n              }\n              if (relay) {\n                relay.addValidatedEvent();\n              }\n            }\n          } else {\n            relay.addNonValidatedEvent();\n          }\n        }\n        if (this.ndk.cacheAdapter && !this.opts.dontSaveToCache) {\n          this.ndk.cacheAdapter.setEvent(ndkEvent, this.filters, relay);\n        }\n      }\n      if (!optimisticPublish || this.skipOptimisticPublishEvent !== true) {\n        this.emitEvent(this.opts?.wrap ?? false, ndkEvent, relay, fromCache, optimisticPublish);\n        this.eventFirstSeen.set(eventId, Date.now());\n      }\n    } else {\n      const timeSinceFirstSeen = Date.now() - (this.eventFirstSeen.get(eventId) || 0);\n      this.emit(\"event:dup\", event, relay, timeSinceFirstSeen, this, fromCache, optimisticPublish);\n      if (relay) {\n        const signature = verifiedSignatures.get(eventId);\n        if (signature && typeof signature === \"string\") {\n          if (event.sig === signature) {\n            relay.addValidatedEvent();\n          }\n        }\n      }\n    }\n    this.lastEventReceivedAt = Date.now();\n  }\n  /**\n   * Optionally wraps, sync or async, and emits the event (if one comes back from the wrapper)\n   */\n  emitEvent(wrap, evt, relay, fromCache, optimisticPublish) {\n    const wrapped = wrap ? wrapEvent(evt) : evt;\n    if (wrapped instanceof Promise) {\n      wrapped.then((e) => this.emitEvent(false, e, relay, fromCache, optimisticPublish));\n    } else if (wrapped) {\n      this.emit(\"event\", wrapped, relay, this, fromCache, optimisticPublish);\n    }\n  }\n  closedReceived(relay, reason) {\n    this.emit(\"closed\", relay, reason);\n  }\n  // EOSE handling\n  eoseTimeout;\n  eosed = false;\n  eoseReceived(relay) {\n    this.debug(\"EOSE received from %s\", relay.url);\n    this.eosesSeen.add(relay);\n    let lastEventSeen = this.lastEventReceivedAt ? Date.now() - this.lastEventReceivedAt : void 0;\n    const hasSeenAllEoses = this.eosesSeen.size === this.relayFilters?.size;\n    const queryFilled = queryFullyFilled(this);\n    const performEose = (reason) => {\n      this.debug(\"Performing EOSE: %s %d\", reason, this.eosed);\n      if (this.eosed) return;\n      if (this.eoseTimeout) clearTimeout(this.eoseTimeout);\n      this.emit(\"eose\", this);\n      this.eosed = true;\n      if (this.opts?.closeOnEose) this.stop();\n    };\n    if (queryFilled || hasSeenAllEoses) {\n      performEose(\"query filled or seen all\");\n    } else if (this.relayFilters) {\n      let timeToWaitForNextEose = 1e3;\n      const connectedRelays = new Set(this.pool.connectedRelays().map((r) => r.url));\n      const connectedRelaysWithFilters = Array.from(this.relayFilters.keys()).filter(\n        (url) => connectedRelays.has(url)\n      );\n      if (connectedRelaysWithFilters.length === 0) {\n        this.debug(\n          \"No connected relays, waiting for all relays to connect\",\n          Array.from(this.relayFilters.keys()).join(\", \")\n        );\n        return;\n      }\n      const percentageOfRelaysThatHaveSentEose = this.eosesSeen.size / connectedRelaysWithFilters.length;\n      this.debug(\"Percentage of relays that have sent EOSE\", {\n        subId: this.subId,\n        percentageOfRelaysThatHaveSentEose,\n        seen: this.eosesSeen.size,\n        total: connectedRelaysWithFilters.length\n      });\n      if (this.eosesSeen.size >= 2 && percentageOfRelaysThatHaveSentEose >= 0.5) {\n        timeToWaitForNextEose = timeToWaitForNextEose * (1 - percentageOfRelaysThatHaveSentEose);\n        if (timeToWaitForNextEose === 0) {\n          performEose(\"time to wait was 0\");\n          return;\n        }\n        if (this.eoseTimeout) clearTimeout(this.eoseTimeout);\n        const sendEoseTimeout = () => {\n          lastEventSeen = this.lastEventReceivedAt ? Date.now() - this.lastEventReceivedAt : void 0;\n          if (lastEventSeen !== void 0 && lastEventSeen < 20) {\n            this.eoseTimeout = setTimeout(sendEoseTimeout, timeToWaitForNextEose);\n          } else {\n            performEose(`send eose timeout: ${timeToWaitForNextEose}`);\n          }\n        };\n        this.eoseTimeout = setTimeout(sendEoseTimeout, timeToWaitForNextEose);\n      }\n    }\n  }\n};\nvar kindIsEphemeral = (kind) => kind >= 2e4 && kind < 3e4;\n\n// src/user/follows.ts\nasync function follows(opts, outbox, kind = 3 /* Contacts */) {\n  if (!this.ndk) throw new Error(\"NDK not set\");\n  const contactListEvent = await this.ndk.fetchEvent(\n    { kinds: [kind], authors: [this.pubkey] },\n    opts || { groupable: false }\n  );\n  if (contactListEvent) {\n    const pubkeys = /* @__PURE__ */ new Set();\n    contactListEvent.tags.forEach((tag) => {\n      if (tag[0] === \"p\") pubkeys.add(tag[1]);\n    });\n    if (outbox) {\n      this.ndk?.outboxTracker?.trackUsers(Array.from(pubkeys));\n    }\n    return [...pubkeys].reduce((acc, pubkey) => {\n      const user = new NDKUser({ pubkey });\n      user.ndk = this.ndk;\n      acc.add(user);\n      return acc;\n    }, /* @__PURE__ */ new Set());\n  }\n  return /* @__PURE__ */ new Set();\n}\n\n// src/user/nip05.ts\nvar NIP05_REGEX = /^(?:([\\w.+-]+)@)?([\\w.-]+)$/;\nasync function getNip05For(ndk, fullname, _fetch = fetch, fetchOpts = {}) {\n  return await ndk.queuesNip05.add({\n    id: fullname,\n    func: async () => {\n      if (ndk.cacheAdapter?.loadNip05) {\n        const profile = await ndk.cacheAdapter.loadNip05(fullname);\n        if (profile !== \"missing\") {\n          if (profile) {\n            const user = new NDKUser({\n              pubkey: profile.pubkey,\n              relayUrls: profile.relays,\n              nip46Urls: profile.nip46\n            });\n            user.ndk = ndk;\n            return user;\n          }\n          if (fetchOpts.cache !== \"no-cache\") {\n            return null;\n          }\n        }\n      }\n      const match = fullname.match(NIP05_REGEX);\n      if (!match) return null;\n      const [_, name = \"_\", domain] = match;\n      try {\n        const res = await _fetch(`https://${domain}/.well-known/nostr.json?name=${name}`, fetchOpts);\n        const { names, relays, nip46 } = parseNIP05Result(await res.json());\n        const pubkey = names[name.toLowerCase()];\n        let profile = null;\n        if (pubkey) {\n          profile = { pubkey, relays: relays?.[pubkey], nip46: nip46?.[pubkey] };\n        }\n        if (ndk?.cacheAdapter?.saveNip05) {\n          ndk.cacheAdapter.saveNip05(fullname, profile);\n        }\n        return profile;\n      } catch (_e) {\n        if (ndk?.cacheAdapter?.saveNip05) {\n          ndk?.cacheAdapter.saveNip05(fullname, null);\n        }\n        console.error(\"Failed to fetch NIP05 for\", fullname, _e);\n        return null;\n      }\n    }\n  });\n}\nfunction parseNIP05Result(json) {\n  const result = {\n    names: {}\n  };\n  for (const [name, pubkey] of Object.entries(json.names)) {\n    if (typeof name === \"string\" && typeof pubkey === \"string\") {\n      result.names[name.toLowerCase()] = pubkey;\n    }\n  }\n  if (json.relays) {\n    result.relays = {};\n    for (const [pubkey, relays] of Object.entries(json.relays)) {\n      if (typeof pubkey === \"string\" && Array.isArray(relays)) {\n        result.relays[pubkey] = relays.filter((relay) => typeof relay === \"string\");\n      }\n    }\n  }\n  if (json.nip46) {\n    result.nip46 = {};\n    for (const [pubkey, nip46] of Object.entries(json.nip46)) {\n      if (typeof pubkey === \"string\" && Array.isArray(nip46)) {\n        result.nip46[pubkey] = nip46.filter((relay) => typeof relay === \"string\");\n      }\n    }\n  }\n  return result;\n}\n\n// src/user/profile.ts\nfunction profileFromEvent(event) {\n  const profile = {};\n  let payload;\n  try {\n    payload = JSON.parse(event.content);\n  } catch (error) {\n    throw new Error(`Failed to parse profile event: ${error}`);\n  }\n  profile.profileEvent = JSON.stringify(event.rawEvent());\n  for (const key of Object.keys(payload)) {\n    switch (key) {\n      case \"name\":\n        profile.name = payload.name;\n        break;\n      case \"display_name\":\n        profile.displayName = payload.display_name;\n        break;\n      case \"image\":\n      case \"picture\":\n        profile.picture = payload.picture || payload.image;\n        profile.image = profile.picture;\n        break;\n      case \"banner\":\n        profile.banner = payload.banner;\n        break;\n      case \"bio\":\n        profile.bio = payload.bio;\n        break;\n      case \"nip05\":\n        profile.nip05 = payload.nip05;\n        break;\n      case \"lud06\":\n        profile.lud06 = payload.lud06;\n        break;\n      case \"lud16\":\n        profile.lud16 = payload.lud16;\n        break;\n      case \"about\":\n        profile.about = payload.about;\n        break;\n      case \"website\":\n        profile.website = payload.website;\n        break;\n      default:\n        profile[key] = payload[key];\n        break;\n    }\n  }\n  profile.created_at = event.created_at;\n  return profile;\n}\nfunction serializeProfile(profile) {\n  const payload = {};\n  for (const [key, val] of Object.entries(profile)) {\n    switch (key) {\n      case \"username\":\n      case \"name\":\n        payload.name = val;\n        break;\n      case \"displayName\":\n        payload.display_name = val;\n        break;\n      case \"image\":\n      case \"picture\":\n        payload.picture = val;\n        break;\n      case \"bio\":\n      case \"about\":\n        payload.about = val;\n        break;\n      default:\n        payload[key] = val;\n        break;\n    }\n  }\n  return JSON.stringify(payload);\n}\n\n// src/user/index.ts\nvar NDKUser = class _NDKUser {\n  ndk;\n  profile;\n  profileEvent;\n  _npub;\n  _pubkey;\n  relayUrls = [];\n  nip46Urls = [];\n  constructor(opts) {\n    if (opts.npub) this._npub = opts.npub;\n    if (opts.hexpubkey) this._pubkey = opts.hexpubkey;\n    if (opts.pubkey) this._pubkey = opts.pubkey;\n    if (opts.relayUrls) this.relayUrls = opts.relayUrls;\n    if (opts.nip46Urls) this.nip46Urls = opts.nip46Urls;\n    if (opts.nprofile) {\n      try {\n        const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(opts.nprofile);\n        if (decoded.type === \"nprofile\") {\n          this._pubkey = decoded.data.pubkey;\n          if (decoded.data.relays && decoded.data.relays.length > 0) {\n            this.relayUrls.push(...decoded.data.relays);\n          }\n        }\n      } catch (e) {\n        console.error(\"Failed to decode nprofile\", e);\n      }\n    }\n  }\n  get npub() {\n    if (!this._npub) {\n      if (!this._pubkey) throw new Error(\"pubkey not set\");\n      this._npub = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.npubEncode(this.pubkey);\n    }\n    return this._npub;\n  }\n  get nprofile() {\n    const relays = this.profileEvent?.onRelays?.map((r) => r.url);\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.nprofileEncode({\n      pubkey: this.pubkey,\n      relays\n    });\n  }\n  set npub(npub2) {\n    this._npub = npub2;\n  }\n  /**\n   * Get the user's pubkey\n   * @returns {string} The user's pubkey\n   */\n  get pubkey() {\n    if (!this._pubkey) {\n      if (!this._npub) throw new Error(\"npub not set\");\n      this._pubkey = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(this.npub).data;\n    }\n    return this._pubkey;\n  }\n  /**\n   * Set the user's pubkey\n   * @param pubkey {string} The user's pubkey\n   */\n  set pubkey(pubkey) {\n    this._pubkey = pubkey;\n  }\n  /**\n   * Equivalent to NDKEvent.filters().\n   * @returns {NDKFilter}\n   */\n  filter() {\n    return { \"#p\": [this.pubkey] };\n  }\n  /**\n   * Gets NIP-57 and NIP-61 information that this user has signaled\n   *\n   * @param getAll {boolean} Whether to get all zap info or just the first one\n   */\n  async getZapInfo(timeoutMs) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    const promiseWithTimeout = async (promise) => {\n      if (!timeoutMs) return promise;\n      let timeoutId;\n      const timeoutPromise = new Promise((_, reject) => {\n        timeoutId = setTimeout(() => reject(new Error(\"Timeout\")), timeoutMs);\n      });\n      try {\n        const result = await Promise.race([promise, timeoutPromise]);\n        if (timeoutId) clearTimeout(timeoutId);\n        return result;\n      } catch (e) {\n        if (e instanceof Error && e.message === \"Timeout\") {\n          try {\n            const result = await promise;\n            return result;\n          } catch (_originalError) {\n            return void 0;\n          }\n        }\n        return void 0;\n      }\n    };\n    const [userProfile, mintListEvent] = await Promise.all([\n      promiseWithTimeout(this.fetchProfile()),\n      promiseWithTimeout(this.ndk.fetchEvent({ kinds: [10019 /* CashuMintList */], authors: [this.pubkey] }))\n    ]);\n    const res = /* @__PURE__ */ new Map();\n    if (mintListEvent) {\n      const mintList = NDKCashuMintList.from(mintListEvent);\n      if (mintList.mints.length > 0) {\n        res.set(\"nip61\", {\n          mints: mintList.mints,\n          relays: mintList.relays,\n          p2pk: mintList.p2pk\n        });\n      }\n    }\n    if (userProfile) {\n      const { lud06, lud16 } = userProfile;\n      res.set(\"nip57\", { lud06, lud16 });\n    }\n    return res;\n  }\n  /**\n   * Instantiate an NDKUser from a NIP-05 string\n   * @param nip05Id {string} The user's NIP-05\n   * @param ndk {NDK} An NDK instance\n   * @param skipCache {boolean} Whether to skip the cache or not\n   * @returns {NDKUser | undefined} An NDKUser if one is found for the given NIP-05, undefined otherwise.\n   */\n  static async fromNip05(nip05Id, ndk, skipCache = false) {\n    if (!ndk) throw new Error(\"No NDK instance found\");\n    const opts = {};\n    if (skipCache) opts.cache = \"no-cache\";\n    const profile = await getNip05For(ndk, nip05Id, ndk?.httpFetch, opts);\n    if (profile) {\n      const user = new _NDKUser({\n        pubkey: profile.pubkey,\n        relayUrls: profile.relays,\n        nip46Urls: profile.nip46\n      });\n      user.ndk = ndk;\n      return user;\n    }\n  }\n  /**\n   * Fetch a user's profile\n   * @param opts {NDKSubscriptionOptions} A set of NDKSubscriptionOptions\n   * @param storeProfileEvent {boolean} Whether to store the profile event or not\n   * @returns User Profile\n   */\n  async fetchProfile(opts, storeProfileEvent = false) {\n    if (!this.ndk) throw new Error(\"NDK not set\");\n    let setMetadataEvent = null;\n    if (this.ndk.cacheAdapter && (this.ndk.cacheAdapter.fetchProfile || this.ndk.cacheAdapter.fetchProfileSync) && opts?.cacheUsage !== \"ONLY_RELAY\" /* ONLY_RELAY */) {\n      let profile = null;\n      if (this.ndk.cacheAdapter.fetchProfileSync) {\n        profile = this.ndk.cacheAdapter.fetchProfileSync(this.pubkey);\n      } else if (this.ndk.cacheAdapter.fetchProfile) {\n        profile = await this.ndk.cacheAdapter.fetchProfile(this.pubkey);\n      }\n      if (profile) {\n        this.profile = profile;\n        return profile;\n      }\n    }\n    opts ??= {};\n    opts.cacheUsage ??= \"ONLY_RELAY\" /* ONLY_RELAY */;\n    opts.closeOnEose ??= true;\n    opts.groupable ??= true;\n    opts.groupableDelay ??= 250;\n    if (!setMetadataEvent) {\n      setMetadataEvent = await this.ndk.fetchEvent({ kinds: [0], authors: [this.pubkey] }, opts);\n    }\n    if (!setMetadataEvent) return null;\n    this.profile = profileFromEvent(setMetadataEvent);\n    if (storeProfileEvent && this.profile && this.ndk.cacheAdapter && this.ndk.cacheAdapter.saveProfile) {\n      this.ndk.cacheAdapter.saveProfile(this.pubkey, this.profile);\n    }\n    return this.profile;\n  }\n  /**\n   * Returns a set of users that this user follows.\n   *\n   * @deprecated Use followSet instead\n   */\n  follows = follows.bind(this);\n  /**\n   * Returns a set of pubkeys that this user follows.\n   *\n   * @param opts - NDKSubscriptionOptions\n   * @param outbox - boolean\n   * @param kind - number\n   */\n  async followSet(opts, outbox, kind = 3 /* Contacts */) {\n    const follows2 = await this.follows(opts, outbox, kind);\n    return new Set(Array.from(follows2).map((f) => f.pubkey));\n  }\n  /** @deprecated Use referenceTags instead. */\n  /**\n   * Get the tag that can be used to reference this user in an event\n   * @returns {NDKTag} an NDKTag\n   */\n  tagReference() {\n    return [\"p\", this.pubkey];\n  }\n  /**\n   * Get the tags that can be used to reference this user in an event\n   * @returns {NDKTag[]} an array of NDKTag\n   */\n  referenceTags(marker) {\n    const tag = [[\"p\", this.pubkey]];\n    if (!marker) return tag;\n    tag[0].push(\"\", marker);\n    return tag;\n  }\n  /**\n   * Publishes the current profile.\n   */\n  async publish() {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    if (!this.profile) throw new Error(\"No profile available\");\n    this.ndk.assertSigner();\n    const event = new NDKEvent(this.ndk, {\n      kind: 0,\n      content: serializeProfile(this.profile)\n    });\n    await event.publish();\n  }\n  /**\n   * Add a follow to this user's contact list\n   *\n   * @param newFollow {NDKUser} The user to follow\n   * @param currentFollowList {Set<NDKUser>} The current follow list\n   * @param kind {NDKKind} The kind to use for this contact list (defaults to `3`)\n   * @returns {Promise<boolean>} True if the follow was added, false if the follow already exists\n   */\n  async follow(newFollow, currentFollowList, kind = 3 /* Contacts */) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    if (!currentFollowList) {\n      currentFollowList = await this.follows(void 0, void 0, kind);\n    }\n    if (currentFollowList.has(newFollow)) {\n      return false;\n    }\n    currentFollowList.add(newFollow);\n    const event = new NDKEvent(this.ndk, { kind });\n    for (const follow of currentFollowList) {\n      event.tag(follow);\n    }\n    await event.publish();\n    return true;\n  }\n  /**\n   * Remove a follow from this user's contact list\n   *\n   * @param user {NDKUser} The user to unfollow\n   * @param currentFollowList {Set<NDKUser>} The current follow list\n   * @param kind {NDKKind} The kind to use for this contact list (defaults to `3`)\n   * @returns The relays were the follow list was published or false if the user wasn't found\n   */\n  async unfollow(user, currentFollowList, kind = 3 /* Contacts */) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    if (!currentFollowList) {\n      currentFollowList = await this.follows(void 0, void 0, kind);\n    }\n    const newUserFollowList = /* @__PURE__ */ new Set();\n    let foundUser = false;\n    for (const follow of currentFollowList) {\n      if (follow.pubkey !== user.pubkey) {\n        newUserFollowList.add(follow);\n      } else {\n        foundUser = true;\n      }\n    }\n    if (!foundUser) return false;\n    const event = new NDKEvent(this.ndk, { kind });\n    for (const follow of newUserFollowList) {\n      event.tag(follow);\n    }\n    return await event.publish();\n  }\n  /**\n   * Validate a user's NIP-05 identifier (usually fetched from their kind:0 profile data)\n   *\n   * @param nip05Id The NIP-05 string to validate\n   * @returns {Promise<boolean | null>} True if the NIP-05 is found and matches this user's pubkey,\n   * False if the NIP-05 is found but doesn't match this user's pubkey,\n   * null if the NIP-05 isn't found on the domain or we're unable to verify (because of network issues, etc.)\n   */\n  async validateNip05(nip05Id) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    const profilePointer = await getNip05For(this.ndk, nip05Id);\n    if (profilePointer === null) return null;\n    return profilePointer.pubkey === this.pubkey;\n  }\n};\n\n// src/user/pin.ts\nasync function pinEvent(user, event, pinEvent2, publish) {\n  const kind = 10001 /* PinList */;\n  if (!user.ndk) throw new Error(\"No NDK instance found\");\n  user.ndk.assertSigner();\n  if (!pinEvent2) {\n    const events = await user.ndk.fetchEvents(\n      { kinds: [kind], authors: [user.pubkey] },\n      { cacheUsage: \"ONLY_RELAY\" /* ONLY_RELAY */ }\n    );\n    if (events.size > 0) {\n      pinEvent2 = lists_default.from(Array.from(events)[0]);\n    } else {\n      pinEvent2 = new NDKEvent(user.ndk, {\n        kind\n      });\n    }\n  }\n  pinEvent2.tag(event);\n  if (publish) {\n    await pinEvent2.publish();\n  }\n  return pinEvent2;\n}\n\n// src/events/kinds/classified.ts\nvar NDKClassified = class _NDKClassified extends NDKEvent {\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30402 /* Classified */;\n  }\n  /**\n   * Creates a NDKClassified from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKClassified from.\n   * @returns NDKClassified\n   */\n  static from(event) {\n    return new _NDKClassified(event.ndk, event);\n  }\n  /**\n   * Getter for the classified title.\n   *\n   * @returns {string | undefined} - The classified title if available, otherwise undefined.\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the classified title.\n   *\n   * @param {string | undefined} title - The title to set for the classified.\n   */\n  set title(title) {\n    this.removeTag(\"title\");\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Getter for the classified summary.\n   *\n   * @returns {string | undefined} - The classified summary if available, otherwise undefined.\n   */\n  get summary() {\n    return this.tagValue(\"summary\");\n  }\n  /**\n   * Setter for the classified summary.\n   *\n   * @param {string | undefined} summary - The summary to set for the classified.\n   */\n  set summary(summary) {\n    this.removeTag(\"summary\");\n    if (summary) this.tags.push([\"summary\", summary]);\n  }\n  /**\n   * Getter for the classified's publication timestamp.\n   *\n   * @returns {number | undefined} - The Unix timestamp of when the classified was published or undefined.\n   */\n  get published_at() {\n    const tag = this.tagValue(\"published_at\");\n    if (tag) {\n      return Number.parseInt(tag);\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the classified's publication timestamp.\n   *\n   * @param {number | undefined} timestamp - The Unix timestamp to set for the classified's publication date.\n   */\n  set published_at(timestamp) {\n    this.removeTag(\"published_at\");\n    if (timestamp !== void 0) {\n      this.tags.push([\"published_at\", timestamp.toString()]);\n    }\n  }\n  /**\n   * Getter for the classified location.\n   *\n   * @returns {string | undefined} - The classified location if available, otherwise undefined.\n   */\n  get location() {\n    return this.tagValue(\"location\");\n  }\n  /**\n   * Setter for the classified location.\n   *\n   * @param {string | undefined} location - The location to set for the classified.\n   */\n  set location(location) {\n    this.removeTag(\"location\");\n    if (location) this.tags.push([\"location\", location]);\n  }\n  /**\n   * Getter for the classified price.\n   *\n   * @returns {NDKClassifiedPriceTag | undefined} - The classified price if available, otherwise undefined.\n   */\n  get price() {\n    const priceTag = this.tags.find((tag) => tag[0] === \"price\");\n    if (priceTag) {\n      return {\n        amount: Number.parseFloat(priceTag[1]),\n        currency: priceTag[2],\n        frequency: priceTag[3]\n      };\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the classified price.\n   *\n   * @param price - The price to set for the classified.\n   */\n  set price(priceTag) {\n    if (typeof priceTag === \"string\") {\n      priceTag = {\n        amount: Number.parseFloat(priceTag)\n      };\n    }\n    if (priceTag?.amount) {\n      const tag = [\"price\", priceTag.amount.toString()];\n      if (priceTag.currency) tag.push(priceTag.currency);\n      if (priceTag.frequency) tag.push(priceTag.frequency);\n      this.tags.push(tag);\n    } else {\n      this.removeTag(\"price\");\n    }\n  }\n  /**\n   * Generates content tags for the classified.\n   *\n   * This method first checks and sets the publication date if not available,\n   * and then generates content tags based on the base NDKEvent class.\n   *\n   * @returns {ContentTag} - The generated content tags.\n   */\n  async generateTags() {\n    super.generateTags();\n    if (!this.published_at) {\n      this.published_at = this.created_at;\n    }\n    return super.generateTags();\n  }\n};\n\n// src/events/kinds/drafts.ts\nvar NDKDraft = class _NDKDraft extends NDKEvent {\n  _event;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 31234 /* Draft */;\n  }\n  static from(event) {\n    return new _NDKDraft(event.ndk, event);\n  }\n  /**\n   * Sets an identifier (i.e. d-tag)\n   */\n  set identifier(id) {\n    this.removeTag(\"d\");\n    this.tags.push([\"d\", id]);\n  }\n  get identifier() {\n    return this.dTag;\n  }\n  /**\n   * Event that is to be saved.\n   */\n  set event(e) {\n    if (e instanceof NDKEvent) this._event = e.rawEvent();\n    else this._event = e;\n    this.prepareEvent();\n  }\n  /**\n   * Gets the event.\n   * @param param0\n   * @returns NDKEvent of the draft event or null if the draft event has been deleted (emptied).\n   */\n  async getEvent(signer) {\n    if (this._event) return new NDKEvent(this.ndk, this._event);\n    signer ??= this.ndk?.signer;\n    if (!signer) throw new Error(\"No signer available\");\n    const user = await signer.user();\n    if (this.content && this.content.length > 0) {\n      try {\n        await this.decrypt(user, signer);\n        const payload = JSON.parse(this.content);\n        this._event = payload;\n        return new NDKEvent(this.ndk, payload);\n      } catch (e) {\n        console.error(e);\n        return void 0;\n      }\n    } else {\n      return null;\n    }\n  }\n  prepareEvent() {\n    if (!this._event) throw new Error(\"No event has been provided\");\n    this.removeTag(\"k\");\n    if (this._event.kind) this.tags.push([\"k\", this._event.kind.toString()]);\n    this.content = JSON.stringify(this._event);\n  }\n  /**\n   * Generates draft event.\n   *\n   * @param signer: Optional signer to encrypt with\n   * @param publish: Whether to publish, optionally specifying relaySet to publish to\n   */\n  async save({ signer, publish, relaySet }) {\n    signer ??= this.ndk?.signer;\n    if (!signer) throw new Error(\"No signer available\");\n    const user = await signer.user();\n    await this.encrypt(user, signer);\n    if (publish === false) return;\n    return this.publish(relaySet);\n  }\n};\n\n// src/events/kinds/dvm/feedback.ts\nvar NDKDvmJobFeedbackStatus = /* @__PURE__ */ ((NDKDvmJobFeedbackStatus2) => {\n  NDKDvmJobFeedbackStatus2[\"Processing\"] = \"processing\";\n  NDKDvmJobFeedbackStatus2[\"Success\"] = \"success\";\n  NDKDvmJobFeedbackStatus2[\"Scheduled\"] = \"scheduled\";\n  NDKDvmJobFeedbackStatus2[\"PayReq\"] = \"payment_required\";\n  return NDKDvmJobFeedbackStatus2;\n})(NDKDvmJobFeedbackStatus || {});\nvar NDKDVMJobFeedback = class _NDKDVMJobFeedback extends NDKEvent {\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 7e3 /* DVMJobFeedback */;\n  }\n  static async from(event) {\n    const e = new _NDKDVMJobFeedback(event.ndk, event.rawEvent());\n    if (e.encrypted) await e.dvmDecrypt();\n    return e;\n  }\n  get status() {\n    return this.tagValue(\"status\");\n  }\n  set status(status) {\n    this.removeTag(\"status\");\n    if (status !== void 0) {\n      this.tags.push([\"status\", status]);\n    }\n  }\n  get encrypted() {\n    return !!this.getMatchingTags(\"encrypted\")[0];\n  }\n  async dvmDecrypt() {\n    await this.decrypt();\n    const decryptedContent = JSON.parse(this.content);\n    this.tags.push(...decryptedContent);\n  }\n};\n\n// src/events/kinds/dvm/request.ts\nvar NDKDVMRequest = class _NDKDVMRequest extends NDKEvent {\n  static from(event) {\n    return new _NDKDVMRequest(event.ndk, event.rawEvent());\n  }\n  set bid(msatAmount) {\n    if (msatAmount === void 0) {\n      this.removeTag(\"bid\");\n    } else {\n      this.tags.push([\"bid\", msatAmount.toString()]);\n    }\n  }\n  get bid() {\n    const v = this.tagValue(\"bid\");\n    if (v === void 0) return void 0;\n    return Number.parseInt(v);\n  }\n  /**\n   * Adds a new input to the job\n   * @param args The arguments to the input\n   */\n  addInput(...args) {\n    this.tags.push([\"i\", ...args]);\n  }\n  /**\n   * Adds a new parameter to the job\n   */\n  addParam(...args) {\n    this.tags.push([\"param\", ...args]);\n  }\n  set output(output) {\n    if (output === void 0) {\n      this.removeTag(\"output\");\n    } else {\n      if (typeof output === \"string\") output = [output];\n      this.tags.push([\"output\", ...output]);\n    }\n  }\n  get output() {\n    const outputTag = this.getMatchingTags(\"output\")[0];\n    return outputTag ? outputTag.slice(1) : void 0;\n  }\n  get params() {\n    const paramTags = this.getMatchingTags(\"param\");\n    return paramTags.map((t) => t.slice(1));\n  }\n  getParam(name) {\n    const paramTag = this.getMatchingTags(\"param\").find((t) => t[1] === name);\n    return paramTag ? paramTag[2] : void 0;\n  }\n  createFeedback(status) {\n    const feedback = new NDKDVMJobFeedback(this.ndk);\n    feedback.tag(this, \"job\");\n    feedback.status = status;\n    return feedback;\n  }\n  /**\n   * Enables job encryption for this event\n   * @param dvm DVM that will receive the event\n   * @param signer Signer to use for encryption\n   */\n  async encryption(dvm, signer) {\n    const dvmTags = [\"i\", \"param\", \"output\", \"relays\", \"bid\"];\n    const tags = this.tags.filter((t) => dvmTags.includes(t[0]));\n    this.tags = this.tags.filter((t) => !dvmTags.includes(t[0]));\n    this.content = JSON.stringify(tags);\n    this.tag(dvm);\n    this.tags.push([\"encrypted\"]);\n    await this.encrypt(dvm, signer);\n  }\n  /**\n   * Sets the DVM that will receive the event\n   */\n  set dvm(dvm) {\n    this.removeTag(\"p\");\n    if (dvm) this.tag(dvm);\n  }\n};\n\n// src/events/kinds/dvm/NDKTranscriptionDVM.ts\nvar NDKTranscriptionDVM = class _NDKTranscriptionDVM extends NDKDVMRequest {\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind = 5e3 /* DVMReqTextExtraction */;\n  }\n  static from(event) {\n    return new _NDKTranscriptionDVM(event.ndk, event.rawEvent());\n  }\n  /**\n   * Returns the original source of the transcription\n   */\n  get url() {\n    const inputTags = this.getMatchingTags(\"i\");\n    if (inputTags.length !== 1) {\n      return void 0;\n    }\n    return inputTags[0][1];\n  }\n  /**\n   * Getter for the title tag\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the title tag\n   */\n  set title(value) {\n    this.removeTag(\"title\");\n    if (value) {\n      this.tags.push([\"title\", value]);\n    }\n  }\n  /**\n   * Getter for the image tag\n   */\n  get image() {\n    return this.tagValue(\"image\");\n  }\n  /**\n   * Setter for the image tag\n   */\n  set image(value) {\n    this.removeTag(\"image\");\n    if (value) {\n      this.tags.push([\"image\", value]);\n    }\n  }\n};\n\n// src/events/kinds/dvm/result.ts\nvar NDKDVMJobResult = class _NDKDVMJobResult extends NDKEvent {\n  static from(event) {\n    return new _NDKDVMJobResult(event.ndk, event.rawEvent());\n  }\n  setAmount(msat, invoice) {\n    this.removeTag(\"amount\");\n    const tag = [\"amount\", msat.toString()];\n    if (invoice) tag.push(invoice);\n    this.tags.push(tag);\n  }\n  set result(result) {\n    if (result === void 0) {\n      this.content = \"\";\n    } else {\n      this.content = result;\n    }\n  }\n  get result() {\n    if (this.content === \"\") {\n      return void 0;\n    }\n    return this.content;\n  }\n  set status(status) {\n    this.removeTag(\"status\");\n    if (status !== void 0) {\n      this.tags.push([\"status\", status]);\n    }\n  }\n  get status() {\n    return this.tagValue(\"status\");\n  }\n  get jobRequestId() {\n    for (const eTag of this.getMatchingTags(\"e\")) {\n      if (eTag[2] === \"job\") return eTag[1];\n    }\n    if (this.jobRequest) return this.jobRequest.id;\n    return this.tagValue(\"e\");\n  }\n  set jobRequest(event) {\n    this.removeTag(\"request\");\n    if (event) {\n      this.kind = event.kind + 1e3;\n      this.tags.push([\"request\", JSON.stringify(event.rawEvent())]);\n      this.tag(event);\n    }\n  }\n  get jobRequest() {\n    const tag = this.tagValue(\"request\");\n    if (tag === void 0) {\n      return void 0;\n    }\n    return new NDKEvent(this.ndk, JSON.parse(tag));\n  }\n};\n\n// src/events/kinds/cashu/tx.ts\nvar MARKERS = {\n  REDEEMED: \"redeemed\",\n  CREATED: \"created\",\n  DESTROYED: \"destroyed\",\n  RESERVED: \"reserved\"\n};\nvar NDKCashuWalletTx = class _NDKCashuWalletTx extends NDKEvent {\n  static MARKERS = MARKERS;\n  static kind = 7376 /* CashuWalletTx */;\n  static kinds = [7376 /* CashuWalletTx */];\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 7376 /* CashuWalletTx */;\n  }\n  static async from(event) {\n    const walletChange = new _NDKCashuWalletTx(event.ndk, event);\n    const prevContent = walletChange.content;\n    try {\n      await walletChange.decrypt();\n    } catch (_e) {\n      walletChange.content ??= prevContent;\n    }\n    try {\n      const contentTags = JSON.parse(walletChange.content);\n      walletChange.tags = [...contentTags, ...walletChange.tags];\n    } catch (_e) {\n      return;\n    }\n    return walletChange;\n  }\n  set direction(direction) {\n    this.removeTag(\"direction\");\n    if (direction) this.tags.push([\"direction\", direction]);\n  }\n  get direction() {\n    return this.tagValue(\"direction\");\n  }\n  set amount(amount) {\n    this.removeTag(\"amount\");\n    this.tags.push([\"amount\", amount.toString()]);\n  }\n  get amount() {\n    const val = this.tagValue(\"amount\");\n    if (val === void 0) return void 0;\n    return Number(val);\n  }\n  set fee(fee) {\n    this.removeTag(\"fee\");\n    this.tags.push([\"fee\", fee.toString()]);\n  }\n  get fee() {\n    const val = this.tagValue(\"fee\");\n    if (val === void 0) return void 0;\n    return Number(val);\n  }\n  set unit(unit) {\n    this.removeTag(\"unit\");\n    if (unit) this.tags.push([\"unit\", unit.toString()]);\n  }\n  get unit() {\n    return this.tagValue(\"unit\");\n  }\n  set description(description) {\n    this.removeTag(\"description\");\n    if (description) this.tags.push([\"description\", description.toString()]);\n  }\n  get description() {\n    return this.tagValue(\"description\");\n  }\n  set mint(mint) {\n    this.removeTag(\"mint\");\n    if (mint) this.tags.push([\"mint\", mint.toString()]);\n  }\n  get mint() {\n    return this.tagValue(\"mint\");\n  }\n  /**\n   * Tags tokens that were created in this history event\n   */\n  set destroyedTokens(events) {\n    for (const event of events) {\n      this.tags.push(event.tagReference(MARKERS.DESTROYED));\n    }\n  }\n  set destroyedTokenIds(ids) {\n    for (const id of ids) {\n      this.tags.push([\"e\", id, \"\", MARKERS.DESTROYED]);\n    }\n  }\n  /**\n   * Tags tokens that were created in this history event\n   */\n  set createdTokens(events) {\n    for (const event of events) {\n      this.tags.push(event.tagReference(MARKERS.CREATED));\n    }\n  }\n  set reservedTokens(events) {\n    for (const event of events) {\n      this.tags.push(event.tagReference(MARKERS.RESERVED));\n    }\n  }\n  addRedeemedNutzap(event) {\n    this.tag(event, MARKERS.REDEEMED);\n  }\n  async toNostrEvent(pubkey) {\n    const encryptedTags = [];\n    const unencryptedTags = [];\n    for (const tag of this.tags) {\n      if (!this.shouldEncryptTag(tag)) {\n        unencryptedTags.push(tag);\n      } else {\n        encryptedTags.push(tag);\n      }\n    }\n    this.tags = unencryptedTags.filter((t) => t[0] !== \"client\");\n    this.content = JSON.stringify(encryptedTags);\n    const user = await this.ndk?.signer?.user();\n    await this.encrypt(user, void 0, \"nip44\");\n    return super.toNostrEvent(pubkey);\n  }\n  /**\n   * Whether this entry includes a redemption of a Nutzap\n   */\n  get hasNutzapRedemption() {\n    return this.getMatchingTags(\"e\", MARKERS.REDEEMED).length > 0;\n  }\n  shouldEncryptTag(tag) {\n    const unencryptedTagNames = [\"client\"];\n    if (unencryptedTagNames.includes(tag[0])) {\n      return false;\n    }\n    if (tag[0] === \"e\" && tag[3] === MARKERS.REDEEMED) {\n      return false;\n    }\n    if (tag[0] === \"p\") return false;\n    return true;\n  }\n};\n\n// src/events/kinds/NDKRelayList.ts\nvar READ_MARKER = \"read\";\nvar WRITE_MARKER = \"write\";\nvar NDKRelayList = class _NDKRelayList extends NDKEvent {\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 10002 /* RelayList */;\n  }\n  static from(ndkEvent) {\n    return new _NDKRelayList(ndkEvent.ndk, ndkEvent.rawEvent());\n  }\n  get readRelayUrls() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2] || tag[2] && tag[2] === READ_MARKER).map((tag) => tryNormalizeRelayUrl(tag[1])).filter((url) => !!url);\n  }\n  set readRelayUrls(relays) {\n    for (const relay of relays) {\n      this.tags.push([\"r\", relay, READ_MARKER]);\n    }\n  }\n  get writeRelayUrls() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2] || tag[2] && tag[2] === WRITE_MARKER).map((tag) => tryNormalizeRelayUrl(tag[1])).filter((url) => !!url);\n  }\n  set writeRelayUrls(relays) {\n    for (const relay of relays) {\n      this.tags.push([\"r\", relay, WRITE_MARKER]);\n    }\n  }\n  get bothRelayUrls() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2]).map((tag) => tag[1]);\n  }\n  set bothRelayUrls(relays) {\n    for (const relay of relays) {\n      this.tags.push([\"r\", relay]);\n    }\n  }\n  get relays() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").map((tag) => tag[1]);\n  }\n  /**\n   * Provides a relaySet for the relays in this list.\n   */\n  get relaySet() {\n    if (!this.ndk) throw new Error(\"NDKRelayList has no NDK instance\");\n    return new NDKRelaySet(\n      new Set(this.relays.map((u) => this.ndk?.pool.getRelay(u)).filter((r) => !!r)),\n      this.ndk\n    );\n  }\n};\nfunction relayListFromKind3(ndk, contactList) {\n  try {\n    const content = JSON.parse(contactList.content);\n    const relayList = new NDKRelayList(ndk);\n    const readRelays = /* @__PURE__ */ new Set();\n    const writeRelays = /* @__PURE__ */ new Set();\n    for (let [key, config] of Object.entries(content)) {\n      try {\n        key = normalizeRelayUrl(key);\n      } catch {\n        continue;\n      }\n      if (!config) {\n        readRelays.add(key);\n        writeRelays.add(key);\n      } else {\n        const relayConfig = config;\n        if (relayConfig.write) writeRelays.add(key);\n        if (relayConfig.read) readRelays.add(key);\n      }\n    }\n    relayList.readRelayUrls = Array.from(readRelays);\n    relayList.writeRelayUrls = Array.from(writeRelays);\n    return relayList;\n  } catch {\n  }\n  return void 0;\n}\n\n// src/events/kinds/nip89/app-handler.ts\nvar NDKAppHandlerEvent = class _NDKAppHandlerEvent extends NDKEvent {\n  profile;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 31990 /* AppHandler */;\n  }\n  static from(ndkEvent) {\n    const event = new _NDKAppHandlerEvent(ndkEvent.ndk, ndkEvent.rawEvent());\n    if (event.isValid) {\n      return event;\n    }\n    return null;\n  }\n  get isValid() {\n    const combinations = /* @__PURE__ */ new Map();\n    const combinationFromTag = (tag) => [tag[0], tag[2]].join(\":\").toLowerCase();\n    const tagsToInspect = [\"web\", \"android\", \"ios\"];\n    for (const tag of this.tags) {\n      if (tagsToInspect.includes(tag[0])) {\n        const combination = combinationFromTag(tag);\n        if (combinations.has(combination)) {\n          if (combinations.get(combination) !== tag[1].toLowerCase()) {\n            return false;\n          }\n        }\n        combinations.set(combination, tag[1].toLowerCase());\n      }\n    }\n    return true;\n  }\n  /**\n   * Fetches app handler information\n   * If no app information is available on the kind:31990,\n   * we fetch the event's author's profile and return that instead.\n   */\n  async fetchProfile() {\n    if (this.profile === void 0 && this.content.length > 0) {\n      try {\n        const profile = JSON.parse(this.content);\n        if (profile?.name) {\n          return profile;\n        }\n        this.profile = null;\n      } catch (_e) {\n        this.profile = null;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      const author = this.author;\n      author.fetchProfile().then(() => {\n        resolve(author.profile);\n      }).catch(reject);\n    });\n  }\n};\n\n// src/events/kinds/repost.ts\nvar NDKRepost = class _NDKRepost extends NDKEvent {\n  _repostedEvents;\n  static from(event) {\n    return new _NDKRepost(event.ndk, event.rawEvent());\n  }\n  /**\n   * Returns all reposted events by the current event.\n   *\n   * @param klass Optional class to convert the events to.\n   * @returns\n   */\n  async repostedEvents(klass, opts) {\n    const items = [];\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (this._repostedEvents !== void 0) return this._repostedEvents;\n    for (const eventId of this.repostedEventIds()) {\n      const filter = filterForId(eventId);\n      const event = await this.ndk.fetchEvent(filter, opts);\n      if (event) {\n        items.push(klass ? klass.from(event) : event);\n      }\n    }\n    return items;\n  }\n  /**\n   * Returns the reposted event IDs.\n   */\n  repostedEventIds() {\n    return this.tags.filter((t) => t[0] === \"e\" || t[0] === \"a\").map((t) => t[1]);\n  }\n};\nfunction filterForId(id) {\n  if (id.match(/:/)) {\n    const [kind, pubkey, identifier] = id.split(\":\");\n    return {\n      kinds: [Number.parseInt(kind)],\n      authors: [pubkey],\n      \"#d\": [identifier]\n    };\n  }\n  return { ids: [id] };\n}\n\n// src/events/kinds/subscriptions/receipt.ts\n\nvar NDKSubscriptionReceipt = class _NDKSubscriptionReceipt extends NDKEvent {\n  debug;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 7003 /* SubscriptionReceipt */;\n    this.debug = ndk?.debug.extend(\"subscription-start\") ?? debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:subscription-start\");\n  }\n  static from(event) {\n    return new _NDKSubscriptionReceipt(event.ndk, event.rawEvent());\n  }\n  /**\n   * This is the person being subscribed to\n   */\n  get recipient() {\n    const pTag = this.getMatchingTags(\"p\")?.[0];\n    if (!pTag) return void 0;\n    const user = new NDKUser({ pubkey: pTag[1] });\n    return user;\n  }\n  set recipient(user) {\n    this.removeTag(\"p\");\n    if (!user) return;\n    this.tags.push([\"p\", user.pubkey]);\n  }\n  /**\n   * This is the person subscribing\n   */\n  get subscriber() {\n    const PTag = this.getMatchingTags(\"P\")?.[0];\n    if (!PTag) return void 0;\n    const user = new NDKUser({ pubkey: PTag[1] });\n    return user;\n  }\n  set subscriber(user) {\n    this.removeTag(\"P\");\n    if (!user) return;\n    this.tags.push([\"P\", user.pubkey]);\n  }\n  set subscriptionStart(event) {\n    this.debug(`before setting subscription start: ${this.rawEvent}`);\n    this.removeTag(\"e\");\n    this.tag(event, \"subscription\", true);\n    this.debug(`after setting subscription start: ${this.rawEvent}`);\n  }\n  get tierName() {\n    const tag = this.getMatchingTags(\"tier\")?.[0];\n    return tag?.[1];\n  }\n  get isValid() {\n    const period = this.validPeriod;\n    if (!period) {\n      return false;\n    }\n    if (period.start > period.end) {\n      return false;\n    }\n    const pTags = this.getMatchingTags(\"p\");\n    const PTags = this.getMatchingTags(\"P\");\n    if (pTags.length !== 1 || PTags.length !== 1) {\n      return false;\n    }\n    return true;\n  }\n  get validPeriod() {\n    const tag = this.getMatchingTags(\"valid\")?.[0];\n    if (!tag) return void 0;\n    try {\n      return {\n        start: new Date(Number.parseInt(tag[1]) * 1e3),\n        end: new Date(Number.parseInt(tag[2]) * 1e3)\n      };\n    } catch {\n      return void 0;\n    }\n  }\n  set validPeriod(period) {\n    this.removeTag(\"valid\");\n    if (!period) return;\n    this.tags.push([\n      \"valid\",\n      Math.floor(period.start.getTime() / 1e3).toString(),\n      Math.floor(period.end.getTime() / 1e3).toString()\n    ]);\n  }\n  get startPeriod() {\n    return this.validPeriod?.start;\n  }\n  get endPeriod() {\n    return this.validPeriod?.end;\n  }\n  /**\n   * Whether the subscription is currently active\n   */\n  isActive(time) {\n    time ??= /* @__PURE__ */ new Date();\n    const period = this.validPeriod;\n    if (!period) return false;\n    if (time < period.start) return false;\n    if (time > period.end) return false;\n    return true;\n  }\n};\n\n// src/events/kinds/subscriptions/subscription-start.ts\n\nvar NDKSubscriptionStart = class _NDKSubscriptionStart extends NDKEvent {\n  debug;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 7001 /* Subscribe */;\n    this.debug = ndk?.debug.extend(\"subscription-start\") ?? debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:subscription-start\");\n  }\n  static from(event) {\n    return new _NDKSubscriptionStart(event.ndk, event.rawEvent());\n  }\n  /**\n   * Recipient of the subscription. I.e. The author of this event subscribes to this user.\n   */\n  get recipient() {\n    const pTag = this.getMatchingTags(\"p\")?.[0];\n    if (!pTag) return void 0;\n    const user = new NDKUser({ pubkey: pTag[1] });\n    return user;\n  }\n  set recipient(user) {\n    this.removeTag(\"p\");\n    if (!user) return;\n    this.tags.push([\"p\", user.pubkey]);\n  }\n  /**\n   * The amount of the subscription.\n   */\n  get amount() {\n    const amountTag = this.getMatchingTags(\"amount\")?.[0];\n    if (!amountTag) return void 0;\n    return parseTagToSubscriptionAmount(amountTag);\n  }\n  set amount(amount) {\n    this.removeTag(\"amount\");\n    if (!amount) return;\n    this.tags.push(newAmount(amount.amount, amount.currency, amount.term));\n  }\n  /**\n   * The event id or NIP-33 tag id of the tier that the user is subscribing to.\n   */\n  get tierId() {\n    const eTag = this.getMatchingTags(\"e\")?.[0];\n    const aTag = this.getMatchingTags(\"a\")?.[0];\n    if (!eTag || !aTag) return void 0;\n    return eTag[1] ?? aTag[1];\n  }\n  set tier(tier) {\n    this.removeTag(\"e\");\n    this.removeTag(\"a\");\n    this.removeTag(\"event\");\n    if (!tier) return;\n    this.tag(tier);\n    this.removeTag(\"p\");\n    this.tags.push([\"p\", tier.pubkey]);\n    this.tags.push([\"event\", JSON.stringify(tier.rawEvent())]);\n  }\n  /**\n   * Fetches the tier that the user is subscribing to.\n   */\n  async fetchTier() {\n    const eventTag = this.tagValue(\"event\");\n    if (eventTag) {\n      try {\n        const parsedEvent = JSON.parse(eventTag);\n        return new NDKSubscriptionTier(this.ndk, parsedEvent);\n      } catch {\n        this.debug(\"Failed to parse event tag\");\n      }\n    }\n    const tierId = this.tierId;\n    if (!tierId) return void 0;\n    const e = await this.ndk?.fetchEvent(tierId);\n    if (!e) return void 0;\n    return NDKSubscriptionTier.from(e);\n  }\n  get isValid() {\n    if (this.getMatchingTags(\"amount\").length !== 1) {\n      this.debug(\"Invalid # of amount tag\");\n      return false;\n    }\n    if (!this.amount) {\n      this.debug(\"Invalid amount tag\");\n      return false;\n    }\n    if (this.getMatchingTags(\"p\").length !== 1) {\n      this.debug(\"Invalid # of p tag\");\n      return false;\n    }\n    if (!this.recipient) {\n      this.debug(\"Invalid p tag\");\n      return false;\n    }\n    return true;\n  }\n};\n\n// src/events/gift-wrapping.ts\n\n\n// src/signers/private-key/index.ts\n\n\n\nvar NDKPrivateKeySigner = class _NDKPrivateKeySigner {\n  _user;\n  _privateKey;\n  _pubkey;\n  /**\n   * Create a new signer from a private key.\n   * @param privateKey - The private key to use in hex form or nsec.\n   * @param ndk - The NDK instance to use.\n   */\n  constructor(privateKeyOrNsec, ndk) {\n    if (typeof privateKeyOrNsec === \"string\") {\n      if (privateKeyOrNsec.startsWith(\"nsec1\")) {\n        const { type, data } = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(privateKeyOrNsec);\n        if (type === \"nsec\") this._privateKey = data;\n        else throw new Error(\"Invalid private key provided.\");\n      } else if (privateKeyOrNsec.length === 64) {\n        this._privateKey = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(privateKeyOrNsec);\n      } else {\n        throw new Error(\"Invalid private key provided.\");\n      }\n    } else {\n      this._privateKey = privateKeyOrNsec;\n    }\n    this._pubkey = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.getPublicKey)(this._privateKey);\n    if (ndk) this._user = ndk.getUser({ pubkey: this._pubkey });\n    this._user ??= new NDKUser({ pubkey: this._pubkey });\n  }\n  /**\n   * Get the private key in hex form.\n   */\n  get privateKey() {\n    if (!this._privateKey) throw new Error(\"Not ready\");\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(this._privateKey);\n  }\n  /**\n   * Get the public key in hex form.\n   */\n  get pubkey() {\n    if (!this._pubkey) throw new Error(\"Not ready\");\n    return this._pubkey;\n  }\n  /**\n   * Get the private key in nsec form.\n   */\n  get nsec() {\n    if (!this._privateKey) throw new Error(\"Not ready\");\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.nsecEncode(this._privateKey);\n  }\n  /**\n   * Get the public key in npub form.\n   */\n  get npub() {\n    if (!this._pubkey) throw new Error(\"Not ready\");\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.npubEncode(this._pubkey);\n  }\n  /**\n   * Generate a new private key.\n   */\n  static generate() {\n    const privateKey = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.generateSecretKey)();\n    return new _NDKPrivateKeySigner(privateKey);\n  }\n  /**\n   * Noop in NDKPrivateKeySigner.\n   */\n  async blockUntilReady() {\n    return this._user;\n  }\n  /**\n   * Get the user.\n   */\n  async user() {\n    return this._user;\n  }\n  /**\n   * Get the user.\n   */\n  get userSync() {\n    return this._user;\n  }\n  async sign(event) {\n    if (!this._privateKey) {\n      throw Error(\"Attempted to sign without a private key\");\n    }\n    return (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.finalizeEvent)(event, this._privateKey).sig;\n  }\n  async encryptionEnabled(scheme) {\n    const enabled = [];\n    if (!scheme || scheme === \"nip04\") enabled.push(\"nip04\");\n    if (!scheme || scheme === \"nip44\") enabled.push(\"nip44\");\n    return enabled;\n  }\n  async encrypt(recipient, value, scheme) {\n    if (!this._privateKey || !this.privateKey) {\n      throw Error(\"Attempted to encrypt without a private key\");\n    }\n    const recipientHexPubKey = recipient.pubkey;\n    if (scheme === \"nip44\") {\n      const conversationKey = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.utils.getConversationKey(this._privateKey, recipientHexPubKey);\n      return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.encrypt(value, conversationKey);\n    }\n    return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip04.encrypt(this._privateKey, recipientHexPubKey, value);\n  }\n  async decrypt(sender, value, scheme) {\n    if (!this._privateKey || !this.privateKey) {\n      throw Error(\"Attempted to decrypt without a private key\");\n    }\n    const senderHexPubKey = sender.pubkey;\n    if (scheme === \"nip44\") {\n      const conversationKey = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.utils.getConversationKey(this._privateKey, senderHexPubKey);\n      return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.decrypt(value, conversationKey);\n    }\n    return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip04.decrypt(this._privateKey, senderHexPubKey, value);\n  }\n  /**\n   * Serializes the signer's private key into a storable format.\n   * @returns A JSON string containing the type and the hex private key.\n   */\n  toPayload() {\n    if (!this._privateKey) throw new Error(\"Private key not available\");\n    const payload = {\n      type: \"private-key\",\n      payload: this.privateKey\n      // Use the hex private key\n    };\n    return JSON.stringify(payload);\n  }\n  /**\n   * Deserializes the signer from a payload string.\n   * @param payloadString The JSON string obtained from toPayload().\n   * @param ndk Optional NDK instance.\n   * @returns An instance of NDKPrivateKeySigner.\n   */\n  static async fromPayload(payloadString, ndk) {\n    const payload = JSON.parse(payloadString);\n    if (payload.type !== \"private-key\") {\n      throw new Error(`Invalid payload type: expected 'private-key', got ${payload.type}`);\n    }\n    if (!payload.payload || typeof payload.payload !== \"string\") {\n      throw new Error(\"Invalid payload content for private-key signer\");\n    }\n    return new _NDKPrivateKeySigner(payload.payload, ndk);\n  }\n};\n\n// src/events/gift-wrapping.ts\nasync function giftWrap(event, recipient, signer, params = {}) {\n  let _signer = signer;\n  params.scheme ??= \"nip44\";\n  if (!_signer) {\n    if (!event.ndk) throw new Error(\"no signer available for giftWrap\");\n    _signer = event.ndk.signer;\n  }\n  if (!_signer) throw new Error(\"no signer\");\n  if (!_signer.encryptionEnabled || !_signer.encryptionEnabled(params.scheme))\n    throw new Error(\"signer is not able to giftWrap\");\n  const rumor = getRumorEvent(event, params?.rumorKind);\n  const seal = await getSealEvent(rumor, recipient, _signer, params.scheme);\n  const wrap = await getWrapEvent(seal, recipient, params);\n  return new NDKEvent(event.ndk, wrap);\n}\nasync function giftUnwrap(event, sender, signer, scheme = \"nip44\") {\n  const _sender = sender || new NDKUser({ pubkey: event.pubkey });\n  let _signer = signer;\n  if (!_signer) {\n    if (!event.ndk) throw new Error(\"no signer available for giftUnwrap\");\n    _signer = event.ndk.signer;\n  }\n  if (!signer) throw new Error(\"no signer\");\n  try {\n    const seal = JSON.parse(await signer.decrypt(_sender, event.content, scheme));\n    if (!seal) throw new Error(\"Failed to decrypt wrapper\");\n    if (!new NDKEvent(void 0, seal).verifySignature(false))\n      throw new Error(\"GiftSeal signature verification failed!\");\n    const rumorSender = new NDKUser({ pubkey: seal.pubkey });\n    const rumor = JSON.parse(await signer.decrypt(rumorSender, seal.content, scheme));\n    if (!rumor) throw new Error(\"Failed to decrypt seal\");\n    if (rumor.pubkey !== seal.pubkey) throw new Error(\"Invalid GiftWrap, sender validation failed!\");\n    return new NDKEvent(event.ndk, rumor);\n  } catch (_e) {\n    return Promise.reject(\"Got error unwrapping event! See console log.\");\n  }\n}\nfunction getRumorEvent(event, kind) {\n  const rumor = event.rawEvent();\n  rumor.kind = kind || rumor.kind || 14 /* PrivateDirectMessage */;\n  rumor.sig = void 0;\n  rumor.id = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.getEventHash)(rumor);\n  return new NDKEvent(event.ndk, rumor);\n}\nasync function getSealEvent(rumor, recipient, signer, scheme = \"nip44\") {\n  const seal = new NDKEvent(rumor.ndk);\n  seal.kind = 13 /* GiftWrapSeal */;\n  seal.created_at = approximateNow(5);\n  seal.content = JSON.stringify(rumor.rawEvent());\n  await seal.encrypt(recipient, signer, scheme);\n  await seal.sign(signer);\n  return seal;\n}\nasync function getWrapEvent(sealed, recipient, params, scheme = \"nip44\") {\n  const signer = NDKPrivateKeySigner.generate();\n  const wrap = new NDKEvent(sealed.ndk);\n  wrap.kind = 1059 /* GiftWrap */;\n  wrap.created_at = approximateNow(5);\n  if (params?.wrapTags) wrap.tags = params.wrapTags;\n  wrap.tag(recipient);\n  wrap.content = JSON.stringify(sealed.rawEvent());\n  await wrap.encrypt(recipient, signer, scheme);\n  await wrap.sign(signer);\n  return wrap;\n}\nfunction approximateNow(drift = 0) {\n  return Math.round(Date.now() / 1e3 - Math.random() * 10 ** drift);\n}\n\n// src/events/kinds/simple-group/index.ts\nvar NDKSimpleGroup = class _NDKSimpleGroup {\n  ndk;\n  groupId;\n  relaySet;\n  fetchingMetadata;\n  metadata;\n  memberList;\n  adminList;\n  constructor(ndk, relaySet, groupId) {\n    this.ndk = ndk;\n    this.groupId = groupId ?? randomId(24);\n    this.relaySet = relaySet;\n  }\n  get id() {\n    return this.groupId;\n  }\n  relayUrls() {\n    return this.relaySet?.relayUrls;\n  }\n  get name() {\n    return this.metadata?.name;\n  }\n  get about() {\n    return this.metadata?.about;\n  }\n  get picture() {\n    return this.metadata?.picture;\n  }\n  get members() {\n    return this.memberList?.members ?? [];\n  }\n  get admins() {\n    return this.adminList?.members ?? [];\n  }\n  async getMetadata() {\n    await this.ensureMetadataEvent();\n    return this.metadata;\n  }\n  /**\n   * Creates the group by publishing a kind:9007 event.\n   * @param signer\n   * @returns\n   */\n  async createGroup(signer) {\n    signer ??= this.ndk.signer;\n    if (!signer) throw new Error(\"No signer available\");\n    const user = await signer.user();\n    if (!user) throw new Error(\"No user available\");\n    const event = new NDKEvent(this.ndk);\n    event.kind = 9007 /* GroupAdminCreateGroup */;\n    event.tags.push([\"h\", this.groupId]);\n    await event.sign(signer);\n    return event.publish(this.relaySet);\n  }\n  async setMetadata({ name, about, picture }) {\n    const event = new NDKEvent(this.ndk);\n    event.kind = 9002 /* GroupAdminEditMetadata */;\n    event.tags.push([\"h\", this.groupId]);\n    if (name) event.tags.push([\"name\", name]);\n    if (about) event.tags.push([\"about\", about]);\n    if (picture) event.tags.push([\"picture\", picture]);\n    await event.sign();\n    return event.publish(this.relaySet);\n  }\n  /**\n   * Adds a user to the group using a kind:9000 event\n   * @param user user to add\n   * @param opts options\n   */\n  async addUser(user) {\n    const addUserEvent = _NDKSimpleGroup.generateAddUserEvent(user.pubkey, this.groupId);\n    addUserEvent.ndk = this.ndk;\n    return addUserEvent;\n  }\n  async getMemberListEvent() {\n    const memberList = await this.ndk.fetchEvent(\n      {\n        kinds: [39002 /* GroupMembers */],\n        \"#d\": [this.groupId]\n      },\n      void 0,\n      this.relaySet\n    );\n    if (!memberList) return null;\n    return NDKSimpleGroupMemberList.from(memberList);\n  }\n  /**\n   * Gets a list of users that belong to this group\n   */\n  async getMembers() {\n    const members = [];\n    const memberPubkeys = /* @__PURE__ */ new Set();\n    const memberListEvent = await this.getMemberListEvent();\n    if (!memberListEvent) return [];\n    for (const pTag of memberListEvent.getMatchingTags(\"p\")) {\n      const pubkey = pTag[1];\n      if (memberPubkeys.has(pubkey)) continue;\n      memberPubkeys.add(pubkey);\n      try {\n        members.push(this.ndk.getUser({ pubkey }));\n      } catch {\n      }\n    }\n    return members;\n  }\n  /**\n   * Generates an event that lists the members of a group.\n   * @param groupId\n   * @returns\n   */\n  static generateUserListEvent(groupId) {\n    const event = new NDKEvent(void 0, {\n      kind: 39002 /* GroupMembers */,\n      tags: [\n        [\"h\", groupId],\n        [\"alt\", \"Group Member List\"]\n      ]\n    });\n    return event;\n  }\n  /**\n   * Generates an event that adds a user to a group.\n   * @param userPubkey pubkey of the user to add\n   * @param groupId group to add the user to\n   * @returns\n   */\n  static generateAddUserEvent(userPubkey, groupId) {\n    const event = new NDKEvent(void 0, {\n      kind: 9e3 /* GroupAdminAddUser */,\n      tags: [[\"h\", groupId]]\n    });\n    event.tags.push([\"p\", userPubkey]);\n    return event;\n  }\n  async requestToJoin(_pubkey, content) {\n    const event = new NDKEvent(this.ndk, {\n      kind: 9021 /* GroupAdminRequestJoin */,\n      content: content ?? \"\",\n      tags: [[\"h\", this.groupId]]\n    });\n    return event.publish(this.relaySet);\n  }\n  /**\n   * Makes sure that a metadata event exists locally\n   */\n  async ensureMetadataEvent() {\n    if (this.metadata) return;\n    if (this.fetchingMetadata) return this.fetchingMetadata;\n    this.fetchingMetadata = this.ndk.fetchEvent(\n      {\n        kinds: [39e3 /* GroupMetadata */],\n        \"#d\": [this.groupId]\n      },\n      void 0,\n      this.relaySet\n    ).then((event) => {\n      if (event) {\n        this.metadata = NDKSimpleGroupMetadata.from(event);\n      } else {\n        this.metadata = new NDKSimpleGroupMetadata(this.ndk);\n        this.metadata.dTag = this.groupId;\n      }\n    }).finally(() => {\n      this.fetchingMetadata = void 0;\n    }).catch(() => {\n      throw new Error(`Failed to fetch metadata for group ${this.groupId}`);\n    });\n    return this.fetchingMetadata;\n  }\n};\nfunction randomId(length) {\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charsLength = chars.length;\n  let result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * charsLength));\n  }\n  return result;\n}\n\n// src/app-settings/index.ts\nvar NDKAppSettings = class _NDKAppSettings extends NDKEvent {\n  appName;\n  settings = {};\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30078 /* AppSpecificData */;\n    this.dTag ??= this.appName;\n    if (this.content.length > 0) {\n      try {\n        this.settings = JSON.parse(this.content);\n      } catch (error) {\n        console.error(\"Error parsing app settings\", error);\n      }\n    }\n  }\n  static from(event) {\n    return new _NDKAppSettings(event.ndk, event);\n  }\n  /**\n   * Set a value for a given key.\n   *\n   * @param key\n   * @param value\n   */\n  set(key, value) {\n    this.settings[key] = value;\n  }\n  /**\n   * Get a value for a given key.\n   *\n   * @param key\n   * @returns\n   */\n  get(key) {\n    return this.settings[key];\n  }\n  async publishReplaceable(relaySet, timeoutMs, requiredRelayCount) {\n    this.content = JSON.stringify(this.settings);\n    return super.publishReplaceable(relaySet, timeoutMs, requiredRelayCount);\n  }\n};\n\n// src/relay/auth-policies.ts\n\nfunction disconnect(pool, debug8) {\n  debug8 ??= debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:relay:auth-policies:disconnect\");\n  return async (relay) => {\n    debug8?.(`Relay ${relay.url} requested authentication, disconnecting`);\n    pool.removeRelay(relay.url);\n  };\n}\nasync function signAndAuth(event, relay, signer, debug8, resolve, reject) {\n  try {\n    await event.sign(signer);\n    resolve(event);\n  } catch (e) {\n    debug8?.(`Failed to publish auth event to relay ${relay.url}`, e);\n    reject(event);\n  }\n}\nfunction signIn({ ndk, signer, debug: debug8 } = {}) {\n  debug8 ??= debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:auth-policies:signIn\");\n  return async (relay, challenge) => {\n    debug8?.(`Relay ${relay.url} requested authentication, signing in`);\n    const event = new NDKEvent(ndk);\n    event.kind = 22242 /* ClientAuth */;\n    event.tags = [\n      [\"relay\", relay.url],\n      [\"challenge\", challenge]\n    ];\n    signer ??= ndk?.signer;\n    return new Promise(async (resolve, reject) => {\n      if (signer) {\n        await signAndAuth(event, relay, signer, debug8, resolve, reject);\n      } else {\n        ndk?.once(\"signer:ready\", async (signer2) => {\n          await signAndAuth(event, relay, signer2, debug8, resolve, reject);\n        });\n      }\n    });\n  };\n}\nvar NDKRelayAuthPolicies = {\n  disconnect,\n  signIn\n};\n\n// src/signers/nip07/index.ts\n\nvar NDKNip07Signer = class _NDKNip07Signer {\n  _userPromise;\n  encryptionQueue = [];\n  encryptionProcessing = false;\n  debug;\n  waitTimeout;\n  _pubkey;\n  ndk;\n  _user;\n  /**\n   * @param waitTimeout - The timeout in milliseconds to wait for the NIP-07 to become available\n   */\n  constructor(waitTimeout = 1e3, ndk) {\n    this.debug = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:nip07\");\n    this.waitTimeout = waitTimeout;\n    this.ndk = ndk;\n  }\n  get pubkey() {\n    if (!this._pubkey) throw new Error(\"Not ready\");\n    return this._pubkey;\n  }\n  async blockUntilReady() {\n    await this.waitForExtension();\n    const pubkey = await window.nostr?.getPublicKey();\n    if (!pubkey) {\n      throw new Error(\"User rejected access\");\n    }\n    this._pubkey = pubkey;\n    let user;\n    if (this.ndk) user = this.ndk.getUser({ pubkey });\n    else user = new NDKUser({ pubkey });\n    this._user = user;\n    return user;\n  }\n  /**\n   * Getter for the user property.\n   * @returns The NDKUser instance.\n   */\n  async user() {\n    if (!this._userPromise) {\n      this._userPromise = this.blockUntilReady();\n    }\n    return this._userPromise;\n  }\n  get userSync() {\n    if (!this._user) throw new Error(\"User not ready\");\n    return this._user;\n  }\n  /**\n   * Signs the given Nostr event.\n   * @param event - The Nostr event to be signed.\n   * @returns The signature of the signed event.\n   * @throws Error if the NIP-07 is not available on the window object.\n   */\n  async sign(event) {\n    await this.waitForExtension();\n    const signedEvent = await window.nostr?.signEvent(event);\n    if (!signedEvent) throw new Error(\"Failed to sign event\");\n    return signedEvent.sig;\n  }\n  async relays(ndk) {\n    await this.waitForExtension();\n    const relays = await window.nostr?.getRelays?.() || {};\n    const activeRelays = [];\n    for (const url of Object.keys(relays)) {\n      if (relays[url].read && relays[url].write) {\n        activeRelays.push(url);\n      }\n    }\n    return activeRelays.map((url) => new NDKRelay(url, ndk?.relayAuthDefaultPolicy, ndk));\n  }\n  async encryptionEnabled(nip) {\n    const enabled = [];\n    if ((!nip || nip === \"nip04\") && Boolean(window.nostr?.nip04)) enabled.push(\"nip04\");\n    if ((!nip || nip === \"nip44\") && Boolean(window.nostr?.nip44)) enabled.push(\"nip44\");\n    return enabled;\n  }\n  async encrypt(recipient, value, nip = \"nip04\") {\n    if (!await this.encryptionEnabled(nip))\n      throw new Error(`${nip}encryption is not available from your browser extension`);\n    await this.waitForExtension();\n    const recipientHexPubKey = recipient.pubkey;\n    return this.queueEncryption(nip, \"encrypt\", recipientHexPubKey, value);\n  }\n  async decrypt(sender, value, nip = \"nip04\") {\n    if (!await this.encryptionEnabled(nip))\n      throw new Error(`${nip}encryption is not available from your browser extension`);\n    await this.waitForExtension();\n    const senderHexPubKey = sender.pubkey;\n    return this.queueEncryption(nip, \"decrypt\", senderHexPubKey, value);\n  }\n  async queueEncryption(scheme, method, counterpartyHexpubkey, value) {\n    return new Promise((resolve, reject) => {\n      this.encryptionQueue.push({\n        scheme,\n        method,\n        counterpartyHexpubkey,\n        value,\n        resolve,\n        reject\n      });\n      if (!this.encryptionProcessing) {\n        this.processEncryptionQueue();\n      }\n    });\n  }\n  async processEncryptionQueue(item, retries = 0) {\n    if (!item && this.encryptionQueue.length === 0) {\n      this.encryptionProcessing = false;\n      return;\n    }\n    this.encryptionProcessing = true;\n    const currentItem = item || this.encryptionQueue.shift();\n    if (!currentItem) {\n      this.encryptionProcessing = false;\n      return;\n    }\n    const { scheme, method, counterpartyHexpubkey, value, resolve, reject } = currentItem;\n    this.debug(\"Processing encryption queue item\", {\n      method,\n      counterpartyHexpubkey,\n      value\n    });\n    try {\n      const result = await window.nostr?.[scheme]?.[method](counterpartyHexpubkey, value);\n      if (!result) throw new Error(\"Failed to encrypt/decrypt\");\n      resolve(result);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      if (errorMessage.includes(\"call already executing\") && retries < 5) {\n        this.debug(\"Retrying encryption queue item\", {\n          method,\n          counterpartyHexpubkey,\n          value,\n          retries\n        });\n        setTimeout(() => {\n          this.processEncryptionQueue(currentItem, retries + 1);\n        }, 50 * retries);\n        return;\n      }\n      reject(error instanceof Error ? error : new Error(errorMessage));\n    }\n    this.processEncryptionQueue();\n  }\n  waitForExtension() {\n    return new Promise((resolve, reject) => {\n      if (window.nostr) {\n        resolve();\n        return;\n      }\n      let timerId;\n      const intervalId = setInterval(() => {\n        if (window.nostr) {\n          clearTimeout(timerId);\n          clearInterval(intervalId);\n          resolve();\n        }\n      }, 100);\n      timerId = setTimeout(() => {\n        clearInterval(intervalId);\n        reject(new Error(\"NIP-07 extension not available\"));\n      }, this.waitTimeout);\n    });\n  }\n  /**\n   * Serializes the signer type into a storable format.\n   * NIP-07 signers don't have persistent state to serialize beyond their type.\n   * @returns A JSON string containing the type.\n   */\n  toPayload() {\n    const payload = {\n      type: \"nip07\",\n      payload: \"\"\n      // No specific payload needed for NIP-07\n    };\n    return JSON.stringify(payload);\n  }\n  /**\n   * Deserializes the signer from a payload string.\n   * Creates a new NDKNip07Signer instance.\n   * @param payloadString The JSON string obtained from toPayload().\n   * @param ndk Optional NDK instance.\n   * @returns An instance of NDKNip07Signer.\n   */\n  static async fromPayload(payloadString, ndk) {\n    const payload = JSON.parse(payloadString);\n    if (payload.type !== \"nip07\") {\n      throw new Error(`Invalid payload type: expected 'nip07', got ${payload.type}`);\n    }\n    return new _NDKNip07Signer(void 0, ndk);\n  }\n};\n\n// src/signers/nip46/backend/index.ts\n\n\n// src/signers/nip46/rpc.ts\n\nvar NDKNostrRpc = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  ndk;\n  signer;\n  relaySet;\n  debug;\n  encryptionType = \"nip04\";\n  pool;\n  constructor(ndk, signer, debug8, relayUrls) {\n    super();\n    this.ndk = ndk;\n    this.signer = signer;\n    if (relayUrls) {\n      this.pool = new NDKPool(relayUrls, [], ndk, {\n        debug: debug8.extend(\"rpc-pool\"),\n        name: \"Nostr RPC\"\n      });\n      this.relaySet = new NDKRelaySet(/* @__PURE__ */ new Set(), ndk, this.pool);\n      for (const url of relayUrls) {\n        const relay = this.pool.getRelay(url, false, false);\n        relay.authPolicy = NDKRelayAuthPolicies.signIn({ ndk, signer, debug: debug8 });\n        this.relaySet.addRelay(relay);\n        relay.connect();\n      }\n    }\n    this.debug = debug8.extend(\"rpc\");\n  }\n  /**\n   * Subscribe to a filter. This function will resolve once the subscription is ready.\n   */\n  subscribe(filter) {\n    const sub = this.ndk.subscribe(\n      filter,\n      {\n        closeOnEose: false,\n        groupable: false,\n        cacheUsage: \"ONLY_RELAY\" /* ONLY_RELAY */,\n        pool: this.pool,\n        relaySet: this.relaySet\n      },\n      false\n    );\n    sub.on(\"event\", async (event) => {\n      try {\n        const parsedEvent = await this.parseEvent(event);\n        if (parsedEvent.method) {\n          this.emit(\"request\", parsedEvent);\n        } else {\n          this.emit(`response-${parsedEvent.id}`, parsedEvent);\n        }\n      } catch (e) {\n        this.debug(\"error parsing event\", e, event.rawEvent());\n      }\n    });\n    return new Promise((resolve) => {\n      sub.on(\"eose\", () => {\n        this.debug(\"eosed\");\n        resolve(sub);\n      });\n      sub.start();\n    });\n  }\n  async parseEvent(event) {\n    if (this.encryptionType === \"nip44\" && event.content.includes(\"?iv=\")) {\n      this.encryptionType = \"nip04\";\n    } else if (this.encryptionType === \"nip04\" && !event.content.includes(\"?iv=\")) {\n      this.encryptionType = \"nip44\";\n    }\n    const remoteUser = this.ndk.getUser({ pubkey: event.pubkey });\n    remoteUser.ndk = this.ndk;\n    let decryptedContent;\n    try {\n      decryptedContent = await this.signer.decrypt(remoteUser, event.content, this.encryptionType);\n    } catch (_e) {\n      const otherEncryptionType = this.encryptionType === \"nip04\" ? \"nip44\" : \"nip04\";\n      decryptedContent = await this.signer.decrypt(remoteUser, event.content, otherEncryptionType);\n      this.encryptionType = otherEncryptionType;\n    }\n    const parsedContent = JSON.parse(decryptedContent);\n    const { id, method, params, result, error } = parsedContent;\n    if (method) {\n      return { id, pubkey: event.pubkey, method, params, event };\n    }\n    return { id, result, error, event };\n  }\n  async sendResponse(id, remotePubkey, result, kind = 24133 /* NostrConnect */, error) {\n    const res = { id, result };\n    if (error) {\n      res.error = error;\n    }\n    const localUser = await this.signer.user();\n    const remoteUser = this.ndk.getUser({ pubkey: remotePubkey });\n    const event = new NDKEvent(this.ndk, {\n      kind,\n      content: JSON.stringify(res),\n      tags: [[\"p\", remotePubkey]],\n      pubkey: localUser.pubkey\n    });\n    event.content = await this.signer.encrypt(remoteUser, event.content, this.encryptionType);\n    await event.sign(this.signer);\n    await event.publish(this.relaySet);\n  }\n  /**\n   * Sends a request.\n   * @param remotePubkey\n   * @param method\n   * @param params\n   * @param kind\n   * @param id\n   */\n  async sendRequest(remotePubkey, method, params = [], kind = 24133, cb) {\n    const id = Math.random().toString(36).substring(7);\n    const localUser = await this.signer.user();\n    const remoteUser = this.ndk.getUser({ pubkey: remotePubkey });\n    const request = { id, method, params };\n    const promise = new Promise(() => {\n      const responseHandler = (response) => {\n        if (response.result === \"auth_url\") {\n          this.once(`response-${id}`, responseHandler);\n          this.emit(\"authUrl\", response.error);\n        } else if (cb) {\n          cb(response);\n        }\n      };\n      this.once(`response-${id}`, responseHandler);\n    });\n    const event = new NDKEvent(this.ndk, {\n      kind,\n      content: JSON.stringify(request),\n      tags: [[\"p\", remotePubkey]],\n      pubkey: localUser.pubkey\n    });\n    event.content = await this.signer.encrypt(remoteUser, event.content, this.encryptionType);\n    await event.sign(this.signer);\n    await event.publish(this.relaySet);\n    return promise;\n  }\n};\n\n// src/signers/nip46/backend/connect.ts\nvar ConnectEventHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [_, token] = params;\n    const debug8 = backend.debug.extend(\"connect\");\n    debug8(`connection request from ${remotePubkey}`);\n    if (token && backend.applyToken) {\n      debug8(\"applying token\");\n      await backend.applyToken(remotePubkey, token);\n    }\n    if (await backend.pubkeyAllowed({\n      id,\n      pubkey: remotePubkey,\n      method: \"connect\",\n      params: token\n    })) {\n      debug8(`connection request from ${remotePubkey} allowed`);\n      return \"ack\";\n    }\n    debug8(`connection request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n};\n\n// src/signers/nip46/backend/get-public-key.ts\nvar GetPublicKeyHandlingStrategy = class {\n  async handle(backend, _id, _remotePubkey, _params) {\n    return backend.localUser?.pubkey;\n  }\n};\n\n// src/signers/nip46/backend/nip04-decrypt.ts\nvar Nip04DecryptHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [senderPubkey, payload] = params;\n    const senderUser = new NDKUser({ pubkey: senderPubkey });\n    const decryptedPayload = await decrypt2(backend, id, remotePubkey, senderUser, payload);\n    return decryptedPayload;\n  }\n};\nasync function decrypt2(backend, id, remotePubkey, senderUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip04_decrypt\",\n    params: payload\n  })) {\n    backend.debug(`decrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.decrypt(senderUser, payload, \"nip04\");\n}\n\n// src/signers/nip46/backend/nip04-encrypt.ts\nvar Nip04EncryptHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [recipientPubkey, payload] = params;\n    const recipientUser = new NDKUser({ pubkey: recipientPubkey });\n    const encryptedPayload = await encrypt2(backend, id, remotePubkey, recipientUser, payload);\n    return encryptedPayload;\n  }\n};\nasync function encrypt2(backend, id, remotePubkey, recipientUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip04_encrypt\",\n    params: payload\n  })) {\n    backend.debug(`encrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.encrypt(recipientUser, payload, \"nip04\");\n}\n\n// src/signers/nip46/backend/nip44-decrypt.ts\nvar Nip04DecryptHandlingStrategy2 = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [senderPubkey, payload] = params;\n    const senderUser = new NDKUser({ pubkey: senderPubkey });\n    const decryptedPayload = await decrypt3(backend, id, remotePubkey, senderUser, payload);\n    return decryptedPayload;\n  }\n};\nasync function decrypt3(backend, id, remotePubkey, senderUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip44_decrypt\",\n    params: payload\n  })) {\n    backend.debug(`decrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.decrypt(senderUser, payload, \"nip44\");\n}\n\n// src/signers/nip46/backend/nip44-encrypt.ts\nvar Nip04EncryptHandlingStrategy2 = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [recipientPubkey, payload] = params;\n    const recipientUser = new NDKUser({ pubkey: recipientPubkey });\n    const encryptedPayload = await encrypt3(backend, id, remotePubkey, recipientUser, payload);\n    return encryptedPayload;\n  }\n};\nasync function encrypt3(backend, id, remotePubkey, recipientUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip44_encrypt\",\n    params: payload\n  })) {\n    backend.debug(`encrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.encrypt(recipientUser, payload, \"nip44\");\n}\n\n// src/signers/nip46/backend/ping.ts\nvar PingEventHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, _params) {\n    const debug8 = backend.debug.extend(\"ping\");\n    debug8(`ping request from ${remotePubkey}`);\n    if (await backend.pubkeyAllowed({ id, pubkey: remotePubkey, method: \"ping\" })) {\n      debug8(`connection request from ${remotePubkey} allowed`);\n      return \"pong\";\n    }\n    debug8(`connection request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n};\n\n// src/signers/nip46/backend/sign-event.ts\nvar SignEventHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const event = await signEvent(backend, id, remotePubkey, params);\n    if (!event) return void 0;\n    return JSON.stringify(await event.toNostrEvent());\n  }\n};\nasync function signEvent(backend, id, remotePubkey, params) {\n  const [eventString] = params;\n  backend.debug(`sign event request from ${remotePubkey}`);\n  const event = new NDKEvent(backend.ndk, JSON.parse(eventString));\n  backend.debug(\"event to sign\", event.rawEvent());\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"sign_event\",\n    params: event\n  })) {\n    backend.debug(`sign event request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  backend.debug(`sign event request from ${remotePubkey} allowed`);\n  await event.sign(backend.signer);\n  return event;\n}\n\n// src/signers/nip46/backend/index.ts\nvar NDKNip46Backend = class {\n  ndk;\n  signer;\n  localUser;\n  debug;\n  rpc;\n  permitCallback;\n  relayUrls;\n  /**\n   * @param ndk The NDK instance to use\n   * @param privateKeyOrSigner The private key or signer of the npub that wants to be published as\n   * @param permitCallback Callback executed when permission is requested\n   */\n  constructor(ndk, privateKeyOrSigner, permitCallback, relayUrls) {\n    this.ndk = ndk;\n    if (privateKeyOrSigner instanceof Uint8Array) {\n      this.signer = new NDKPrivateKeySigner(privateKeyOrSigner);\n    } else if (privateKeyOrSigner instanceof String) {\n      this.signer = new NDKPrivateKeySigner((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(privateKeyOrSigner));\n    } else if (privateKeyOrSigner instanceof NDKPrivateKeySigner) {\n      this.signer = privateKeyOrSigner;\n    } else {\n      throw new Error(\"Invalid signer\");\n    }\n    this.debug = ndk.debug.extend(\"nip46:backend\");\n    this.relayUrls = relayUrls ?? Array.from(ndk.pool.relays.keys());\n    this.rpc = new NDKNostrRpc(ndk, this.signer, this.debug, this.relayUrls);\n    this.permitCallback = permitCallback;\n  }\n  /**\n   * This method starts the backend, which will start listening for incoming\n   * requests.\n   */\n  async start() {\n    this.localUser = await this.signer.user();\n    const sub = this.ndk.subscribe(\n      {\n        kinds: [24133],\n        \"#p\": [this.localUser.pubkey]\n      },\n      { closeOnEose: false }\n    );\n    sub.on(\"event\", (e) => this.handleIncomingEvent(e));\n  }\n  handlers = {\n    connect: new ConnectEventHandlingStrategy(),\n    sign_event: new SignEventHandlingStrategy(),\n    nip04_encrypt: new Nip04EncryptHandlingStrategy(),\n    nip04_decrypt: new Nip04DecryptHandlingStrategy(),\n    nip44_encrypt: new Nip04EncryptHandlingStrategy2(),\n    nip44_decrypt: new Nip04DecryptHandlingStrategy2(),\n    get_public_key: new GetPublicKeyHandlingStrategy(),\n    ping: new PingEventHandlingStrategy()\n  };\n  /**\n   * Enables the user to set a custom strategy for handling incoming events.\n   * @param method - The method to set the strategy for\n   * @param strategy - The strategy to set\n   */\n  setStrategy(method, strategy) {\n    this.handlers[method] = strategy;\n  }\n  /**\n   * Overload this method to apply tokens, which can\n   * wrap permission sets to be applied to a pubkey.\n   * @param pubkey public key to apply token to\n   * @param token token to apply\n   */\n  async applyToken(_pubkey, _token) {\n    throw new Error(\"connection token not supported\");\n  }\n  async handleIncomingEvent(event) {\n    const { id, method, params } = await this.rpc.parseEvent(event);\n    const remotePubkey = event.pubkey;\n    let response;\n    this.debug(\"incoming event\", { id, method, params });\n    if (!event.verifySignature(false)) {\n      this.debug(\"invalid signature\", event.rawEvent());\n      return;\n    }\n    const strategy = this.handlers[method];\n    if (strategy) {\n      try {\n        response = await strategy.handle(this, id, remotePubkey, params);\n      } catch (e) {\n        this.debug(\"error handling event\", e, { id, method, params });\n        this.rpc.sendResponse(id, remotePubkey, \"error\", void 0, e.message);\n      }\n    } else {\n      this.debug(\"unsupported method\", { method, params });\n    }\n    if (response) {\n      this.debug(`sending response to ${remotePubkey}`, response);\n      this.rpc.sendResponse(id, remotePubkey, response);\n    } else {\n      this.rpc.sendResponse(id, remotePubkey, \"error\", void 0, \"Not authorized\");\n    }\n  }\n  /**\n   * This method should be overriden by the user to allow or reject incoming\n   * connections.\n   */\n  async pubkeyAllowed(params) {\n    return this.permitCallback(params);\n  }\n};\n\n// src/signers/nip46/index.ts\n\n\n// src/signers/deserialization.ts\nvar signerRegistry = /* @__PURE__ */ new Map();\nsignerRegistry.set(\"private-key\", NDKPrivateKeySigner);\nsignerRegistry.set(\"nip07\", NDKNip07Signer);\nsignerRegistry.set(\"nip46\", NDKNip46Signer);\nasync function ndkSignerFromPayload(payloadString, ndk) {\n  let parsed;\n  try {\n    parsed = JSON.parse(payloadString);\n  } catch (e) {\n    throw new Error(`Failed to parse signer payload: ${e instanceof Error ? e.message : String(e)}`);\n  }\n  const SignerClass = signerRegistry.get(parsed.type);\n  if (!SignerClass) {\n    throw new Error(`Unknown signer type: ${parsed.type}`);\n  }\n  try {\n    return await SignerClass.fromPayload(payloadString, ndk);\n  } catch (e) {\n    const errorMsg = e instanceof Error ? e.message : String(e);\n    throw new Error(`Failed to deserialize signer type ${parsed.type}: ${errorMsg}`);\n  }\n}\n\n// src/signers/nip46/index.ts\nvar NDKNip46Signer = class _NDKNip46Signer extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  ndk;\n  _user;\n  /**\n   * The pubkey of the bunker that will be providing signatures\n   */\n  bunkerPubkey;\n  /**\n   * The pubkey of the user that events will be published as\n   */\n  userPubkey;\n  get pubkey() {\n    if (!this.userPubkey) throw new Error(\"Not ready\");\n    return this.userPubkey;\n  }\n  /**\n   * An optional secret value provided to connect to the bunker\n   */\n  secret;\n  localSigner;\n  nip05;\n  rpc;\n  debug;\n  relayUrls;\n  subscription;\n  /**\n   * @param ndk - The NDK instance to use\n   * @param userOrConnectionToken - The public key, or a connection token, of the npub that wants to be published as\n   * @param localSigner - The signer that will be used to request events to be signed\n   */\n  constructor(ndk, userOrConnectionToken, localSigner) {\n    super();\n    this.ndk = ndk;\n    this.debug = ndk.debug.extend(\"nip46:signer\");\n    if (userOrConnectionToken.startsWith(\"bunker://\")) {\n      this.connectionTokenInit(userOrConnectionToken);\n    } else {\n      this.nip05Init(userOrConnectionToken);\n    }\n    if (!localSigner) {\n      this.localSigner = NDKPrivateKeySigner.generate();\n    } else {\n      this.localSigner = localSigner;\n    }\n    this.rpc = new NDKNostrRpc(this.ndk, this.localSigner, this.debug, this.relayUrls);\n  }\n  connectionTokenInit(connectionToken) {\n    const bunkerUrl = new URL(connectionToken);\n    const bunkerPubkey = bunkerUrl.hostname || bunkerUrl.pathname.replace(/^\\/\\//, \"\");\n    const userPubkey = bunkerUrl.searchParams.get(\"pubkey\");\n    const relayUrls = bunkerUrl.searchParams.getAll(\"relay\");\n    const secret = bunkerUrl.searchParams.get(\"secret\");\n    this.bunkerPubkey = bunkerPubkey;\n    this.userPubkey = userPubkey;\n    this.relayUrls = relayUrls;\n    this.secret = secret;\n  }\n  nip05Init(nip05) {\n    this.nip05 = nip05;\n  }\n  /**\n   * We start listening for events from the bunker\n   */\n  async startListening() {\n    if (this.subscription) return;\n    const localUser = await this.localSigner.user();\n    if (!localUser) throw new Error(\"Local signer not ready\");\n    this.subscription = await this.rpc.subscribe({\n      kinds: [24133 /* NostrConnect */],\n      \"#p\": [localUser.pubkey]\n    });\n  }\n  /**\n   * Get the user that is being published as\n   */\n  async user() {\n    if (this._user) return this._user;\n    return this.blockUntilReady();\n  }\n  get userSync() {\n    if (!this._user) throw new Error(\"Remote user not ready synchronously\");\n    return this._user;\n  }\n  async blockUntilReady() {\n    if (this.nip05 && !this.userPubkey) {\n      const user = await NDKUser.fromNip05(this.nip05, this.ndk);\n      if (user) {\n        this._user = user;\n        this.userPubkey = user.pubkey;\n        this.relayUrls = user.nip46Urls;\n        this.rpc = new NDKNostrRpc(this.ndk, this.localSigner, this.debug, this.relayUrls);\n      }\n    }\n    if (!this.bunkerPubkey && this.userPubkey) {\n      this.bunkerPubkey = this.userPubkey;\n    } else if (!this.bunkerPubkey) {\n      throw new Error(\"Bunker pubkey not set\");\n    }\n    await this.startListening();\n    this.rpc.on(\"authUrl\", (...props) => {\n      this.emit(\"authUrl\", ...props);\n    });\n    return new Promise((resolve, reject) => {\n      const connectParams = [this.userPubkey ?? \"\"];\n      if (this.secret) connectParams.push(this.secret);\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(this.bunkerPubkey, \"connect\", connectParams, 24133, (response) => {\n        if (response.result === \"ack\") {\n          this.getPublicKey().then((pubkey) => {\n            this.userPubkey = pubkey;\n            this._user = this.ndk.getUser({ pubkey });\n            resolve(this._user);\n          });\n        } else {\n          reject(response.error);\n        }\n      });\n    });\n  }\n  async getPublicKey() {\n    if (this.userPubkey) return this.userPubkey;\n    return new Promise((resolve, _reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(this.bunkerPubkey, \"get_public_key\", [], 24133, (response) => {\n        resolve(response.result);\n      });\n    });\n  }\n  async encryptionEnabled(scheme) {\n    if (scheme) return [scheme];\n    return Promise.resolve([\"nip04\", \"nip44\"]);\n  }\n  async encrypt(recipient, value, scheme = \"nip04\") {\n    return this.encryption(recipient, value, scheme, \"encrypt\");\n  }\n  async decrypt(sender, value, scheme = \"nip04\") {\n    return this.encryption(sender, value, scheme, \"decrypt\");\n  }\n  async encryption(peer, value, scheme, method) {\n    const promise = new Promise((resolve, reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(\n        this.bunkerPubkey,\n        `${scheme}_${method}`,\n        [peer.pubkey, value],\n        24133,\n        (response) => {\n          if (!response.error) {\n            resolve(response.result);\n          } else {\n            reject(response.error);\n          }\n        }\n      );\n    });\n    return promise;\n  }\n  async sign(event) {\n    const promise = new Promise((resolve, reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(\n        this.bunkerPubkey,\n        \"sign_event\",\n        [JSON.stringify(event)],\n        24133,\n        (response) => {\n          if (!response.error) {\n            const json = JSON.parse(response.result);\n            resolve(json.sig);\n          } else {\n            reject(response.error);\n          }\n        }\n      );\n    });\n    return promise;\n  }\n  /**\n   * Allows creating a new account on the remote server.\n   * @param username Desired username for the NIP-05\n   * @param domain Desired domain for the NIP-05\n   * @param email Email address to associate with this account -- Remote servers may use this for recovery\n   * @returns The public key of the newly created account\n   */\n  async createAccount(username, domain, email) {\n    await this.startListening();\n    const req = [];\n    if (username) req.push(username);\n    if (domain) req.push(domain);\n    if (email) req.push(email);\n    return new Promise((resolve, reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(\n        this.bunkerPubkey,\n        \"create_account\",\n        req,\n        24133 /* NostrConnect */,\n        (response) => {\n          if (!response.error) {\n            const pubkey = response.result;\n            resolve(pubkey);\n          } else {\n            reject(response.error);\n          }\n        }\n      );\n    });\n  }\n  /**\n   * Serializes the signer's connection details and local signer state.\n   * @returns A JSON string containing the type, connection info, and local signer payload.\n   */\n  toPayload() {\n    if (!this.bunkerPubkey || !this.userPubkey) {\n      throw new Error(\"NIP-46 signer is not fully initialized for serialization\");\n    }\n    const payload = {\n      type: \"nip46\",\n      payload: {\n        bunkerPubkey: this.bunkerPubkey,\n        userPubkey: this.userPubkey,\n        relayUrls: this.relayUrls,\n        secret: this.secret,\n        localSignerPayload: this.localSigner.toPayload(),\n        // Store nip05 if it was used for initialization, otherwise null\n        nip05: this.nip05 || null\n      }\n    };\n    return JSON.stringify(payload);\n  }\n  /**\n   * Deserializes the signer from a payload string.\n   * @param payloadString The JSON string obtained from toPayload().\n   * @param ndk The NDK instance, required for NIP-46.\n   * @returns An instance of NDKNip46Signer.\n   */\n  static async fromPayload(payloadString, ndk) {\n    if (!ndk) {\n      throw new Error(\"NDK instance is required to deserialize NIP-46 signer\");\n    }\n    const parsed = JSON.parse(payloadString);\n    if (parsed.type !== \"nip46\") {\n      throw new Error(`Invalid payload type: expected 'nip46', got ${parsed.type}`);\n    }\n    const payload = parsed.payload;\n    if (!payload || typeof payload !== \"object\" || !payload.localSignerPayload) {\n      throw new Error(\"Invalid payload content for nip46 signer\");\n    }\n    const localSigner = await ndkSignerFromPayload(payload.localSignerPayload, ndk);\n    if (!localSigner) {\n      throw new Error(\"Failed to deserialize local signer for NIP-46\");\n    }\n    let signer;\n    if (payload.nip05) {\n      signer = new _NDKNip46Signer(ndk, payload.nip05, localSigner);\n      signer.userPubkey = payload.userPubkey;\n      signer.bunkerPubkey = payload.bunkerPubkey;\n      signer.relayUrls = payload.relayUrls;\n      signer.secret = payload.secret;\n    } else {\n      signer = new _NDKNip46Signer(ndk, payload.userPubkey, localSigner);\n      signer.bunkerPubkey = payload.bunkerPubkey;\n      signer.relayUrls = payload.relayUrls;\n      signer.secret = payload.secret;\n    }\n    return signer;\n  }\n};\n\n// src/dvm/schedule.ts\nfunction addRelays(event, relays) {\n  const tags = [];\n  if (!relays || relays.length === 0) {\n    const poolRelays = event.ndk?.pool.relays;\n    relays = poolRelays ? Object.keys(poolRelays) : void 0;\n  }\n  if (relays && relays.length > 0) tags.push([\"relays\", ...relays]);\n  return tags;\n}\nasync function dvmSchedule(events, dvm, relays, encrypted = true, waitForConfirmationForMs) {\n  if (!Array.isArray(events)) {\n    events = [events];\n  }\n  const ndk = events[0].ndk;\n  if (!ndk) throw new Error(\"NDK not set\");\n  for (const event of events) {\n    if (!event.sig) throw new Error(\"Event not signed\");\n    if (!event.created_at) throw new Error(\"Event has no date\");\n    if (!dvm) throw new Error(\"No DVM specified\");\n    if (event.created_at <= Date.now() / 1e3) throw new Error(\"Event needs to be in the future\");\n  }\n  const scheduleEvent = new NDKDVMRequest(ndk, {\n    kind: 5905 /* DVMEventSchedule */\n  });\n  for (const event of events) {\n    scheduleEvent.addInput(JSON.stringify(event.rawEvent()), \"text\");\n  }\n  scheduleEvent.tags.push(...addRelays(events[0], relays));\n  if (encrypted) {\n    await scheduleEvent.encryption(dvm);\n  } else {\n    scheduleEvent.dvm = dvm;\n  }\n  await scheduleEvent.sign();\n  let res;\n  if (waitForConfirmationForMs) {\n    res = ndk.subscribe(\n      {\n        kinds: [5905 /* DVMEventSchedule */ + 1e3, 7e3 /* DVMJobFeedback */],\n        ...scheduleEvent.filter()\n      },\n      { groupable: false, closeOnEose: false }\n    );\n  }\n  const timeoutPromise = new Promise((reject) => {\n    setTimeout(() => {\n      res?.stop();\n      reject(\"Timeout waiting for an answer from the DVM\");\n    }, waitForConfirmationForMs);\n  });\n  const schedulePromise = new Promise((resolve, reject) => {\n    if (waitForConfirmationForMs) {\n      res?.on(\"event\", async (e) => {\n        res?.stop();\n        if (e.kind === 7e3 /* DVMJobFeedback */) {\n          const feedback = await NDKDVMJobFeedback.from(e);\n          if (feedback.status === \"error\") {\n            const statusTag = feedback.getMatchingTags(\"status\");\n            reject(statusTag?.[2] ?? feedback);\n          } else {\n            resolve(feedback);\n          }\n        }\n        resolve(e);\n      });\n    }\n    scheduleEvent.publish().then(() => {\n      if (!waitForConfirmationForMs) resolve(void 0);\n    });\n  });\n  return new Promise((resolve, reject) => {\n    if (waitForConfirmationForMs) {\n      Promise.race([timeoutPromise, schedulePromise]).then((e) => {\n        resolve(e);\n      }).catch(reject);\n    } else {\n      schedulePromise.then(resolve);\n    }\n  });\n}\n\n// src/ndk/index.ts\n\n\n\n// src/events/dedup.ts\nfunction dedup(event1, event2) {\n  if (event1.created_at > event2.created_at) {\n    return event1;\n  }\n  return event2;\n}\n\n// src/outbox/tracker.ts\n\n\n\n// src/utils/get-users-relay-list.ts\nasync function getRelayListForUser(pubkey, ndk) {\n  const list = await getRelayListForUsers([pubkey], ndk);\n  return list.get(pubkey);\n}\nasync function getRelayListForUsers(pubkeys, ndk, skipCache = false, timeout = 1e3) {\n  const pool = ndk.outboxPool || ndk.pool;\n  const set = /* @__PURE__ */ new Set();\n  for (const relay of pool.relays.values()) set.add(relay);\n  const relayLists = /* @__PURE__ */ new Map();\n  const fromContactList = /* @__PURE__ */ new Map();\n  const relaySet = new NDKRelaySet(set, ndk);\n  if (ndk.cacheAdapter?.locking && !skipCache) {\n    const cachedList = await ndk.fetchEvents(\n      { kinds: [3, 10002], authors: Array.from(new Set(pubkeys)) },\n      { cacheUsage: \"ONLY_CACHE\" /* ONLY_CACHE */, subId: \"ndk-relay-list-fetch\" }\n    );\n    for (const relayList of cachedList) {\n      if (relayList.kind === 10002) relayLists.set(relayList.pubkey, NDKRelayList.from(relayList));\n    }\n    for (const relayList of cachedList) {\n      if (relayList.kind === 3) {\n        if (relayLists.has(relayList.pubkey)) continue;\n        const list = relayListFromKind3(ndk, relayList);\n        if (list) fromContactList.set(relayList.pubkey, list);\n      }\n    }\n    pubkeys = pubkeys.filter((pubkey) => !relayLists.has(pubkey) && !fromContactList.has(pubkey));\n  }\n  if (pubkeys.length === 0) return relayLists;\n  const relayListEvents = /* @__PURE__ */ new Map();\n  const contactListEvents = /* @__PURE__ */ new Map();\n  return new Promise((resolve) => {\n    const handleSubscription = async () => {\n      const subscribeOpts = {\n        closeOnEose: true,\n        pool,\n        groupable: true,\n        subId: \"ndk-relay-list-fetch\",\n        addSinceFromCache: true,\n        relaySet\n      };\n      if (relaySet) subscribeOpts.relaySet = relaySet;\n      ndk.subscribe({ kinds: [3, 10002], authors: pubkeys }, subscribeOpts, {\n        onEvent: (event) => {\n          if (event.kind === 10002 /* RelayList */) {\n            const existingEvent = relayListEvents.get(event.pubkey);\n            if (existingEvent && existingEvent.created_at > event.created_at) return;\n            relayListEvents.set(event.pubkey, event);\n          } else if (event.kind === 3 /* Contacts */) {\n            const existingEvent = contactListEvents.get(event.pubkey);\n            if (existingEvent && existingEvent.created_at > event.created_at) return;\n            contactListEvents.set(event.pubkey, event);\n          }\n        },\n        onEose: () => {\n          for (const event of relayListEvents.values()) {\n            relayLists.set(event.pubkey, NDKRelayList.from(event));\n          }\n          for (const pubkey of pubkeys) {\n            if (relayLists.has(pubkey)) continue;\n            const contactList = contactListEvents.get(pubkey);\n            if (!contactList) continue;\n            const list = relayListFromKind3(ndk, contactList);\n            if (list) relayLists.set(pubkey, list);\n          }\n          resolve(relayLists);\n        }\n      });\n      setTimeout(() => {\n        resolve(relayLists);\n      }, timeout);\n    };\n    handleSubscription();\n  });\n}\n\n// src/outbox/tracker.ts\nvar OutboxItem = class {\n  /**\n   * Type of item\n   */\n  type;\n  /**\n   * The relay URLs that are of interest to this item\n   */\n  relayUrlScores;\n  readRelays;\n  writeRelays;\n  constructor(type) {\n    this.type = type;\n    this.relayUrlScores = /* @__PURE__ */ new Map();\n    this.readRelays = /* @__PURE__ */ new Set();\n    this.writeRelays = /* @__PURE__ */ new Set();\n  }\n};\nvar OutboxTracker = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  data;\n  ndk;\n  debug;\n  constructor(ndk) {\n    super();\n    this.ndk = ndk;\n    this.debug = ndk.debug.extend(\"outbox-tracker\");\n    this.data = new typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__.LRUCache({\n      maxSize: 1e5,\n      entryExpirationTimeInMS: 2 * 60 * 1e3\n    });\n  }\n  /**\n   * Adds a list of users to the tracker.\n   * @param items\n   * @param skipCache\n   */\n  async trackUsers(items, skipCache = false) {\n    const promises = [];\n    for (let i = 0; i < items.length; i += 400) {\n      const slice = items.slice(i, i + 400);\n      const pubkeys = slice.map((item) => getKeyFromItem(item)).filter((pubkey) => !this.data.has(pubkey));\n      if (pubkeys.length === 0) continue;\n      for (const pubkey of pubkeys) {\n        this.data.set(pubkey, new OutboxItem(\"user\"));\n      }\n      promises.push(\n        new Promise((resolve) => {\n          getRelayListForUsers(pubkeys, this.ndk, skipCache).then((relayLists) => {\n            for (const [pubkey, relayList] of relayLists) {\n              let outboxItem = this.data.get(pubkey);\n              outboxItem ??= new OutboxItem(\"user\");\n              if (relayList) {\n                outboxItem.readRelays = new Set(normalize(relayList.readRelayUrls));\n                outboxItem.writeRelays = new Set(normalize(relayList.writeRelayUrls));\n                for (const relayUrl of outboxItem.readRelays) {\n                  if (this.ndk.pool.blacklistRelayUrls.has(relayUrl)) {\n                    outboxItem.readRelays.delete(relayUrl);\n                  }\n                }\n                for (const relayUrl of outboxItem.writeRelays) {\n                  if (this.ndk.pool.blacklistRelayUrls.has(relayUrl)) {\n                    outboxItem.writeRelays.delete(relayUrl);\n                  }\n                }\n                this.data.set(pubkey, outboxItem);\n              }\n            }\n          }).finally(resolve);\n        })\n      );\n    }\n    return Promise.all(promises);\n  }\n  /**\n   *\n   * @param key\n   * @param score\n   */\n  track(item, type, _skipCache = true) {\n    const key = getKeyFromItem(item);\n    type ??= getTypeFromItem(item);\n    let outboxItem = this.data.get(key);\n    if (!outboxItem) {\n      outboxItem = new OutboxItem(type);\n      if (item instanceof NDKUser) {\n        this.trackUsers([item]);\n      }\n    }\n    return outboxItem;\n  }\n};\nfunction getKeyFromItem(item) {\n  if (item instanceof NDKUser) {\n    return item.pubkey;\n  }\n  return item;\n}\nfunction getTypeFromItem(item) {\n  if (item instanceof NDKUser) {\n    return \"user\";\n  }\n  return \"kind\";\n}\n\n// src/relay/sets/utils.ts\nfunction correctRelaySet(relaySet, pool) {\n  const connectedRelays = pool.connectedRelays();\n  const includesConnectedRelay = Array.from(relaySet.relays).some((relay) => {\n    return connectedRelays.map((r) => r.url).includes(relay.url);\n  });\n  if (!includesConnectedRelay) {\n    for (const relay of connectedRelays) {\n      relaySet.addRelay(relay);\n    }\n  }\n  if (connectedRelays.length === 0) {\n    for (const relay of pool.relays.values()) {\n      relaySet.addRelay(relay);\n    }\n  }\n  return relaySet;\n}\n\n// src/subscription/manager.ts\n\nvar NDKSubscriptionManager = class {\n  subscriptions;\n  seenEvents = /* @__PURE__ */ new Map();\n  constructor() {\n    this.subscriptions = /* @__PURE__ */ new Map();\n  }\n  add(sub) {\n    this.subscriptions.set(sub.internalId, sub);\n    if (sub.onStopped) {\n    }\n    sub.onStopped = () => {\n      this.subscriptions.delete(sub.internalId);\n    };\n    sub.on(\"close\", () => {\n      this.subscriptions.delete(sub.internalId);\n    });\n  }\n  seenEvent(eventId, relay) {\n    const current = this.seenEvents.get(eventId) || [];\n    current.push(relay);\n    this.seenEvents.set(eventId, current);\n  }\n  /**\n   * Whenever an event comes in, this function is called.\n   * This function matches the received event against all the\n   * known (i.e. active) NDKSubscriptions, and if it matches,\n   * it sends the event to the subscription.\n   *\n   * This is the single place in the codebase that matches\n   * incoming events with parties interested in the event.\n   *\n   * This is also what allows for reactivity in NDK apps, such that\n   * whenever an active subscription receives an event that some\n   * other active subscription would want to receive, both receive it.\n   *\n   * TODO This also allows for subscriptions that overlap in meaning\n   * to be collapsed into one.\n   *\n   * I.e. if a subscription with filter: kinds: [1], authors: [alice]\n   * is created and EOSEs, and then a subsequent subscription with\n   * kinds: [1], authors: [alice] is created, once the second subscription\n   * EOSEs we can safely close it, increment its refCount and close it,\n   * and when the first subscription receives a new event from Alice this\n   * code will make the second subscription receive the event even though\n   * it has no active subscription on a relay.\n   * @param event Raw event received from a relay\n   * @param relay Relay that sent the event\n   * @param optimisticPublish Whether the event is coming from an optimistic publish\n   */\n  dispatchEvent(event, relay, optimisticPublish = false) {\n    if (relay) this.seenEvent(event.id, relay);\n    const subscriptions = this.subscriptions.values();\n    const matchingSubs = [];\n    for (const sub of subscriptions) {\n      if ((0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.matchFilters)(sub.filters, event)) {\n        matchingSubs.push(sub);\n      }\n    }\n    for (const sub of matchingSubs) {\n      sub.eventReceived(event, relay, false, optimisticPublish);\n    }\n  }\n};\n\n// src/ndk/active-user.ts\n\nvar debug6 = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:active-user\");\nasync function getUserRelayList(user) {\n  if (!this.autoConnectUserRelays) return;\n  const userRelays = await getRelayListForUser(user.pubkey, this);\n  if (!userRelays) return;\n  for (const url of userRelays.relays) {\n    let relay = this.pool.relays.get(url);\n    if (!relay) {\n      relay = new NDKRelay(url, this.relayAuthDefaultPolicy, this);\n      this.pool.addRelay(relay);\n    }\n  }\n  return userRelays;\n}\nasync function setActiveUser(user) {\n  const pool = this.outboxPool || this.pool;\n  if (pool.connectedRelays.length > 0) {\n    setActiveUserConnected.call(this, user);\n  } else {\n    pool.once(\"connect\", () => {\n      setActiveUserConnected.call(this, user);\n    });\n  }\n}\nasync function setActiveUserConnected(user) {\n  const userRelays = await getUserRelayList.call(this, user);\n  const filters = [\n    {\n      kinds: [10006 /* BlockRelayList */],\n      authors: [user.pubkey]\n    }\n  ];\n  if (this.autoFetchUserMutelist) {\n    filters[0].kinds?.push(1e4 /* MuteList */);\n  }\n  const events = /* @__PURE__ */ new Map();\n  const relaySet = userRelays ? userRelays.relaySet : void 0;\n  this.subscribe(\n    filters,\n    { subId: \"active-user-settings\", closeOnEose: true, relaySet },\n    {\n      onEvent: (event) => {\n        const prevEvent = events.get(event.kind);\n        if (prevEvent && prevEvent.created_at >= event.created_at) return;\n        events.set(event.kind, event);\n      },\n      onEose: () => {\n        for (const event of events.values()) {\n          processEvent.call(this, event);\n        }\n      }\n    }\n  );\n}\nasync function processEvent(event) {\n  if (event.kind === 10006 /* BlockRelayList */) {\n    processBlockRelayList.call(this, event);\n  } else if (event.kind === 1e4 /* MuteList */) {\n    processMuteList.call(this, event);\n  }\n}\nfunction processBlockRelayList(event) {\n  const list = lists_default.from(event);\n  for (const item of list.items) {\n    this.pool.blacklistRelayUrls.add(item[0]);\n  }\n  debug6(\"Added %d relays to relay blacklist\", list.items.length);\n}\nfunction processMuteList(muteList) {\n  const list = lists_default.from(muteList);\n  for (const item of list.items) {\n    this.mutedIds.set(item[1], item[0]);\n  }\n  debug6(\"Added %d users to mute list\", list.items.length);\n}\n\n// src/ndk/entity.ts\n\nfunction getEntity(entity) {\n  try {\n    const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(entity);\n    if (decoded.type === \"npub\") return npub(this, decoded.data);\n    if (decoded.type === \"nprofile\") return nprofile(this, decoded.data);\n    return decoded;\n  } catch (_e) {\n    return null;\n  }\n}\nfunction npub(ndk, pubkey) {\n  return ndk.getUser({ pubkey });\n}\nfunction nprofile(ndk, profile) {\n  const user = ndk.getUser({ pubkey: profile.pubkey });\n  if (profile.relays) user.relayUrls = profile.relays;\n  return user;\n}\n\n// src/ndk/fetch-event-from-tag.ts\nfunction isValidHint(hint) {\n  if (!hint || hint === \"\") return false;\n  try {\n    new URL(hint);\n    return true;\n  } catch (_e) {\n    return false;\n  }\n}\nasync function fetchEventFromTag(tag, originalEvent, subOpts, fallback = {\n  type: \"timeout\"\n}) {\n  const d4 = this.debug.extend(\"fetch-event-from-tag\");\n  const [_, id, hint] = tag;\n  subOpts = {};\n  d4(\"fetching event from tag\", tag, subOpts, fallback);\n  const authorRelays = getRelaysForSync(this, originalEvent.pubkey);\n  if (authorRelays && authorRelays.size > 0) {\n    d4(\"fetching event from author relays %o\", Array.from(authorRelays));\n    const relaySet2 = NDKRelaySet.fromRelayUrls(Array.from(authorRelays), this);\n    const event2 = await this.fetchEvent(id, subOpts, relaySet2);\n    if (event2) return event2;\n  } else {\n    d4(\"no author relays found for %s\", originalEvent.pubkey, originalEvent);\n  }\n  const relaySet = calculateRelaySetsFromFilters(this, [{ ids: [id] }], this.pool);\n  d4(\"fetching event without relay hint\", relaySet);\n  const event = await this.fetchEvent(id, subOpts);\n  if (event) return event;\n  if (hint && hint !== \"\") {\n    const event2 = await this.fetchEvent(id, subOpts, this.pool.getRelay(hint, true, true, [{ ids: [id] }]));\n    if (event2) return event2;\n  }\n  let result = void 0;\n  const relay = isValidHint(hint) ? this.pool.getRelay(hint, false, true, [{ ids: [id] }]) : void 0;\n  const fetchMaybeWithRelayHint = new Promise((resolve) => {\n    this.fetchEvent(id, subOpts, relay).then(resolve);\n  });\n  if (!isValidHint(hint) || fallback.type === \"none\") {\n    return fetchMaybeWithRelayHint;\n  }\n  const fallbackFetchPromise = new Promise(async (resolve) => {\n    const fallbackRelaySet = fallback.relaySet;\n    const timeout = fallback.timeout ?? 1500;\n    const timeoutPromise = new Promise((resolve2) => setTimeout(resolve2, timeout));\n    if (fallback.type === \"timeout\") await timeoutPromise;\n    if (result) {\n      resolve(result);\n    } else {\n      d4(\"fallback fetch triggered\");\n      const fallbackEvent = await this.fetchEvent(id, subOpts, fallbackRelaySet);\n      resolve(fallbackEvent);\n    }\n  });\n  switch (fallback.type) {\n    case \"timeout\":\n      return Promise.race([fetchMaybeWithRelayHint, fallbackFetchPromise]);\n    case \"eose\":\n      result = await fetchMaybeWithRelayHint;\n      if (result) return result;\n      return fallbackFetchPromise;\n  }\n}\n\n// src/ndk/queue/index.ts\nvar Queue = class {\n  queue = [];\n  maxConcurrency;\n  processing = /* @__PURE__ */ new Set();\n  promises = /* @__PURE__ */ new Map();\n  constructor(_name, maxConcurrency) {\n    this.maxConcurrency = maxConcurrency;\n  }\n  add(item) {\n    if (this.promises.has(item.id)) {\n      return this.promises.get(item.id);\n    }\n    const promise = new Promise((resolve, reject) => {\n      this.queue.push({\n        ...item,\n        func: () => item.func().then(\n          (result) => {\n            resolve(result);\n            return result;\n          },\n          (error) => {\n            reject(error);\n            throw error;\n          }\n        )\n      });\n      this.process();\n    });\n    this.promises.set(item.id, promise);\n    promise.finally(() => {\n      this.promises.delete(item.id);\n      this.processing.delete(item.id);\n      this.process();\n    });\n    return promise;\n  }\n  process() {\n    if (this.processing.size >= this.maxConcurrency || this.queue.length === 0) {\n      return;\n    }\n    const item = this.queue.shift();\n    if (!item || this.processing.has(item.id)) {\n      return;\n    }\n    this.processing.add(item.id);\n    item.func();\n  }\n  clear() {\n    this.queue = [];\n  }\n  clearProcessing() {\n    this.processing.clear();\n  }\n  clearAll() {\n    this.clear();\n    this.clearProcessing();\n  }\n  length() {\n    return this.queue.length;\n  }\n};\n\n// src/ndk/index.ts\nvar DEFAULT_OUTBOX_RELAYS = [\"wss://purplepag.es/\", \"wss://nos.lol/\"];\nvar DEFAULT_BLACKLISTED_RELAYS = [\n  \"wss://brb.io/\",\n  // BRB\n  \"wss://nostr.mutinywallet.com/\"\n  // Don't try to read from this relay since it's a write-only relay\n  // \"wss://purplepag.es/\", // This is a hack, since this is a mostly read-only relay, but not fully. Once we have relay routing this can be removed so it only receives the supported kinds\n];\nvar NDK = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  _explicitRelayUrls;\n  blacklistRelayUrls;\n  pool;\n  outboxPool;\n  _signer;\n  _activeUser;\n  cacheAdapter;\n  debug;\n  devWriteRelaySet;\n  outboxTracker;\n  mutedIds;\n  clientName;\n  clientNip89;\n  queuesZapConfig;\n  queuesNip05;\n  asyncSigVerification = false;\n  initialValidationRatio = 1;\n  lowestValidationRatio = 1;\n  validationRatioFn;\n  subManager;\n  publishingFailureHandled = false;\n  pools = [];\n  /**\n   * Default relay-auth policy that will be used when a relay requests authentication,\n   * if no other policy is specified for that relay.\n   *\n   * @example Disconnect from relays that request authentication:\n   * ```typescript\n   * ndk.relayAuthDefaultPolicy = NDKAuthPolicies.disconnect(ndk.pool);\n   * ```\n   *\n   * @example Sign in to relays that request authentication:\n   * ```typescript\n   * ndk.relayAuthDefaultPolicy = NDKAuthPolicies.signIn({ndk})\n   * ```\n   *\n   * @example Sign in to relays that request authentication, asking the user for confirmation:\n   * ```typescript\n   * ndk.relayAuthDefaultPolicy = (relay: NDKRelay) => {\n   *     const signIn = NDKAuthPolicies.signIn({ndk});\n   *     if (confirm(`Relay ${relay.url} is requesting authentication, do you want to sign in?`)) {\n   *        signIn(relay);\n   *     }\n   * }\n   * ```\n   */\n  relayAuthDefaultPolicy;\n  /**\n   * Fetch function to use for HTTP requests.\n   *\n   * @example\n   * ```typescript\n   * import fetch from \"node-fetch\";\n   *\n   * ndk.httpFetch = fetch;\n   * ```\n   */\n  httpFetch;\n  /**\n   * Provide a caller function to receive all networking traffic from relays\n   */\n  netDebug;\n  autoConnectUserRelays = true;\n  autoFetchUserMutelist = true;\n  walletConfig;\n  constructor(opts = {}) {\n    super();\n    this.debug = opts.debug || debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk\");\n    this.netDebug = opts.netDebug;\n    this._explicitRelayUrls = opts.explicitRelayUrls || [];\n    this.blacklistRelayUrls = opts.blacklistRelayUrls || DEFAULT_BLACKLISTED_RELAYS;\n    this.subManager = new NDKSubscriptionManager();\n    this.pool = new NDKPool(opts.explicitRelayUrls || [], [], this);\n    this.pool.name = \"Main\";\n    this.pool.on(\"relay:auth\", async (relay, challenge) => {\n      if (this.relayAuthDefaultPolicy) {\n        await this.relayAuthDefaultPolicy(relay, challenge);\n      }\n    });\n    this.autoConnectUserRelays = opts.autoConnectUserRelays ?? true;\n    this.autoFetchUserMutelist = opts.autoFetchUserMutelist ?? true;\n    this.clientName = opts.clientName;\n    this.clientNip89 = opts.clientNip89;\n    this.relayAuthDefaultPolicy = opts.relayAuthDefaultPolicy;\n    if (opts.enableOutboxModel) {\n      this.outboxPool = new NDKPool(opts.outboxRelayUrls || DEFAULT_OUTBOX_RELAYS, [], this, {\n        debug: this.debug.extend(\"outbox-pool\"),\n        name: \"Outbox Pool\"\n      });\n      this.outboxTracker = new OutboxTracker(this);\n    }\n    this.signer = opts.signer;\n    this.cacheAdapter = opts.cacheAdapter;\n    this.mutedIds = opts.mutedIds || /* @__PURE__ */ new Map();\n    if (opts.devWriteRelayUrls) {\n      this.devWriteRelaySet = NDKRelaySet.fromRelayUrls(opts.devWriteRelayUrls, this);\n    }\n    this.queuesZapConfig = new Queue(\"zaps\", 3);\n    this.queuesNip05 = new Queue(\"nip05\", 10);\n    this.signatureVerificationWorker = opts.signatureVerificationWorker;\n    this.initialValidationRatio = opts.initialValidationRatio || 1;\n    this.lowestValidationRatio = opts.lowestValidationRatio || 1;\n    try {\n      this.httpFetch = fetch;\n    } catch {\n    }\n  }\n  set explicitRelayUrls(urls) {\n    this._explicitRelayUrls = urls.map(normalizeRelayUrl);\n    this.pool.relayUrls = urls;\n  }\n  get explicitRelayUrls() {\n    return this._explicitRelayUrls || [];\n  }\n  set signatureVerificationWorker(worker2) {\n    this.asyncSigVerification = !!worker2;\n    if (worker2) {\n      signatureVerificationInit(worker2);\n    }\n  }\n  /**\n   * Adds an explicit relay to the pool.\n   * @param url\n   * @param relayAuthPolicy Authentication policy to use if different from the default\n   * @param connect Whether to connect to the relay automatically\n   * @returns\n   */\n  addExplicitRelay(urlOrRelay, relayAuthPolicy, connect = true) {\n    let relay;\n    if (typeof urlOrRelay === \"string\") {\n      relay = new NDKRelay(urlOrRelay, relayAuthPolicy, this);\n    } else {\n      relay = urlOrRelay;\n    }\n    this.pool.addRelay(relay, connect);\n    this.explicitRelayUrls?.push(relay.url);\n    return relay;\n  }\n  toJSON() {\n    return { relayCount: this.pool.relays.size }.toString();\n  }\n  get activeUser() {\n    return this._activeUser;\n  }\n  /**\n   * Sets the active user for this NDK instance, typically this will be\n   * called when assigning a signer to the NDK instance.\n   *\n   * This function will automatically connect to the user's relays if\n   * `autoConnectUserRelays` is set to true.\n   *\n   * It will also fetch the user's mutelist if `autoFetchUserMutelist` is set to true.\n   */\n  set activeUser(user) {\n    const differentUser = this._activeUser?.pubkey !== user?.pubkey;\n    this._activeUser = user;\n    if (user && differentUser) {\n      setActiveUser.call(this, user);\n    } else if (!user) {\n      this.mutedIds = /* @__PURE__ */ new Map();\n    }\n  }\n  get signer() {\n    return this._signer;\n  }\n  set signer(newSigner) {\n    this._signer = newSigner;\n    if (newSigner) this.emit(\"signer:ready\", newSigner);\n    newSigner?.user().then((user) => {\n      user.ndk = this;\n      this.activeUser = user;\n    });\n  }\n  /**\n   * Connect to relays with optional timeout.\n   * If the timeout is reached, the connection will be continued to be established in the background.\n   */\n  async connect(timeoutMs) {\n    if (this._signer && this.autoConnectUserRelays) {\n      this.debug(\n        \"Attempting to connect to user relays specified by signer %o\",\n        await this._signer.relays?.(this)\n      );\n      if (this._signer.relays) {\n        const relays = await this._signer.relays(this);\n        relays.forEach((relay) => this.pool.addRelay(relay));\n      }\n    }\n    const connections = [this.pool.connect(timeoutMs)];\n    if (this.outboxPool) {\n      connections.push(this.outboxPool.connect(timeoutMs));\n    }\n    this.debug(\"Connecting to relays %o\", { timeoutMs });\n    return Promise.allSettled(connections).then(() => {\n    });\n  }\n  /**\n   * Get a NDKUser object\n   *\n   * @param opts\n   * @returns\n   */\n  getUser(opts) {\n    const user = new NDKUser(opts);\n    user.ndk = this;\n    return user;\n  }\n  /**\n   * Get a NDKUser from a NIP05\n   * @param nip05 NIP-05 ID\n   * @param skipCache Skip cache\n   * @returns\n   */\n  async getUserFromNip05(nip05, skipCache = false) {\n    return NDKUser.fromNip05(nip05, this, skipCache);\n  }\n  /**\n   * Creates and starts a new subscription.\n   *\n   * Subscriptions automatically start unless `autoStart` is set to `false`.\n   * You can control automatic closing on EOSE via `opts.closeOnEose`.\n   *\n   * @param filters - A single NDKFilter object or an array of filters.\n   * @param opts - Optional NDKSubscriptionOptions to customize behavior (e.g., caching, grouping).\n   * @param handlers - Optional handlers for subscription events. Passing handlers is the preferred method of using ndk.subscribe.\n   *   - `onEvent`: Called for each event received.\n   *  - `onEvents`: Called once with an array of events when the subscription starts (from the cache).\n   *  - `onEose`: Called when the subscription receives EOSE.\n   *  For backwards compatibility, this third parameter also accepts a relaySet, the relaySet should be passed via `opts.relaySet`.\n   *\n   * @param _autoStart - For backwards compatibility, this can be a boolean indicating whether to start the subscription immediately.\n   *  This parameter is deprecated and will be removed in a future version.\n   *   - `false`: Creates the subscription but does not start it (call `subscription.start()` manually).\n   * @returns The created NDKSubscription instance.\n   *\n   * @example Basic subscription\n   * ```typescript\n   * const sub = ndk.subscribe({ kinds: [1], authors: [pubkey] });\n   * sub.on(\"event\", (event) => console.log(\"Kind 1 event:\", event.content));\n   * ```\n   *\n   * @example Subscription with options and direct handlers\n   * ```typescript\n   * const sub = ndk.subscribe(\n   *   { kinds: [0], authors: [pubkey] },\n   *   { closeOnEose: true, cacheUsage: NDKSubscriptionCacheUsage.PARALLEL },\n   *   undefined, // Use default relay set calculation\n   *   {\n   *     onEvents: (events) => { // Renamed parameter\n   *       if (events.length > 0) {\n   *         console.log(`Got ${events.length} profile events from cache:`, events[0].content);\n   *       }\n   *     },\n   *     onEvent: (event) => { // Renamed parameter\n   *       console.log(\"Got profile update from relay:\", event.content); // Clarified source\n   *     },\n   *     onEose: () => console.log(\"Profile subscription finished.\")\n   *   }\n   * );\n   * ```\n   *\n   * @since 2.13.0 `relaySet` parameter removed; pass `relaySet` or `relayUrls` via `opts`.\n   */\n  subscribe(filters, opts, autoStartOrRelaySet = true, _autoStart = true) {\n    let _relaySet = opts?.relaySet;\n    let autoStart = _autoStart;\n    if (autoStartOrRelaySet instanceof NDKRelaySet) {\n      console.warn(\"relaySet is deprecated, use opts.relaySet instead. This will be removed in version v2.14.0\");\n      _relaySet = autoStartOrRelaySet;\n      autoStart = _autoStart;\n    } else if (typeof autoStartOrRelaySet === \"boolean\" || typeof autoStartOrRelaySet === \"object\") {\n      autoStart = autoStartOrRelaySet;\n    }\n    const subscription = new NDKSubscription(this, filters, { relaySet: _relaySet, ...opts });\n    this.subManager.add(subscription);\n    const pool = subscription.pool;\n    if (subscription.relaySet) {\n      for (const relay of subscription.relaySet.relays) {\n        pool.useTemporaryRelay(relay, void 0, subscription.filters);\n      }\n    }\n    if (this.outboxPool && subscription.hasAuthorsFilter()) {\n      const authors = subscription.filters.filter((filter) => filter.authors && filter.authors?.length > 0).flatMap((filter) => filter.authors);\n      this.outboxTracker?.trackUsers(authors);\n    }\n    if (autoStart) {\n      let eventsHandler;\n      if (typeof autoStart === \"object\") {\n        if (autoStart.onEvent) subscription.on(\"event\", autoStart.onEvent);\n        if (autoStart.onEose) subscription.on(\"eose\", autoStart.onEose);\n        if (autoStart.onEvents) eventsHandler = autoStart.onEvents;\n      }\n      setTimeout(() => {\n        const cachedEvents = subscription.start(!eventsHandler);\n        if (cachedEvents && cachedEvents.length > 0 && !!eventsHandler) eventsHandler(cachedEvents);\n      }, 0);\n    }\n    return subscription;\n  }\n  /**\n   * Publish an event to a relay\n   * @param event event to publish\n   * @param relaySet explicit relay set to use\n   * @param timeoutMs timeout in milliseconds to wait for the event to be published\n   * @returns The relays the event was published to\n   *\n   * @deprecated Use `event.publish()` instead\n   */\n  async publish(event, relaySet, timeoutMs) {\n    this.debug(\"Deprecated: Use `event.publish()` instead\");\n    return event.publish(relaySet, timeoutMs);\n  }\n  /**\n   * Attempts to fetch an event from a tag, following relay hints and\n   * other best practices.\n   * @param tag Tag to fetch the event from\n   * @param originalEvent Event where the tag came from\n   * @param subOpts Subscription options to use when fetching the event\n   * @param fallback Fallback options to use when the hint relay doesn't respond\n   * @returns\n   */\n  fetchEventFromTag = fetchEventFromTag.bind(this);\n  /**\n   * Fetch an event from the cache synchronously.\n   * @param idOrFilter event id in bech32 format or filter\n   * @returns events from the cache or null if the cache is empty\n   */\n  fetchEventSync(idOrFilter) {\n    if (!this.cacheAdapter) throw new Error(\"Cache adapter not set\");\n    let filters;\n    if (typeof idOrFilter === \"string\") filters = [filterFromId(idOrFilter)];\n    else filters = idOrFilter;\n    const sub = new NDKSubscription(this, filters);\n    const events = this.cacheAdapter.query(sub);\n    if (events instanceof Promise) throw new Error(\"Cache adapter is async\");\n    return events.map((e) => {\n      e.ndk = this;\n      return e;\n    });\n  }\n  /**\n   * Fetch a single event.\n   *\n   * @param idOrFilter event id in bech32 format or filter\n   * @param opts subscription options\n   * @param relaySetOrRelay explicit relay set to use\n   */\n  async fetchEvent(idOrFilter, opts, relaySetOrRelay) {\n    let filters;\n    let relaySet;\n    if (relaySetOrRelay instanceof NDKRelay) {\n      relaySet = new NDKRelaySet(/* @__PURE__ */ new Set([relaySetOrRelay]), this);\n    } else if (relaySetOrRelay instanceof NDKRelaySet) {\n      relaySet = relaySetOrRelay;\n    }\n    if (!relaySetOrRelay && typeof idOrFilter === \"string\") {\n      if (!isNip33AValue(idOrFilter)) {\n        const relays = relaysFromBech32(idOrFilter, this);\n        if (relays.length > 0) {\n          relaySet = new NDKRelaySet(new Set(relays), this);\n          relaySet = correctRelaySet(relaySet, this.pool);\n        }\n      }\n    }\n    if (typeof idOrFilter === \"string\") {\n      filters = [filterFromId(idOrFilter)];\n    } else if (Array.isArray(idOrFilter)) {\n      filters = idOrFilter;\n    } else {\n      filters = [idOrFilter];\n    }\n    if (filters.length === 0) {\n      throw new Error(`Invalid filter: ${JSON.stringify(idOrFilter)}`);\n    }\n    return new Promise((resolve) => {\n      let fetchedEvent = null;\n      const subscribeOpts = {\n        ...opts || {},\n        closeOnEose: true\n      };\n      if (relaySet) subscribeOpts.relaySet = relaySet;\n      const s = this.subscribe(\n        filters,\n        subscribeOpts,\n        // relaySet, // Removed: Passed via opts\n        false\n        // autoStart = false\n      );\n      const t2 = setTimeout(() => {\n        s.stop();\n        resolve(fetchedEvent);\n      }, 1e4);\n      s.on(\"event\", (event) => {\n        event.ndk = this;\n        if (!event.isReplaceable()) {\n          clearTimeout(t2);\n          resolve(event);\n        } else if (!fetchedEvent || fetchedEvent.created_at < event.created_at) {\n          fetchedEvent = event;\n        }\n      });\n      s.on(\"eose\", () => {\n        clearTimeout(t2);\n        resolve(fetchedEvent);\n      });\n      s.start();\n    });\n  }\n  /**\n   * Fetch events\n   */\n  async fetchEvents(filters, opts, relaySet) {\n    return new Promise((resolve) => {\n      const events = /* @__PURE__ */ new Map();\n      const subscribeOpts = {\n        ...opts || {},\n        closeOnEose: true\n      };\n      if (relaySet) subscribeOpts.relaySet = relaySet;\n      const relaySetSubscription = this.subscribe(\n        filters,\n        subscribeOpts,\n        // relaySet, // Removed: Passed via opts\n        false\n        // autoStart = false\n      );\n      const onEvent = (event) => {\n        let _event;\n        if (!(event instanceof NDKEvent)) _event = new NDKEvent(void 0, event);\n        else _event = event;\n        const dedupKey = _event.deduplicationKey();\n        const existingEvent = events.get(dedupKey);\n        if (existingEvent) {\n          _event = dedup(existingEvent, _event);\n        }\n        _event.ndk = this;\n        events.set(dedupKey, _event);\n      };\n      relaySetSubscription.on(\"event\", onEvent);\n      relaySetSubscription.on(\"eose\", () => {\n        resolve(new Set(events.values()));\n      });\n      relaySetSubscription.start();\n    });\n  }\n  /**\n   * Ensures that a signer is available to sign an event.\n   */\n  assertSigner() {\n    if (!this.signer) {\n      this.emit(\"signer:required\");\n      throw new Error(\"Signer required\");\n    }\n  }\n  getEntity = getEntity.bind(this);\n  set wallet(wallet) {\n    if (!wallet) {\n      this.walletConfig = void 0;\n      return;\n    }\n    this.walletConfig ??= {};\n    this.walletConfig.lnPay = wallet?.lnPay?.bind(wallet);\n    this.walletConfig.cashuPay = wallet?.cashuPay?.bind(wallet);\n  }\n};\n\n// src/zap/invoice.ts\n\nfunction zapInvoiceFromEvent(event) {\n  const description = event.getMatchingTags(\"description\")[0];\n  const bolt11 = event.getMatchingTags(\"bolt11\")[0];\n  let decodedInvoice;\n  let zapRequest;\n  if (!description || !bolt11 || !bolt11[1]) {\n    return null;\n  }\n  try {\n    let zapRequestPayload = description[1];\n    if (zapRequestPayload.startsWith(\"%\")) {\n      zapRequestPayload = decodeURIComponent(zapRequestPayload);\n    }\n    if (zapRequestPayload === \"\") {\n      return null;\n    }\n    zapRequest = JSON.parse(zapRequestPayload);\n    decodedInvoice = (0,light_bolt11_decoder__WEBPACK_IMPORTED_MODULE_7__.decode)(bolt11[1]);\n  } catch (_e) {\n    return null;\n  }\n  const amountSection = decodedInvoice.sections.find((s) => s.name === \"amount\");\n  if (!amountSection) {\n    return null;\n  }\n  const amount = Number.parseInt(amountSection.value);\n  if (!amount) {\n    return null;\n  }\n  const content = zapRequest.content;\n  const sender = zapRequest.pubkey;\n  const recipientTag = event.getMatchingTags(\"p\")[0];\n  const recipient = recipientTag[1];\n  let zappedEvent = event.getMatchingTags(\"e\")[0];\n  if (!zappedEvent) {\n    zappedEvent = event.getMatchingTags(\"a\")[0];\n  }\n  const zappedEventId = zappedEvent ? zappedEvent[1] : void 0;\n  const zapInvoice = {\n    id: event.id,\n    zapper: event.pubkey,\n    zappee: sender,\n    zapped: recipient,\n    zappedEvent: zappedEventId,\n    amount,\n    comment: content\n  };\n  return zapInvoice;\n}\n\n// src/zapper/index.ts\n\n\n\n// src/zapper/ln.ts\n\n\nvar d2 = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:zapper:ln\");\nasync function getNip57ZapSpecFromLud({ lud06, lud16 }, ndk) {\n  let zapEndpoint;\n  if (lud16 && !lud16.startsWith(\"LNURL\")) {\n    const [name, domain] = lud16.split(\"@\");\n    zapEndpoint = `https://${domain}/.well-known/lnurlp/${name}`;\n  } else if (lud06) {\n    const { words } = _scure_base__WEBPACK_IMPORTED_MODULE_8__.bech32.decode(lud06, 1e3);\n    const data = _scure_base__WEBPACK_IMPORTED_MODULE_8__.bech32.fromWords(words);\n    const utf8Decoder = new TextDecoder(\"utf-8\");\n    zapEndpoint = utf8Decoder.decode(data);\n  }\n  if (!zapEndpoint) {\n    d2(\"No zap endpoint found %o\", { lud06, lud16 });\n    throw new Error(\"No zap endpoint found\");\n  }\n  try {\n    const _fetch = ndk.httpFetch || fetch;\n    const response = await _fetch(zapEndpoint);\n    if (response.status !== 200) {\n      const text = await response.text();\n      throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${text}`);\n    }\n    return await response.json();\n  } catch (e) {\n    throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${e}`);\n  }\n}\n\n// src/zapper/nip57.ts\n\nasync function generateZapRequest(target, ndk, data, pubkey, amount, relays, comment, tags, signer) {\n  const zapEndpoint = data.callback;\n  const zapRequest = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip57.makeZapRequest({\n    profile: pubkey,\n    // set the event to null since nostr-tools doesn't support nip-33 zaps\n    event: null,\n    amount,\n    comment: comment || \"\",\n    relays: relays.slice(0, 4)\n  });\n  if (target instanceof NDKEvent) {\n    const tags2 = target.referenceTags();\n    const nonPTags = tags2.filter((tag) => tag[0] !== \"p\");\n    zapRequest.tags.push(...nonPTags);\n  }\n  zapRequest.tags.push([\"lnurl\", zapEndpoint]);\n  const event = new NDKEvent(ndk, zapRequest);\n  if (tags) {\n    event.tags = event.tags.concat(tags);\n  }\n  const eTaggedEvents = /* @__PURE__ */ new Set();\n  const aTaggedEvents = /* @__PURE__ */ new Set();\n  for (const tag of event.tags) {\n    if (tag[0] === \"e\") {\n      eTaggedEvents.add(tag[1]);\n    } else if (tag[0] === \"a\") {\n      aTaggedEvents.add(tag[1]);\n    }\n  }\n  if (eTaggedEvents.size > 1) throw new Error(\"Only one e-tag is allowed\");\n  if (aTaggedEvents.size > 1) throw new Error(\"Only one a-tag is allowed\");\n  event.tags = event.tags.filter((tag) => tag[0] !== \"p\");\n  event.tags.push([\"p\", pubkey]);\n  await event.sign(signer);\n  return event;\n}\n\n// src/zapper/index.ts\nvar d3 = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:zapper\");\nvar NDKZapper = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  target;\n  ndk;\n  comment;\n  amount;\n  unit;\n  tags;\n  signer;\n  zapMethod;\n  nutzapAsFallback;\n  lnPay;\n  /**\n   * Called when a cashu payment is to be made.\n   * This function should swap/mint proofs for the required amount, in the required unit,\n   * in any of the provided mints and return the proofs and mint used.\n   */\n  cashuPay;\n  onComplete;\n  maxRelays = 3;\n  /**\n   *\n   * @param target The target of the zap\n   * @param amount The amount to send indicated in the unit\n   * @param unit The unit of the amount\n   * @param opts Options for the zap\n   */\n  constructor(target, amount, unit = \"msat\", opts = {}) {\n    super();\n    this.target = target;\n    this.ndk = opts.ndk || target.ndk;\n    if (!this.ndk) {\n      throw new Error(\"No NDK instance provided\");\n    }\n    this.amount = amount;\n    this.comment = opts.comment;\n    this.unit = unit;\n    this.tags = opts.tags;\n    this.signer = opts.signer;\n    this.nutzapAsFallback = opts.nutzapAsFallback ?? false;\n    this.lnPay = opts.lnPay || this.ndk.walletConfig?.lnPay;\n    this.cashuPay = opts.cashuPay || this.ndk.walletConfig?.cashuPay;\n    this.onComplete = opts.onComplete || this.ndk.walletConfig?.onPaymentComplete;\n  }\n  /**\n   * Initiate zapping process\n   *\n   * This function will calculate the splits for this zap and initiate each zap split.\n   */\n  async zap(methods) {\n    const splits = this.getZapSplits();\n    const results = /* @__PURE__ */ new Map();\n    await Promise.all(\n      splits.map(async (split) => {\n        let result;\n        try {\n          result = await this.zapSplit(split, methods);\n        } catch (e) {\n          result = new Error(e.message);\n        }\n        this.emit(\"split:complete\", split, result);\n        results.set(split, result);\n      })\n    );\n    this.emit(\"complete\", results);\n    if (this.onComplete) this.onComplete(results);\n    return results;\n  }\n  async zapNip57(split, data) {\n    if (!this.lnPay) throw new Error(\"No lnPay function available\");\n    const zapSpec = await getNip57ZapSpecFromLud(data, this.ndk);\n    if (!zapSpec) throw new Error(\"No zap spec available for recipient\");\n    const relays = await this.relays(split.pubkey);\n    const zapRequest = await generateZapRequest(\n      this.target,\n      this.ndk,\n      zapSpec,\n      split.pubkey,\n      split.amount,\n      relays,\n      this.comment,\n      this.tags,\n      this.signer\n    );\n    if (!zapRequest) {\n      d3(\"Unable to generate zap request\");\n      throw new Error(\"Unable to generate zap request\");\n    }\n    const pr = await this.getLnInvoice(zapRequest, split.amount, zapSpec);\n    if (!pr) {\n      d3(\"Unable to get payment request\");\n      throw new Error(\"Unable to get payment request\");\n    }\n    this.emit(\"ln_invoice\", {\n      amount: split.amount,\n      recipientPubkey: split.pubkey,\n      unit: this.unit,\n      nip57ZapRequest: zapRequest,\n      pr,\n      type: \"nip57\"\n    });\n    const res = await this.lnPay({\n      target: this.target,\n      recipientPubkey: split.pubkey,\n      paymentDescription: \"NIP-57 Zap\",\n      pr,\n      amount: split.amount,\n      unit: this.unit,\n      nip57ZapRequest: zapRequest\n    });\n    if (res?.preimage) {\n      this.emit(\"ln_payment\", {\n        preimage: res.preimage,\n        amount: split.amount,\n        recipientPubkey: split.pubkey,\n        pr,\n        unit: this.unit,\n        nip57ZapRequest: zapRequest,\n        type: \"nip57\"\n      });\n    }\n    return res;\n  }\n  /**\n   * Fetches information about a NIP-61 zap and asks the caller to create cashu proofs for the zap.\n   *\n   * (note that the cashuPay function can use any method to create the proofs, including using lightning\n   * to mint proofs in the specified mint, the responsibility of minting the proofs is delegated to the caller (e.g. ndk-wallet))\n   */\n  async zapNip61(split, data) {\n    if (!this.cashuPay) throw new Error(\"No cashuPay function available\");\n    let ret;\n    ret = await this.cashuPay(\n      {\n        target: this.target,\n        recipientPubkey: split.pubkey,\n        paymentDescription: \"NIP-61 Zap\",\n        amount: split.amount,\n        unit: this.unit,\n        ...data ?? {}\n      },\n      (pr) => {\n        this.emit(\"ln_invoice\", {\n          pr,\n          amount: split.amount,\n          recipientPubkey: split.pubkey,\n          unit: this.unit,\n          type: \"nip61\"\n        });\n      }\n    );\n    d3(\"NIP-61 Zap result: %o\", ret);\n    if (ret instanceof Error) {\n      return ret;\n    }\n    if (ret) {\n      const { proofs, mint } = ret;\n      if (!proofs || !mint) throw new Error(`Invalid zap confirmation: missing proofs or mint: ${ret}`);\n      const relays = await this.relays(split.pubkey);\n      const relaySet = NDKRelaySet.fromRelayUrls(relays, this.ndk);\n      const nutzap = new NDKNutzap(this.ndk);\n      nutzap.tags = [...nutzap.tags, ...this.tags || []];\n      nutzap.proofs = proofs;\n      nutzap.mint = mint;\n      nutzap.target = this.target;\n      nutzap.comment = this.comment;\n      nutzap.unit = \"sat\";\n      nutzap.recipientPubkey = split.pubkey;\n      await nutzap.sign(this.signer);\n      nutzap.publish(relaySet);\n      return nutzap;\n    }\n  }\n  /**\n   * Get the zap methods available for the recipient and initiates the zap\n   * in the desired method.\n   * @param split\n   * @param methods - The methods to try, if not provided, all methods will be tried.\n   * @returns\n   */\n  async zapSplit(split, methods) {\n    const recipient = this.ndk.getUser({ pubkey: split.pubkey });\n    const zapMethods = await recipient.getZapInfo(2500);\n    let retVal;\n    const canFallbackToNip61 = this.nutzapAsFallback && this.cashuPay;\n    if (zapMethods.size === 0 && !canFallbackToNip61)\n      throw new Error(\"No zap method available for recipient and NIP-61 fallback is disabled\");\n    const nip61Fallback = async () => {\n      if (!this.nutzapAsFallback) return;\n      const relayLists = await getRelayListForUsers([split.pubkey], this.ndk);\n      let relayUrls = relayLists.get(split.pubkey)?.readRelayUrls;\n      relayUrls = this.ndk.pool.connectedRelays().map((r) => r.url);\n      return await this.zapNip61(split, {\n        // use the user's relay list\n        relays: relayUrls,\n        // lock to the user's actual pubkey\n        p2pk: split.pubkey,\n        // allow intramint fallback\n        allowIntramintFallback: !!canFallbackToNip61\n      });\n    };\n    const canUseNip61 = !methods || methods.includes(\"nip61\");\n    const canUseNip57 = !methods || methods.includes(\"nip57\");\n    const nip61Method = zapMethods.get(\"nip61\");\n    if (nip61Method && canUseNip61) {\n      try {\n        retVal = await this.zapNip61(split, nip61Method);\n        if (retVal instanceof NDKNutzap) return retVal;\n      } catch (e) {\n        this.emit(\"notice\", `NIP-61 attempt failed: ${e.message}`);\n      }\n    }\n    const nip57Method = zapMethods.get(\"nip57\");\n    if (nip57Method && canUseNip57) {\n      try {\n        retVal = await this.zapNip57(split, nip57Method);\n        if (!(retVal instanceof Error)) return retVal;\n      } catch (e) {\n        this.emit(\"notice\", `NIP-57 attempt failed: ${e.message}`);\n      }\n    }\n    if (canFallbackToNip61) {\n      retVal = await nip61Fallback();\n      if (retVal instanceof Error) throw retVal;\n      return retVal;\n    }\n    this.emit(\"notice\", \"Zap methods exhausted and there was no fallback to NIP-61\");\n    if (retVal instanceof Error) throw retVal;\n    return retVal;\n  }\n  /**\n   * Gets a bolt11 for a nip57 zap\n   * @param event\n   * @param amount\n   * @param zapEndpoint\n   * @returns\n   */\n  async getLnInvoice(zapRequest, amount, data) {\n    const zapEndpoint = data.callback;\n    const eventPayload = JSON.stringify(zapRequest.rawEvent());\n    d3(\n      `Fetching invoice from ${zapEndpoint}?${new URLSearchParams({\n        amount: amount.toString(),\n        nostr: eventPayload\n      })}`\n    );\n    const url = new URL(zapEndpoint);\n    url.searchParams.append(\"amount\", amount.toString());\n    url.searchParams.append(\"nostr\", eventPayload);\n    d3(`Fetching invoice from ${url.toString()}`);\n    const response = await fetch(url.toString());\n    d3(`Got response from zap endpoint: ${zapEndpoint}`, { status: response.status });\n    if (response.status !== 200) {\n      d3(`Received non-200 status from zap endpoint: ${zapEndpoint}`, {\n        status: response.status,\n        amount,\n        nostr: eventPayload\n      });\n      const text = await response.text();\n      throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${text}`);\n    }\n    const body = await response.json();\n    return body.pr;\n  }\n  getZapSplits() {\n    if (this.target instanceof NDKUser) {\n      return [\n        {\n          pubkey: this.target.pubkey,\n          amount: this.amount\n        }\n      ];\n    }\n    const zapTags = this.target.getMatchingTags(\"zap\");\n    if (zapTags.length === 0) {\n      return [\n        {\n          pubkey: this.target.pubkey,\n          amount: this.amount\n        }\n      ];\n    }\n    const splits = [];\n    const total = zapTags.reduce((acc, tag) => acc + Number.parseInt(tag[2]), 0);\n    for (const tag of zapTags) {\n      const pubkey = tag[1];\n      const amount = Math.floor(Number.parseInt(tag[2]) / total * this.amount);\n      splits.push({ pubkey, amount });\n    }\n    return splits;\n  }\n  /**\n   * Gets the zap method that should be used to zap a pubbkey\n   * @param ndk\n   * @param pubkey\n   * @returns\n   */\n  async getZapMethods(ndk, recipient, timeout = 2500) {\n    const user = ndk.getUser({ pubkey: recipient });\n    return await user.getZapInfo(timeout);\n  }\n  /**\n   * @returns the relays to use for the zap request\n   */\n  async relays(pubkey) {\n    let r = [];\n    if (this.ndk?.activeUser) {\n      const relayLists = await getRelayListForUsers([this.ndk.activeUser.pubkey, pubkey], this.ndk);\n      const relayScores = /* @__PURE__ */ new Map();\n      for (const relayList of relayLists.values()) {\n        for (const url of relayList.readRelayUrls) {\n          const score = relayScores.get(url) || 0;\n          relayScores.set(url, score + 1);\n        }\n      }\n      r = Array.from(relayScores.entries()).sort((a, b) => b[1] - a[1]).map(([url]) => url).slice(0, this.maxRelays);\n    }\n    if (this.ndk?.pool?.permanentAndConnectedRelays().length) {\n      r = this.ndk.pool.permanentAndConnectedRelays().map((relay) => relay.url);\n    }\n    if (!r.length) {\n      r = [];\n    }\n    return r;\n  }\n};\n\n// src/utils/filter.ts\nfunction matchFilter(filter, event) {\n  if (filter.ids && filter.ids.indexOf(event.id) === -1) {\n    return false;\n  }\n  if (filter.kinds && filter.kinds.indexOf(event.kind) === -1) {\n    return false;\n  }\n  if (filter.authors && filter.authors.indexOf(event.pubkey) === -1) {\n    return false;\n  }\n  for (const f in filter) {\n    if (f[0] === \"#\") {\n      const tagName = f.slice(1);\n      if (tagName === \"t\") {\n        const values = filter[`#${tagName}`]?.map((v) => v.toLowerCase());\n        if (values && !event.tags.find(([t, v]) => t === tagName && values?.indexOf(v.toLowerCase()) !== -1))\n          return false;\n      } else {\n        const values = filter[`#${tagName}`];\n        if (values && !event.tags.find(([t, v]) => t === tagName && values?.indexOf(v) !== -1)) return false;\n      }\n    }\n  }\n  if (filter.since && event.created_at < filter.since) return false;\n  if (filter.until && event.created_at > filter.until) return false;\n  return true;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-hooks/node_modules/@nostr-dev-kit/ndk/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-wallet/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-wallet/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NDKCashuDeposit: () => (/* binding */ NDKCashuDeposit),\n/* harmony export */   NDKCashuWallet: () => (/* binding */ NDKCashuWallet),\n/* harmony export */   NDKCashuWalletBackup: () => (/* binding */ NDKCashuWalletBackup),\n/* harmony export */   NDKNWCWallet: () => (/* binding */ NDKNWCWallet),\n/* harmony export */   NDKNutzapMonitor: () => (/* binding */ NDKNutzapMonitor),\n/* harmony export */   NDKWallet: () => (/* binding */ NDKWallet),\n/* harmony export */   NDKWalletStatus: () => (/* binding */ NDKWalletStatus),\n/* harmony export */   NDKWebLNWallet: () => (/* binding */ NDKWebLNWallet),\n/* harmony export */   WalletState: () => (/* binding */ WalletState),\n/* harmony export */   calculateNewState: () => (/* binding */ calculateNewState),\n/* harmony export */   consolidateMintTokens: () => (/* binding */ consolidateMintTokens),\n/* harmony export */   consolidateTokens: () => (/* binding */ consolidateTokens),\n/* harmony export */   getBolt11Amount: () => (/* binding */ getBolt11Amount),\n/* harmony export */   getBolt11Description: () => (/* binding */ getBolt11Description),\n/* harmony export */   getBolt11ExpiresAt: () => (/* binding */ getBolt11ExpiresAt),\n/* harmony export */   getCashuMintRecommendations: () => (/* binding */ getCashuMintRecommendations),\n/* harmony export */   migrateCashuWallet: () => (/* binding */ migrateCashuWallet),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @nostr-dev-kit/ndk */ \"(ssr)/./node_modules/@nostr-dev-kit/ndk-wallet/node_modules/@nostr-dev-kit/ndk/dist/index.mjs\");\n/* harmony import */ var tseep__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tseep */ \"(ssr)/./node_modules/tseep/lib/index.js\");\n/* harmony import */ var _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cashu/cashu-ts */ \"(ssr)/./node_modules/@cashu/cashu-ts/lib/cashu-ts.es.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var light_bolt11_decoder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! light-bolt11-decoder */ \"(ssr)/./node_modules/light-bolt11-decoder/bolt11.js\");\n/* harmony import */ var webln__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! webln */ \"(ssr)/./node_modules/webln/lib/index.js\");\n// src/nutzap-monitor/index.ts\n\n\n\n\n// src/wallets/cashu/wallet/index.ts\n\n\n\n// src/wallets/index.ts\n\n\n// src/wallets/cashu/mint.ts\n\nvar mintWallets = /* @__PURE__ */ new Map();\nvar mintWalletPromises = /* @__PURE__ */ new Map();\nfunction mintKey(mint, unit, pk) {\n  if (unit === \"sats\") {\n    unit = \"sat\";\n  }\n  if (pk) {\n    const pkStr = new TextDecoder().decode(pk);\n    return `${mint}-${unit}-${pkStr}`;\n  }\n  return `${mint}-${unit}`;\n}\nasync function walletForMint(mint, {\n  pk,\n  timeout = 5e3,\n  mintInfo,\n  mintKeys,\n  onMintInfoNeeded,\n  onMintInfoLoaded,\n  onMintKeysNeeded,\n  onMintKeysLoaded\n} = {}) {\n  mintInfo ??= await onMintInfoNeeded?.(mint);\n  mintKeys ??= await onMintKeysNeeded?.(mint);\n  if (!mintInfo && onMintInfoLoaded) {\n    mintInfo = await _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CashuMint.getInfo(mint);\n    onMintInfoLoaded?.(mint, mintInfo);\n  }\n  const unit = \"sat\";\n  const key = mintKey(mint, unit, pk);\n  if (mintWallets.has(key)) {\n    return mintWallets.get(key);\n  }\n  if (mintWalletPromises.has(key)) {\n    return mintWalletPromises.get(key);\n  }\n  if (!mintInfo) {\n    if (onMintInfoNeeded) {\n      mintInfo = await onMintInfoNeeded(mint);\n    }\n    if (!mintInfo && onMintInfoLoaded) {\n      mintInfo = await _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CashuMint.getInfo(mint);\n      onMintInfoLoaded(mint, mintInfo);\n    }\n  }\n  if (!mintKeys && onMintKeysNeeded) {\n    mintKeys = await onMintKeysNeeded(mint);\n  }\n  const wallet = new _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CashuWallet(new _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CashuMint(mint), {\n    unit,\n    bip39seed: pk,\n    mintInfo,\n    keys: mintKeys\n  });\n  const loadPromise = new Promise(async (resolve) => {\n    try {\n      const timeoutPromise = new Promise((_, rejectTimeout) => {\n        setTimeout(() => {\n          rejectTimeout(new Error(\"timeout loading mint\"));\n        }, timeout);\n      });\n      await Promise.race([wallet.loadMint(), timeoutPromise]);\n      mintWallets.set(key, wallet);\n      mintWalletPromises.delete(key);\n      if (wallet.keys) {\n        onMintKeysLoaded?.(mint, wallet.keys);\n      }\n      resolve(wallet);\n    } catch (e) {\n      console.error(\"[WALLET] error loading mint\", mint, e.message);\n      mintWalletPromises.delete(key);\n      resolve(null);\n    }\n  });\n  mintWalletPromises.set(key, loadPromise);\n  return loadPromise;\n}\n\n// src/wallets/mint.ts\nasync function getCashuWallet(mint) {\n  if (this.cashuWallets.has(mint)) return this.cashuWallets.get(mint);\n  const w = await walletForMint(mint, {\n    onMintInfoNeeded: this.onMintInfoNeeded,\n    onMintInfoLoaded: this.onMintInfoLoaded,\n    onMintKeysNeeded: this.onMintKeysNeeded,\n    onMintKeysLoaded: this.onMintKeysLoaded\n  });\n  if (!w) throw new Error(`unable to load wallet for mint ${mint}`);\n  this.cashuWallets.set(mint, w);\n  return w;\n}\n\n// src/wallets/index.ts\nvar NDKWalletStatus = /* @__PURE__ */ ((NDKWalletStatus2) => {\n  NDKWalletStatus2[\"INITIAL\"] = \"initial\";\n  NDKWalletStatus2[\"LOADING\"] = \"loading\";\n  NDKWalletStatus2[\"READY\"] = \"ready\";\n  NDKWalletStatus2[\"FAILED\"] = \"failed\";\n  return NDKWalletStatus2;\n})(NDKWalletStatus || {});\nvar NDKWallet = class extends tseep__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n  cashuWallets = /* @__PURE__ */ new Map();\n  onMintInfoNeeded;\n  onMintInfoLoaded;\n  onMintKeysNeeded;\n  onMintKeysLoaded;\n  getCashuWallet = getCashuWallet.bind(this);\n  ndk;\n  constructor(ndk) {\n    super();\n    this.ndk = ndk;\n  }\n  status = \"initial\" /* INITIAL */;\n  get type() {\n    throw new Error(\"Not implemented\");\n  }\n  /**\n   * An ID of this wallet\n   */\n  walletId = \"unknown\";\n  /**\n   * Get the balance of this wallet\n   */\n  get balance() {\n    throw new Error(\"Not implemented\");\n  }\n  /**\n   * Redeem a set of nutzaps into an NWC wallet.\n   *\n   * This function gets an invoice from the NWC wallet until the total amount of the nutzaps is enough to pay for the invoice\n   * when accounting for fees.\n   *\n   * @param cashuWallet - The cashu wallet to redeem the nutzaps into\n   * @param nutzapIds - The IDs of the nutzaps to redeem\n   * @param proofs - The proofs to redeem\n   * @param privkey - The private key needed to redeem p2pk proofs.\n   */\n  redeemNutzaps(_nutzaps, _privkey, _opts) {\n    throw new Error(\"Not implemented\");\n  }\n};\n\n// src/wallets/cashu/deposit-monitor.ts\n\nvar NDKCashuDepositMonitor = class extends tseep__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n  deposits = /* @__PURE__ */ new Map();\n  addDeposit(deposit) {\n    const { quoteId } = deposit;\n    if (!quoteId) throw new Error(\"deposit has no quote ID\");\n    if (this.deposits.has(quoteId)) return false;\n    deposit.once(\"success\", (_token) => {\n      this.removeDeposit(quoteId);\n    });\n    this.deposits.set(quoteId, deposit);\n    this.emit(\"change\");\n    return true;\n  }\n  removeDeposit(quoteId) {\n    this.deposits.delete(quoteId);\n    this.emit(\"change\");\n  }\n};\n\n// src/wallets/cashu/deposit.ts\n\n\n\n// src/wallets/cashu/quote.ts\n\n\n\n// src/utils/ln.ts\n\nfunction getBolt11ExpiresAt(bolt11) {\n  const decoded = (0,light_bolt11_decoder__WEBPACK_IMPORTED_MODULE_4__.decode)(bolt11);\n  const expiry = decoded.expiry;\n  const timestamp = decoded.sections.find((section) => section.name === \"timestamp\").value;\n  if (typeof expiry === \"number\" && typeof timestamp === \"number\") {\n    return expiry + timestamp;\n  }\n  return void 0;\n}\nfunction getBolt11Amount(bolt11) {\n  const decoded = (0,light_bolt11_decoder__WEBPACK_IMPORTED_MODULE_4__.decode)(bolt11);\n  const section = decoded.sections.find((section2) => section2.name === \"amount\");\n  const val = section?.value;\n  return Number(val);\n}\nfunction getBolt11Description(bolt11) {\n  const decoded = (0,light_bolt11_decoder__WEBPACK_IMPORTED_MODULE_4__.decode)(bolt11);\n  const section = decoded.sections.find((section2) => section2.name === \"description\");\n  const val = section?.value;\n  return val;\n}\n\n// src/wallets/cashu/quote.ts\nvar NDKCashuQuote = class _NDKCashuQuote extends _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKEvent {\n  quoteId;\n  mint;\n  amount;\n  unit;\n  _wallet;\n  static kind = _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuQuote;\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuQuote;\n  }\n  static async from(event) {\n    const quote = new _NDKCashuQuote(event.ndk, event);\n    const original = event;\n    try {\n      await quote.decrypt();\n    } catch {\n      quote.content = original.content;\n    }\n    try {\n      const content = JSON.parse(quote.content);\n      quote.quoteId = content.quoteId;\n      quote.mint = content.mint;\n      quote.amount = content.amount;\n      quote.unit = content.unit;\n    } catch (_e) {\n      return;\n    }\n    return quote;\n  }\n  set wallet(wallet) {\n    this._wallet = wallet;\n  }\n  set invoice(invoice) {\n    const bolt11Expiry = getBolt11ExpiresAt(invoice);\n    if (bolt11Expiry) this.tags.push([\"expiration\", bolt11Expiry.toString()]);\n  }\n  async save() {\n    if (!this.ndk) throw new Error(\"NDK is required\");\n    this.content = JSON.stringify({\n      quoteId: this.quoteId,\n      mint: this.mint,\n      amount: this.amount,\n      unit: this.unit\n    });\n    await this.encrypt(this.ndk.activeUser, void 0, \"nip44\");\n    await this.sign();\n    await this.publish(this._wallet?.relaySet);\n  }\n};\n\n// src/wallets/cashu/wallet/txs.ts\n\nasync function createOutTxEvent(ndk, paymentRequest, paymentResult, relaySet, { nutzaps } = {}) {\n  let description = paymentRequest.paymentDescription;\n  let amount;\n  if (paymentRequest.pr) {\n    amount = getBolt11Amount(paymentRequest.pr);\n    description ??= getBolt11Description(paymentRequest.pr);\n    if (amount) amount /= 1e3;\n  } else {\n    amount = paymentRequest.amount;\n  }\n  if (!amount) {\n    console.error(\"BUG: Unable to find amount for paymentRequest\", paymentRequest);\n  }\n  const txEvent = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKCashuWalletTx(ndk);\n  txEvent.direction = \"out\";\n  txEvent.amount = amount ?? 0;\n  txEvent.mint = paymentResult.mint;\n  txEvent.description = description;\n  if (paymentResult.fee) txEvent.fee = paymentResult.fee;\n  if (paymentRequest.target) {\n    txEvent.tags.push(paymentRequest.target.tagReference());\n    if (!(paymentRequest.target instanceof _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKUser)) {\n      txEvent.tags.push([\"p\", paymentRequest.target.pubkey]);\n    }\n  }\n  if (nutzaps) {\n    txEvent.description ??= \"nutzap redeem\";\n    for (const nutzap of nutzaps) txEvent.addRedeemedNutzap(nutzap);\n  }\n  if (paymentResult.stateUpdate?.created) txEvent.createdTokens = [paymentResult.stateUpdate.created];\n  if (paymentResult.stateUpdate?.deleted) txEvent.destroyedTokenIds = paymentResult.stateUpdate.deleted;\n  if (paymentResult.stateUpdate?.reserved) txEvent.reservedTokens = [paymentResult.stateUpdate.reserved];\n  await txEvent.sign();\n  txEvent.publish(relaySet);\n  return txEvent;\n}\nasync function createInTxEvent(ndk, proofs, mint, updateStateResult, { nutzaps, fee, description }, relaySet) {\n  const txEvent = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKCashuWalletTx(ndk);\n  const amount = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.proofsTotalBalance)(proofs);\n  txEvent.direction = \"in\";\n  txEvent.amount = amount;\n  txEvent.mint = mint;\n  txEvent.description = description;\n  if (updateStateResult.created) txEvent.createdTokens = [updateStateResult.created];\n  if (updateStateResult.deleted) txEvent.destroyedTokenIds = updateStateResult.deleted;\n  if (updateStateResult.reserved) txEvent.reservedTokens = [updateStateResult.reserved];\n  if (nutzaps) for (const nutzap of nutzaps) txEvent.addRedeemedNutzap(nutzap);\n  if (fee) txEvent.fee = fee;\n  await txEvent.sign();\n  txEvent.publish(relaySet);\n  return txEvent;\n}\n\n// src/wallets/cashu/deposit.ts\nvar d = debug__WEBPACK_IMPORTED_MODULE_3__(\"ndk-wallet:cashu:deposit\");\nfunction randomMint(wallet) {\n  const mints = wallet.mints;\n  const mint = mints[Math.floor(Math.random() * mints.length)];\n  return mint;\n}\nvar NDKCashuDeposit = class _NDKCashuDeposit extends tseep__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n  mint;\n  amount;\n  quoteId;\n  wallet;\n  checkTimeout;\n  checkIntervalLength = 2500;\n  finalized = false;\n  quoteEvent;\n  constructor(wallet, amount, mint) {\n    super();\n    this.wallet = wallet;\n    this.mint = mint || randomMint(wallet);\n    this.amount = amount;\n  }\n  static fromQuoteEvent(wallet, quote) {\n    if (!quote.amount) throw new Error(\"quote has no amount\");\n    if (!quote.mint) throw new Error(\"quote has no mint\");\n    const deposit = new _NDKCashuDeposit(wallet, quote.amount, quote.mint);\n    deposit.quoteId = quote.quoteId;\n    return deposit;\n  }\n  /**\n   * Creates a quote ID and start monitoring for payment.\n   *\n   * Once a payment is received, the deposit will emit a \"success\" event.\n   *\n   * @param pollTime - time in milliseconds between checks\n   * @returns\n   */\n  async start(pollTime = 2500) {\n    const cashuWallet = await this.wallet.getCashuWallet(this.mint);\n    const quote = await cashuWallet.createMintQuote(this.amount);\n    d(\"created quote %s for %d %s\", quote.quote, this.amount, this.mint);\n    this.quoteId = quote.quote;\n    this.wallet.depositMonitor.addDeposit(this);\n    setTimeout(this.check.bind(this, pollTime), pollTime);\n    this.createQuoteEvent(quote.quote, quote.request).then((event) => this.quoteEvent = event);\n    return quote.request;\n  }\n  /**\n   * This generates a 7374 event containing the quote ID\n   * with an optional expiration set to the bolt11 expiry (if there is one)\n   */\n  async createQuoteEvent(quoteId, bolt11) {\n    const { ndk } = this.wallet;\n    const quoteEvent = new NDKCashuQuote(ndk);\n    quoteEvent.quoteId = quoteId;\n    quoteEvent.mint = this.mint;\n    quoteEvent.amount = this.amount;\n    quoteEvent.wallet = this.wallet;\n    quoteEvent.invoice = bolt11;\n    try {\n      await quoteEvent.save();\n      d(\"saved quote on event %s\", quoteEvent.rawEvent());\n    } catch (e) {\n      d(\"error saving quote on event %s\", e.relayErrors);\n    }\n    return quoteEvent;\n  }\n  async runCheck() {\n    if (!this.finalized) await this.finalize();\n    if (!this.finalized) this.delayCheck();\n  }\n  delayCheck() {\n    setTimeout(() => {\n      this.runCheck();\n      this.checkIntervalLength += 500;\n    }, this.checkIntervalLength);\n  }\n  /**\n   * Check if the deposit has been finalized.\n   * @param timeout A timeout in milliseconds to wait before giving up.\n   */\n  async check(timeout) {\n    this.runCheck();\n    if (timeout) {\n      setTimeout(() => {\n        clearTimeout(this.checkTimeout);\n      }, timeout);\n    }\n  }\n  async finalize() {\n    if (!this.quoteId) throw new Error(\"No quoteId set.\");\n    let proofs;\n    try {\n      d(\"Checking for minting status of %s\", this.quoteId);\n      const cashuWallet = await this.wallet.getCashuWallet(this.mint);\n      const proofsWeHave = await this.wallet.state.getProofs({ mint: this.mint });\n      proofs = await cashuWallet.mintProofs(this.amount, this.quoteId, {\n        proofsWeHave\n      });\n      if (proofs.length === 0) return;\n    } catch (e) {\n      if (e.message.match(/not paid/i)) return;\n      if (e.message.match(/already issued/i)) {\n        d(\"Mint is saying the quote has already been issued, destroying quote event: %s\", e.message);\n        this.destroyQuoteEvent();\n        this.finalized = true;\n        return;\n      }\n      if (e.message.match(/rate limit/i)) {\n        d(\"Mint seems to be rate limiting, lowering check interval\");\n        this.checkIntervalLength += 5e3;\n        return;\n      }\n      d(e.message);\n      return;\n    }\n    try {\n      this.finalized = true;\n      const updateRes = await this.wallet.state.update(\n        {\n          store: proofs,\n          mint: this.mint\n        },\n        \"Deposit\"\n      );\n      const tokenEvent = updateRes.created;\n      if (!tokenEvent) throw new Error(\"no token event created\");\n      createInTxEvent(\n        this.wallet.ndk,\n        proofs,\n        this.mint,\n        updateRes,\n        { description: \"Deposit\" },\n        this.wallet.relaySet\n      );\n      this.emit(\"success\", tokenEvent);\n      this.destroyQuoteEvent();\n    } catch (e) {\n      this.emit(\"error\", e.message);\n      console.error(e);\n    }\n  }\n  async destroyQuoteEvent() {\n    if (!this.quoteEvent) return;\n    const deleteEvent = await this.quoteEvent.delete(void 0, false);\n    deleteEvent.publish(this.wallet.relaySet);\n  }\n};\n\n// src/wallets/cashu/event-handlers/index.ts\n\n\n// src/wallets/cashu/event-handlers/deletion.ts\nasync function handleEventDeletion(event) {\n  const deletedIds = event.getMatchingTags(\"e\").map((tag) => tag[1]);\n  for (const deletedId of deletedIds) {\n    this.state.removeTokenId(deletedId);\n  }\n}\n\n// src/wallets/cashu/event-handlers/quote.ts\nasync function handleQuote(event) {\n  const quote = await NDKCashuQuote.from(event);\n  if (!quote) return;\n  const deposit = NDKCashuDeposit.fromQuoteEvent(this, quote);\n  if (this.depositMonitor.addDeposit(deposit)) {\n    deposit.finalize();\n  }\n}\n\n// src/wallets/cashu/event-handlers/token.ts\n\nvar _cumulativeTime = 0;\nvar _cumulativeCalls = 0;\nasync function handleToken(event) {\n  if (this.state.tokens.has(event.id)) return;\n  const startTime = Date.now();\n  const token = await _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKCashuToken.from(event);\n  if (!token) {\n    _cumulativeTime += Date.now() - startTime;\n    _cumulativeCalls++;\n    return;\n  }\n  _cumulativeTime += Date.now() - startTime;\n  _cumulativeCalls++;\n  for (const deletedTokenId of token.deletedTokens) {\n    this.state.removeTokenId(deletedTokenId);\n  }\n  this.state.addToken(token);\n}\nsetInterval(() => {\n}, 5e3);\n\n// src/wallets/cashu/event-handlers/index.ts\nvar handlers = {\n  [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuToken]: handleToken,\n  [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuQuote]: handleQuote,\n  [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.EventDeletion]: handleEventDeletion\n};\nvar balanceUpdateTimer = null;\nasync function eventHandler(event) {\n  const handler = handlers[event.kind];\n  if (handler) {\n    if (balanceUpdateTimer) clearTimeout(balanceUpdateTimer);\n    await handler.call(this, event);\n    balanceUpdateTimer = setTimeout(() => {\n      this.emit(\"balance_updated\");\n    }, 100);\n  }\n}\nasync function eventDupHandler(_event, _relay, _timeSinceFirstSeen, _sub, _fromCache) {\n}\n\n// src/wallets/cashu/validate.ts\n\n\nvar d2 = debug__WEBPACK_IMPORTED_MODULE_3__(\"ndk-wallet:cashu:validate\");\nasync function consolidateTokens() {\n  d2(\"checking %d tokens for spent proofs\", this.state.tokens.size);\n  const mints = new Set(\n    this.state.getMintsProofs({ validStates: /* @__PURE__ */ new Set([\"available\", \"reserved\", \"deleted\"]) }).keys()\n  );\n  d2(\"found %d mints\", mints.size);\n  mints.forEach((mint) => {\n    consolidateMintTokens(mint, this);\n  });\n}\nasync function consolidateMintTokens(mint, wallet, allProofs, onResult, onFailure) {\n  allProofs ??= wallet.state.getProofs({ mint, includeDeleted: true, onlyAvailable: false });\n  const _wallet = await walletForMint(mint);\n  if (!_wallet) {\n    return;\n  }\n  let proofStates = [];\n  try {\n    proofStates = await _wallet.checkProofsStates(allProofs);\n  } catch (e) {\n    onFailure?.(e.message);\n    return;\n  }\n  const spentProofs = [];\n  const unspentProofs = [];\n  const pendingProofs = [];\n  allProofs.forEach((proof, index) => {\n    const { state } = proofStates[index];\n    if (state === _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CheckStateEnum.SPENT) {\n      spentProofs.push(proof);\n    } else if (state === _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CheckStateEnum.UNSPENT) {\n      unspentProofs.push(proof);\n    } else {\n      pendingProofs.push(proof);\n    }\n  });\n  const walletChange = {\n    mint,\n    store: unspentProofs,\n    destroy: spentProofs\n  };\n  onResult?.(walletChange);\n  const _totalSpentProofs = spentProofs.reduce((acc, proof) => acc + proof.amount, 0);\n  if (walletChange.destroy?.length === 0) return;\n  walletChange.store?.push(...pendingProofs);\n  const totalPendingProofs = pendingProofs.reduce((acc, proof) => acc + proof.amount, 0);\n  wallet.state.reserveProofs(pendingProofs, totalPendingProofs);\n  return wallet.state.update(walletChange, \"Consolidate\");\n}\n\n// src/wallets/cashu/pay/ln.ts\n\n\n// src/wallets/cashu/wallet/fee.ts\nfunction calculateFee(intendedAmount, providedProofs, returnedProofs) {\n  const totalProvided = providedProofs.reduce((acc, p) => acc + p.amount, 0);\n  const totalReturned = returnedProofs.reduce((acc, p) => acc + p.amount, 0);\n  const totalFee = totalProvided - intendedAmount - totalReturned;\n  if (totalFee < 0) {\n    throw new Error(\"Invalid fee calculation: received more proofs than sent to mint\");\n  }\n  return totalFee;\n}\n\n// src/wallets/cashu/wallet/effect.ts\nasync function withProofReserve(wallet, cashuWallet, mint, amountWithFees, amountWithoutFees, cb) {\n  cashuWallet ??= await wallet.getCashuWallet(mint);\n  const availableMintProofs = wallet.state.getProofs({ mint, onlyAvailable: true });\n  const proofs = cashuWallet.selectProofsToSend(availableMintProofs, amountWithFees);\n  const fetchedAmount = proofs.send.reduce((a, b) => a + b.amount, 0);\n  if (fetchedAmount < amountWithFees) return null;\n  wallet.state.reserveProofs(proofs.send, amountWithFees);\n  let cbResult = null;\n  let proofsChange = null;\n  let updateRes = null;\n  try {\n    cbResult = await cb(proofs.send, availableMintProofs);\n    if (!cbResult) return null;\n    proofsChange = {\n      mint,\n      store: cbResult.change,\n      destroy: proofs.send\n    };\n    updateRes = await wallet.state.update(proofsChange);\n  } catch (e) {\n    wallet.state.unreserveProofs(proofs.send, amountWithFees, \"available\");\n    throw e;\n  }\n  if (!cbResult) return null;\n  return {\n    result: cbResult.result,\n    proofsChange,\n    stateUpdate: updateRes,\n    mint,\n    fee: calculateFee(amountWithoutFees, proofs.send, cbResult.change)\n  };\n}\n\n// src/wallets/cashu/pay/ln.ts\nasync function payLn(wallet, pr, { amount, unit } = {}) {\n  let invoiceAmount = getBolt11Amount(pr);\n  if (!invoiceAmount) throw new Error(\"invoice amount is required\");\n  invoiceAmount = invoiceAmount / 1e3;\n  if (amount && unit) {\n    if (unit === \"msat\") {\n      amount = amount / 1e3;\n    }\n  }\n  const eligibleMints = wallet.getMintsWithBalance(invoiceAmount + 3);\n  if (!eligibleMints.length) {\n    return null;\n  }\n  for (const mint of eligibleMints) {\n    try {\n      const result = await executePayment(mint, pr, amount ?? invoiceAmount, wallet);\n      if (result) {\n        if (amount) {\n          result.fee = calculateFee(\n            amount,\n            result.proofsChange?.destroy ?? [],\n            result.proofsChange?.store ?? []\n          );\n        }\n        return result;\n      }\n    } catch (error) {\n      wallet.warn(`Failed to execute payment with min ${mint}: ${error}`);\n    }\n  }\n  return null;\n}\nasync function executePayment(mint, pr, amountWithoutFees, wallet) {\n  const cashuWallet = await wallet.getCashuWallet(mint);\n  try {\n    const meltQuote = await cashuWallet.createMeltQuote(pr);\n    const amountToSend = meltQuote.amount + meltQuote.fee_reserve;\n    const result = await withProofReserve(\n      wallet,\n      cashuWallet,\n      mint,\n      amountToSend,\n      amountWithoutFees,\n      async (proofsToUse, _allOurProofs) => {\n        const meltResult = await cashuWallet.meltProofs(meltQuote, proofsToUse);\n        if (meltResult.quote.state === _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.MeltQuoteState.PAID) {\n          return {\n            result: {\n              preimage: meltResult.quote.payment_preimage ?? \"\"\n            },\n            change: meltResult.change\n          };\n        }\n        return null;\n      }\n    );\n    return result;\n  } catch (e) {\n    if (e instanceof Error) {\n      if (e.message.match(/already spent/i)) {\n        setTimeout(() => {\n          consolidateMintTokens(mint, wallet);\n        }, 2500);\n      } else {\n        throw e;\n      }\n    }\n    return null;\n  }\n}\n\n// src/wallets/cashu/pay/nut.ts\n\n\n// src/utils/cashu.ts\nfunction ensureIsCashuPubkey(pubkey) {\n  if (!pubkey) return;\n  let _pubkey = pubkey;\n  if (_pubkey.length === 64) _pubkey = `02${_pubkey}`;\n  if (_pubkey.length !== 66) throw new Error(\"Invalid pubkey\");\n  return _pubkey;\n}\nasync function mintProofs(wallet, quote, amount, mint, p2pk) {\n  const mintTokenAttempt = (resolve, reject, attempt) => {\n    const pubkey = ensureIsCashuPubkey(p2pk);\n    wallet.mintProofs(amount, quote.quote, { pubkey }).then((mintProofs2) => {\n      console.debug(\"minted tokens\", mintProofs2);\n      resolve({\n        proofs: mintProofs2,\n        mint\n      });\n    }).catch((e) => {\n      attempt++;\n      if (attempt <= 3) {\n        console.error(\"error minting tokens\", e);\n        setTimeout(() => mintTokenAttempt(resolve, reject, attempt), attempt * 1500);\n      } else {\n        reject(e);\n      }\n    });\n  };\n  return new Promise((resolve, reject) => {\n    mintTokenAttempt(resolve, reject, 0);\n  });\n}\n\n// src/wallets/cashu/pay/nut.ts\nasync function createToken(wallet, amount, recipientMints, p2pk) {\n  p2pk = ensureIsCashuPubkey(p2pk);\n  const myMintsWithEnoughBalance = wallet.getMintsWithBalance(amount);\n  const hasRecipientMints = recipientMints && recipientMints.length > 0;\n  const mintsInCommon = hasRecipientMints ? findMintsInCommon([recipientMints, myMintsWithEnoughBalance]) : myMintsWithEnoughBalance;\n  for (const mint of mintsInCommon) {\n    try {\n      const res = await createTokenInMint(wallet, mint, amount, p2pk);\n      if (res) {\n        return res;\n      }\n    } catch (_e) {\n    }\n  }\n  if (hasRecipientMints) {\n    return await createTokenWithMintTransfer(wallet, amount, recipientMints, p2pk);\n  }\n  return null;\n}\nasync function createTokenInMint(wallet, mint, amount, p2pk) {\n  const cashuWallet = await wallet.getCashuWallet(mint);\n  try {\n    const result = await withProofReserve(\n      wallet,\n      cashuWallet,\n      mint,\n      amount,\n      amount,\n      async (proofsToUse, allOurProofs) => {\n        const sendResult = await cashuWallet.send(amount, proofsToUse, {\n          pubkey: p2pk,\n          proofsWeHave: allOurProofs\n        });\n        return {\n          result: {\n            proofs: sendResult.send,\n            mint\n          },\n          change: sendResult.keep,\n          mint\n        };\n      }\n    );\n    return result;\n  } catch (_e) {\n  }\n  return null;\n}\nasync function createTokenWithMintTransfer(wallet, amount, recipientMints, p2pk) {\n  const generateQuote = async () => {\n    const generateQuoteFromSomeMint = async (mint3) => {\n      const targetMintWallet3 = await walletForMint(mint3);\n      if (!targetMintWallet3) throw new Error(`unable to load wallet for mint ${mint3}`);\n      const quote3 = await targetMintWallet3.createMintQuote(amount);\n      return { quote: quote3, mint: mint3, targetMintWallet: targetMintWallet3 };\n    };\n    const quotesPromises = recipientMints.map(generateQuoteFromSomeMint);\n    const { quote: quote2, mint: mint2, targetMintWallet: targetMintWallet2 } = await Promise.any(quotesPromises);\n    if (!quote2) {\n      throw new Error(\"failed to get quote from any mint\");\n    }\n    return { quote: quote2, mint: mint2, targetMintWallet: targetMintWallet2 };\n  };\n  const { quote, mint: targetMint, targetMintWallet } = await generateQuote();\n  if (!quote) {\n    return null;\n  }\n  const invoiceAmount = getBolt11Amount(quote.request);\n  if (!invoiceAmount) throw new Error(\"invoice amount is required\");\n  const invoiceAmountInSat = invoiceAmount / 1e3;\n  if (invoiceAmountInSat > amount)\n    throw new Error(`invoice amount is more than the amount passed in (${invoiceAmountInSat} vs ${amount})`);\n  const payLNResult = await payLn(wallet, quote.request, { amount });\n  if (!payLNResult) {\n    return null;\n  }\n  const { proofs, mint } = await mintProofs(targetMintWallet, quote, amount, targetMint, p2pk);\n  return {\n    ...payLNResult,\n    result: { proofs, mint },\n    fee: payLNResult.fee\n  };\n}\nfunction findMintsInCommon(mintCollections) {\n  const mintCounts = /* @__PURE__ */ new Map();\n  for (const mints of mintCollections) {\n    for (const mint of mints) {\n      const normalizedMint = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.normalizeUrl)(mint);\n      if (!mintCounts.has(normalizedMint)) {\n        mintCounts.set(normalizedMint, 1);\n      } else {\n        mintCounts.set(normalizedMint, mintCounts.get(normalizedMint) + 1);\n      }\n    }\n  }\n  const commonMints = [];\n  for (const [mint, count] of mintCounts.entries()) {\n    if (count === mintCollections.length) {\n      commonMints.push(mint);\n    }\n  }\n  return commonMints;\n}\n\n// src/wallets/cashu/wallet/payment.ts\nvar PaymentHandler = class {\n  wallet;\n  constructor(wallet) {\n    this.wallet = wallet;\n  }\n  /**\n   * Pay a LN invoice with this wallet. This will used cashu proofs to pay a bolt11.\n   */\n  async lnPay(payment, createTxEvent = true) {\n    if (!payment.pr) throw new Error(\"pr is required\");\n    const invoiceAmount = getBolt11Amount(payment.pr);\n    if (!invoiceAmount) throw new Error(\"invoice amount is required\");\n    if (payment.amount && invoiceAmount > payment.amount) {\n      throw new Error(\"invoice amount is more than the amount passed in\");\n    }\n    const res = await payLn(this.wallet, payment.pr, {\n      amount: payment.amount,\n      unit: payment.unit\n    });\n    if (!res?.result?.preimage) return;\n    if (createTxEvent) {\n      createOutTxEvent(this.wallet.ndk, payment, res, this.wallet.relaySet);\n    }\n    return res.result;\n  }\n  /**\n   * Swaps tokens to a specific amount, optionally locking to a p2pk.\n   */\n  async cashuPay(payment) {\n    const satPayment = { ...payment };\n    if (satPayment.unit?.startsWith(\"msat\")) {\n      satPayment.amount = satPayment.amount / 1e3;\n      satPayment.unit = \"sat\";\n    }\n    let createResult = await createToken(this.wallet, satPayment.amount, payment.mints, payment.p2pk);\n    if (!createResult) {\n      if (payment.allowIntramintFallback) {\n        createResult = await createToken(this.wallet, satPayment.amount, void 0, payment.p2pk);\n      }\n      if (!createResult) {\n        return;\n      }\n    }\n    createOutTxEvent(this.wallet.ndk, satPayment, createResult, this.wallet.relaySet);\n    return createResult.result;\n  }\n};\n\n// src/wallets/cashu/wallet/state/balance.ts\nfunction getBalance(opts) {\n  const proofs = this.getProofEntries(opts);\n  return proofs.reduce((sum, proof) => sum + proof.proof.amount, 0);\n}\nfunction getMintsBalances({ onlyAvailable } = { onlyAvailable: true }) {\n  const balances = {};\n  const proofs = this.getProofEntries({ onlyAvailable });\n  for (const proof of proofs) {\n    if (!proof.mint) continue;\n    balances[proof.mint] ??= 0;\n    balances[proof.mint] += proof.proof.amount;\n  }\n  return balances;\n}\n\n// src/wallets/cashu/wallet/state/proofs.ts\nfunction addProof(proofEntry) {\n  this.proofs.set(proofEntry.proof.C, proofEntry);\n  this.journal.push({\n    memo: \"Added proof\",\n    timestamp: Date.now(),\n    metadata: {\n      type: \"proof\",\n      id: proofEntry.proof.C,\n      amount: proofEntry.proof.amount,\n      mint: proofEntry.mint\n    }\n  });\n}\nfunction reserveProofs(proofs, amount) {\n  for (const proof of proofs) {\n    this.updateProof(proof, { state: \"reserved\" });\n  }\n  this.reserveAmounts.push(amount);\n}\nfunction unreserveProofs(proofs, amount, newState) {\n  for (const proof of proofs) {\n    this.updateProof(proof, { state: newState });\n  }\n  const index = this.reserveAmounts.indexOf(amount);\n  if (index !== -1) {\n    this.reserveAmounts.splice(index, 1);\n  } else {\n    throw new Error(`BUG: Amount ${amount} not found in reserveAmounts`);\n  }\n}\nfunction getProofEntries(opts = {}) {\n  const proofs = /* @__PURE__ */ new Map();\n  const validStates = /* @__PURE__ */ new Set([\"available\"]);\n  let { mint, onlyAvailable, includeDeleted } = opts;\n  onlyAvailable ??= true;\n  if (!onlyAvailable) validStates.add(\"reserved\");\n  if (includeDeleted) validStates.add(\"deleted\");\n  for (const proofEntry of this.proofs.values()) {\n    if (mint && proofEntry.mint !== mint) continue;\n    if (!validStates.has(proofEntry.state)) continue;\n    if (!proofEntry.proof) continue;\n    proofs.set(proofEntry.proof.C, proofEntry);\n  }\n  return Array.from(proofs.values());\n}\nfunction updateProof(proof, state) {\n  const proofC = proof.C;\n  const currentState = this.proofs.get(proofC);\n  if (!currentState) throw new Error(\"Proof not found\");\n  const newState = { ...currentState, ...state };\n  this.proofs.set(proofC, newState);\n  this.journal.push({\n    memo: `Updated proof state: ${JSON.stringify(state)}`,\n    timestamp: Date.now(),\n    metadata: {\n      type: \"proof\",\n      id: proofC,\n      amount: proof.amount,\n      mint: currentState.mint\n    }\n  });\n}\n\n// src/wallets/cashu/wallet/state/token.ts\nfunction addToken(token) {\n  if (!token.mint) throw new Error(\"BUG: Token has no mint\");\n  const currentEntry = this.tokens.get(token.id);\n  const state = currentEntry?.state ?? \"available\";\n  this.tokens.set(token.id, { token, state });\n  let _added = 0;\n  let _invalid = 0;\n  for (const proof of token.proofs) {\n    const val = maybeAssociateProofWithToken(this, proof, token, state);\n    if (val === false) {\n      _invalid++;\n    } else {\n      _added++;\n    }\n  }\n}\nfunction maybeAssociateProofWithToken(walletState, proof, token, state) {\n  const proofC = proof.C;\n  const proofEntry = walletState.proofs.get(proofC);\n  if (!proofEntry) {\n    walletState.addProof({\n      mint: token.mint,\n      state,\n      tokenId: token.id,\n      timestamp: token.created_at,\n      proof\n    });\n    return true;\n  }\n  if (proofEntry.tokenId) {\n    if (proofEntry.tokenId === token.id) {\n      return null;\n    }\n    const existingTokenEntry = walletState.tokens.get(proofEntry.tokenId);\n    if (!existingTokenEntry) {\n      throw new Error(\n        `BUG: Token id ${proofEntry.tokenId} not found, was expected to be associated with proof ${proofC}`\n      );\n    }\n    const existingToken = existingTokenEntry.token;\n    if (existingToken) {\n      if (existingToken.created_at && (!token.created_at || token.created_at < existingToken.created_at)) {\n        return false;\n      }\n    }\n    walletState.updateProof(proof, { tokenId: token.id, state });\n    return true;\n  }\n  walletState.updateProof(proof, { tokenId: token.id, state });\n  return true;\n}\nfunction removeTokenId(tokenId) {\n  const currentEntry = this.tokens.get(tokenId) || {};\n  this.tokens.set(tokenId, { ...currentEntry, state: \"deleted\" });\n  for (const proofEntry of this.proofs.values()) {\n    const { proof } = proofEntry;\n    if (proofEntry.tokenId === tokenId) {\n      if (!proof) {\n        throw new Error(\"BUG: Proof entry has no proof\");\n      }\n      this.updateProof(proof, { state: \"deleted\" });\n    }\n  }\n}\n\n// src/wallets/cashu/wallet/state/update.ts\n\nasync function update(stateChange, _memo) {\n  updateInternalState(this, stateChange);\n  this.wallet.emit(\"balance_updated\");\n  return updateExternalState(this, stateChange);\n}\nfunction updateInternalState(walletState, stateChange) {\n  if (stateChange.store && stateChange.store.length > 0) {\n    for (const proof of stateChange.store) {\n      walletState.addProof({\n        mint: stateChange.mint,\n        state: \"available\",\n        proof,\n        timestamp: Date.now()\n      });\n    }\n  }\n  if (stateChange.destroy && stateChange.destroy.length > 0) {\n    for (const proof of stateChange.destroy) {\n      walletState.updateProof(proof, { state: \"deleted\" });\n    }\n  }\n  if (stateChange.reserve && stateChange.reserve.length > 0) {\n    throw new Error(\"BUG: Proofs should not be reserved via update\");\n  }\n}\nasync function updateExternalState(walletState, stateChange) {\n  const newState = calculateNewState(walletState, stateChange);\n  if (newState.deletedTokenIds.size > 0) {\n    const deleteEvent = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKEvent(walletState.wallet.ndk, {\n      kind: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.EventDeletion,\n      tags: [\n        [\"k\", _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuToken.toString()],\n        ...Array.from(newState.deletedTokenIds).map((id) => [\"e\", id])\n      ]\n    });\n    await deleteEvent.sign();\n    publishWithRetry(walletState, deleteEvent, walletState.wallet.relaySet);\n    for (const tokenId of newState.deletedTokenIds) {\n      walletState.removeTokenId(tokenId);\n    }\n  }\n  const res = {};\n  if (newState.saveProofs.length > 0) {\n    const newToken = await createTokenEvent(walletState, stateChange.mint, newState);\n    res.created = newToken;\n  }\n  return res;\n}\nasync function publishWithRetry(walletState, event, relaySet, retryTimeout = 10 * 1e3) {\n  let publishResult;\n  publishResult = await event.publish(relaySet);\n  let type;\n  if (event.kind === _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.EventDeletion) type = \"deletion\";\n  if (event.kind === _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuToken) type = \"token\";\n  if (event.kind === _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuWallet) type = \"wallet\";\n  const journalEntryMetadata = {\n    type,\n    id: event.id,\n    relayUrl: relaySet?.relayUrls.join(\",\")\n  };\n  if (publishResult) {\n    walletState.journal.push({\n      memo: `Publish kind:${event.kind} succeesfully`,\n      timestamp: Date.now(),\n      metadata: journalEntryMetadata\n    });\n    return publishResult;\n  }\n  walletState.journal.push({\n    memo: \"Publish failed\",\n    timestamp: Date.now(),\n    metadata: journalEntryMetadata\n  });\n  setTimeout(() => {\n    publishWithRetry(walletState, event, relaySet, retryTimeout);\n  }, retryTimeout);\n}\nasync function createTokenEvent(walletState, mint, newState) {\n  const newToken = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKCashuToken(walletState.wallet.ndk);\n  newToken.mint = mint;\n  newToken.proofs = newState.saveProofs;\n  await newToken.toNostrEvent();\n  walletState.addToken(newToken);\n  newToken.deletedTokens = Array.from(newState.deletedTokenIds);\n  await newToken.sign();\n  walletState.addToken(newToken);\n  publishWithRetry(walletState, newToken, walletState.wallet.relaySet);\n  return newToken;\n}\nfunction calculateNewState(walletState, stateChange) {\n  const destroyProofs = /* @__PURE__ */ new Set();\n  for (const proof of stateChange.destroy || []) destroyProofs.add(proof.C);\n  const proofsToStore = /* @__PURE__ */ new Map();\n  let tokensToDelete;\n  for (const proof of stateChange.store || []) proofsToStore.set(proof.C, proof);\n  tokensToDelete = getAffectedTokens(walletState, stateChange);\n  for (const token of tokensToDelete.values()) {\n    for (const proof of token.proofs) {\n      if (destroyProofs.has(proof.C)) continue;\n      proofsToStore.set(proof.C, proof);\n    }\n  }\n  return {\n    deletedTokenIds: new Set(tokensToDelete.keys()),\n    deletedProofs: destroyProofs,\n    reserveProofs: [],\n    saveProofs: Array.from(proofsToStore.values())\n  };\n}\nfunction getAffectedTokens(walletState, stateChange) {\n  const tokens = /* @__PURE__ */ new Map();\n  for (const proof of stateChange.destroy || []) {\n    const proofEntry = walletState.proofs.get(proof.C);\n    if (!proofEntry) {\n      continue;\n    }\n    const tokenId = proofEntry.tokenId;\n    if (!tokenId) {\n      continue;\n    }\n    const tokenEntry = walletState.tokens.get(tokenId);\n    if (!tokenEntry?.token) {\n      continue;\n    }\n    tokens.set(tokenId, tokenEntry.token);\n  }\n  return tokens;\n}\n\n// src/wallets/cashu/wallet/state/index.ts\nvar WalletState = class {\n  constructor(wallet, reservedProofCs = /* @__PURE__ */ new Set()) {\n    this.wallet = wallet;\n    this.reservedProofCs = reservedProofCs;\n  }\n  /**\n   * the amounts that are intended to be reserved\n   * this is the net amount we are trying to pay out,\n   * excluding fees and coin sizes\n   * e.g. we might want to pay 5 sats, have 2 sats in fees\n   * and we're using 2 inputs that add up to 8, the reserve amount is 5\n   * while the reserve proofs add up to 8\n   */\n  reserveAmounts = [];\n  /**\n   * Source of truth of the proofs this wallet has/had.\n   */\n  proofs = /* @__PURE__ */ new Map();\n  /**\n   * The tokens that are known to this wallet.\n   */\n  tokens = /* @__PURE__ */ new Map();\n  journal = [];\n  /** This is a debugging function that dumps the state of the wallet */\n  dump() {\n    const res = {\n      proofs: Array.from(this.proofs.values()),\n      balances: this.getMintsBalance(),\n      totalBalance: this.getBalance(),\n      tokens: Array.from(this.tokens.values())\n    };\n    return res;\n  }\n  /***************************\n   * Tokens\n   ***************************/\n  addToken = addToken.bind(this);\n  removeTokenId = removeTokenId.bind(this);\n  /***************************\n   * Proof management\n   ***************************/\n  addProof = addProof.bind(this);\n  /**\n   * Reserves a number of selected proofs and a specific amount.\n   *\n   * The amount and total of the proofs don't need to match. We\n   * might want to use 5 sats and have 2 proofs of 4 sats each.\n   * In that case, the reserve amount is 5, while the reserve proofs\n   * add up to 8.\n   */\n  reserveProofs = reserveProofs.bind(this);\n  /**\n   * Unreserves a number of selected proofs and a specific amount.\n   */\n  unreserveProofs = unreserveProofs.bind(this);\n  /**\n   * Returns all proof entries, optionally filtered by mint and state\n   */\n  getProofEntries = getProofEntries.bind(this);\n  /**\n   * Updates information about a proof\n   */\n  updateProof = updateProof.bind(this);\n  /**\n   * Returns all proofs, optionally filtered by mint and state\n   * @param opts.mint - optional mint to filter by\n   * @param opts.onlyAvailable - only include available proofs @default true\n   * @param opts.includeDeleted - include deleted proofs @default false\n   */\n  getProofs(opts) {\n    return this.getProofEntries(opts).map((entry) => entry.proof);\n  }\n  getTokens(opts = { onlyAvailable: true }) {\n    const proofEntries = this.getProofEntries(opts);\n    const tokens = /* @__PURE__ */ new Map();\n    for (const proofEntry of proofEntries) {\n      const tokenId = proofEntry.tokenId ?? null;\n      const current = tokens.get(tokenId) ?? {\n        tokenId,\n        mint: proofEntry.mint,\n        proofEntries: []\n      };\n      current.token ??= tokenId ? this.tokens.get(tokenId)?.token : void 0;\n      current.proofEntries.push(proofEntry);\n      tokens.set(tokenId, current);\n    }\n    return tokens;\n  }\n  /**\n   * Gets a list of proofs for each mint\n   * @returns\n   */\n  getMintsProofs({\n    validStates = /* @__PURE__ */ new Set([\"available\"])\n  } = {}) {\n    const mints = /* @__PURE__ */ new Map();\n    for (const entry of this.proofs.values()) {\n      if (!entry.mint || !entry.proof) continue;\n      if (!validStates.has(entry.state)) continue;\n      const current = mints.get(entry.mint) || [];\n      current.push(entry.proof);\n      mints.set(entry.mint, current);\n    }\n    return mints;\n  }\n  /***************************\n   * Balance\n   ***************************/\n  /**\n   * Returns the balance of the wallet, optionally filtered by mint and state\n   *\n   * @params opts.mint - optional mint to filter by\n   * @params opts.onlyAvailable - only include available proofs @default true\n   */\n  getBalance = getBalance.bind(this);\n  /**\n   * Returns the balances of the different mints\n   *\n   * @params opts.onlyAvailable - only include available proofs @default true\n   */\n  getMintsBalance = getMintsBalances.bind(this);\n  /***************************\n   * State update\n   ***************************/\n  update = update.bind(this);\n};\n\n// src/wallets/cashu/wallet/index.ts\nvar _startTime = Date.now();\nfunction log(_msg) {\n}\nvar NDKCashuWallet = class _NDKCashuWallet extends NDKWallet {\n  get type() {\n    return \"nip-60\";\n  }\n  _p2pk;\n  sub;\n  status = \"initial\" /* INITIAL */;\n  static kind = _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuWallet;\n  static kinds = [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuWallet];\n  mints = [];\n  privkeys = /* @__PURE__ */ new Map();\n  signer;\n  walletId = \"nip-60\";\n  depositMonitor = new NDKCashuDepositMonitor();\n  /**\n   * Warnings that have been raised\n   */\n  warnings = [];\n  paymentHandler;\n  state;\n  relaySet;\n  constructor(ndk) {\n    super(ndk);\n    this.ndk = ndk;\n    this.paymentHandler = new PaymentHandler(this);\n    this.state = new WalletState(this);\n    log(\"NDK Cashu Wallet constructor\");\n  }\n  /**\n   * Generates a backup event for this wallet\n   */\n  async backup(publish = true) {\n    log(\"NDK Cashu Wallet generating backup\");\n    if (this.privkeys.size === 0) throw new Error(\"no privkey to backup\");\n    const backup = new NDKCashuWalletBackup(this.ndk);\n    const privkeys = [];\n    for (const [_pubkey, signer] of this.privkeys.entries()) {\n      privkeys.push(signer.privateKey);\n    }\n    backup.privkeys = privkeys;\n    backup.mints = this.mints;\n    if (publish) backup.save(this.relaySet);\n    return backup;\n  }\n  consolidateTokens = consolidateTokens.bind(this);\n  /**\n   * Generates nuts that can be used to send to someone.\n   *\n   * Note that this function does not send anything, it just generates a specific amount of proofs.\n   * @param amounts\n   * @returns\n   */\n  async mintNuts(amounts) {\n    let result;\n    const totalAmount = amounts.reduce((acc, amount) => acc + amount, 0);\n    for (const mint of this.mints) {\n      const wallet = await this.getCashuWallet(mint);\n      const mintProofs2 = await this.state.getProofs({ mint });\n      result = await wallet.send(totalAmount, mintProofs2, {\n        proofsWeHave: mintProofs2,\n        includeFees: true,\n        outputAmounts: {\n          sendAmounts: amounts\n        }\n      });\n      if (result.send.length > 0) {\n        const change = { store: result?.keep ?? [], destroy: result.send, mint };\n        const updateRes = await this.state.update(change);\n        createOutTxEvent(\n          this.ndk,\n          {\n            paymentDescription: \"minted nuts\",\n            amount: amounts.reduce((acc, amount) => acc + amount, 0)\n          },\n          {\n            result: { proofs: result.send, mint },\n            proofsChange: change,\n            stateUpdate: updateRes,\n            mint,\n            fee: 0\n          },\n          this.relaySet\n        );\n        this.emit(\"balance_updated\");\n        return result;\n      }\n    }\n  }\n  /**\n   * Loads a wallet information from an event\n   * @param event\n   */\n  async loadFromEvent(event) {\n    const _event = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKEvent(event.ndk, event.rawEvent());\n    await _event.decrypt();\n    const content = JSON.parse(_event.content);\n    for (const tag of content) {\n      if (tag[0] === \"mint\") {\n        this.mints.push(tag[1]);\n      } else if (tag[0] === \"privkey\") {\n        await this.addPrivkey(tag[1]);\n      }\n    }\n    await this.getP2pk();\n  }\n  static async from(event) {\n    if (!event.ndk) throw new Error(\"no ndk instance on event\");\n    const wallet = new _NDKCashuWallet(event.ndk);\n    await wallet.loadFromEvent(event);\n    return wallet;\n  }\n  /**\n   * Starts monitoring the wallet.\n   *\n   * Use `since` to start syncing state from a specific timestamp. This should be\n   * used by storing at the app level a time in which we know we were able to communicate\n   * with the relays, for example, by saving the time the wallet has emitted a \"ready\" event.\n   */\n  start(opts) {\n    log(\"NDK Cashu Wallet starting\");\n    const activeUser = this.ndk?.activeUser;\n    if (this.status === \"ready\" /* READY */) return;\n    this.status = \"loading\" /* LOADING */;\n    const pubkey = opts?.pubkey ?? activeUser?.pubkey;\n    if (!pubkey) throw new Error(\"no pubkey\");\n    const filters = [\n      { kinds: [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuToken], authors: [pubkey] },\n      { kinds: [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuQuote], authors: [pubkey] },\n      {\n        kinds: [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.EventDeletion],\n        authors: [pubkey],\n        \"#k\": [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuToken.toString()]\n      }\n    ];\n    if (opts?.since) {\n      filters[0].since = opts.since;\n      filters[1].since = opts.since;\n      filters[2].since = opts.since;\n    }\n    const subOpts = opts ?? {};\n    subOpts.subId ??= \"cashu-wallet-state\";\n    log(`Subscribing to ${JSON.stringify(filters)} and opts ${JSON.stringify(opts)}`);\n    this.sub = this.ndk.subscribe(filters, { ...subOpts, relaySet: this.relaySet }, false);\n    this.sub.on(\"event:dup\", eventDupHandler.bind(this));\n    this.sub.on(\"event\", (event) => {\n      log(`Event ${event.kind} received`);\n      eventHandler.call(this, event);\n    });\n    this.sub.on(\"eose\", () => {\n      log(\"Eose received\");\n      this.emit(\"ready\");\n      this.status = \"ready\" /* READY */;\n    });\n    this.sub.start(true);\n  }\n  stop() {\n    this.sub?.stop();\n    this.status = \"initial\" /* INITIAL */;\n  }\n  /**\n   * Returns the p2pk of this wallet or generates a new one if we don't have one\n   */\n  async getP2pk() {\n    if (this._p2pk) return this._p2pk;\n    if (this.privkeys.size === 0) {\n      const signer = _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKPrivateKeySigner.generate();\n      await this.addPrivkey(signer.privateKey);\n    }\n    return this.p2pk;\n  }\n  /**\n   * If this wallet has access to more than one privkey, this will return all of them.\n   */\n  get p2pks() {\n    return Array.from(this.privkeys.keys());\n  }\n  async addPrivkey(privkey) {\n    const signer = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKPrivateKeySigner(privkey);\n    const user = await signer.user();\n    this.privkeys.set(user.pubkey, signer);\n    this._p2pk ??= user.pubkey;\n    return this._p2pk;\n  }\n  get p2pk() {\n    if (!this._p2pk) throw new Error(\"p2pk not set\");\n    return this._p2pk;\n  }\n  set p2pk(pubkey) {\n    if (this.privkeys.has(pubkey)) {\n      this.signer = this.privkeys.get(pubkey);\n      this.p2pk = pubkey;\n    } else {\n      throw new Error(`privkey for ${pubkey} not found`);\n    }\n  }\n  /**\n   * Generates the payload for a wallet event\n   */\n  walletPayload() {\n    const privkeys = Array.from(this.privkeys.values()).map((signer) => signer.privateKey);\n    return payloadForEvent(privkeys, this.mints);\n  }\n  async publish() {\n    const event = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKEvent(this.ndk, {\n      content: JSON.stringify(this.walletPayload()),\n      kind: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuWallet\n    });\n    const user = await this.ndk?.signer?.user();\n    await event.encrypt(user, void 0, \"nip44\");\n    return event.publish(this.relaySet);\n  }\n  /**\n   * Prepares a deposit\n   * @param amount\n   * @param mint\n   *\n   * @example\n   * const wallet = new NDKCashuWallet(...);\n   * const deposit = wallet.deposit(1000, \"https://mint.example.com\", \"sats\");\n   * deposit.on(\"success\", (token) => {\n   * });\n   * deposit.on(\"error\", (error) => {\n   * });\n   *\n   * // start monitoring the deposit\n   * deposit.start();\n   */\n  deposit(amount, mint) {\n    const deposit = new NDKCashuDeposit(this, amount, mint);\n    deposit.on(\"success\", (token) => {\n      this.state.addToken(token);\n    });\n    return deposit;\n  }\n  /**\n   * Receives a token and adds it to the wallet\n   * @param token\n   * @returns the token event that was created\n   */\n  async receiveToken(token, description) {\n    const { mint } = (0,_cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.getDecodedToken)(token);\n    const wallet = await this.getCashuWallet(mint);\n    const proofs = await wallet.receive(token);\n    const updateRes = await this.state.update({\n      store: proofs,\n      mint\n    });\n    const tokenEvent = updateRes.created;\n    createInTxEvent(this.ndk, proofs, mint, updateRes, { description }, this.relaySet);\n    return tokenEvent;\n  }\n  /**\n   * Pay a LN invoice with this wallet\n   */\n  async lnPay(payment, createTxEvent = true) {\n    return this.paymentHandler.lnPay(payment, createTxEvent);\n  }\n  /**\n   * Swaps tokens to a specific amount, optionally locking to a p2pk.\n   *\n   * This function has side effects:\n   * - It swaps tokens at the mint\n   * - It updates the wallet state (deletes affected tokens, might create new ones)\n   * - It creates a wallet transaction event\n   *\n   * This function returns the proofs that need to be sent to the recipient.\n   * @param amount\n   */\n  async cashuPay(payment) {\n    return this.paymentHandler.cashuPay(payment);\n  }\n  wallets = /* @__PURE__ */ new Map();\n  async redeemNutzaps(nutzaps, privkey, { mint, proofs, cashuWallet }) {\n    if (cashuWallet) {\n      mint ??= cashuWallet.mint.mintUrl;\n    } else {\n      if (!mint) throw new Error(\"mint not set\");\n      cashuWallet = await this.getCashuWallet(mint);\n    }\n    if (!mint) throw new Error(\"mint not set\");\n    if (!proofs) throw new Error(\"proofs not set\");\n    try {\n      const proofsWeHave = this.state.getProofs({ mint });\n      const res = await cashuWallet.receive({ proofs, mint }, { proofsWeHave, privkey });\n      const receivedAmount = proofs.reduce((acc, proof) => acc + proof.amount, 0);\n      const redeemedAmount = res.reduce((acc, proof) => acc + proof.amount, 0);\n      const fee = receivedAmount - redeemedAmount;\n      const updateRes = await this.state.update({\n        store: res,\n        mint\n      });\n      createInTxEvent(this.ndk, res, mint, updateRes, { nutzaps, fee }, this.relaySet);\n      return receivedAmount;\n    } catch (e) {\n      console.error(\n        \"error redeeming nutzaps\",\n        nutzaps.map((n) => n.encode()),\n        e\n      );\n      throw e;\n    }\n  }\n  warn(msg, event, relays) {\n    relays ??= event?.onRelays;\n    this.warnings.push({ msg, event, relays });\n    this.emit(\"warning\", { msg, event, relays });\n  }\n  get balance() {\n    return {\n      amount: this.state.getBalance({ onlyAvailable: true })\n    };\n  }\n  /**\n   * Gets the total balance for a specific mint, including reserved proofs\n   */\n  mintBalance(mint) {\n    return this.mintBalances[mint] || 0;\n  }\n  /**\n   * Gets all tokens, grouped by mint with their total balances\n   */\n  get mintBalances() {\n    return this.state.getMintsBalance({ onlyAvailable: true });\n  }\n  /**\n   * Returns a list of mints that have enough available balance (excluding reserved proofs)\n   * to cover the specified amount\n   */\n  getMintsWithBalance(amount) {\n    const availableBalances = this.state.getMintsBalance({ onlyAvailable: true });\n    return Object.entries(availableBalances).filter(([_, balance]) => balance >= amount).map(([mint]) => mint);\n  }\n};\nvar NDKCashuWalletBackup = class _NDKCashuWalletBackup extends _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKEvent {\n  privkeys = [];\n  mints = [];\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuWalletBackup;\n  }\n  static async from(event) {\n    if (!event.ndk) throw new Error(\"no ndk instance on event\");\n    const backup = new _NDKCashuWalletBackup(event.ndk, event);\n    try {\n      await backup.decrypt();\n      const content = JSON.parse(backup.content);\n      for (const tag of content) {\n        if (tag[0] === \"mint\") {\n          backup.mints.push(tag[1]);\n        } else if (tag[0] === \"privkey\") {\n          backup.privkeys.push(tag[1]);\n        }\n      }\n    } catch (e) {\n      console.error(\"error decrypting backup event\", backup.encode(), e);\n      return;\n    }\n    return backup;\n  }\n  async save(relaySet) {\n    if (!this.ndk) throw new Error(\"no ndk instance\");\n    if (!this.privkeys.length) throw new Error(\"no privkeys\");\n    this.content = JSON.stringify(payloadForEvent(this.privkeys, this.mints));\n    await this.encrypt(this.ndk.activeUser, void 0, \"nip44\");\n    return this.publish(relaySet);\n  }\n};\nfunction payloadForEvent(privkeys, mints) {\n  if (privkeys.length === 0) throw new Error(\"privkey not set\");\n  const payload = [\n    ...mints.map((mint) => [\"mint\", mint]),\n    ...privkeys.map((privkey) => [\"privkey\", privkey])\n  ];\n  return payload;\n}\n\n// src/nutzap-monitor/fetch-page.ts\n\nasync function fetchPage(ndk, filter, _knownNutzaps, relaySet) {\n  const events = await ndk.fetchEvents(\n    filter,\n    {\n      cacheUsage: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKSubscriptionCacheUsage.ONLY_RELAY,\n      groupable: false,\n      subId: \"recent-nutzap\"\n    },\n    relaySet\n  );\n  return Array.from(events).map((e) => _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKNutzap.from(e)).filter((n) => !!n);\n}\n\n// src/nutzap-monitor/group-nutzaps.ts\n\nfunction groupNutzaps(nutzaps, monitor) {\n  const result = /* @__PURE__ */ new Map();\n  const getKey = (mint, p2pk = \"no-key\") => `${mint}:${p2pk}`;\n  for (const nutzap of nutzaps) {\n    if (!monitor.shouldTryRedeem(nutzap)) continue;\n    const mint = nutzap.mint;\n    for (const proof of nutzap.proofs) {\n      const cashuPubkey = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.proofP2pk)(proof) ?? \"no-key\";\n      const key = getKey(mint, cashuPubkey);\n      const group = result.get(key) ?? {\n        mint,\n        cashuPubkey,\n        nostrPubkey: (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.cashuPubkeyToNostrPubkey)(cashuPubkey),\n        nutzaps: []\n      };\n      group.nutzaps.push(nutzap);\n      result.set(key, group);\n    }\n  }\n  return Array.from(result.values());\n}\n\n// src/nutzap-monitor/spend-status.ts\n\nasync function getProofSpendState(wallet, nutzaps) {\n  const result = {\n    unspentProofs: [],\n    spentProofs: [],\n    nutzapsWithUnspentProofs: [],\n    nutzapsWithSpentProofs: []\n  };\n  const proofCs = /* @__PURE__ */ new Set();\n  const proofs = [];\n  const nutzapMap = /* @__PURE__ */ new Map();\n  for (const nutzap of nutzaps) {\n    for (const proof of nutzap.proofs) {\n      if (proofCs.has(proof.C)) continue;\n      proofCs.add(proof.C);\n      proofs.push(proof);\n      nutzapMap.set(proof.C, nutzap);\n    }\n  }\n  const states = await wallet.checkProofsStates(proofs);\n  for (let i = 0; i < states.length; i++) {\n    const state = states[i];\n    const proof = proofs[i];\n    const nutzap = nutzapMap.get(proof.C);\n    if (!nutzap) continue;\n    if (state.state === _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CheckStateEnum.SPENT) {\n      result.spentProofs.push(proof);\n      if (!result.nutzapsWithSpentProofs.some((n) => n.id === nutzap.id)) {\n        result.nutzapsWithSpentProofs.push(nutzap);\n      }\n    } else if (state.state === _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CheckStateEnum.UNSPENT) {\n      result.unspentProofs.push(proof);\n      if (!result.nutzapsWithUnspentProofs.some((n) => n.id === nutzap.id)) {\n        result.nutzapsWithUnspentProofs.push(nutzap);\n      }\n    }\n  }\n  return result;\n}\n\n// src/nutzap-monitor/index.ts\nvar _startTime2 = Date.now();\nfunction log2(_msg) {\n}\nvar NDKNutzapMonitor = class extends tseep__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n  store;\n  ndk;\n  user;\n  relaySet;\n  sub;\n  nutzapStates = /* @__PURE__ */ new Map();\n  _wallet;\n  mintList;\n  privkeys = /* @__PURE__ */ new Map();\n  cashuWallets = /* @__PURE__ */ new Map();\n  getCashuWallet = getCashuWallet.bind(this);\n  onMintInfoNeeded;\n  onMintInfoLoaded;\n  onMintKeysNeeded;\n  onMintKeysLoaded;\n  /**\n   * Create a new nutzap monitor.\n   * @param ndk - The NDK instance.\n   * @param user - The user to monitor.\n   * @param mintList - An optional mint list to monitor zaps on, if one is not provided, the monitor will use the relay set from the mint list, which is the correct default behavior of NIP-61 zaps.\n   * @param store - An optional store to save and load nutzap states to.\n   */\n  constructor(ndk, user, { mintList, store }) {\n    super();\n    this.ndk = ndk;\n    this.user = user;\n    this.mintList = mintList;\n    this.relaySet = mintList?.relaySet;\n    this.store = store;\n  }\n  set wallet(wallet) {\n    this._wallet = wallet;\n    if (wallet) {\n      this.onMintInfoNeeded ??= wallet.onMintInfoNeeded;\n      this.onMintInfoLoaded ??= wallet.onMintInfoLoaded;\n      this.onMintKeysNeeded ??= wallet.onMintKeysNeeded;\n      this.onMintKeysLoaded ??= wallet.onMintKeysLoaded;\n      if (wallet instanceof NDKCashuWallet && wallet?.privkeys) {\n        for (const [pubkey, signer] of wallet.privkeys.entries()) {\n          try {\n            this.addPrivkey(signer);\n          } catch (e) {\n            console.error(\"failed to add privkey from wallet with pubkey\", pubkey, e);\n          }\n        }\n      }\n    }\n  }\n  get wallet() {\n    return this._wallet;\n  }\n  /**\n   * Provide private keys that can be used to redeem nutzaps.\n   *\n   * This is particularly useful when a NWC wallet is used to receive the nutzaps,\n   * since it doesn't have a private key, this allows keeping the private key in a separate\n   * place (ideally a NIP-60 wallet event).\n   *\n   * Multiple keys can be added, and the monitor will use the correct key for the nutzap.\n   */\n  async addPrivkey(signer) {\n    const pubkey = (await signer.user()).pubkey;\n    if (this.privkeys.has(pubkey)) return;\n    this.privkeys.set(pubkey, signer);\n    if (!this.sub) return;\n    const inMssingPrivKeyState = (state) => state.status === _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.MISSING_PRIVKEY;\n    const ensureIsCashuPubkey2 = (state) => state.nutzap?.p2pk === pubkey;\n    const candidateNutzaps = Array.from(this.nutzapStates.values()).filter(inMssingPrivKeyState).filter(ensureIsCashuPubkey2);\n    if (candidateNutzaps.length > 0) {\n      const nutzaps = candidateNutzaps.map((c) => c.nutzap).filter((n) => !!n);\n      const groupedNutzaps = groupNutzaps(nutzaps, this);\n      for (const group of groupedNutzaps) {\n        await this.checkAndRedeemGroup(group);\n      }\n    }\n  }\n  async addUserPrivKey() {\n    const { signer } = this.ndk;\n    if (signer instanceof _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKPrivateKeySigner) {\n      const user = await signer.user();\n      const pubkey = user.pubkey;\n      this.privkeys.set(pubkey, signer);\n    }\n  }\n  /**\n   * Loads kind:375 backup events from this user to find all backup keys this user might have used.\n   */\n  async getBackupKeys() {\n    const backupEvents = await this.ndk.fetchEvents(\n      [{ kinds: [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuWalletBackup], authors: [this.user.pubkey] }],\n      void 0,\n      this.relaySet\n    );\n    const keys = Array.from(this.privkeys.values());\n    const keysNotFound = new Set(keys.map((signer) => signer.privateKey));\n    for (const event of backupEvents) {\n      const backup = await NDKCashuWalletBackup.from(event);\n      if (!backup) continue;\n      for (const privkey of backup.privkeys) {\n        if (keysNotFound.has(privkey)) keysNotFound.delete(privkey);\n        try {\n          const signer = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKPrivateKeySigner(privkey);\n          this.addPrivkey(signer);\n        } catch (e) {\n          console.error(\"failed to add privkey\", privkey, e);\n        }\n      }\n    }\n    if (keysNotFound.size > 0) {\n      const backup = new NDKCashuWalletBackup(this.ndk);\n      backup.privkeys = Array.from(keysNotFound);\n      await backup.save(this.relaySet);\n    }\n  }\n  /**\n   * Start the nutzap monitor. The monitor will initially look back\n   * for nutzaps it doesn't know about and will try to redeem them.\n   *\n   * @param knownNutzaps - An optional set of nutzaps the app knows about. This is an optimization so that we don't try to redeem nutzaps we know have already been redeemed.\n   * @param pageSize - The number of nutzaps to fetch per page.\n   *\n   */\n  async start({ filter, opts }) {\n    log2(\"Starting nutzap monitor\");\n    if (this.sub) this.sub.stop();\n    try {\n      await this.getBackupKeys();\n      log2(`Got backup keys ${this.privkeys.size}`);\n    } catch (e) {\n      console.error(\"\\u274C Failed to get backup keys\", e);\n    }\n    await this.addUserPrivKey();\n    log2(`Added user privkey ${this.privkeys.size}`);\n    const since = Math.floor(Date.now() / 1e3);\n    const monitorFilter = { kinds: [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.Nutzap], \"#p\": [this.user.pubkey], since };\n    if (this.store) {\n      log2(\"Will load nutzaps from store\");\n      try {\n        const nutzaps = await this.store.getAllNutzaps();\n        log2(`Loaded ${nutzaps.size} nutzaps`);\n        for (const [id, state] of nutzaps.entries()) {\n          this.nutzapStates.set(id, state);\n        }\n        log2(`Changed the state of ${nutzaps.size} nutzaps`);\n      } catch (e) {\n        console.error(\"\\u274C Failed to load nutzaps from store\", e);\n      }\n    }\n    try {\n      log2(\"Will start processing redeemable nutzaps from store\");\n      await this.processRedeemableNutzapsFromStore();\n      log2(\"Finished processing redeemable nutzaps from store\");\n    } catch (e) {\n      console.error(\"\\u274C Failed to process redeemable nutzaps from store\", e);\n    }\n    try {\n      log2(\"Will start processing accumulated nutzaps\");\n      await this.processAccumulatedNutzaps(filter, opts);\n      log2(`Finished processing accumulated nutzaps ${this.nutzapStates.size}`);\n    } catch (e) {\n      console.error(\"\\u274C Failed to process nutzaps\", e);\n    }\n    log2(`Running filter ${JSON.stringify(monitorFilter)}`);\n    const subscribeOpts = {\n      subId: \"ndk-wallet:nutzap-monitor\",\n      cacheUsage: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKSubscriptionCacheUsage.ONLY_RELAY,\n      wrap: false,\n      // We skip validation so the user knows about nutzaps that were sent but are not valid\n      // this way tooling can be more comprehensive and include nutzaps that were not valid\n      skipValidation: true,\n      ...opts,\n      relaySet: this.relaySet\n      // Pass relaySet via options\n    };\n    this.sub = this.ndk.subscribe(\n      monitorFilter,\n      subscribeOpts,\n      // this.relaySet, // Removed: Passed via opts\n      {\n        // autoStart handlers (now 3rd argument)\n        onEvent: (event) => this.eventHandler(event)\n        // Added NDKEvent type\n      }\n    );\n    log2(\"\\u2705 Nutzap monitor started successfully\");\n    return true;\n  }\n  /**\n   * Checks if the group of nutzaps can be redeemed and redeems the ones that can be.\n   */\n  async checkAndRedeemGroup(group, oldestUnspentNutzapTime) {\n    const cashuWallet = await this.getCashuWallet(group.mint);\n    const spendStates = await getProofSpendState(cashuWallet, group.nutzaps);\n    for (const nutzap of spendStates.nutzapsWithSpentProofs) {\n      this.updateNutzapState(nutzap.id, { status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.SPENT, nutzap });\n    }\n    for (const nutzap of spendStates.nutzapsWithUnspentProofs) {\n      this.emit(\"seen\", nutzap);\n      this.updateNutzapState(nutzap.id, { status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.INITIAL, nutzap });\n    }\n    if (spendStates.unspentProofs.length > 0) {\n      for (const nutzap of spendStates.nutzapsWithUnspentProofs) {\n        if (!oldestUnspentNutzapTime || oldestUnspentNutzapTime > nutzap.created_at) {\n          oldestUnspentNutzapTime = nutzap.created_at;\n        }\n      }\n      await this.redeemNutzaps(group.mint, spendStates.nutzapsWithUnspentProofs, spendStates.unspentProofs);\n    }\n  }\n  /**\n   * Processes nutzaps that have been accumulated while the monitor was offline.\n   * @param startOpts\n   * @param opts\n   */\n  async processAccumulatedNutzaps(filter = {}, opts) {\n    log2(\"Processing accumulated nutzaps\");\n    let oldestUnspentNutzapTime;\n    const _filter = { ...filter };\n    _filter.kinds = [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.Nutzap];\n    _filter[\"#p\"] = [this.user.pubkey];\n    const knownNutzapIds = new Set(this.nutzapStates.keys());\n    const nutzaps = await fetchPage(this.ndk, _filter, knownNutzapIds, this.relaySet);\n    log2(`We loaded ${nutzaps.length} nutzaps from relays`);\n    oldestUnspentNutzapTime = await this.processNutzaps(nutzaps, oldestUnspentNutzapTime);\n    log2(\"We finished processing thesenutzaps\");\n    if (oldestUnspentNutzapTime) {\n      _filter.since = oldestUnspentNutzapTime - 1;\n      await this.processAccumulatedNutzaps(_filter, opts);\n    }\n  }\n  stop() {\n    this.sub?.stop();\n  }\n  updateNutzapState(id, state) {\n    const currentState = this.nutzapStates.get(id) ?? {};\n    if (!currentState.status) state.status ??= _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.INITIAL;\n    const stateIsUnchanged = Object.entries(state).every(([key, value]) => {\n      if (key === \"nutzap\" && currentState.nutzap && value) {\n        return currentState.nutzap.id === value.id;\n      }\n      return currentState[key] === value;\n    });\n    if (stateIsUnchanged) return;\n    this.nutzapStates.set(id, { ...currentState, ...state });\n    this.emit(\"state_changed\", id, currentState.status);\n    const serializedState = (state2) => {\n      const res = { ...state2 };\n      if (res.nutzap) res.nutzap = res.nutzap.id;\n      return JSON.stringify(res);\n    };\n    const currentStatusStr = serializedState(currentState);\n    const newStatusStr = serializedState(state);\n    log2(`[${id.substring(0, 6)}] ${currentStatusStr} changed to \\u{1F449} ${newStatusStr}`);\n    this.store?.setNutzapState(id, state);\n  }\n  async eventHandler(event) {\n    if (this.nutzapStates.has(event.id)) return;\n    const nutzap = await _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKNutzap.from(event);\n    if (!nutzap) {\n      this.updateNutzapState(event.id, {\n        status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.PERMANENT_ERROR,\n        errorMessage: \"Failed to parse nutzap\"\n      });\n      return;\n    }\n    if (this.mintList && !this.mintList.mints.includes(nutzap.mint)) {\n      this.emit(\"seen_in_unknown_mint\", nutzap);\n    }\n    this.redeemNutzap(nutzap);\n  }\n  /**\n   * Gathers the necessary information to redeem a nutzap and then redeems it.\n   * @param nutzap\n   */\n  async redeemNutzap(nutzap) {\n    if (!this.nutzapStates.has(nutzap.id))\n      this.updateNutzapState(nutzap.id, { status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.INITIAL, nutzap });\n    const rawP2pk = nutzap.rawP2pk;\n    if (rawP2pk) {\n      const cashuPubkey = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.proofP2pk)(nutzap.proofs[0]);\n      if (cashuPubkey) {\n        const nostrPubkey = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.cashuPubkeyToNostrPubkey)(cashuPubkey);\n        if (nostrPubkey && !this.privkeys.has(nostrPubkey)) {\n          this.updateNutzapState(nutzap.id, {\n            status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.MISSING_PRIVKEY,\n            errorMessage: \"No privkey found for p2pk\"\n          });\n          return this.nutzapStates.get(nutzap.id);\n        }\n      }\n    }\n    await this.redeemNutzaps(nutzap.mint, [nutzap], nutzap.proofs);\n    return this.nutzapStates.get(nutzap.id);\n  }\n  /**\n   * This function redeems a list of proofs.\n   *\n   * Proofs will be attempted to be redeemed in a single call, so they will all work or none will.\n   * Either call this function with proofs that have been verified to be redeemable or don't group them,\n   * and provide a single nutzap per call.\n   *\n   * All nutzaps MUST be p2pked to the same pubkey.\n   *\n   * @param mint\n   * @param nutzaps\n   * @param proofs\n   * @param privkey Private key that is needed to redeem the nutzaps.\n   * @returns\n   */\n  async redeemNutzaps(mint, nutzaps, proofs) {\n    if (!this.wallet) throw new Error(\"wallet not set\");\n    if (!this.wallet.redeemNutzaps) throw new Error(\"wallet does not support redeeming nutzaps\");\n    const cashuWallet = await this.getCashuWallet(mint);\n    const validNutzaps = [];\n    if (proofs.length > 0) {\n      const cashuPubkey2 = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.proofP2pk)(proofs[0]);\n      if (!cashuPubkey2) {\n        for (const nutzap of nutzaps) {\n          this.updateNutzapState(nutzap.id, {\n            status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.INVALID_NUTZAP,\n            errorMessage: \"Invalid nutzap: proof is not p2pk\"\n          });\n        }\n        return;\n      }\n      const nostrPubkey2 = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.cashuPubkeyToNostrPubkey)(cashuPubkey2);\n      if (!nostrPubkey2) {\n        for (const nutzap of nutzaps) {\n          this.updateNutzapState(nutzap.id, {\n            status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.INVALID_NUTZAP,\n            errorMessage: \"Invalid nutzap: locked to an invalid public key (not a nostr key)\"\n          });\n        }\n        return;\n      }\n      const privkey2 = this.privkeys.get(nostrPubkey2);\n      if (!privkey2) {\n        for (const nutzap of nutzaps) {\n          this.updateNutzapState(nutzap.id, {\n            status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.MISSING_PRIVKEY,\n            errorMessage: \"No privkey found for p2pk\"\n          });\n        }\n        return;\n      }\n    }\n    for (const nutzap of nutzaps) {\n      if (!nutzap.isValid) {\n        this.updateNutzapState(nutzap.id, {\n          status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.INVALID_NUTZAP,\n          errorMessage: \"Invalid nutzap\"\n        });\n        continue;\n      }\n      const rawP2pk = nutzap.rawP2pk;\n      if (!rawP2pk) {\n        this.updateNutzapState(nutzap.id, {\n          status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.INVALID_NUTZAP,\n          errorMessage: \"Invalid nutzap: locked to an invalid public key (no p2pk)\"\n        });\n        continue;\n      }\n      if (rawP2pk.length !== 66) {\n        this.updateNutzapState(nutzap.id, {\n          status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.INVALID_NUTZAP,\n          errorMessage: `Invalid nutzap: locked to an invalid public key (length ${rawP2pk.length})`\n        });\n        continue;\n      }\n      validNutzaps.push(nutzap);\n    }\n    if (validNutzaps.length === 0) return;\n    const cashuPubkey = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.proofP2pk)(proofs[0]);\n    if (!cashuPubkey) return;\n    const nostrPubkey = (0,_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.cashuPubkeyToNostrPubkey)(cashuPubkey);\n    if (!nostrPubkey) return;\n    const privkey = this.privkeys.get(nostrPubkey);\n    if (!privkey) {\n      for (const nutzap of validNutzaps) {\n        this.updateNutzapState(nutzap.id, {\n          status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.MISSING_PRIVKEY,\n          errorMessage: \"No privkey found for p2pk\"\n        });\n      }\n      return;\n    }\n    for (const nutzap of validNutzaps) {\n      this.updateNutzapState(nutzap.id, { status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.PROCESSING });\n    }\n    try {\n      const totalAmount = await this.wallet.redeemNutzaps(nutzaps, privkey.privateKey, {\n        cashuWallet,\n        proofs,\n        mint\n      });\n      this.emit(\"redeemed\", nutzaps, totalAmount);\n      for (const nutzap of nutzaps) {\n        const nutzapTotalAmount = proofsTotal(proofsIntersection(proofs, nutzap.proofs));\n        this.updateNutzapState(nutzap.id, {\n          status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.REDEEMED,\n          redeemedAmount: nutzapTotalAmount\n        });\n      }\n    } catch (e) {\n      console.error(\"\\u274C Failed to redeem nutzaps\", e.message);\n      if (e.message?.includes(\"unknown public key size\")) {\n        for (const nutzap of nutzaps) {\n          this.updateNutzapState(nutzap.id, {\n            status: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.PERMANENT_ERROR,\n            errorMessage: \"Invalid p2pk: unknown public key size\"\n          });\n          this.emit(\"failed\", nutzap, \"Invalid p2pk: unknown public key size\");\n        }\n      } else {\n        for (const nutzap of nutzaps) {\n          this.emit(\"failed\", nutzap, e.message);\n        }\n      }\n    }\n  }\n  shouldTryRedeem(nutzap) {\n    const state = this.nutzapStates.get(nutzap.id);\n    if (!state) return true;\n    if ([_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.INITIAL].includes(state.status)) return true;\n    if (state.status === _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.MISSING_PRIVKEY) {\n      const p2pk = state.nutzap?.p2pk;\n      if (p2pk && this.privkeys.has(p2pk)) return true;\n      return false;\n    }\n    if ([_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.SPENT, _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.REDEEMED].includes(state.status)) return false;\n    if ([_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.PERMANENT_ERROR, _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NdkNutzapStatus.INVALID_NUTZAP].includes(state.status)) return false;\n    return false;\n  }\n  /**\n   * Process nutzaps from the store that are in a redeemable state.\n   * This includes nutzaps in INITIAL state and those in MISSING_PRIVKEY state\n   * for which we now have the private key.\n   */\n  async processRedeemableNutzapsFromStore() {\n    const redeemableNutzaps = [];\n    for (const [_id, state] of this.nutzapStates.entries()) {\n      if (!state.nutzap) continue;\n      if (this.shouldTryRedeem(state.nutzap)) {\n        redeemableNutzaps.push(state.nutzap);\n      }\n    }\n    if (redeemableNutzaps.length === 0) return;\n    log2(`We found ${redeemableNutzaps.length} redeemable nutzaps in the store`);\n    await this.processNutzaps(redeemableNutzaps);\n  }\n  /**\n   * Common method to process a collection of nutzaps:\n   * - Group them by mint\n   * - Check and redeem each group\n   *\n   * @param nutzaps The nutzaps to process\n   * @param oldestUnspentNutzapTime Optional timestamp to track the oldest unspent nutzap\n   * @returns The updated oldestUnspentNutzapTime if any nutzaps were processed\n   */\n  async processNutzaps(nutzaps, oldestUnspentNutzapTime) {\n    const groupedNutzaps = groupNutzaps(nutzaps, this);\n    for (const group of groupedNutzaps) {\n      log2(`Processing group ${group.mint} with ${group.nutzaps.length} nutzaps`);\n      try {\n        await this.checkAndRedeemGroup(group, oldestUnspentNutzapTime);\n        log2(`Finished processing group ${group.mint}`);\n      } catch (e) {\n        log2(`Failed to process group ${group.mint}`);\n        console.error(`\\u274C Failed to process group ${group.mint}`, e);\n      }\n    }\n    return oldestUnspentNutzapTime;\n  }\n};\nfunction proofsIntersection(proofs1, proofs2) {\n  const proofs2Cs = new Set(proofs2.map((p) => p.C));\n  return proofs1.filter((p) => proofs2Cs.has(p.C));\n}\nfunction proofsTotal(proofs) {\n  return proofs.reduce((acc, proof) => acc + proof.amount, 0);\n}\n\n// src/wallets/cashu/mint/utils.ts\n\nasync function getCashuMintRecommendations(ndk, filter) {\n  const f = [\n    { kinds: [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.EcashMintRecommendation], \"#k\": [\"38002\"], ...filter || {} },\n    { kinds: [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuMintList], ...filter || {} }\n  ];\n  const res = {};\n  const recommendations = await ndk.fetchEvents(f);\n  for (const event of recommendations) {\n    switch (event.kind) {\n      case _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.EcashMintRecommendation:\n        for (const uTag of event.getMatchingTags(\"u\")) {\n          if (uTag[2] && uTag[2] !== \"cashu\") continue;\n          const url = uTag[1];\n          if (!url) continue;\n          const entry = res[url] || { events: [], pubkeys: /* @__PURE__ */ new Set() };\n          entry.events.push(event);\n          entry.pubkeys.add(event.pubkey);\n          res[url] = entry;\n        }\n        break;\n      case _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuMintList:\n        for (const mintTag of event.getMatchingTags(\"mint\")) {\n          const url = mintTag[1];\n          if (!url) continue;\n          const entry = res[url] || { events: [], pubkeys: /* @__PURE__ */ new Set() };\n          entry.events.push(event);\n          entry.pubkeys.add(event.pubkey);\n          res[url] = entry;\n        }\n        break;\n    }\n  }\n  return res;\n}\n\n// src/wallets/cashu/wallet/migrate.ts\n\nasync function migrateCashuWallet(ndk) {\n  let mintList = await getMintList(ndk);\n  const oldWallets = await getOldWallets(ndk);\n  if (oldWallets.length === 0) return;\n  const privKeys = /* @__PURE__ */ new Map();\n  const mints = /* @__PURE__ */ new Set();\n  const newWallet = new NDKCashuWallet(ndk);\n  for (const wallet of oldWallets) {\n    const { privkey, mints: walletMints } = await extractInfoFromLegacyWallet(wallet);\n    if (privkey) {\n      newWallet.addPrivkey(privkey);\n    }\n    for (const mint of walletMints) mints.add(mint);\n  }\n  cleanupMints(mints);\n  if (mintList) {\n    cleanupMintList(mintList);\n    for (const mint of mintList.mints) mints.add(mint);\n    mintList.mints = Array.from(mints);\n    if (!mintList.p2pk && privKeys.size > 0) mintList.p2pk = Array.from(privKeys.keys())[0];\n    await mintList.toNostrEvent();\n  } else {\n    mintList = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKCashuMintList(ndk);\n    mintList.mints = Array.from(mints);\n    await mintList.toNostrEvent();\n  }\n  newWallet.mints = Array.from(mints);\n  await newWallet.publish();\n  mintList.p2pk = await newWallet.getP2pk();\n  await mintList.publishReplaceable();\n  for (const wallet of oldWallets) {\n    wallet.tags = [[\"d\", wallet.dTag ?? \"\"], [\"deleted\"]];\n    await wallet.publishReplaceable();\n  }\n}\nasync function getMintList(ndk) {\n  const activeUser = ndk.activeUser;\n  if (!activeUser) throw new Error(\"No active user\");\n  const mintList = await ndk.fetchEvent({\n    kinds: [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.CashuMintList],\n    authors: [activeUser.pubkey]\n  });\n  if (!mintList) return;\n  return _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKCashuMintList.from(mintList);\n}\nasync function getOldWallets(ndk) {\n  const user = ndk.activeUser;\n  if (!user) throw new Error(\"No active user\");\n  const walletEvents = await ndk.fetchEvents([{ kinds: [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.LegacyCashuWallet], authors: [user.pubkey] }]);\n  return Array.from(walletEvents).filter((event) => !event.hasTag(\"deleted\"));\n}\nasync function extractInfoFromLegacyWallet(wallet) {\n  const mints = [];\n  let privkey;\n  try {\n    const origContent = wallet.content;\n    await wallet.decrypt();\n    const privTags = JSON.parse(wallet.content);\n    for (const tag of privTags) {\n      if (tag[0] === \"privkey\") privkey = tag[1];\n      if (tag[0] === \"mint\") mints.push(tag[1]);\n    }\n    wallet.content = origContent;\n    return { privkey, mints };\n  } catch (error) {\n    console.error(\"Error decrypting legacy wallet\", error);\n  }\n  return { privkey, mints };\n}\nfunction cleanupMints(mints) {\n  for (const mint of mints) if (mint.match(/testnut/)) mints.delete(mint);\n  return mints;\n}\nfunction cleanupMintList(mintList) {\n  mintList.mints = mintList.mints.filter((mint) => !mint.match(/testnut/));\n}\n\n// src/wallets/webln/index.ts\n\n\n// src/wallets/webln/pay.ts\n\nvar NDKLnPay = class {\n  wallet;\n  info;\n  type = \"ln\";\n  constructor(wallet, info) {\n    this.wallet = wallet;\n    this.info = info;\n  }\n  async pay() {\n    if (this.type === \"ln\") {\n      return this.payLn();\n    }\n    return this.payNut();\n  }\n  /**\n   * Uses LN balance to pay to a mint\n   */\n  async payNut() {\n    const { mints, p2pk } = this.info;\n    let { amount, unit } = this.info;\n    if (!mints) throw new Error(\"No mints provided\");\n    if (unit === \"msat\") {\n      amount /= 1e3;\n      unit = \"sat\";\n    }\n    const quotesPromises = mints.map(async (mint2) => {\n      const wallet2 = new _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CashuWallet(new _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CashuMint(mint2), { unit });\n      const quote2 = await wallet2.createMintQuote(amount);\n      return { quote: quote2, mint: mint2 };\n    });\n    const { quote, mint } = await Promise.any(quotesPromises);\n    if (!quote) {\n      console.warn(\"failed to get quote from any mint\");\n      throw new Error(\"failed to get quote from any mint\");\n    }\n    const res = await this.wallet.pay({ pr: quote.request });\n    if (!res) {\n      console.warn(\"payment failed\");\n      throw new Error(\"payment failed\");\n    }\n    const wallet = new _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CashuWallet(new _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CashuMint(mint), { unit });\n    const proofs = await wallet.mintProofs(amount, quote.quote, {\n      pubkey: p2pk\n    });\n    console.warn(\"minted tokens with proofs %o\", proofs);\n    return { proofs, mint };\n  }\n  /**\n   * Straightforward; uses LN balance to pay a LN invoice\n   */\n  async payLn() {\n    const data = this.info;\n    if (!data.pr) throw new Error(\"missing pr\");\n    const _paid = false;\n    const ret = await this.wallet.pay(data);\n    return ret ? ret.preimage : void 0;\n  }\n};\n\n// src/wallets/webln/index.ts\nvar NDKWebLNWallet = class extends NDKWallet {\n  get type() {\n    return \"webln\";\n  }\n  walletId = \"webln\";\n  status = \"initial\" /* INITIAL */;\n  provider;\n  _balance;\n  constructor(ndk) {\n    super(ndk);\n    (0,webln__WEBPACK_IMPORTED_MODULE_5__.requestProvider)().then((p) => {\n      if (p) {\n        this.provider = p;\n        this.status = \"ready\" /* READY */;\n        this.emit(\"ready\");\n      } else {\n        this.status = \"failed\" /* FAILED */;\n      }\n    }).catch(() => this.status = \"failed\" /* FAILED */);\n  }\n  async pay(payment) {\n    if (!this.provider) throw new Error(\"Provider not ready\");\n    return this.provider.sendPayment(payment.pr);\n  }\n  async lnPay(payment) {\n    const pay = new NDKLnPay(this, payment);\n    const preimage = await pay.payLn();\n    if (!preimage) return;\n    return { preimage };\n  }\n  async cashuPay(payment) {\n    const pay = new NDKLnPay(this, payment);\n    return pay.payNut();\n  }\n  async updateBalance() {\n    if (!this.provider) {\n      return new Promise((resolve) => {\n        this.once(\"ready\", () => {\n          resolve();\n        });\n      });\n    }\n    const b = await this.provider.getBalance?.();\n    if (b) this._balance = { amount: b.balance };\n    return;\n  }\n  get balance() {\n    if (!this.provider) {\n      return void 0;\n    }\n    return this._balance;\n  }\n};\n\n// src/wallets/nwc/index.ts\n\n\n\n\n// src/wallets/nwc/nutzap.ts\n\nasync function redeemNutzaps(nutzaps, privkey, { cashuWallet, proofs, mint }) {\n  proofs ??= nutzaps.flatMap((n) => n.proofs);\n  if (!cashuWallet) {\n    if (!mint) throw new Error(\"No mint provided\");\n    cashuWallet = await this.getCashuWallet(mint);\n  } else {\n    mint = cashuWallet.mint.mintUrl;\n  }\n  const info = await this.getInfo();\n  if (!info.methods.includes(\"make_invoice\")) throw new Error(\"This NWC wallet does not support making invoices\");\n  const totalAvailable = proofs.reduce((acc, proof) => acc + proof.amount, 0);\n  let sweepAmount = totalAvailable;\n  while (sweepAmount > 0) {\n    const invoice = await this.makeInvoice(sweepAmount * 1e3, \"Nutzap redemption\");\n    const meltQuote = await cashuWallet.createMeltQuote(invoice.invoice);\n    const totalRequired = meltQuote.amount + meltQuote.fee_reserve;\n    if (totalRequired > totalAvailable) {\n      sweepAmount -= meltQuote.fee_reserve;\n      continue;\n    }\n    const result = await cashuWallet.meltProofs(meltQuote, proofs, { privkey });\n    let change;\n    if (result.change.length > 0) change = await saveChange(this.ndk, mint, result.change);\n    const description = `Nutzap redemption to external wallet (${this.walletId})`;\n    createOutTxEvent(\n      this.ndk,\n      {\n        pr: invoice.invoice,\n        paymentDescription: description\n      },\n      {\n        result: { preimage: invoice.preimage },\n        mint,\n        fee: meltQuote.fee_reserve,\n        proofsChange: { store: change?.proofs, mint },\n        stateUpdate: {\n          created: change\n        }\n      },\n      this.relaySet,\n      { nutzaps }\n    );\n    return sweepAmount;\n  }\n  throw new Error(\"Failed to redeem nutzaps\");\n}\nasync function saveChange(ndk, mint, change) {\n  const totalChange = change.reduce((acc, proof) => acc + proof.amount, 0);\n  if (totalChange === 0) return;\n  const token = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKCashuToken(ndk);\n  token.mint = mint;\n  token.proofs = change;\n  token.publish();\n  return token;\n}\n\n// src/wallets/nwc/req.ts\n\n\n// src/wallets/nwc/res.ts\n\nasync function waitForResponse(request) {\n  if (!this.pool) throw new Error(\"Wallet not initialized\");\n  const sendRequest = () => {\n    if (waitForEoseTimeout) clearTimeout(waitForEoseTimeout);\n    request.publish(this.relaySet);\n  };\n  const waitForEoseTimeout = setTimeout(sendRequest, 2500);\n  return new Promise((resolve, reject) => {\n    const sub = this.ndk.subscribe(\n      {\n        kinds: [_nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.NostrWalletConnectRes],\n        \"#e\": [request.id],\n        limit: 1\n      },\n      { groupable: false, pool: this.pool },\n      this.relaySet\n    );\n    sub.on(\"event\", async (event) => {\n      try {\n        await event.decrypt(event.author, this.signer);\n        const content = JSON.parse(event.content);\n        if (content.error) {\n          reject(content);\n        } else {\n          resolve(content);\n        }\n      } catch (e) {\n        console.error(\"error decrypting event\", e);\n        reject({\n          result_type: \"error\",\n          error: {\n            code: \"failed_to_parse_response\",\n            message: e.message\n          }\n        });\n      } finally {\n        sub.stop();\n      }\n    });\n    sub.on(\"eose\", () => {\n      sendRequest();\n    });\n  });\n}\n\n// src/wallets/nwc/req.ts\nasync function sendReq(method, params) {\n  if (!this.walletService || !this.signer) {\n    throw new Error(\"Wallet not initialized\");\n  }\n  const event = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKEvent(this.ndk, {\n    kind: _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKKind.NostrWalletConnectReq,\n    tags: [[\"p\", this.walletService.pubkey]],\n    content: JSON.stringify({ method, params })\n  });\n  await event.encrypt(this.walletService, this.signer, \"nip04\");\n  await event.sign(this.signer);\n  const responsePromise = new Promise((resolve, reject) => {\n    waitForResponse.call(this, event).then(resolve).catch(reject);\n  });\n  if (this.timeout) {\n    const timeoutPromise = new Promise(\n      (_, reject) => setTimeout(() => {\n        this.emit(\"timeout\", method);\n        reject(new Error(`Request timed out after ${this.timeout}ms`));\n      }, this.timeout)\n    );\n    return Promise.race([responsePromise, timeoutPromise]);\n  }\n  return responsePromise;\n}\n\n// src/wallets/nwc/index.ts\nvar d3 = debug__WEBPACK_IMPORTED_MODULE_3__(\"ndk-wallet:nwc\");\nvar NDKNWCWallet = class extends NDKWallet {\n  get type() {\n    return \"nwc\";\n  }\n  status = \"initial\" /* INITIAL */;\n  walletId = \"nwc\";\n  pairingCode;\n  walletService;\n  relaySet;\n  signer;\n  _balance;\n  cachedInfo;\n  pool;\n  timeout;\n  /**\n   *\n   * @param ndk\n   * @param timeout A timeeout to use for all operations.\n   */\n  constructor(ndk, {\n    timeout,\n    pairingCode,\n    pubkey,\n    relayUrls,\n    secret\n  }) {\n    super(ndk);\n    if (pairingCode) {\n      const u = new URL(pairingCode);\n      pubkey = u.host ?? u.pathname;\n      relayUrls = u.searchParams.getAll(\"relay\");\n      secret = u.searchParams.get(\"secret\");\n      this.pairingCode = pairingCode;\n    }\n    if (!pubkey || !relayUrls || !secret) throw new Error(\"Incomplete initialization parameters\");\n    this.timeout = timeout;\n    this.walletService = this.ndk.getUser({ pubkey });\n    this.pool = this.getPool(relayUrls);\n    this.relaySet = _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKRelaySet.fromRelayUrls(relayUrls, this.ndk, true, this.pool);\n    this.signer = new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKPrivateKeySigner(secret);\n    this.pool.on(\"connect\", () => {\n      this.status = \"ready\" /* READY */;\n      this.emit(\"ready\");\n    });\n    this.pool.on(\"relay:disconnect\", () => this.status = \"loading\" /* LOADING */);\n    this.pool.connect();\n    if (this.pool.connectedRelays().length > 0) {\n      this.status = \"ready\" /* READY */;\n      this.emit(\"ready\");\n    }\n  }\n  getPool(relayUrls) {\n    for (const pool of this.ndk.pools) if (pool.name === \"NWC\") return pool;\n    return new _nostr_dev_kit_ndk__WEBPACK_IMPORTED_MODULE_0__.NDKPool(relayUrls, [], this.ndk, { name: \"NWC\" });\n  }\n  async lnPay(payment) {\n    if (!this.signer) throw new Error(\"Wallet not initialized\");\n    d3(\"lnPay\", payment.pr);\n    const res = await this.req(\"pay_invoice\", { invoice: payment.pr });\n    d3(\"lnPay res\", res);\n    if (res.result) {\n      return {\n        preimage: res.result.preimage\n      };\n    }\n    this.updateBalance();\n    throw new Error(res.error?.message || \"Payment failed\");\n  }\n  /**\n   * Pay by minting tokens.\n   *\n   * This creates a quote on a mint, pays it using NWC and then mints the tokens.\n   *\n   * @param payment - The payment to pay\n   * @param onLnPayment - A callback that is called when an LN payment will be processed\n   * @returns The payment confirmation\n   */\n  async cashuPay(payment, onLnInvoice, onLnPayment) {\n    if (!payment.mints) throw new Error(\"No mints provided\");\n    for (const mint of payment.mints) {\n      let amount = payment.amount;\n      amount = amount / 1e3;\n      const wallet = new _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CashuWallet(new _cashu_cashu_ts__WEBPACK_IMPORTED_MODULE_2__.CashuMint(mint), { unit: \"sat\" });\n      let quote;\n      try {\n        quote = await wallet.createMintQuote(amount);\n        d3(\"cashuPay quote\", quote);\n        onLnInvoice?.(quote.request);\n      } catch (e) {\n        console.error(\"error creating mint quote\", e);\n        throw e;\n      }\n      if (!quote) throw new Error(\"Didnt receive a mint quote\");\n      try {\n        const res = await this.req(\"pay_invoice\", { invoice: quote.request });\n        if (res.result?.preimage) {\n          onLnPayment?.(mint, res.result.preimage);\n        }\n        d3(\"cashuPay res\", res);\n      } catch (e) {\n        const message = e?.error?.message || e?.message || \"unknown error\";\n        console.error(\"error paying invoice\", e, { message });\n        throw new Error(message);\n      }\n      this.updateBalance();\n      return mintProofs(wallet, quote, amount, mint, payment.p2pk);\n    }\n  }\n  /**\n   * Redeem a set of nutzaps into an NWC wallet.\n   *\n   * This function gets an invoice from the NWC wallet until the total amount of the nutzaps is enough to pay for the invoice\n   * when accounting for fees.\n   *\n   * @param cashuWallet - The cashu wallet to redeem the nutzaps into\n   * @param nutzaps - The nutzaps to redeem\n   * @param proofs - The proofs to redeem\n   * @param mint - The mint to redeem the nutzaps into\n   * @param privkey - The private key needed to redeem p2pk proofs.\n   */\n  redeemNutzaps = redeemNutzaps.bind(this);\n  /**\n   * Fetch the balance of this wallet\n   */\n  async updateBalance() {\n    const res = await this.req(\"get_balance\", {});\n    if (!res.result) throw new Error(\"Failed to get balance\");\n    if (res.error) throw new Error(res.error.message);\n    this._balance = {\n      amount: res.result?.balance ?? 0\n    };\n    this._balance.amount /= 1e3;\n    this.emit(\"balance_updated\");\n  }\n  /**\n   * Get the balance of this wallet\n   */\n  get balance() {\n    return this._balance;\n  }\n  req = sendReq.bind(this);\n  async getInfo(refetch = false) {\n    if (refetch) {\n      this.cachedInfo = void 0;\n    }\n    if (this.cachedInfo) return this.cachedInfo;\n    const res = await this.req(\"get_info\", {});\n    d3(\"info\", res);\n    if (!res.result) throw new Error(\"Failed to get info\");\n    if (res.error) throw new Error(res.error.message);\n    this.cachedInfo = res.result;\n    if (res.result.alias) this.walletId = res.result.alias;\n    return res.result;\n  }\n  async listTransactions() {\n    const res = await this.req(\"list_transactions\", {});\n    if (!res.result) throw new Error(\"Failed to list transactions\");\n    return res.result;\n  }\n  async makeInvoice(amount, description) {\n    const res = await this.req(\"make_invoice\", { amount, description });\n    if (!res.result) throw new Error(\"Failed to make invoice\");\n    return res.result;\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5vc3RyLWRldi1raXQvbmRrLXdhbGxldC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBUTRCO0FBQ3lCO0FBQ0M7O0FBRXREO0FBQ2tEO0FBQ21EOztBQUVyRztBQUNxQzs7QUFFckM7QUFDeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsS0FBSyxHQUFHLEtBQUssR0FBRyxNQUFNO0FBQ3BDO0FBQ0EsWUFBWSxLQUFLLEdBQUcsS0FBSztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsSUFBSTtBQUNOO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixzREFBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0RBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHdEQUFXLEtBQUssc0RBQVM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsNERBQTRELEtBQUs7QUFDakU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx1QkFBdUI7QUFDeEIsOEJBQThCLCtDQUFZO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ3NEO0FBQ3RELDJDQUEyQywrQ0FBYTtBQUN4RDtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNnQztBQUNzQjs7QUFFdEQ7QUFDNkM7QUFDQzs7QUFFOUM7QUFDOEQ7QUFDOUQ7QUFDQSxrQkFBa0IsNERBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw0REFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDREQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaURBQWlELHdEQUFRO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdURBQU87QUFDdkI7QUFDQTtBQUNBLGtCQUFrQix1REFBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUs0QjtBQUM1QixnRkFBZ0YsVUFBVSxJQUFJO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdFQUFnQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyx1REFBTztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLDJCQUEyQjtBQUNsRyxzQkFBc0IsZ0VBQWdCO0FBQ3RDLGlCQUFpQixzRUFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLGtDQUFXO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsK0NBQWE7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsaUJBQWlCO0FBQ2hGO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ3lEOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2REFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLEdBQUcsdURBQVE7QUFDWCxHQUFHLHVEQUFRO0FBQ1gsR0FBRyx1REFBUTtBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNpRDtBQUNoQjtBQUNqQyxTQUFTLGtDQUFZO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw0RUFBNEU7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHlDQUF5QyxrREFBa0Q7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsa0JBQWtCLDJEQUFjO0FBQ2hDO0FBQ0EsTUFBTSxtQkFBbUIsMkRBQWM7QUFDdkM7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdURBQXVELDJCQUEyQjtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsZUFBZSxJQUFJO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLHdEQUF3RCxLQUFLLElBQUksTUFBTTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLDJEQUFjO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ2tEOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxRQUFRO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsTUFBTTtBQUN0RjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsWUFBWSxrRUFBa0U7QUFDOUU7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsVUFBVSw0Q0FBNEM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsb0JBQW9CLEtBQUssT0FBTztBQUN6RywyREFBMkQsUUFBUTtBQUNuRTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGVBQWU7QUFDekI7QUFDQTtBQUNBLGNBQWMsY0FBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixnRUFBWTtBQUN6QztBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCLElBQUkscUJBQXFCO0FBQ3JFO0FBQ0Esd0NBQXdDLGVBQWU7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtQkFBbUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixpQkFBaUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osbUNBQW1DLFFBQVE7QUFDM0M7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0EsUUFBUSxzQ0FBc0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxrQ0FBa0Msc0JBQXNCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsY0FBYztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsb0JBQW9CLHNEQUFzRCxPQUFPO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsMEJBQTBCO0FBQy9EO0FBQ0E7QUFDQSxtQ0FBbUMsMEJBQTBCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG1DQUFtQztBQUNoRTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxrQkFBa0I7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBSzRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtCQUFrQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsd0RBQVM7QUFDckMsWUFBWSx1REFBUTtBQUNwQjtBQUNBLGNBQWMsdURBQVE7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVEQUFRO0FBQzdCLHFCQUFxQix1REFBUTtBQUM3QixxQkFBcUIsdURBQVE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsWUFBWTtBQUN4QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSx1QkFBdUIsNkRBQWM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscUJBQXFCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksSUFBSTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdURBQVE7QUFDeEIsa0JBQWtCLHVEQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxNQUFNO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxzQkFBc0IsMkJBQTJCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix3REFBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFFBQVEsdURBQVEsaUNBQWlDO0FBQ3pELFFBQVEsUUFBUSx1REFBUSxpQ0FBaUM7QUFDekQ7QUFDQSxnQkFBZ0IsdURBQVE7QUFDeEI7QUFDQSxlQUFlLHVEQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix5QkFBeUIsV0FBVyxxQkFBcUI7QUFDbkYsNkNBQTZDLHFDQUFxQztBQUNsRjtBQUNBO0FBQ0EsbUJBQW1CLFlBQVk7QUFDL0I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1FQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1FQUFtQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixxQ0FBcUMsUUFBUTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3REFBUztBQUMvQjtBQUNBLFlBQVksdURBQVE7QUFDcEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTyxFQUFFLGdFQUFlO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx5REFBeUQsYUFBYTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDJCQUEyQjtBQUNyRTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxNQUFNO0FBQ3hELDhDQUE4QyxjQUFjLElBQUksdUJBQXVCO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx3REFBd0QsY0FBYztBQUN0RTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvQkFBb0I7QUFDN0MsMkJBQTJCLG9CQUFvQjtBQUMvQztBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MscUJBQXFCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxxQkFBcUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELHFCQUFxQjtBQUNoRjtBQUNBO0FBQ0E7QUFDQSwrREFBK0Qsd0RBQVM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsdURBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUk0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix5RUFBeUI7QUFDM0M7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsdUNBQXVDLHlEQUFTO0FBQ2hEOztBQUVBO0FBQ3lFO0FBQ3pFO0FBQ0E7QUFDQSwrQ0FBK0MsS0FBSyxHQUFHLEtBQUs7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNkRBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNEVBQXdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDb0U7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDJEQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx5QkFBeUIsMkRBQWU7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQywrQ0FBYTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixpQkFBaUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsK0RBQWU7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQiwwQkFBMEIsbUVBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxRQUFRLHVEQUFRLGtEQUFrRDtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG1FQUFvQjtBQUNqRDtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtQkFBbUI7QUFDakQsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixtQkFBbUI7QUFDbEQ7QUFDQSw0QkFBNEIsUUFBUSx1REFBUTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixjQUFjO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxjQUFjO0FBQ25ELFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELHVCQUF1QjtBQUM3RSxNQUFNO0FBQ047QUFDQTtBQUNBLDJCQUEyQiw4QkFBOEI7QUFDekQ7QUFDQTtBQUNBLGtCQUFrQix5RUFBMEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsUUFBUSwrREFBZSxnQkFBZ0I7QUFDakY7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFFBQVEsK0RBQWUsa0JBQWtCO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLHFCQUFxQix1REFBUTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0JBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQywrREFBZTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZ0NBQWdDLDJCQUEyQjtBQUMzRDtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFtQixJQUFJLGtCQUFrQixjQUFjLE9BQU8sRUFBRSxhQUFhO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHlEQUFVO0FBQ25DO0FBQ0E7QUFDQSxnQkFBZ0IsK0RBQWU7QUFDL0I7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsUUFBUSwrREFBZSxrQkFBa0I7QUFDbkY7QUFDQTtBQUNBLDBCQUEwQiw2REFBVTtBQUNwQztBQUNBLDRCQUE0Qiw0RUFBeUI7QUFDckQ7QUFDQTtBQUNBLG9CQUFvQiwrREFBZTtBQUNuQztBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw2REFBVTtBQUNyQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsK0RBQWU7QUFDbkM7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDRFQUF5QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsK0RBQWU7QUFDbkM7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsK0RBQWU7QUFDbkM7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsK0RBQWU7QUFDakM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwrREFBZTtBQUNqQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwrREFBZTtBQUNqQyxtRkFBbUYsZUFBZTtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw2REFBVTtBQUNsQztBQUNBLHdCQUF3Qiw0RUFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwrREFBZTtBQUNqQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxRQUFRLCtEQUFlLGFBQWE7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLCtEQUFlO0FBQ2pDO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLCtEQUFlO0FBQ25DO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywrREFBZTtBQUN4Qix5QkFBeUIsK0RBQWU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtEQUFlLFFBQVEsK0RBQWU7QUFDL0MsU0FBUywrREFBZSxrQkFBa0IsK0RBQWU7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMEJBQTBCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsWUFBWSxPQUFPLHNCQUFzQjtBQUN4RTtBQUNBO0FBQ0EsMENBQTBDLFdBQVc7QUFDckQsUUFBUTtBQUNSLHdDQUF3QyxXQUFXO0FBQ25ELHdEQUF3RCxXQUFXO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUN5RDtBQUN6RDtBQUNBO0FBQ0EsTUFBTSxRQUFRLHVEQUFRLDZEQUE2RDtBQUNuRixNQUFNLFFBQVEsdURBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdURBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdURBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUMyRTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw4QkFBOEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLG1CQUFtQixnRUFBZ0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFRO0FBQ3BCO0FBQ0EsR0FBRztBQUNIO0FBQ0EsU0FBUyxnRUFBZ0I7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsUUFBUSx1REFBUSw2Q0FBNkM7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixJQUFJO0FBQ0o7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ3dDOztBQUV4QztBQUN1RjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7QUFDMUIsVUFBVSxlQUFlO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix3REFBWSxLQUFLLHNEQUFVLFdBQVcsTUFBTTtBQUN0RTtBQUNBLGVBQWU7QUFDZixLQUFLO0FBQ0wsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLG1CQUFtQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix3REFBWSxLQUFLLHNEQUFVLFVBQVUsTUFBTTtBQUNsRTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNEQUFlO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUN1RjtBQUszRDtBQUNLOztBQUVqQztBQUNxRTtBQUNyRSxpREFBaUQsMkJBQTJCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsU0FBUztBQUM5RTtBQUNBO0FBQ0EsaUVBQWlFLGNBQWM7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLGtCQUFrQiw0QkFBNEI7QUFDOUM7QUFDQTtBQUNBLHdCQUF3Qiw2QkFBNkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNkRBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNnRjs7QUFFaEY7QUFDeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdURBQVE7QUFDeEI7QUFDQTtBQUNBLE9BQU87QUFDUCxRQUFRLG1DQUFtQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3REFBUztBQUM3QixVQUFVLHVEQUFRO0FBQ2xCO0FBQ0EsOEJBQThCLGdCQUFnQjtBQUM5QyxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsYUFBYTtBQUNqRSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVMsa0NBQVk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBLG9CQUFvQiwyREFBVztBQUMvQixzQkFBc0IsbUVBQW9CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHVEQUFPLDRCQUE0QixhQUFhO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELHFCQUFxQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHdEQUFZLEtBQUssc0RBQVUsVUFBVSxhQUFhO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCx3QkFBd0I7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxtREFBbUQsU0FBUztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxxQkFBcUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFvQkUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wYWJsb2Zlcm5hbmRlei90ZXN0MTIzL1RFTkVYLXBma21jOS9tYWluL25vZGVfbW9kdWxlcy9Abm9zdHItZGV2LWtpdC9uZGstd2FsbGV0L2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL251dHphcC1tb25pdG9yL2luZGV4LnRzXG5pbXBvcnQge1xuICBOREtLaW5kIGFzIE5ES0tpbmQ1LFxuICBOREtOdXR6YXAgYXMgTkRLTnV0emFwMixcbiAgTkRLUHJpdmF0ZUtleVNpZ25lciBhcyBOREtQcml2YXRlS2V5U2lnbmVyMixcbiAgTkRLU3Vic2NyaXB0aW9uQ2FjaGVVc2FnZSBhcyBOREtTdWJzY3JpcHRpb25DYWNoZVVzYWdlMixcbiAgY2FzaHVQdWJrZXlUb05vc3RyUHVia2V5IGFzIGNhc2h1UHVia2V5VG9Ob3N0clB1YmtleTIsXG4gIHByb29mUDJwayBhcyBwcm9vZlAycGsyXG59IGZyb20gXCJAbm9zdHItZGV2LWtpdC9uZGtcIjtcbmltcG9ydCB7IE5ka051dHphcFN0YXR1cyB9IGZyb20gXCJAbm9zdHItZGV2LWtpdC9uZGtcIjtcbmltcG9ydCB7IEV2ZW50RW1pdHRlciBhcyBFdmVudEVtaXR0ZXI0IH0gZnJvbSBcInRzZWVwXCI7XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L3dhbGxldC9pbmRleC50c1xuaW1wb3J0IHsgZ2V0RGVjb2RlZFRva2VuIH0gZnJvbSBcIkBjYXNodS9jYXNodS10c1wiO1xuaW1wb3J0IHsgTkRLRXZlbnQgYXMgTkRLRXZlbnQzLCBOREtLaW5kIGFzIE5ES0tpbmQ0LCBOREtQcml2YXRlS2V5U2lnbmVyIH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuXG4vLyBzcmMvd2FsbGV0cy9pbmRleC50c1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcInRzZWVwXCI7XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L21pbnQudHNcbmltcG9ydCB7IENhc2h1TWludCwgQ2FzaHVXYWxsZXQgfSBmcm9tIFwiQGNhc2h1L2Nhc2h1LXRzXCI7XG52YXIgbWludFdhbGxldHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xudmFyIG1pbnRXYWxsZXRQcm9taXNlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG5mdW5jdGlvbiBtaW50S2V5KG1pbnQsIHVuaXQsIHBrKSB7XG4gIGlmICh1bml0ID09PSBcInNhdHNcIikge1xuICAgIHVuaXQgPSBcInNhdFwiO1xuICB9XG4gIGlmIChwaykge1xuICAgIGNvbnN0IHBrU3RyID0gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHBrKTtcbiAgICByZXR1cm4gYCR7bWludH0tJHt1bml0fS0ke3BrU3RyfWA7XG4gIH1cbiAgcmV0dXJuIGAke21pbnR9LSR7dW5pdH1gO1xufVxuYXN5bmMgZnVuY3Rpb24gd2FsbGV0Rm9yTWludChtaW50LCB7XG4gIHBrLFxuICB0aW1lb3V0ID0gNWUzLFxuICBtaW50SW5mbyxcbiAgbWludEtleXMsXG4gIG9uTWludEluZm9OZWVkZWQsXG4gIG9uTWludEluZm9Mb2FkZWQsXG4gIG9uTWludEtleXNOZWVkZWQsXG4gIG9uTWludEtleXNMb2FkZWRcbn0gPSB7fSkge1xuICBtaW50SW5mbyA/Pz0gYXdhaXQgb25NaW50SW5mb05lZWRlZD8uKG1pbnQpO1xuICBtaW50S2V5cyA/Pz0gYXdhaXQgb25NaW50S2V5c05lZWRlZD8uKG1pbnQpO1xuICBpZiAoIW1pbnRJbmZvICYmIG9uTWludEluZm9Mb2FkZWQpIHtcbiAgICBtaW50SW5mbyA9IGF3YWl0IENhc2h1TWludC5nZXRJbmZvKG1pbnQpO1xuICAgIG9uTWludEluZm9Mb2FkZWQ/LihtaW50LCBtaW50SW5mbyk7XG4gIH1cbiAgY29uc3QgdW5pdCA9IFwic2F0XCI7XG4gIGNvbnN0IGtleSA9IG1pbnRLZXkobWludCwgdW5pdCwgcGspO1xuICBpZiAobWludFdhbGxldHMuaGFzKGtleSkpIHtcbiAgICByZXR1cm4gbWludFdhbGxldHMuZ2V0KGtleSk7XG4gIH1cbiAgaWYgKG1pbnRXYWxsZXRQcm9taXNlcy5oYXMoa2V5KSkge1xuICAgIHJldHVybiBtaW50V2FsbGV0UHJvbWlzZXMuZ2V0KGtleSk7XG4gIH1cbiAgaWYgKCFtaW50SW5mbykge1xuICAgIGlmIChvbk1pbnRJbmZvTmVlZGVkKSB7XG4gICAgICBtaW50SW5mbyA9IGF3YWl0IG9uTWludEluZm9OZWVkZWQobWludCk7XG4gICAgfVxuICAgIGlmICghbWludEluZm8gJiYgb25NaW50SW5mb0xvYWRlZCkge1xuICAgICAgbWludEluZm8gPSBhd2FpdCBDYXNodU1pbnQuZ2V0SW5mbyhtaW50KTtcbiAgICAgIG9uTWludEluZm9Mb2FkZWQobWludCwgbWludEluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAoIW1pbnRLZXlzICYmIG9uTWludEtleXNOZWVkZWQpIHtcbiAgICBtaW50S2V5cyA9IGF3YWl0IG9uTWludEtleXNOZWVkZWQobWludCk7XG4gIH1cbiAgY29uc3Qgd2FsbGV0ID0gbmV3IENhc2h1V2FsbGV0KG5ldyBDYXNodU1pbnQobWludCksIHtcbiAgICB1bml0LFxuICAgIGJpcDM5c2VlZDogcGssXG4gICAgbWludEluZm8sXG4gICAga2V5czogbWludEtleXNcbiAgfSk7XG4gIGNvbnN0IGxvYWRQcm9taXNlID0gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcmVqZWN0VGltZW91dCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICByZWplY3RUaW1lb3V0KG5ldyBFcnJvcihcInRpbWVvdXQgbG9hZGluZyBtaW50XCIpKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICB9KTtcbiAgICAgIGF3YWl0IFByb21pc2UucmFjZShbd2FsbGV0LmxvYWRNaW50KCksIHRpbWVvdXRQcm9taXNlXSk7XG4gICAgICBtaW50V2FsbGV0cy5zZXQoa2V5LCB3YWxsZXQpO1xuICAgICAgbWludFdhbGxldFByb21pc2VzLmRlbGV0ZShrZXkpO1xuICAgICAgaWYgKHdhbGxldC5rZXlzKSB7XG4gICAgICAgIG9uTWludEtleXNMb2FkZWQ/LihtaW50LCB3YWxsZXQua2V5cyk7XG4gICAgICB9XG4gICAgICByZXNvbHZlKHdhbGxldCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIltXQUxMRVRdIGVycm9yIGxvYWRpbmcgbWludFwiLCBtaW50LCBlLm1lc3NhZ2UpO1xuICAgICAgbWludFdhbGxldFByb21pc2VzLmRlbGV0ZShrZXkpO1xuICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICB9XG4gIH0pO1xuICBtaW50V2FsbGV0UHJvbWlzZXMuc2V0KGtleSwgbG9hZFByb21pc2UpO1xuICByZXR1cm4gbG9hZFByb21pc2U7XG59XG5cbi8vIHNyYy93YWxsZXRzL21pbnQudHNcbmFzeW5jIGZ1bmN0aW9uIGdldENhc2h1V2FsbGV0KG1pbnQpIHtcbiAgaWYgKHRoaXMuY2FzaHVXYWxsZXRzLmhhcyhtaW50KSkgcmV0dXJuIHRoaXMuY2FzaHVXYWxsZXRzLmdldChtaW50KTtcbiAgY29uc3QgdyA9IGF3YWl0IHdhbGxldEZvck1pbnQobWludCwge1xuICAgIG9uTWludEluZm9OZWVkZWQ6IHRoaXMub25NaW50SW5mb05lZWRlZCxcbiAgICBvbk1pbnRJbmZvTG9hZGVkOiB0aGlzLm9uTWludEluZm9Mb2FkZWQsXG4gICAgb25NaW50S2V5c05lZWRlZDogdGhpcy5vbk1pbnRLZXlzTmVlZGVkLFxuICAgIG9uTWludEtleXNMb2FkZWQ6IHRoaXMub25NaW50S2V5c0xvYWRlZFxuICB9KTtcbiAgaWYgKCF3KSB0aHJvdyBuZXcgRXJyb3IoYHVuYWJsZSB0byBsb2FkIHdhbGxldCBmb3IgbWludCAke21pbnR9YCk7XG4gIHRoaXMuY2FzaHVXYWxsZXRzLnNldChtaW50LCB3KTtcbiAgcmV0dXJuIHc7XG59XG5cbi8vIHNyYy93YWxsZXRzL2luZGV4LnRzXG52YXIgTkRLV2FsbGV0U3RhdHVzID0gLyogQF9fUFVSRV9fICovICgoTkRLV2FsbGV0U3RhdHVzMikgPT4ge1xuICBOREtXYWxsZXRTdGF0dXMyW1wiSU5JVElBTFwiXSA9IFwiaW5pdGlhbFwiO1xuICBOREtXYWxsZXRTdGF0dXMyW1wiTE9BRElOR1wiXSA9IFwibG9hZGluZ1wiO1xuICBOREtXYWxsZXRTdGF0dXMyW1wiUkVBRFlcIl0gPSBcInJlYWR5XCI7XG4gIE5ES1dhbGxldFN0YXR1czJbXCJGQUlMRURcIl0gPSBcImZhaWxlZFwiO1xuICByZXR1cm4gTkRLV2FsbGV0U3RhdHVzMjtcbn0pKE5ES1dhbGxldFN0YXR1cyB8fCB7fSk7XG52YXIgTkRLV2FsbGV0ID0gY2xhc3MgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjYXNodVdhbGxldHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBvbk1pbnRJbmZvTmVlZGVkO1xuICBvbk1pbnRJbmZvTG9hZGVkO1xuICBvbk1pbnRLZXlzTmVlZGVkO1xuICBvbk1pbnRLZXlzTG9hZGVkO1xuICBnZXRDYXNodVdhbGxldCA9IGdldENhc2h1V2FsbGV0LmJpbmQodGhpcyk7XG4gIG5kaztcbiAgY29uc3RydWN0b3IobmRrKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm5kayA9IG5kaztcbiAgfVxuICBzdGF0dXMgPSBcImluaXRpYWxcIiAvKiBJTklUSUFMICovO1xuICBnZXQgdHlwZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gIH1cbiAgLyoqXG4gICAqIEFuIElEIG9mIHRoaXMgd2FsbGV0XG4gICAqL1xuICB3YWxsZXRJZCA9IFwidW5rbm93blwiO1xuICAvKipcbiAgICogR2V0IHRoZSBiYWxhbmNlIG9mIHRoaXMgd2FsbGV0XG4gICAqL1xuICBnZXQgYmFsYW5jZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gIH1cbiAgLyoqXG4gICAqIFJlZGVlbSBhIHNldCBvZiBudXR6YXBzIGludG8gYW4gTldDIHdhbGxldC5cbiAgICpcbiAgICogVGhpcyBmdW5jdGlvbiBnZXRzIGFuIGludm9pY2UgZnJvbSB0aGUgTldDIHdhbGxldCB1bnRpbCB0aGUgdG90YWwgYW1vdW50IG9mIHRoZSBudXR6YXBzIGlzIGVub3VnaCB0byBwYXkgZm9yIHRoZSBpbnZvaWNlXG4gICAqIHdoZW4gYWNjb3VudGluZyBmb3IgZmVlcy5cbiAgICpcbiAgICogQHBhcmFtIGNhc2h1V2FsbGV0IC0gVGhlIGNhc2h1IHdhbGxldCB0byByZWRlZW0gdGhlIG51dHphcHMgaW50b1xuICAgKiBAcGFyYW0gbnV0emFwSWRzIC0gVGhlIElEcyBvZiB0aGUgbnV0emFwcyB0byByZWRlZW1cbiAgICogQHBhcmFtIHByb29mcyAtIFRoZSBwcm9vZnMgdG8gcmVkZWVtXG4gICAqIEBwYXJhbSBwcml2a2V5IC0gVGhlIHByaXZhdGUga2V5IG5lZWRlZCB0byByZWRlZW0gcDJwayBwcm9vZnMuXG4gICAqL1xuICByZWRlZW1OdXR6YXBzKF9udXR6YXBzLCBfcHJpdmtleSwgX29wdHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L2RlcG9zaXQtbW9uaXRvci50c1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIGFzIEV2ZW50RW1pdHRlcjIgfSBmcm9tIFwidHNlZXBcIjtcbnZhciBOREtDYXNodURlcG9zaXRNb25pdG9yID0gY2xhc3MgZXh0ZW5kcyBFdmVudEVtaXR0ZXIyIHtcbiAgZGVwb3NpdHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBhZGREZXBvc2l0KGRlcG9zaXQpIHtcbiAgICBjb25zdCB7IHF1b3RlSWQgfSA9IGRlcG9zaXQ7XG4gICAgaWYgKCFxdW90ZUlkKSB0aHJvdyBuZXcgRXJyb3IoXCJkZXBvc2l0IGhhcyBubyBxdW90ZSBJRFwiKTtcbiAgICBpZiAodGhpcy5kZXBvc2l0cy5oYXMocXVvdGVJZCkpIHJldHVybiBmYWxzZTtcbiAgICBkZXBvc2l0Lm9uY2UoXCJzdWNjZXNzXCIsIChfdG9rZW4pID0+IHtcbiAgICAgIHRoaXMucmVtb3ZlRGVwb3NpdChxdW90ZUlkKTtcbiAgICB9KTtcbiAgICB0aGlzLmRlcG9zaXRzLnNldChxdW90ZUlkLCBkZXBvc2l0KTtcbiAgICB0aGlzLmVtaXQoXCJjaGFuZ2VcIik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmVtb3ZlRGVwb3NpdChxdW90ZUlkKSB7XG4gICAgdGhpcy5kZXBvc2l0cy5kZWxldGUocXVvdGVJZCk7XG4gICAgdGhpcy5lbWl0KFwiY2hhbmdlXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvd2FsbGV0cy9jYXNodS9kZXBvc2l0LnRzXG5pbXBvcnQgY3JlYXRlRGVidWcgZnJvbSBcImRlYnVnXCI7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgYXMgRXZlbnRFbWl0dGVyMyB9IGZyb20gXCJ0c2VlcFwiO1xuXG4vLyBzcmMvd2FsbGV0cy9jYXNodS9xdW90ZS50c1xuaW1wb3J0IHsgTkRLS2luZCB9IGZyb20gXCJAbm9zdHItZGV2LWtpdC9uZGtcIjtcbmltcG9ydCB7IE5ES0V2ZW50IH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuXG4vLyBzcmMvdXRpbHMvbG4udHNcbmltcG9ydCB7IGRlY29kZSBhcyBkZWNvZGVCb2x0MTEgfSBmcm9tIFwibGlnaHQtYm9sdDExLWRlY29kZXJcIjtcbmZ1bmN0aW9uIGdldEJvbHQxMUV4cGlyZXNBdChib2x0MTEpIHtcbiAgY29uc3QgZGVjb2RlZCA9IGRlY29kZUJvbHQxMShib2x0MTEpO1xuICBjb25zdCBleHBpcnkgPSBkZWNvZGVkLmV4cGlyeTtcbiAgY29uc3QgdGltZXN0YW1wID0gZGVjb2RlZC5zZWN0aW9ucy5maW5kKChzZWN0aW9uKSA9PiBzZWN0aW9uLm5hbWUgPT09IFwidGltZXN0YW1wXCIpLnZhbHVlO1xuICBpZiAodHlwZW9mIGV4cGlyeSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgdGltZXN0YW1wID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIGV4cGlyeSArIHRpbWVzdGFtcDtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gZ2V0Qm9sdDExQW1vdW50KGJvbHQxMSkge1xuICBjb25zdCBkZWNvZGVkID0gZGVjb2RlQm9sdDExKGJvbHQxMSk7XG4gIGNvbnN0IHNlY3Rpb24gPSBkZWNvZGVkLnNlY3Rpb25zLmZpbmQoKHNlY3Rpb24yKSA9PiBzZWN0aW9uMi5uYW1lID09PSBcImFtb3VudFwiKTtcbiAgY29uc3QgdmFsID0gc2VjdGlvbj8udmFsdWU7XG4gIHJldHVybiBOdW1iZXIodmFsKTtcbn1cbmZ1bmN0aW9uIGdldEJvbHQxMURlc2NyaXB0aW9uKGJvbHQxMSkge1xuICBjb25zdCBkZWNvZGVkID0gZGVjb2RlQm9sdDExKGJvbHQxMSk7XG4gIGNvbnN0IHNlY3Rpb24gPSBkZWNvZGVkLnNlY3Rpb25zLmZpbmQoKHNlY3Rpb24yKSA9PiBzZWN0aW9uMi5uYW1lID09PSBcImRlc2NyaXB0aW9uXCIpO1xuICBjb25zdCB2YWwgPSBzZWN0aW9uPy52YWx1ZTtcbiAgcmV0dXJuIHZhbDtcbn1cblxuLy8gc3JjL3dhbGxldHMvY2FzaHUvcXVvdGUudHNcbnZhciBOREtDYXNodVF1b3RlID0gY2xhc3MgX05ES0Nhc2h1UXVvdGUgZXh0ZW5kcyBOREtFdmVudCB7XG4gIHF1b3RlSWQ7XG4gIG1pbnQ7XG4gIGFtb3VudDtcbiAgdW5pdDtcbiAgX3dhbGxldDtcbiAgc3RhdGljIGtpbmQgPSBOREtLaW5kLkNhc2h1UXVvdGU7XG4gIGNvbnN0cnVjdG9yKG5kaywgZXZlbnQpIHtcbiAgICBzdXBlcihuZGssIGV2ZW50KTtcbiAgICB0aGlzLmtpbmQgPz89IE5ES0tpbmQuQ2FzaHVRdW90ZTtcbiAgfVxuICBzdGF0aWMgYXN5bmMgZnJvbShldmVudCkge1xuICAgIGNvbnN0IHF1b3RlID0gbmV3IF9OREtDYXNodVF1b3RlKGV2ZW50Lm5kaywgZXZlbnQpO1xuICAgIGNvbnN0IG9yaWdpbmFsID0gZXZlbnQ7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHF1b3RlLmRlY3J5cHQoKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHF1b3RlLmNvbnRlbnQgPSBvcmlnaW5hbC5jb250ZW50O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgY29udGVudCA9IEpTT04ucGFyc2UocXVvdGUuY29udGVudCk7XG4gICAgICBxdW90ZS5xdW90ZUlkID0gY29udGVudC5xdW90ZUlkO1xuICAgICAgcXVvdGUubWludCA9IGNvbnRlbnQubWludDtcbiAgICAgIHF1b3RlLmFtb3VudCA9IGNvbnRlbnQuYW1vdW50O1xuICAgICAgcXVvdGUudW5pdCA9IGNvbnRlbnQudW5pdDtcbiAgICB9IGNhdGNoIChfZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gcXVvdGU7XG4gIH1cbiAgc2V0IHdhbGxldCh3YWxsZXQpIHtcbiAgICB0aGlzLl93YWxsZXQgPSB3YWxsZXQ7XG4gIH1cbiAgc2V0IGludm9pY2UoaW52b2ljZSkge1xuICAgIGNvbnN0IGJvbHQxMUV4cGlyeSA9IGdldEJvbHQxMUV4cGlyZXNBdChpbnZvaWNlKTtcbiAgICBpZiAoYm9sdDExRXhwaXJ5KSB0aGlzLnRhZ3MucHVzaChbXCJleHBpcmF0aW9uXCIsIGJvbHQxMUV4cGlyeS50b1N0cmluZygpXSk7XG4gIH1cbiAgYXN5bmMgc2F2ZSgpIHtcbiAgICBpZiAoIXRoaXMubmRrKSB0aHJvdyBuZXcgRXJyb3IoXCJOREsgaXMgcmVxdWlyZWRcIik7XG4gICAgdGhpcy5jb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgcXVvdGVJZDogdGhpcy5xdW90ZUlkLFxuICAgICAgbWludDogdGhpcy5taW50LFxuICAgICAgYW1vdW50OiB0aGlzLmFtb3VudCxcbiAgICAgIHVuaXQ6IHRoaXMudW5pdFxuICAgIH0pO1xuICAgIGF3YWl0IHRoaXMuZW5jcnlwdCh0aGlzLm5kay5hY3RpdmVVc2VyLCB2b2lkIDAsIFwibmlwNDRcIik7XG4gICAgYXdhaXQgdGhpcy5zaWduKCk7XG4gICAgYXdhaXQgdGhpcy5wdWJsaXNoKHRoaXMuX3dhbGxldD8ucmVsYXlTZXQpO1xuICB9XG59O1xuXG4vLyBzcmMvd2FsbGV0cy9jYXNodS93YWxsZXQvdHhzLnRzXG5pbXBvcnQge1xuICBOREtDYXNodVdhbGxldFR4LFxuICBOREtVc2VyLFxuICBwcm9vZnNUb3RhbEJhbGFuY2Vcbn0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlT3V0VHhFdmVudChuZGssIHBheW1lbnRSZXF1ZXN0LCBwYXltZW50UmVzdWx0LCByZWxheVNldCwgeyBudXR6YXBzIH0gPSB7fSkge1xuICBsZXQgZGVzY3JpcHRpb24gPSBwYXltZW50UmVxdWVzdC5wYXltZW50RGVzY3JpcHRpb247XG4gIGxldCBhbW91bnQ7XG4gIGlmIChwYXltZW50UmVxdWVzdC5wcikge1xuICAgIGFtb3VudCA9IGdldEJvbHQxMUFtb3VudChwYXltZW50UmVxdWVzdC5wcik7XG4gICAgZGVzY3JpcHRpb24gPz89IGdldEJvbHQxMURlc2NyaXB0aW9uKHBheW1lbnRSZXF1ZXN0LnByKTtcbiAgICBpZiAoYW1vdW50KSBhbW91bnQgLz0gMWUzO1xuICB9IGVsc2Uge1xuICAgIGFtb3VudCA9IHBheW1lbnRSZXF1ZXN0LmFtb3VudDtcbiAgfVxuICBpZiAoIWFtb3VudCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJCVUc6IFVuYWJsZSB0byBmaW5kIGFtb3VudCBmb3IgcGF5bWVudFJlcXVlc3RcIiwgcGF5bWVudFJlcXVlc3QpO1xuICB9XG4gIGNvbnN0IHR4RXZlbnQgPSBuZXcgTkRLQ2FzaHVXYWxsZXRUeChuZGspO1xuICB0eEV2ZW50LmRpcmVjdGlvbiA9IFwib3V0XCI7XG4gIHR4RXZlbnQuYW1vdW50ID0gYW1vdW50ID8/IDA7XG4gIHR4RXZlbnQubWludCA9IHBheW1lbnRSZXN1bHQubWludDtcbiAgdHhFdmVudC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICBpZiAocGF5bWVudFJlc3VsdC5mZWUpIHR4RXZlbnQuZmVlID0gcGF5bWVudFJlc3VsdC5mZWU7XG4gIGlmIChwYXltZW50UmVxdWVzdC50YXJnZXQpIHtcbiAgICB0eEV2ZW50LnRhZ3MucHVzaChwYXltZW50UmVxdWVzdC50YXJnZXQudGFnUmVmZXJlbmNlKCkpO1xuICAgIGlmICghKHBheW1lbnRSZXF1ZXN0LnRhcmdldCBpbnN0YW5jZW9mIE5ES1VzZXIpKSB7XG4gICAgICB0eEV2ZW50LnRhZ3MucHVzaChbXCJwXCIsIHBheW1lbnRSZXF1ZXN0LnRhcmdldC5wdWJrZXldKTtcbiAgICB9XG4gIH1cbiAgaWYgKG51dHphcHMpIHtcbiAgICB0eEV2ZW50LmRlc2NyaXB0aW9uID8/PSBcIm51dHphcCByZWRlZW1cIjtcbiAgICBmb3IgKGNvbnN0IG51dHphcCBvZiBudXR6YXBzKSB0eEV2ZW50LmFkZFJlZGVlbWVkTnV0emFwKG51dHphcCk7XG4gIH1cbiAgaWYgKHBheW1lbnRSZXN1bHQuc3RhdGVVcGRhdGU/LmNyZWF0ZWQpIHR4RXZlbnQuY3JlYXRlZFRva2VucyA9IFtwYXltZW50UmVzdWx0LnN0YXRlVXBkYXRlLmNyZWF0ZWRdO1xuICBpZiAocGF5bWVudFJlc3VsdC5zdGF0ZVVwZGF0ZT8uZGVsZXRlZCkgdHhFdmVudC5kZXN0cm95ZWRUb2tlbklkcyA9IHBheW1lbnRSZXN1bHQuc3RhdGVVcGRhdGUuZGVsZXRlZDtcbiAgaWYgKHBheW1lbnRSZXN1bHQuc3RhdGVVcGRhdGU/LnJlc2VydmVkKSB0eEV2ZW50LnJlc2VydmVkVG9rZW5zID0gW3BheW1lbnRSZXN1bHQuc3RhdGVVcGRhdGUucmVzZXJ2ZWRdO1xuICBhd2FpdCB0eEV2ZW50LnNpZ24oKTtcbiAgdHhFdmVudC5wdWJsaXNoKHJlbGF5U2V0KTtcbiAgcmV0dXJuIHR4RXZlbnQ7XG59XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVJblR4RXZlbnQobmRrLCBwcm9vZnMsIG1pbnQsIHVwZGF0ZVN0YXRlUmVzdWx0LCB7IG51dHphcHMsIGZlZSwgZGVzY3JpcHRpb24gfSwgcmVsYXlTZXQpIHtcbiAgY29uc3QgdHhFdmVudCA9IG5ldyBOREtDYXNodVdhbGxldFR4KG5kayk7XG4gIGNvbnN0IGFtb3VudCA9IHByb29mc1RvdGFsQmFsYW5jZShwcm9vZnMpO1xuICB0eEV2ZW50LmRpcmVjdGlvbiA9IFwiaW5cIjtcbiAgdHhFdmVudC5hbW91bnQgPSBhbW91bnQ7XG4gIHR4RXZlbnQubWludCA9IG1pbnQ7XG4gIHR4RXZlbnQuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgaWYgKHVwZGF0ZVN0YXRlUmVzdWx0LmNyZWF0ZWQpIHR4RXZlbnQuY3JlYXRlZFRva2VucyA9IFt1cGRhdGVTdGF0ZVJlc3VsdC5jcmVhdGVkXTtcbiAgaWYgKHVwZGF0ZVN0YXRlUmVzdWx0LmRlbGV0ZWQpIHR4RXZlbnQuZGVzdHJveWVkVG9rZW5JZHMgPSB1cGRhdGVTdGF0ZVJlc3VsdC5kZWxldGVkO1xuICBpZiAodXBkYXRlU3RhdGVSZXN1bHQucmVzZXJ2ZWQpIHR4RXZlbnQucmVzZXJ2ZWRUb2tlbnMgPSBbdXBkYXRlU3RhdGVSZXN1bHQucmVzZXJ2ZWRdO1xuICBpZiAobnV0emFwcykgZm9yIChjb25zdCBudXR6YXAgb2YgbnV0emFwcykgdHhFdmVudC5hZGRSZWRlZW1lZE51dHphcChudXR6YXApO1xuICBpZiAoZmVlKSB0eEV2ZW50LmZlZSA9IGZlZTtcbiAgYXdhaXQgdHhFdmVudC5zaWduKCk7XG4gIHR4RXZlbnQucHVibGlzaChyZWxheVNldCk7XG4gIHJldHVybiB0eEV2ZW50O1xufVxuXG4vLyBzcmMvd2FsbGV0cy9jYXNodS9kZXBvc2l0LnRzXG52YXIgZCA9IGNyZWF0ZURlYnVnKFwibmRrLXdhbGxldDpjYXNodTpkZXBvc2l0XCIpO1xuZnVuY3Rpb24gcmFuZG9tTWludCh3YWxsZXQpIHtcbiAgY29uc3QgbWludHMgPSB3YWxsZXQubWludHM7XG4gIGNvbnN0IG1pbnQgPSBtaW50c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtaW50cy5sZW5ndGgpXTtcbiAgcmV0dXJuIG1pbnQ7XG59XG52YXIgTkRLQ2FzaHVEZXBvc2l0ID0gY2xhc3MgX05ES0Nhc2h1RGVwb3NpdCBleHRlbmRzIEV2ZW50RW1pdHRlcjMge1xuICBtaW50O1xuICBhbW91bnQ7XG4gIHF1b3RlSWQ7XG4gIHdhbGxldDtcbiAgY2hlY2tUaW1lb3V0O1xuICBjaGVja0ludGVydmFsTGVuZ3RoID0gMjUwMDtcbiAgZmluYWxpemVkID0gZmFsc2U7XG4gIHF1b3RlRXZlbnQ7XG4gIGNvbnN0cnVjdG9yKHdhbGxldCwgYW1vdW50LCBtaW50KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLndhbGxldCA9IHdhbGxldDtcbiAgICB0aGlzLm1pbnQgPSBtaW50IHx8IHJhbmRvbU1pbnQod2FsbGV0KTtcbiAgICB0aGlzLmFtb3VudCA9IGFtb3VudDtcbiAgfVxuICBzdGF0aWMgZnJvbVF1b3RlRXZlbnQod2FsbGV0LCBxdW90ZSkge1xuICAgIGlmICghcXVvdGUuYW1vdW50KSB0aHJvdyBuZXcgRXJyb3IoXCJxdW90ZSBoYXMgbm8gYW1vdW50XCIpO1xuICAgIGlmICghcXVvdGUubWludCkgdGhyb3cgbmV3IEVycm9yKFwicXVvdGUgaGFzIG5vIG1pbnRcIik7XG4gICAgY29uc3QgZGVwb3NpdCA9IG5ldyBfTkRLQ2FzaHVEZXBvc2l0KHdhbGxldCwgcXVvdGUuYW1vdW50LCBxdW90ZS5taW50KTtcbiAgICBkZXBvc2l0LnF1b3RlSWQgPSBxdW90ZS5xdW90ZUlkO1xuICAgIHJldHVybiBkZXBvc2l0O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcXVvdGUgSUQgYW5kIHN0YXJ0IG1vbml0b3JpbmcgZm9yIHBheW1lbnQuXG4gICAqXG4gICAqIE9uY2UgYSBwYXltZW50IGlzIHJlY2VpdmVkLCB0aGUgZGVwb3NpdCB3aWxsIGVtaXQgYSBcInN1Y2Nlc3NcIiBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHBvbGxUaW1lIC0gdGltZSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiBjaGVja3NcbiAgICogQHJldHVybnNcbiAgICovXG4gIGFzeW5jIHN0YXJ0KHBvbGxUaW1lID0gMjUwMCkge1xuICAgIGNvbnN0IGNhc2h1V2FsbGV0ID0gYXdhaXQgdGhpcy53YWxsZXQuZ2V0Q2FzaHVXYWxsZXQodGhpcy5taW50KTtcbiAgICBjb25zdCBxdW90ZSA9IGF3YWl0IGNhc2h1V2FsbGV0LmNyZWF0ZU1pbnRRdW90ZSh0aGlzLmFtb3VudCk7XG4gICAgZChcImNyZWF0ZWQgcXVvdGUgJXMgZm9yICVkICVzXCIsIHF1b3RlLnF1b3RlLCB0aGlzLmFtb3VudCwgdGhpcy5taW50KTtcbiAgICB0aGlzLnF1b3RlSWQgPSBxdW90ZS5xdW90ZTtcbiAgICB0aGlzLndhbGxldC5kZXBvc2l0TW9uaXRvci5hZGREZXBvc2l0KHRoaXMpO1xuICAgIHNldFRpbWVvdXQodGhpcy5jaGVjay5iaW5kKHRoaXMsIHBvbGxUaW1lKSwgcG9sbFRpbWUpO1xuICAgIHRoaXMuY3JlYXRlUXVvdGVFdmVudChxdW90ZS5xdW90ZSwgcXVvdGUucmVxdWVzdCkudGhlbigoZXZlbnQpID0+IHRoaXMucXVvdGVFdmVudCA9IGV2ZW50KTtcbiAgICByZXR1cm4gcXVvdGUucmVxdWVzdDtcbiAgfVxuICAvKipcbiAgICogVGhpcyBnZW5lcmF0ZXMgYSA3Mzc0IGV2ZW50IGNvbnRhaW5pbmcgdGhlIHF1b3RlIElEXG4gICAqIHdpdGggYW4gb3B0aW9uYWwgZXhwaXJhdGlvbiBzZXQgdG8gdGhlIGJvbHQxMSBleHBpcnkgKGlmIHRoZXJlIGlzIG9uZSlcbiAgICovXG4gIGFzeW5jIGNyZWF0ZVF1b3RlRXZlbnQocXVvdGVJZCwgYm9sdDExKSB7XG4gICAgY29uc3QgeyBuZGsgfSA9IHRoaXMud2FsbGV0O1xuICAgIGNvbnN0IHF1b3RlRXZlbnQgPSBuZXcgTkRLQ2FzaHVRdW90ZShuZGspO1xuICAgIHF1b3RlRXZlbnQucXVvdGVJZCA9IHF1b3RlSWQ7XG4gICAgcXVvdGVFdmVudC5taW50ID0gdGhpcy5taW50O1xuICAgIHF1b3RlRXZlbnQuYW1vdW50ID0gdGhpcy5hbW91bnQ7XG4gICAgcXVvdGVFdmVudC53YWxsZXQgPSB0aGlzLndhbGxldDtcbiAgICBxdW90ZUV2ZW50Lmludm9pY2UgPSBib2x0MTE7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHF1b3RlRXZlbnQuc2F2ZSgpO1xuICAgICAgZChcInNhdmVkIHF1b3RlIG9uIGV2ZW50ICVzXCIsIHF1b3RlRXZlbnQucmF3RXZlbnQoKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZChcImVycm9yIHNhdmluZyBxdW90ZSBvbiBldmVudCAlc1wiLCBlLnJlbGF5RXJyb3JzKTtcbiAgICB9XG4gICAgcmV0dXJuIHF1b3RlRXZlbnQ7XG4gIH1cbiAgYXN5bmMgcnVuQ2hlY2soKSB7XG4gICAgaWYgKCF0aGlzLmZpbmFsaXplZCkgYXdhaXQgdGhpcy5maW5hbGl6ZSgpO1xuICAgIGlmICghdGhpcy5maW5hbGl6ZWQpIHRoaXMuZGVsYXlDaGVjaygpO1xuICB9XG4gIGRlbGF5Q2hlY2soKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnJ1bkNoZWNrKCk7XG4gICAgICB0aGlzLmNoZWNrSW50ZXJ2YWxMZW5ndGggKz0gNTAwO1xuICAgIH0sIHRoaXMuY2hlY2tJbnRlcnZhbExlbmd0aCk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBkZXBvc2l0IGhhcyBiZWVuIGZpbmFsaXplZC5cbiAgICogQHBhcmFtIHRpbWVvdXQgQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBnaXZpbmcgdXAuXG4gICAqL1xuICBhc3luYyBjaGVjayh0aW1lb3V0KSB7XG4gICAgdGhpcy5ydW5DaGVjaygpO1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2hlY2tUaW1lb3V0KTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH1cbiAgfVxuICBhc3luYyBmaW5hbGl6ZSgpIHtcbiAgICBpZiAoIXRoaXMucXVvdGVJZCkgdGhyb3cgbmV3IEVycm9yKFwiTm8gcXVvdGVJZCBzZXQuXCIpO1xuICAgIGxldCBwcm9vZnM7XG4gICAgdHJ5IHtcbiAgICAgIGQoXCJDaGVja2luZyBmb3IgbWludGluZyBzdGF0dXMgb2YgJXNcIiwgdGhpcy5xdW90ZUlkKTtcbiAgICAgIGNvbnN0IGNhc2h1V2FsbGV0ID0gYXdhaXQgdGhpcy53YWxsZXQuZ2V0Q2FzaHVXYWxsZXQodGhpcy5taW50KTtcbiAgICAgIGNvbnN0IHByb29mc1dlSGF2ZSA9IGF3YWl0IHRoaXMud2FsbGV0LnN0YXRlLmdldFByb29mcyh7IG1pbnQ6IHRoaXMubWludCB9KTtcbiAgICAgIHByb29mcyA9IGF3YWl0IGNhc2h1V2FsbGV0Lm1pbnRQcm9vZnModGhpcy5hbW91bnQsIHRoaXMucXVvdGVJZCwge1xuICAgICAgICBwcm9vZnNXZUhhdmVcbiAgICAgIH0pO1xuICAgICAgaWYgKHByb29mcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5tZXNzYWdlLm1hdGNoKC9ub3QgcGFpZC9pKSkgcmV0dXJuO1xuICAgICAgaWYgKGUubWVzc2FnZS5tYXRjaCgvYWxyZWFkeSBpc3N1ZWQvaSkpIHtcbiAgICAgICAgZChcIk1pbnQgaXMgc2F5aW5nIHRoZSBxdW90ZSBoYXMgYWxyZWFkeSBiZWVuIGlzc3VlZCwgZGVzdHJveWluZyBxdW90ZSBldmVudDogJXNcIiwgZS5tZXNzYWdlKTtcbiAgICAgICAgdGhpcy5kZXN0cm95UXVvdGVFdmVudCgpO1xuICAgICAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChlLm1lc3NhZ2UubWF0Y2goL3JhdGUgbGltaXQvaSkpIHtcbiAgICAgICAgZChcIk1pbnQgc2VlbXMgdG8gYmUgcmF0ZSBsaW1pdGluZywgbG93ZXJpbmcgY2hlY2sgaW50ZXJ2YWxcIik7XG4gICAgICAgIHRoaXMuY2hlY2tJbnRlcnZhbExlbmd0aCArPSA1ZTM7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGQoZS5tZXNzYWdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZmluYWxpemVkID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHVwZGF0ZVJlcyA9IGF3YWl0IHRoaXMud2FsbGV0LnN0YXRlLnVwZGF0ZShcbiAgICAgICAge1xuICAgICAgICAgIHN0b3JlOiBwcm9vZnMsXG4gICAgICAgICAgbWludDogdGhpcy5taW50XG4gICAgICAgIH0sXG4gICAgICAgIFwiRGVwb3NpdFwiXG4gICAgICApO1xuICAgICAgY29uc3QgdG9rZW5FdmVudCA9IHVwZGF0ZVJlcy5jcmVhdGVkO1xuICAgICAgaWYgKCF0b2tlbkV2ZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJubyB0b2tlbiBldmVudCBjcmVhdGVkXCIpO1xuICAgICAgY3JlYXRlSW5UeEV2ZW50KFxuICAgICAgICB0aGlzLndhbGxldC5uZGssXG4gICAgICAgIHByb29mcyxcbiAgICAgICAgdGhpcy5taW50LFxuICAgICAgICB1cGRhdGVSZXMsXG4gICAgICAgIHsgZGVzY3JpcHRpb246IFwiRGVwb3NpdFwiIH0sXG4gICAgICAgIHRoaXMud2FsbGV0LnJlbGF5U2V0XG4gICAgICApO1xuICAgICAgdGhpcy5lbWl0KFwic3VjY2Vzc1wiLCB0b2tlbkV2ZW50KTtcbiAgICAgIHRoaXMuZGVzdHJveVF1b3RlRXZlbnQoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlLm1lc3NhZ2UpO1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZGVzdHJveVF1b3RlRXZlbnQoKSB7XG4gICAgaWYgKCF0aGlzLnF1b3RlRXZlbnQpIHJldHVybjtcbiAgICBjb25zdCBkZWxldGVFdmVudCA9IGF3YWl0IHRoaXMucXVvdGVFdmVudC5kZWxldGUodm9pZCAwLCBmYWxzZSk7XG4gICAgZGVsZXRlRXZlbnQucHVibGlzaCh0aGlzLndhbGxldC5yZWxheVNldCk7XG4gIH1cbn07XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L2V2ZW50LWhhbmRsZXJzL2luZGV4LnRzXG5pbXBvcnQgeyBOREtLaW5kIGFzIE5ES0tpbmQyIH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuXG4vLyBzcmMvd2FsbGV0cy9jYXNodS9ldmVudC1oYW5kbGVycy9kZWxldGlvbi50c1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlRXZlbnREZWxldGlvbihldmVudCkge1xuICBjb25zdCBkZWxldGVkSWRzID0gZXZlbnQuZ2V0TWF0Y2hpbmdUYWdzKFwiZVwiKS5tYXAoKHRhZykgPT4gdGFnWzFdKTtcbiAgZm9yIChjb25zdCBkZWxldGVkSWQgb2YgZGVsZXRlZElkcykge1xuICAgIHRoaXMuc3RhdGUucmVtb3ZlVG9rZW5JZChkZWxldGVkSWQpO1xuICB9XG59XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L2V2ZW50LWhhbmRsZXJzL3F1b3RlLnRzXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVRdW90ZShldmVudCkge1xuICBjb25zdCBxdW90ZSA9IGF3YWl0IE5ES0Nhc2h1UXVvdGUuZnJvbShldmVudCk7XG4gIGlmICghcXVvdGUpIHJldHVybjtcbiAgY29uc3QgZGVwb3NpdCA9IE5ES0Nhc2h1RGVwb3NpdC5mcm9tUXVvdGVFdmVudCh0aGlzLCBxdW90ZSk7XG4gIGlmICh0aGlzLmRlcG9zaXRNb25pdG9yLmFkZERlcG9zaXQoZGVwb3NpdCkpIHtcbiAgICBkZXBvc2l0LmZpbmFsaXplKCk7XG4gIH1cbn1cblxuLy8gc3JjL3dhbGxldHMvY2FzaHUvZXZlbnQtaGFuZGxlcnMvdG9rZW4udHNcbmltcG9ydCB7IE5ES0Nhc2h1VG9rZW4gfSBmcm9tIFwiQG5vc3RyLWRldi1raXQvbmRrXCI7XG52YXIgX2N1bXVsYXRpdmVUaW1lID0gMDtcbnZhciBfY3VtdWxhdGl2ZUNhbGxzID0gMDtcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVRva2VuKGV2ZW50KSB7XG4gIGlmICh0aGlzLnN0YXRlLnRva2Vucy5oYXMoZXZlbnQuaWQpKSByZXR1cm47XG4gIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gIGNvbnN0IHRva2VuID0gYXdhaXQgTkRLQ2FzaHVUb2tlbi5mcm9tKGV2ZW50KTtcbiAgaWYgKCF0b2tlbikge1xuICAgIF9jdW11bGF0aXZlVGltZSArPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgIF9jdW11bGF0aXZlQ2FsbHMrKztcbiAgICByZXR1cm47XG4gIH1cbiAgX2N1bXVsYXRpdmVUaW1lICs9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gIF9jdW11bGF0aXZlQ2FsbHMrKztcbiAgZm9yIChjb25zdCBkZWxldGVkVG9rZW5JZCBvZiB0b2tlbi5kZWxldGVkVG9rZW5zKSB7XG4gICAgdGhpcy5zdGF0ZS5yZW1vdmVUb2tlbklkKGRlbGV0ZWRUb2tlbklkKTtcbiAgfVxuICB0aGlzLnN0YXRlLmFkZFRva2VuKHRva2VuKTtcbn1cbnNldEludGVydmFsKCgpID0+IHtcbn0sIDVlMyk7XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L2V2ZW50LWhhbmRsZXJzL2luZGV4LnRzXG52YXIgaGFuZGxlcnMgPSB7XG4gIFtOREtLaW5kMi5DYXNodVRva2VuXTogaGFuZGxlVG9rZW4sXG4gIFtOREtLaW5kMi5DYXNodVF1b3RlXTogaGFuZGxlUXVvdGUsXG4gIFtOREtLaW5kMi5FdmVudERlbGV0aW9uXTogaGFuZGxlRXZlbnREZWxldGlvblxufTtcbnZhciBiYWxhbmNlVXBkYXRlVGltZXIgPSBudWxsO1xuYXN5bmMgZnVuY3Rpb24gZXZlbnRIYW5kbGVyKGV2ZW50KSB7XG4gIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1tldmVudC5raW5kXTtcbiAgaWYgKGhhbmRsZXIpIHtcbiAgICBpZiAoYmFsYW5jZVVwZGF0ZVRpbWVyKSBjbGVhclRpbWVvdXQoYmFsYW5jZVVwZGF0ZVRpbWVyKTtcbiAgICBhd2FpdCBoYW5kbGVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIGJhbGFuY2VVcGRhdGVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5lbWl0KFwiYmFsYW5jZV91cGRhdGVkXCIpO1xuICAgIH0sIDEwMCk7XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGV2ZW50RHVwSGFuZGxlcihfZXZlbnQsIF9yZWxheSwgX3RpbWVTaW5jZUZpcnN0U2VlbiwgX3N1YiwgX2Zyb21DYWNoZSkge1xufVxuXG4vLyBzcmMvd2FsbGV0cy9jYXNodS92YWxpZGF0ZS50c1xuaW1wb3J0IHsgQ2hlY2tTdGF0ZUVudW0gfSBmcm9tIFwiQGNhc2h1L2Nhc2h1LXRzXCI7XG5pbXBvcnQgY3JlYXRlRGVidWcyIGZyb20gXCJkZWJ1Z1wiO1xudmFyIGQyID0gY3JlYXRlRGVidWcyKFwibmRrLXdhbGxldDpjYXNodTp2YWxpZGF0ZVwiKTtcbmFzeW5jIGZ1bmN0aW9uIGNvbnNvbGlkYXRlVG9rZW5zKCkge1xuICBkMihcImNoZWNraW5nICVkIHRva2VucyBmb3Igc3BlbnQgcHJvb2ZzXCIsIHRoaXMuc3RhdGUudG9rZW5zLnNpemUpO1xuICBjb25zdCBtaW50cyA9IG5ldyBTZXQoXG4gICAgdGhpcy5zdGF0ZS5nZXRNaW50c1Byb29mcyh7IHZhbGlkU3RhdGVzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJhdmFpbGFibGVcIiwgXCJyZXNlcnZlZFwiLCBcImRlbGV0ZWRcIl0pIH0pLmtleXMoKVxuICApO1xuICBkMihcImZvdW5kICVkIG1pbnRzXCIsIG1pbnRzLnNpemUpO1xuICBtaW50cy5mb3JFYWNoKChtaW50KSA9PiB7XG4gICAgY29uc29saWRhdGVNaW50VG9rZW5zKG1pbnQsIHRoaXMpO1xuICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNvbnNvbGlkYXRlTWludFRva2VucyhtaW50LCB3YWxsZXQsIGFsbFByb29mcywgb25SZXN1bHQsIG9uRmFpbHVyZSkge1xuICBhbGxQcm9vZnMgPz89IHdhbGxldC5zdGF0ZS5nZXRQcm9vZnMoeyBtaW50LCBpbmNsdWRlRGVsZXRlZDogdHJ1ZSwgb25seUF2YWlsYWJsZTogZmFsc2UgfSk7XG4gIGNvbnN0IF93YWxsZXQgPSBhd2FpdCB3YWxsZXRGb3JNaW50KG1pbnQpO1xuICBpZiAoIV93YWxsZXQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHByb29mU3RhdGVzID0gW107XG4gIHRyeSB7XG4gICAgcHJvb2ZTdGF0ZXMgPSBhd2FpdCBfd2FsbGV0LmNoZWNrUHJvb2ZzU3RhdGVzKGFsbFByb29mcyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvbkZhaWx1cmU/LihlLm1lc3NhZ2UpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBzcGVudFByb29mcyA9IFtdO1xuICBjb25zdCB1bnNwZW50UHJvb2ZzID0gW107XG4gIGNvbnN0IHBlbmRpbmdQcm9vZnMgPSBbXTtcbiAgYWxsUHJvb2ZzLmZvckVhY2goKHByb29mLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHsgc3RhdGUgfSA9IHByb29mU3RhdGVzW2luZGV4XTtcbiAgICBpZiAoc3RhdGUgPT09IENoZWNrU3RhdGVFbnVtLlNQRU5UKSB7XG4gICAgICBzcGVudFByb29mcy5wdXNoKHByb29mKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBDaGVja1N0YXRlRW51bS5VTlNQRU5UKSB7XG4gICAgICB1bnNwZW50UHJvb2ZzLnB1c2gocHJvb2YpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nUHJvb2ZzLnB1c2gocHJvb2YpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHdhbGxldENoYW5nZSA9IHtcbiAgICBtaW50LFxuICAgIHN0b3JlOiB1bnNwZW50UHJvb2ZzLFxuICAgIGRlc3Ryb3k6IHNwZW50UHJvb2ZzXG4gIH07XG4gIG9uUmVzdWx0Py4od2FsbGV0Q2hhbmdlKTtcbiAgY29uc3QgX3RvdGFsU3BlbnRQcm9vZnMgPSBzcGVudFByb29mcy5yZWR1Y2UoKGFjYywgcHJvb2YpID0+IGFjYyArIHByb29mLmFtb3VudCwgMCk7XG4gIGlmICh3YWxsZXRDaGFuZ2UuZGVzdHJveT8ubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIHdhbGxldENoYW5nZS5zdG9yZT8ucHVzaCguLi5wZW5kaW5nUHJvb2ZzKTtcbiAgY29uc3QgdG90YWxQZW5kaW5nUHJvb2ZzID0gcGVuZGluZ1Byb29mcy5yZWR1Y2UoKGFjYywgcHJvb2YpID0+IGFjYyArIHByb29mLmFtb3VudCwgMCk7XG4gIHdhbGxldC5zdGF0ZS5yZXNlcnZlUHJvb2ZzKHBlbmRpbmdQcm9vZnMsIHRvdGFsUGVuZGluZ1Byb29mcyk7XG4gIHJldHVybiB3YWxsZXQuc3RhdGUudXBkYXRlKHdhbGxldENoYW5nZSwgXCJDb25zb2xpZGF0ZVwiKTtcbn1cblxuLy8gc3JjL3dhbGxldHMvY2FzaHUvcGF5L2xuLnRzXG5pbXBvcnQgeyBNZWx0UXVvdGVTdGF0ZSB9IGZyb20gXCJAY2FzaHUvY2FzaHUtdHNcIjtcblxuLy8gc3JjL3dhbGxldHMvY2FzaHUvd2FsbGV0L2ZlZS50c1xuZnVuY3Rpb24gY2FsY3VsYXRlRmVlKGludGVuZGVkQW1vdW50LCBwcm92aWRlZFByb29mcywgcmV0dXJuZWRQcm9vZnMpIHtcbiAgY29uc3QgdG90YWxQcm92aWRlZCA9IHByb3ZpZGVkUHJvb2ZzLnJlZHVjZSgoYWNjLCBwKSA9PiBhY2MgKyBwLmFtb3VudCwgMCk7XG4gIGNvbnN0IHRvdGFsUmV0dXJuZWQgPSByZXR1cm5lZFByb29mcy5yZWR1Y2UoKGFjYywgcCkgPT4gYWNjICsgcC5hbW91bnQsIDApO1xuICBjb25zdCB0b3RhbEZlZSA9IHRvdGFsUHJvdmlkZWQgLSBpbnRlbmRlZEFtb3VudCAtIHRvdGFsUmV0dXJuZWQ7XG4gIGlmICh0b3RhbEZlZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGZlZSBjYWxjdWxhdGlvbjogcmVjZWl2ZWQgbW9yZSBwcm9vZnMgdGhhbiBzZW50IHRvIG1pbnRcIik7XG4gIH1cbiAgcmV0dXJuIHRvdGFsRmVlO1xufVxuXG4vLyBzcmMvd2FsbGV0cy9jYXNodS93YWxsZXQvZWZmZWN0LnRzXG5hc3luYyBmdW5jdGlvbiB3aXRoUHJvb2ZSZXNlcnZlKHdhbGxldCwgY2FzaHVXYWxsZXQsIG1pbnQsIGFtb3VudFdpdGhGZWVzLCBhbW91bnRXaXRob3V0RmVlcywgY2IpIHtcbiAgY2FzaHVXYWxsZXQgPz89IGF3YWl0IHdhbGxldC5nZXRDYXNodVdhbGxldChtaW50KTtcbiAgY29uc3QgYXZhaWxhYmxlTWludFByb29mcyA9IHdhbGxldC5zdGF0ZS5nZXRQcm9vZnMoeyBtaW50LCBvbmx5QXZhaWxhYmxlOiB0cnVlIH0pO1xuICBjb25zdCBwcm9vZnMgPSBjYXNodVdhbGxldC5zZWxlY3RQcm9vZnNUb1NlbmQoYXZhaWxhYmxlTWludFByb29mcywgYW1vdW50V2l0aEZlZXMpO1xuICBjb25zdCBmZXRjaGVkQW1vdW50ID0gcHJvb2ZzLnNlbmQucmVkdWNlKChhLCBiKSA9PiBhICsgYi5hbW91bnQsIDApO1xuICBpZiAoZmV0Y2hlZEFtb3VudCA8IGFtb3VudFdpdGhGZWVzKSByZXR1cm4gbnVsbDtcbiAgd2FsbGV0LnN0YXRlLnJlc2VydmVQcm9vZnMocHJvb2ZzLnNlbmQsIGFtb3VudFdpdGhGZWVzKTtcbiAgbGV0IGNiUmVzdWx0ID0gbnVsbDtcbiAgbGV0IHByb29mc0NoYW5nZSA9IG51bGw7XG4gIGxldCB1cGRhdGVSZXMgPSBudWxsO1xuICB0cnkge1xuICAgIGNiUmVzdWx0ID0gYXdhaXQgY2IocHJvb2ZzLnNlbmQsIGF2YWlsYWJsZU1pbnRQcm9vZnMpO1xuICAgIGlmICghY2JSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHByb29mc0NoYW5nZSA9IHtcbiAgICAgIG1pbnQsXG4gICAgICBzdG9yZTogY2JSZXN1bHQuY2hhbmdlLFxuICAgICAgZGVzdHJveTogcHJvb2ZzLnNlbmRcbiAgICB9O1xuICAgIHVwZGF0ZVJlcyA9IGF3YWl0IHdhbGxldC5zdGF0ZS51cGRhdGUocHJvb2ZzQ2hhbmdlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHdhbGxldC5zdGF0ZS51bnJlc2VydmVQcm9vZnMocHJvb2ZzLnNlbmQsIGFtb3VudFdpdGhGZWVzLCBcImF2YWlsYWJsZVwiKTtcbiAgICB0aHJvdyBlO1xuICB9XG4gIGlmICghY2JSZXN1bHQpIHJldHVybiBudWxsO1xuICByZXR1cm4ge1xuICAgIHJlc3VsdDogY2JSZXN1bHQucmVzdWx0LFxuICAgIHByb29mc0NoYW5nZSxcbiAgICBzdGF0ZVVwZGF0ZTogdXBkYXRlUmVzLFxuICAgIG1pbnQsXG4gICAgZmVlOiBjYWxjdWxhdGVGZWUoYW1vdW50V2l0aG91dEZlZXMsIHByb29mcy5zZW5kLCBjYlJlc3VsdC5jaGFuZ2UpXG4gIH07XG59XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L3BheS9sbi50c1xuYXN5bmMgZnVuY3Rpb24gcGF5TG4od2FsbGV0LCBwciwgeyBhbW91bnQsIHVuaXQgfSA9IHt9KSB7XG4gIGxldCBpbnZvaWNlQW1vdW50ID0gZ2V0Qm9sdDExQW1vdW50KHByKTtcbiAgaWYgKCFpbnZvaWNlQW1vdW50KSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZvaWNlIGFtb3VudCBpcyByZXF1aXJlZFwiKTtcbiAgaW52b2ljZUFtb3VudCA9IGludm9pY2VBbW91bnQgLyAxZTM7XG4gIGlmIChhbW91bnQgJiYgdW5pdCkge1xuICAgIGlmICh1bml0ID09PSBcIm1zYXRcIikge1xuICAgICAgYW1vdW50ID0gYW1vdW50IC8gMWUzO1xuICAgIH1cbiAgfVxuICBjb25zdCBlbGlnaWJsZU1pbnRzID0gd2FsbGV0LmdldE1pbnRzV2l0aEJhbGFuY2UoaW52b2ljZUFtb3VudCArIDMpO1xuICBpZiAoIWVsaWdpYmxlTWludHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZm9yIChjb25zdCBtaW50IG9mIGVsaWdpYmxlTWludHMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXhlY3V0ZVBheW1lbnQobWludCwgcHIsIGFtb3VudCA/PyBpbnZvaWNlQW1vdW50LCB3YWxsZXQpO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBpZiAoYW1vdW50KSB7XG4gICAgICAgICAgcmVzdWx0LmZlZSA9IGNhbGN1bGF0ZUZlZShcbiAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgIHJlc3VsdC5wcm9vZnNDaGFuZ2U/LmRlc3Ryb3kgPz8gW10sXG4gICAgICAgICAgICByZXN1bHQucHJvb2ZzQ2hhbmdlPy5zdG9yZSA/PyBbXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgd2FsbGV0Lndhcm4oYEZhaWxlZCB0byBleGVjdXRlIHBheW1lbnQgd2l0aCBtaW4gJHttaW50fTogJHtlcnJvcn1gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5hc3luYyBmdW5jdGlvbiBleGVjdXRlUGF5bWVudChtaW50LCBwciwgYW1vdW50V2l0aG91dEZlZXMsIHdhbGxldCkge1xuICBjb25zdCBjYXNodVdhbGxldCA9IGF3YWl0IHdhbGxldC5nZXRDYXNodVdhbGxldChtaW50KTtcbiAgdHJ5IHtcbiAgICBjb25zdCBtZWx0UXVvdGUgPSBhd2FpdCBjYXNodVdhbGxldC5jcmVhdGVNZWx0UXVvdGUocHIpO1xuICAgIGNvbnN0IGFtb3VudFRvU2VuZCA9IG1lbHRRdW90ZS5hbW91bnQgKyBtZWx0UXVvdGUuZmVlX3Jlc2VydmU7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2l0aFByb29mUmVzZXJ2ZShcbiAgICAgIHdhbGxldCxcbiAgICAgIGNhc2h1V2FsbGV0LFxuICAgICAgbWludCxcbiAgICAgIGFtb3VudFRvU2VuZCxcbiAgICAgIGFtb3VudFdpdGhvdXRGZWVzLFxuICAgICAgYXN5bmMgKHByb29mc1RvVXNlLCBfYWxsT3VyUHJvb2ZzKSA9PiB7XG4gICAgICAgIGNvbnN0IG1lbHRSZXN1bHQgPSBhd2FpdCBjYXNodVdhbGxldC5tZWx0UHJvb2ZzKG1lbHRRdW90ZSwgcHJvb2ZzVG9Vc2UpO1xuICAgICAgICBpZiAobWVsdFJlc3VsdC5xdW90ZS5zdGF0ZSA9PT0gTWVsdFF1b3RlU3RhdGUuUEFJRCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgcHJlaW1hZ2U6IG1lbHRSZXN1bHQucXVvdGUucGF5bWVudF9wcmVpbWFnZSA/PyBcIlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hhbmdlOiBtZWx0UmVzdWx0LmNoYW5nZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgaWYgKGUubWVzc2FnZS5tYXRjaCgvYWxyZWFkeSBzcGVudC9pKSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBjb25zb2xpZGF0ZU1pbnRUb2tlbnMobWludCwgd2FsbGV0KTtcbiAgICAgICAgfSwgMjUwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vLyBzcmMvd2FsbGV0cy9jYXNodS9wYXkvbnV0LnRzXG5pbXBvcnQgeyBub3JtYWxpemVVcmwgfSBmcm9tIFwiQG5vc3RyLWRldi1raXQvbmRrXCI7XG5cbi8vIHNyYy91dGlscy9jYXNodS50c1xuZnVuY3Rpb24gZW5zdXJlSXNDYXNodVB1YmtleShwdWJrZXkpIHtcbiAgaWYgKCFwdWJrZXkpIHJldHVybjtcbiAgbGV0IF9wdWJrZXkgPSBwdWJrZXk7XG4gIGlmIChfcHVia2V5Lmxlbmd0aCA9PT0gNjQpIF9wdWJrZXkgPSBgMDIke19wdWJrZXl9YDtcbiAgaWYgKF9wdWJrZXkubGVuZ3RoICE9PSA2NikgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwdWJrZXlcIik7XG4gIHJldHVybiBfcHVia2V5O1xufVxuYXN5bmMgZnVuY3Rpb24gbWludFByb29mcyh3YWxsZXQsIHF1b3RlLCBhbW91bnQsIG1pbnQsIHAycGspIHtcbiAgY29uc3QgbWludFRva2VuQXR0ZW1wdCA9IChyZXNvbHZlLCByZWplY3QsIGF0dGVtcHQpID0+IHtcbiAgICBjb25zdCBwdWJrZXkgPSBlbnN1cmVJc0Nhc2h1UHVia2V5KHAycGspO1xuICAgIHdhbGxldC5taW50UHJvb2ZzKGFtb3VudCwgcXVvdGUucXVvdGUsIHsgcHVia2V5IH0pLnRoZW4oKG1pbnRQcm9vZnMyKSA9PiB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwibWludGVkIHRva2Vuc1wiLCBtaW50UHJvb2ZzMik7XG4gICAgICByZXNvbHZlKHtcbiAgICAgICAgcHJvb2ZzOiBtaW50UHJvb2ZzMixcbiAgICAgICAgbWludFxuICAgICAgfSk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgIGF0dGVtcHQrKztcbiAgICAgIGlmIChhdHRlbXB0IDw9IDMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcImVycm9yIG1pbnRpbmcgdG9rZW5zXCIsIGUpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IG1pbnRUb2tlbkF0dGVtcHQocmVzb2x2ZSwgcmVqZWN0LCBhdHRlbXB0KSwgYXR0ZW1wdCAqIDE1MDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIG1pbnRUb2tlbkF0dGVtcHQocmVzb2x2ZSwgcmVqZWN0LCAwKTtcbiAgfSk7XG59XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L3BheS9udXQudHNcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRva2VuKHdhbGxldCwgYW1vdW50LCByZWNpcGllbnRNaW50cywgcDJwaykge1xuICBwMnBrID0gZW5zdXJlSXNDYXNodVB1YmtleShwMnBrKTtcbiAgY29uc3QgbXlNaW50c1dpdGhFbm91Z2hCYWxhbmNlID0gd2FsbGV0LmdldE1pbnRzV2l0aEJhbGFuY2UoYW1vdW50KTtcbiAgY29uc3QgaGFzUmVjaXBpZW50TWludHMgPSByZWNpcGllbnRNaW50cyAmJiByZWNpcGllbnRNaW50cy5sZW5ndGggPiAwO1xuICBjb25zdCBtaW50c0luQ29tbW9uID0gaGFzUmVjaXBpZW50TWludHMgPyBmaW5kTWludHNJbkNvbW1vbihbcmVjaXBpZW50TWludHMsIG15TWludHNXaXRoRW5vdWdoQmFsYW5jZV0pIDogbXlNaW50c1dpdGhFbm91Z2hCYWxhbmNlO1xuICBmb3IgKGNvbnN0IG1pbnQgb2YgbWludHNJbkNvbW1vbikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBjcmVhdGVUb2tlbkluTWludCh3YWxsZXQsIG1pbnQsIGFtb3VudCwgcDJwayk7XG4gICAgICBpZiAocmVzKSB7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoX2UpIHtcbiAgICB9XG4gIH1cbiAgaWYgKGhhc1JlY2lwaWVudE1pbnRzKSB7XG4gICAgcmV0dXJuIGF3YWl0IGNyZWF0ZVRva2VuV2l0aE1pbnRUcmFuc2Zlcih3YWxsZXQsIGFtb3VudCwgcmVjaXBpZW50TWludHMsIHAycGspO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlVG9rZW5Jbk1pbnQod2FsbGV0LCBtaW50LCBhbW91bnQsIHAycGspIHtcbiAgY29uc3QgY2FzaHVXYWxsZXQgPSBhd2FpdCB3YWxsZXQuZ2V0Q2FzaHVXYWxsZXQobWludCk7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2l0aFByb29mUmVzZXJ2ZShcbiAgICAgIHdhbGxldCxcbiAgICAgIGNhc2h1V2FsbGV0LFxuICAgICAgbWludCxcbiAgICAgIGFtb3VudCxcbiAgICAgIGFtb3VudCxcbiAgICAgIGFzeW5jIChwcm9vZnNUb1VzZSwgYWxsT3VyUHJvb2ZzKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbmRSZXN1bHQgPSBhd2FpdCBjYXNodVdhbGxldC5zZW5kKGFtb3VudCwgcHJvb2ZzVG9Vc2UsIHtcbiAgICAgICAgICBwdWJrZXk6IHAycGssXG4gICAgICAgICAgcHJvb2ZzV2VIYXZlOiBhbGxPdXJQcm9vZnNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICBwcm9vZnM6IHNlbmRSZXN1bHQuc2VuZCxcbiAgICAgICAgICAgIG1pbnRcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoYW5nZTogc2VuZFJlc3VsdC5rZWVwLFxuICAgICAgICAgIG1pbnRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKF9lKSB7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVUb2tlbldpdGhNaW50VHJhbnNmZXIod2FsbGV0LCBhbW91bnQsIHJlY2lwaWVudE1pbnRzLCBwMnBrKSB7XG4gIGNvbnN0IGdlbmVyYXRlUXVvdGUgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZ2VuZXJhdGVRdW90ZUZyb21Tb21lTWludCA9IGFzeW5jIChtaW50MykgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0TWludFdhbGxldDMgPSBhd2FpdCB3YWxsZXRGb3JNaW50KG1pbnQzKTtcbiAgICAgIGlmICghdGFyZ2V0TWludFdhbGxldDMpIHRocm93IG5ldyBFcnJvcihgdW5hYmxlIHRvIGxvYWQgd2FsbGV0IGZvciBtaW50ICR7bWludDN9YCk7XG4gICAgICBjb25zdCBxdW90ZTMgPSBhd2FpdCB0YXJnZXRNaW50V2FsbGV0My5jcmVhdGVNaW50UXVvdGUoYW1vdW50KTtcbiAgICAgIHJldHVybiB7IHF1b3RlOiBxdW90ZTMsIG1pbnQ6IG1pbnQzLCB0YXJnZXRNaW50V2FsbGV0OiB0YXJnZXRNaW50V2FsbGV0MyB9O1xuICAgIH07XG4gICAgY29uc3QgcXVvdGVzUHJvbWlzZXMgPSByZWNpcGllbnRNaW50cy5tYXAoZ2VuZXJhdGVRdW90ZUZyb21Tb21lTWludCk7XG4gICAgY29uc3QgeyBxdW90ZTogcXVvdGUyLCBtaW50OiBtaW50MiwgdGFyZ2V0TWludFdhbGxldDogdGFyZ2V0TWludFdhbGxldDIgfSA9IGF3YWl0IFByb21pc2UuYW55KHF1b3Rlc1Byb21pc2VzKTtcbiAgICBpZiAoIXF1b3RlMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmFpbGVkIHRvIGdldCBxdW90ZSBmcm9tIGFueSBtaW50XCIpO1xuICAgIH1cbiAgICByZXR1cm4geyBxdW90ZTogcXVvdGUyLCBtaW50OiBtaW50MiwgdGFyZ2V0TWludFdhbGxldDogdGFyZ2V0TWludFdhbGxldDIgfTtcbiAgfTtcbiAgY29uc3QgeyBxdW90ZSwgbWludDogdGFyZ2V0TWludCwgdGFyZ2V0TWludFdhbGxldCB9ID0gYXdhaXQgZ2VuZXJhdGVRdW90ZSgpO1xuICBpZiAoIXF1b3RlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgaW52b2ljZUFtb3VudCA9IGdldEJvbHQxMUFtb3VudChxdW90ZS5yZXF1ZXN0KTtcbiAgaWYgKCFpbnZvaWNlQW1vdW50KSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZvaWNlIGFtb3VudCBpcyByZXF1aXJlZFwiKTtcbiAgY29uc3QgaW52b2ljZUFtb3VudEluU2F0ID0gaW52b2ljZUFtb3VudCAvIDFlMztcbiAgaWYgKGludm9pY2VBbW91bnRJblNhdCA+IGFtb3VudClcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGludm9pY2UgYW1vdW50IGlzIG1vcmUgdGhhbiB0aGUgYW1vdW50IHBhc3NlZCBpbiAoJHtpbnZvaWNlQW1vdW50SW5TYXR9IHZzICR7YW1vdW50fSlgKTtcbiAgY29uc3QgcGF5TE5SZXN1bHQgPSBhd2FpdCBwYXlMbih3YWxsZXQsIHF1b3RlLnJlcXVlc3QsIHsgYW1vdW50IH0pO1xuICBpZiAoIXBheUxOUmVzdWx0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgeyBwcm9vZnMsIG1pbnQgfSA9IGF3YWl0IG1pbnRQcm9vZnModGFyZ2V0TWludFdhbGxldCwgcXVvdGUsIGFtb3VudCwgdGFyZ2V0TWludCwgcDJwayk7XG4gIHJldHVybiB7XG4gICAgLi4ucGF5TE5SZXN1bHQsXG4gICAgcmVzdWx0OiB7IHByb29mcywgbWludCB9LFxuICAgIGZlZTogcGF5TE5SZXN1bHQuZmVlXG4gIH07XG59XG5mdW5jdGlvbiBmaW5kTWludHNJbkNvbW1vbihtaW50Q29sbGVjdGlvbnMpIHtcbiAgY29uc3QgbWludENvdW50cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGZvciAoY29uc3QgbWludHMgb2YgbWludENvbGxlY3Rpb25zKSB7XG4gICAgZm9yIChjb25zdCBtaW50IG9mIG1pbnRzKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkTWludCA9IG5vcm1hbGl6ZVVybChtaW50KTtcbiAgICAgIGlmICghbWludENvdW50cy5oYXMobm9ybWFsaXplZE1pbnQpKSB7XG4gICAgICAgIG1pbnRDb3VudHMuc2V0KG5vcm1hbGl6ZWRNaW50LCAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1pbnRDb3VudHMuc2V0KG5vcm1hbGl6ZWRNaW50LCBtaW50Q291bnRzLmdldChub3JtYWxpemVkTWludCkgKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgY29tbW9uTWludHMgPSBbXTtcbiAgZm9yIChjb25zdCBbbWludCwgY291bnRdIG9mIG1pbnRDb3VudHMuZW50cmllcygpKSB7XG4gICAgaWYgKGNvdW50ID09PSBtaW50Q29sbGVjdGlvbnMubGVuZ3RoKSB7XG4gICAgICBjb21tb25NaW50cy5wdXNoKG1pbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY29tbW9uTWludHM7XG59XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L3dhbGxldC9wYXltZW50LnRzXG52YXIgUGF5bWVudEhhbmRsZXIgPSBjbGFzcyB7XG4gIHdhbGxldDtcbiAgY29uc3RydWN0b3Iod2FsbGV0KSB7XG4gICAgdGhpcy53YWxsZXQgPSB3YWxsZXQ7XG4gIH1cbiAgLyoqXG4gICAqIFBheSBhIExOIGludm9pY2Ugd2l0aCB0aGlzIHdhbGxldC4gVGhpcyB3aWxsIHVzZWQgY2FzaHUgcHJvb2ZzIHRvIHBheSBhIGJvbHQxMS5cbiAgICovXG4gIGFzeW5jIGxuUGF5KHBheW1lbnQsIGNyZWF0ZVR4RXZlbnQgPSB0cnVlKSB7XG4gICAgaWYgKCFwYXltZW50LnByKSB0aHJvdyBuZXcgRXJyb3IoXCJwciBpcyByZXF1aXJlZFwiKTtcbiAgICBjb25zdCBpbnZvaWNlQW1vdW50ID0gZ2V0Qm9sdDExQW1vdW50KHBheW1lbnQucHIpO1xuICAgIGlmICghaW52b2ljZUFtb3VudCkgdGhyb3cgbmV3IEVycm9yKFwiaW52b2ljZSBhbW91bnQgaXMgcmVxdWlyZWRcIik7XG4gICAgaWYgKHBheW1lbnQuYW1vdW50ICYmIGludm9pY2VBbW91bnQgPiBwYXltZW50LmFtb3VudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52b2ljZSBhbW91bnQgaXMgbW9yZSB0aGFuIHRoZSBhbW91bnQgcGFzc2VkIGluXCIpO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBhd2FpdCBwYXlMbih0aGlzLndhbGxldCwgcGF5bWVudC5wciwge1xuICAgICAgYW1vdW50OiBwYXltZW50LmFtb3VudCxcbiAgICAgIHVuaXQ6IHBheW1lbnQudW5pdFxuICAgIH0pO1xuICAgIGlmICghcmVzPy5yZXN1bHQ/LnByZWltYWdlKSByZXR1cm47XG4gICAgaWYgKGNyZWF0ZVR4RXZlbnQpIHtcbiAgICAgIGNyZWF0ZU91dFR4RXZlbnQodGhpcy53YWxsZXQubmRrLCBwYXltZW50LCByZXMsIHRoaXMud2FsbGV0LnJlbGF5U2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIFN3YXBzIHRva2VucyB0byBhIHNwZWNpZmljIGFtb3VudCwgb3B0aW9uYWxseSBsb2NraW5nIHRvIGEgcDJway5cbiAgICovXG4gIGFzeW5jIGNhc2h1UGF5KHBheW1lbnQpIHtcbiAgICBjb25zdCBzYXRQYXltZW50ID0geyAuLi5wYXltZW50IH07XG4gICAgaWYgKHNhdFBheW1lbnQudW5pdD8uc3RhcnRzV2l0aChcIm1zYXRcIikpIHtcbiAgICAgIHNhdFBheW1lbnQuYW1vdW50ID0gc2F0UGF5bWVudC5hbW91bnQgLyAxZTM7XG4gICAgICBzYXRQYXltZW50LnVuaXQgPSBcInNhdFwiO1xuICAgIH1cbiAgICBsZXQgY3JlYXRlUmVzdWx0ID0gYXdhaXQgY3JlYXRlVG9rZW4odGhpcy53YWxsZXQsIHNhdFBheW1lbnQuYW1vdW50LCBwYXltZW50Lm1pbnRzLCBwYXltZW50LnAycGspO1xuICAgIGlmICghY3JlYXRlUmVzdWx0KSB7XG4gICAgICBpZiAocGF5bWVudC5hbGxvd0ludHJhbWludEZhbGxiYWNrKSB7XG4gICAgICAgIGNyZWF0ZVJlc3VsdCA9IGF3YWl0IGNyZWF0ZVRva2VuKHRoaXMud2FsbGV0LCBzYXRQYXltZW50LmFtb3VudCwgdm9pZCAwLCBwYXltZW50LnAycGspO1xuICAgICAgfVxuICAgICAgaWYgKCFjcmVhdGVSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVPdXRUeEV2ZW50KHRoaXMud2FsbGV0Lm5kaywgc2F0UGF5bWVudCwgY3JlYXRlUmVzdWx0LCB0aGlzLndhbGxldC5yZWxheVNldCk7XG4gICAgcmV0dXJuIGNyZWF0ZVJlc3VsdC5yZXN1bHQ7XG4gIH1cbn07XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L3dhbGxldC9zdGF0ZS9iYWxhbmNlLnRzXG5mdW5jdGlvbiBnZXRCYWxhbmNlKG9wdHMpIHtcbiAgY29uc3QgcHJvb2ZzID0gdGhpcy5nZXRQcm9vZkVudHJpZXMob3B0cyk7XG4gIHJldHVybiBwcm9vZnMucmVkdWNlKChzdW0sIHByb29mKSA9PiBzdW0gKyBwcm9vZi5wcm9vZi5hbW91bnQsIDApO1xufVxuZnVuY3Rpb24gZ2V0TWludHNCYWxhbmNlcyh7IG9ubHlBdmFpbGFibGUgfSA9IHsgb25seUF2YWlsYWJsZTogdHJ1ZSB9KSB7XG4gIGNvbnN0IGJhbGFuY2VzID0ge307XG4gIGNvbnN0IHByb29mcyA9IHRoaXMuZ2V0UHJvb2ZFbnRyaWVzKHsgb25seUF2YWlsYWJsZSB9KTtcbiAgZm9yIChjb25zdCBwcm9vZiBvZiBwcm9vZnMpIHtcbiAgICBpZiAoIXByb29mLm1pbnQpIGNvbnRpbnVlO1xuICAgIGJhbGFuY2VzW3Byb29mLm1pbnRdID8/PSAwO1xuICAgIGJhbGFuY2VzW3Byb29mLm1pbnRdICs9IHByb29mLnByb29mLmFtb3VudDtcbiAgfVxuICByZXR1cm4gYmFsYW5jZXM7XG59XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L3dhbGxldC9zdGF0ZS9wcm9vZnMudHNcbmZ1bmN0aW9uIGFkZFByb29mKHByb29mRW50cnkpIHtcbiAgdGhpcy5wcm9vZnMuc2V0KHByb29mRW50cnkucHJvb2YuQywgcHJvb2ZFbnRyeSk7XG4gIHRoaXMuam91cm5hbC5wdXNoKHtcbiAgICBtZW1vOiBcIkFkZGVkIHByb29mXCIsXG4gICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICB0eXBlOiBcInByb29mXCIsXG4gICAgICBpZDogcHJvb2ZFbnRyeS5wcm9vZi5DLFxuICAgICAgYW1vdW50OiBwcm9vZkVudHJ5LnByb29mLmFtb3VudCxcbiAgICAgIG1pbnQ6IHByb29mRW50cnkubWludFxuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiByZXNlcnZlUHJvb2ZzKHByb29mcywgYW1vdW50KSB7XG4gIGZvciAoY29uc3QgcHJvb2Ygb2YgcHJvb2ZzKSB7XG4gICAgdGhpcy51cGRhdGVQcm9vZihwcm9vZiwgeyBzdGF0ZTogXCJyZXNlcnZlZFwiIH0pO1xuICB9XG4gIHRoaXMucmVzZXJ2ZUFtb3VudHMucHVzaChhbW91bnQpO1xufVxuZnVuY3Rpb24gdW5yZXNlcnZlUHJvb2ZzKHByb29mcywgYW1vdW50LCBuZXdTdGF0ZSkge1xuICBmb3IgKGNvbnN0IHByb29mIG9mIHByb29mcykge1xuICAgIHRoaXMudXBkYXRlUHJvb2YocHJvb2YsIHsgc3RhdGU6IG5ld1N0YXRlIH0pO1xuICB9XG4gIGNvbnN0IGluZGV4ID0gdGhpcy5yZXNlcnZlQW1vdW50cy5pbmRleE9mKGFtb3VudCk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICB0aGlzLnJlc2VydmVBbW91bnRzLnNwbGljZShpbmRleCwgMSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBCVUc6IEFtb3VudCAke2Ftb3VudH0gbm90IGZvdW5kIGluIHJlc2VydmVBbW91bnRzYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFByb29mRW50cmllcyhvcHRzID0ge30pIHtcbiAgY29uc3QgcHJvb2ZzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY29uc3QgdmFsaWRTdGF0ZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJhdmFpbGFibGVcIl0pO1xuICBsZXQgeyBtaW50LCBvbmx5QXZhaWxhYmxlLCBpbmNsdWRlRGVsZXRlZCB9ID0gb3B0cztcbiAgb25seUF2YWlsYWJsZSA/Pz0gdHJ1ZTtcbiAgaWYgKCFvbmx5QXZhaWxhYmxlKSB2YWxpZFN0YXRlcy5hZGQoXCJyZXNlcnZlZFwiKTtcbiAgaWYgKGluY2x1ZGVEZWxldGVkKSB2YWxpZFN0YXRlcy5hZGQoXCJkZWxldGVkXCIpO1xuICBmb3IgKGNvbnN0IHByb29mRW50cnkgb2YgdGhpcy5wcm9vZnMudmFsdWVzKCkpIHtcbiAgICBpZiAobWludCAmJiBwcm9vZkVudHJ5Lm1pbnQgIT09IG1pbnQpIGNvbnRpbnVlO1xuICAgIGlmICghdmFsaWRTdGF0ZXMuaGFzKHByb29mRW50cnkuc3RhdGUpKSBjb250aW51ZTtcbiAgICBpZiAoIXByb29mRW50cnkucHJvb2YpIGNvbnRpbnVlO1xuICAgIHByb29mcy5zZXQocHJvb2ZFbnRyeS5wcm9vZi5DLCBwcm9vZkVudHJ5KTtcbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShwcm9vZnMudmFsdWVzKCkpO1xufVxuZnVuY3Rpb24gdXBkYXRlUHJvb2YocHJvb2YsIHN0YXRlKSB7XG4gIGNvbnN0IHByb29mQyA9IHByb29mLkM7XG4gIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHRoaXMucHJvb2ZzLmdldChwcm9vZkMpO1xuICBpZiAoIWN1cnJlbnRTdGF0ZSkgdGhyb3cgbmV3IEVycm9yKFwiUHJvb2Ygbm90IGZvdW5kXCIpO1xuICBjb25zdCBuZXdTdGF0ZSA9IHsgLi4uY3VycmVudFN0YXRlLCAuLi5zdGF0ZSB9O1xuICB0aGlzLnByb29mcy5zZXQocHJvb2ZDLCBuZXdTdGF0ZSk7XG4gIHRoaXMuam91cm5hbC5wdXNoKHtcbiAgICBtZW1vOiBgVXBkYXRlZCBwcm9vZiBzdGF0ZTogJHtKU09OLnN0cmluZ2lmeShzdGF0ZSl9YCxcbiAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIHR5cGU6IFwicHJvb2ZcIixcbiAgICAgIGlkOiBwcm9vZkMsXG4gICAgICBhbW91bnQ6IHByb29mLmFtb3VudCxcbiAgICAgIG1pbnQ6IGN1cnJlbnRTdGF0ZS5taW50XG4gICAgfVxuICB9KTtcbn1cblxuLy8gc3JjL3dhbGxldHMvY2FzaHUvd2FsbGV0L3N0YXRlL3Rva2VuLnRzXG5mdW5jdGlvbiBhZGRUb2tlbih0b2tlbikge1xuICBpZiAoIXRva2VuLm1pbnQpIHRocm93IG5ldyBFcnJvcihcIkJVRzogVG9rZW4gaGFzIG5vIG1pbnRcIik7XG4gIGNvbnN0IGN1cnJlbnRFbnRyeSA9IHRoaXMudG9rZW5zLmdldCh0b2tlbi5pZCk7XG4gIGNvbnN0IHN0YXRlID0gY3VycmVudEVudHJ5Py5zdGF0ZSA/PyBcImF2YWlsYWJsZVwiO1xuICB0aGlzLnRva2Vucy5zZXQodG9rZW4uaWQsIHsgdG9rZW4sIHN0YXRlIH0pO1xuICBsZXQgX2FkZGVkID0gMDtcbiAgbGV0IF9pbnZhbGlkID0gMDtcbiAgZm9yIChjb25zdCBwcm9vZiBvZiB0b2tlbi5wcm9vZnMpIHtcbiAgICBjb25zdCB2YWwgPSBtYXliZUFzc29jaWF0ZVByb29mV2l0aFRva2VuKHRoaXMsIHByb29mLCB0b2tlbiwgc3RhdGUpO1xuICAgIGlmICh2YWwgPT09IGZhbHNlKSB7XG4gICAgICBfaW52YWxpZCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBfYWRkZWQrKztcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG1heWJlQXNzb2NpYXRlUHJvb2ZXaXRoVG9rZW4od2FsbGV0U3RhdGUsIHByb29mLCB0b2tlbiwgc3RhdGUpIHtcbiAgY29uc3QgcHJvb2ZDID0gcHJvb2YuQztcbiAgY29uc3QgcHJvb2ZFbnRyeSA9IHdhbGxldFN0YXRlLnByb29mcy5nZXQocHJvb2ZDKTtcbiAgaWYgKCFwcm9vZkVudHJ5KSB7XG4gICAgd2FsbGV0U3RhdGUuYWRkUHJvb2Yoe1xuICAgICAgbWludDogdG9rZW4ubWludCxcbiAgICAgIHN0YXRlLFxuICAgICAgdG9rZW5JZDogdG9rZW4uaWQsXG4gICAgICB0aW1lc3RhbXA6IHRva2VuLmNyZWF0ZWRfYXQsXG4gICAgICBwcm9vZlxuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChwcm9vZkVudHJ5LnRva2VuSWQpIHtcbiAgICBpZiAocHJvb2ZFbnRyeS50b2tlbklkID09PSB0b2tlbi5pZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGV4aXN0aW5nVG9rZW5FbnRyeSA9IHdhbGxldFN0YXRlLnRva2Vucy5nZXQocHJvb2ZFbnRyeS50b2tlbklkKTtcbiAgICBpZiAoIWV4aXN0aW5nVG9rZW5FbnRyeSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQlVHOiBUb2tlbiBpZCAke3Byb29mRW50cnkudG9rZW5JZH0gbm90IGZvdW5kLCB3YXMgZXhwZWN0ZWQgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIHByb29mICR7cHJvb2ZDfWBcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGV4aXN0aW5nVG9rZW4gPSBleGlzdGluZ1Rva2VuRW50cnkudG9rZW47XG4gICAgaWYgKGV4aXN0aW5nVG9rZW4pIHtcbiAgICAgIGlmIChleGlzdGluZ1Rva2VuLmNyZWF0ZWRfYXQgJiYgKCF0b2tlbi5jcmVhdGVkX2F0IHx8IHRva2VuLmNyZWF0ZWRfYXQgPCBleGlzdGluZ1Rva2VuLmNyZWF0ZWRfYXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2FsbGV0U3RhdGUudXBkYXRlUHJvb2YocHJvb2YsIHsgdG9rZW5JZDogdG9rZW4uaWQsIHN0YXRlIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHdhbGxldFN0YXRlLnVwZGF0ZVByb29mKHByb29mLCB7IHRva2VuSWQ6IHRva2VuLmlkLCBzdGF0ZSB9KTtcbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiByZW1vdmVUb2tlbklkKHRva2VuSWQpIHtcbiAgY29uc3QgY3VycmVudEVudHJ5ID0gdGhpcy50b2tlbnMuZ2V0KHRva2VuSWQpIHx8IHt9O1xuICB0aGlzLnRva2Vucy5zZXQodG9rZW5JZCwgeyAuLi5jdXJyZW50RW50cnksIHN0YXRlOiBcImRlbGV0ZWRcIiB9KTtcbiAgZm9yIChjb25zdCBwcm9vZkVudHJ5IG9mIHRoaXMucHJvb2ZzLnZhbHVlcygpKSB7XG4gICAgY29uc3QgeyBwcm9vZiB9ID0gcHJvb2ZFbnRyeTtcbiAgICBpZiAocHJvb2ZFbnRyeS50b2tlbklkID09PSB0b2tlbklkKSB7XG4gICAgICBpZiAoIXByb29mKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJVRzogUHJvb2YgZW50cnkgaGFzIG5vIHByb29mXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVQcm9vZihwcm9vZiwgeyBzdGF0ZTogXCJkZWxldGVkXCIgfSk7XG4gICAgfVxuICB9XG59XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L3dhbGxldC9zdGF0ZS91cGRhdGUudHNcbmltcG9ydCB7XG4gIE5ES0Nhc2h1VG9rZW4gYXMgTkRLQ2FzaHVUb2tlbjIsXG4gIE5ES0V2ZW50IGFzIE5ES0V2ZW50MixcbiAgTkRLS2luZCBhcyBOREtLaW5kM1xufSBmcm9tIFwiQG5vc3RyLWRldi1raXQvbmRrXCI7XG5hc3luYyBmdW5jdGlvbiB1cGRhdGUoc3RhdGVDaGFuZ2UsIF9tZW1vKSB7XG4gIHVwZGF0ZUludGVybmFsU3RhdGUodGhpcywgc3RhdGVDaGFuZ2UpO1xuICB0aGlzLndhbGxldC5lbWl0KFwiYmFsYW5jZV91cGRhdGVkXCIpO1xuICByZXR1cm4gdXBkYXRlRXh0ZXJuYWxTdGF0ZSh0aGlzLCBzdGF0ZUNoYW5nZSk7XG59XG5mdW5jdGlvbiB1cGRhdGVJbnRlcm5hbFN0YXRlKHdhbGxldFN0YXRlLCBzdGF0ZUNoYW5nZSkge1xuICBpZiAoc3RhdGVDaGFuZ2Uuc3RvcmUgJiYgc3RhdGVDaGFuZ2Uuc3RvcmUubGVuZ3RoID4gMCkge1xuICAgIGZvciAoY29uc3QgcHJvb2Ygb2Ygc3RhdGVDaGFuZ2Uuc3RvcmUpIHtcbiAgICAgIHdhbGxldFN0YXRlLmFkZFByb29mKHtcbiAgICAgICAgbWludDogc3RhdGVDaGFuZ2UubWludCxcbiAgICAgICAgc3RhdGU6IFwiYXZhaWxhYmxlXCIsXG4gICAgICAgIHByb29mLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhdGVDaGFuZ2UuZGVzdHJveSAmJiBzdGF0ZUNoYW5nZS5kZXN0cm95Lmxlbmd0aCA+IDApIHtcbiAgICBmb3IgKGNvbnN0IHByb29mIG9mIHN0YXRlQ2hhbmdlLmRlc3Ryb3kpIHtcbiAgICAgIHdhbGxldFN0YXRlLnVwZGF0ZVByb29mKHByb29mLCB7IHN0YXRlOiBcImRlbGV0ZWRcIiB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXRlQ2hhbmdlLnJlc2VydmUgJiYgc3RhdGVDaGFuZ2UucmVzZXJ2ZS5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQlVHOiBQcm9vZnMgc2hvdWxkIG5vdCBiZSByZXNlcnZlZCB2aWEgdXBkYXRlXCIpO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiB1cGRhdGVFeHRlcm5hbFN0YXRlKHdhbGxldFN0YXRlLCBzdGF0ZUNoYW5nZSkge1xuICBjb25zdCBuZXdTdGF0ZSA9IGNhbGN1bGF0ZU5ld1N0YXRlKHdhbGxldFN0YXRlLCBzdGF0ZUNoYW5nZSk7XG4gIGlmIChuZXdTdGF0ZS5kZWxldGVkVG9rZW5JZHMuc2l6ZSA+IDApIHtcbiAgICBjb25zdCBkZWxldGVFdmVudCA9IG5ldyBOREtFdmVudDIod2FsbGV0U3RhdGUud2FsbGV0Lm5kaywge1xuICAgICAga2luZDogTkRLS2luZDMuRXZlbnREZWxldGlvbixcbiAgICAgIHRhZ3M6IFtcbiAgICAgICAgW1wia1wiLCBOREtLaW5kMy5DYXNodVRva2VuLnRvU3RyaW5nKCldLFxuICAgICAgICAuLi5BcnJheS5mcm9tKG5ld1N0YXRlLmRlbGV0ZWRUb2tlbklkcykubWFwKChpZCkgPT4gW1wiZVwiLCBpZF0pXG4gICAgICBdXG4gICAgfSk7XG4gICAgYXdhaXQgZGVsZXRlRXZlbnQuc2lnbigpO1xuICAgIHB1Ymxpc2hXaXRoUmV0cnkod2FsbGV0U3RhdGUsIGRlbGV0ZUV2ZW50LCB3YWxsZXRTdGF0ZS53YWxsZXQucmVsYXlTZXQpO1xuICAgIGZvciAoY29uc3QgdG9rZW5JZCBvZiBuZXdTdGF0ZS5kZWxldGVkVG9rZW5JZHMpIHtcbiAgICAgIHdhbGxldFN0YXRlLnJlbW92ZVRva2VuSWQodG9rZW5JZCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlcyA9IHt9O1xuICBpZiAobmV3U3RhdGUuc2F2ZVByb29mcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgbmV3VG9rZW4gPSBhd2FpdCBjcmVhdGVUb2tlbkV2ZW50KHdhbGxldFN0YXRlLCBzdGF0ZUNoYW5nZS5taW50LCBuZXdTdGF0ZSk7XG4gICAgcmVzLmNyZWF0ZWQgPSBuZXdUb2tlbjtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuYXN5bmMgZnVuY3Rpb24gcHVibGlzaFdpdGhSZXRyeSh3YWxsZXRTdGF0ZSwgZXZlbnQsIHJlbGF5U2V0LCByZXRyeVRpbWVvdXQgPSAxMCAqIDFlMykge1xuICBsZXQgcHVibGlzaFJlc3VsdDtcbiAgcHVibGlzaFJlc3VsdCA9IGF3YWl0IGV2ZW50LnB1Ymxpc2gocmVsYXlTZXQpO1xuICBsZXQgdHlwZTtcbiAgaWYgKGV2ZW50LmtpbmQgPT09IE5ES0tpbmQzLkV2ZW50RGVsZXRpb24pIHR5cGUgPSBcImRlbGV0aW9uXCI7XG4gIGlmIChldmVudC5raW5kID09PSBOREtLaW5kMy5DYXNodVRva2VuKSB0eXBlID0gXCJ0b2tlblwiO1xuICBpZiAoZXZlbnQua2luZCA9PT0gTkRLS2luZDMuQ2FzaHVXYWxsZXQpIHR5cGUgPSBcIndhbGxldFwiO1xuICBjb25zdCBqb3VybmFsRW50cnlNZXRhZGF0YSA9IHtcbiAgICB0eXBlLFxuICAgIGlkOiBldmVudC5pZCxcbiAgICByZWxheVVybDogcmVsYXlTZXQ/LnJlbGF5VXJscy5qb2luKFwiLFwiKVxuICB9O1xuICBpZiAocHVibGlzaFJlc3VsdCkge1xuICAgIHdhbGxldFN0YXRlLmpvdXJuYWwucHVzaCh7XG4gICAgICBtZW1vOiBgUHVibGlzaCBraW5kOiR7ZXZlbnQua2luZH0gc3VjY2Vlc2Z1bGx5YCxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIG1ldGFkYXRhOiBqb3VybmFsRW50cnlNZXRhZGF0YVxuICAgIH0pO1xuICAgIHJldHVybiBwdWJsaXNoUmVzdWx0O1xuICB9XG4gIHdhbGxldFN0YXRlLmpvdXJuYWwucHVzaCh7XG4gICAgbWVtbzogXCJQdWJsaXNoIGZhaWxlZFwiLFxuICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICBtZXRhZGF0YTogam91cm5hbEVudHJ5TWV0YWRhdGFcbiAgfSk7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHB1Ymxpc2hXaXRoUmV0cnkod2FsbGV0U3RhdGUsIGV2ZW50LCByZWxheVNldCwgcmV0cnlUaW1lb3V0KTtcbiAgfSwgcmV0cnlUaW1lb3V0KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRva2VuRXZlbnQod2FsbGV0U3RhdGUsIG1pbnQsIG5ld1N0YXRlKSB7XG4gIGNvbnN0IG5ld1Rva2VuID0gbmV3IE5ES0Nhc2h1VG9rZW4yKHdhbGxldFN0YXRlLndhbGxldC5uZGspO1xuICBuZXdUb2tlbi5taW50ID0gbWludDtcbiAgbmV3VG9rZW4ucHJvb2ZzID0gbmV3U3RhdGUuc2F2ZVByb29mcztcbiAgYXdhaXQgbmV3VG9rZW4udG9Ob3N0ckV2ZW50KCk7XG4gIHdhbGxldFN0YXRlLmFkZFRva2VuKG5ld1Rva2VuKTtcbiAgbmV3VG9rZW4uZGVsZXRlZFRva2VucyA9IEFycmF5LmZyb20obmV3U3RhdGUuZGVsZXRlZFRva2VuSWRzKTtcbiAgYXdhaXQgbmV3VG9rZW4uc2lnbigpO1xuICB3YWxsZXRTdGF0ZS5hZGRUb2tlbihuZXdUb2tlbik7XG4gIHB1Ymxpc2hXaXRoUmV0cnkod2FsbGV0U3RhdGUsIG5ld1Rva2VuLCB3YWxsZXRTdGF0ZS53YWxsZXQucmVsYXlTZXQpO1xuICByZXR1cm4gbmV3VG9rZW47XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVOZXdTdGF0ZSh3YWxsZXRTdGF0ZSwgc3RhdGVDaGFuZ2UpIHtcbiAgY29uc3QgZGVzdHJveVByb29mcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3QgcHJvb2Ygb2Ygc3RhdGVDaGFuZ2UuZGVzdHJveSB8fCBbXSkgZGVzdHJveVByb29mcy5hZGQocHJvb2YuQyk7XG4gIGNvbnN0IHByb29mc1RvU3RvcmUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBsZXQgdG9rZW5zVG9EZWxldGU7XG4gIGZvciAoY29uc3QgcHJvb2Ygb2Ygc3RhdGVDaGFuZ2Uuc3RvcmUgfHwgW10pIHByb29mc1RvU3RvcmUuc2V0KHByb29mLkMsIHByb29mKTtcbiAgdG9rZW5zVG9EZWxldGUgPSBnZXRBZmZlY3RlZFRva2Vucyh3YWxsZXRTdGF0ZSwgc3RhdGVDaGFuZ2UpO1xuICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vuc1RvRGVsZXRlLnZhbHVlcygpKSB7XG4gICAgZm9yIChjb25zdCBwcm9vZiBvZiB0b2tlbi5wcm9vZnMpIHtcbiAgICAgIGlmIChkZXN0cm95UHJvb2ZzLmhhcyhwcm9vZi5DKSkgY29udGludWU7XG4gICAgICBwcm9vZnNUb1N0b3JlLnNldChwcm9vZi5DLCBwcm9vZik7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgZGVsZXRlZFRva2VuSWRzOiBuZXcgU2V0KHRva2Vuc1RvRGVsZXRlLmtleXMoKSksXG4gICAgZGVsZXRlZFByb29mczogZGVzdHJveVByb29mcyxcbiAgICByZXNlcnZlUHJvb2ZzOiBbXSxcbiAgICBzYXZlUHJvb2ZzOiBBcnJheS5mcm9tKHByb29mc1RvU3RvcmUudmFsdWVzKCkpXG4gIH07XG59XG5mdW5jdGlvbiBnZXRBZmZlY3RlZFRva2Vucyh3YWxsZXRTdGF0ZSwgc3RhdGVDaGFuZ2UpIHtcbiAgY29uc3QgdG9rZW5zID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgZm9yIChjb25zdCBwcm9vZiBvZiBzdGF0ZUNoYW5nZS5kZXN0cm95IHx8IFtdKSB7XG4gICAgY29uc3QgcHJvb2ZFbnRyeSA9IHdhbGxldFN0YXRlLnByb29mcy5nZXQocHJvb2YuQyk7XG4gICAgaWYgKCFwcm9vZkVudHJ5KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgdG9rZW5JZCA9IHByb29mRW50cnkudG9rZW5JZDtcbiAgICBpZiAoIXRva2VuSWQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB0b2tlbkVudHJ5ID0gd2FsbGV0U3RhdGUudG9rZW5zLmdldCh0b2tlbklkKTtcbiAgICBpZiAoIXRva2VuRW50cnk/LnRva2VuKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdG9rZW5zLnNldCh0b2tlbklkLCB0b2tlbkVudHJ5LnRva2VuKTtcbiAgfVxuICByZXR1cm4gdG9rZW5zO1xufVxuXG4vLyBzcmMvd2FsbGV0cy9jYXNodS93YWxsZXQvc3RhdGUvaW5kZXgudHNcbnZhciBXYWxsZXRTdGF0ZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iod2FsbGV0LCByZXNlcnZlZFByb29mQ3MgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpKSB7XG4gICAgdGhpcy53YWxsZXQgPSB3YWxsZXQ7XG4gICAgdGhpcy5yZXNlcnZlZFByb29mQ3MgPSByZXNlcnZlZFByb29mQ3M7XG4gIH1cbiAgLyoqXG4gICAqIHRoZSBhbW91bnRzIHRoYXQgYXJlIGludGVuZGVkIHRvIGJlIHJlc2VydmVkXG4gICAqIHRoaXMgaXMgdGhlIG5ldCBhbW91bnQgd2UgYXJlIHRyeWluZyB0byBwYXkgb3V0LFxuICAgKiBleGNsdWRpbmcgZmVlcyBhbmQgY29pbiBzaXplc1xuICAgKiBlLmcuIHdlIG1pZ2h0IHdhbnQgdG8gcGF5IDUgc2F0cywgaGF2ZSAyIHNhdHMgaW4gZmVlc1xuICAgKiBhbmQgd2UncmUgdXNpbmcgMiBpbnB1dHMgdGhhdCBhZGQgdXAgdG8gOCwgdGhlIHJlc2VydmUgYW1vdW50IGlzIDVcbiAgICogd2hpbGUgdGhlIHJlc2VydmUgcHJvb2ZzIGFkZCB1cCB0byA4XG4gICAqL1xuICByZXNlcnZlQW1vdW50cyA9IFtdO1xuICAvKipcbiAgICogU291cmNlIG9mIHRydXRoIG9mIHRoZSBwcm9vZnMgdGhpcyB3YWxsZXQgaGFzL2hhZC5cbiAgICovXG4gIHByb29mcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIC8qKlxuICAgKiBUaGUgdG9rZW5zIHRoYXQgYXJlIGtub3duIHRvIHRoaXMgd2FsbGV0LlxuICAgKi9cbiAgdG9rZW5zID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgam91cm5hbCA9IFtdO1xuICAvKiogVGhpcyBpcyBhIGRlYnVnZ2luZyBmdW5jdGlvbiB0aGF0IGR1bXBzIHRoZSBzdGF0ZSBvZiB0aGUgd2FsbGV0ICovXG4gIGR1bXAoKSB7XG4gICAgY29uc3QgcmVzID0ge1xuICAgICAgcHJvb2ZzOiBBcnJheS5mcm9tKHRoaXMucHJvb2ZzLnZhbHVlcygpKSxcbiAgICAgIGJhbGFuY2VzOiB0aGlzLmdldE1pbnRzQmFsYW5jZSgpLFxuICAgICAgdG90YWxCYWxhbmNlOiB0aGlzLmdldEJhbGFuY2UoKSxcbiAgICAgIHRva2VuczogQXJyYXkuZnJvbSh0aGlzLnRva2Vucy52YWx1ZXMoKSlcbiAgICB9O1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgKiBUb2tlbnNcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgYWRkVG9rZW4gPSBhZGRUb2tlbi5iaW5kKHRoaXMpO1xuICByZW1vdmVUb2tlbklkID0gcmVtb3ZlVG9rZW5JZC5iaW5kKHRoaXMpO1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAqIFByb29mIG1hbmFnZW1lbnRcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgYWRkUHJvb2YgPSBhZGRQcm9vZi5iaW5kKHRoaXMpO1xuICAvKipcbiAgICogUmVzZXJ2ZXMgYSBudW1iZXIgb2Ygc2VsZWN0ZWQgcHJvb2ZzIGFuZCBhIHNwZWNpZmljIGFtb3VudC5cbiAgICpcbiAgICogVGhlIGFtb3VudCBhbmQgdG90YWwgb2YgdGhlIHByb29mcyBkb24ndCBuZWVkIHRvIG1hdGNoLiBXZVxuICAgKiBtaWdodCB3YW50IHRvIHVzZSA1IHNhdHMgYW5kIGhhdmUgMiBwcm9vZnMgb2YgNCBzYXRzIGVhY2guXG4gICAqIEluIHRoYXQgY2FzZSwgdGhlIHJlc2VydmUgYW1vdW50IGlzIDUsIHdoaWxlIHRoZSByZXNlcnZlIHByb29mc1xuICAgKiBhZGQgdXAgdG8gOC5cbiAgICovXG4gIHJlc2VydmVQcm9vZnMgPSByZXNlcnZlUHJvb2ZzLmJpbmQodGhpcyk7XG4gIC8qKlxuICAgKiBVbnJlc2VydmVzIGEgbnVtYmVyIG9mIHNlbGVjdGVkIHByb29mcyBhbmQgYSBzcGVjaWZpYyBhbW91bnQuXG4gICAqL1xuICB1bnJlc2VydmVQcm9vZnMgPSB1bnJlc2VydmVQcm9vZnMuYmluZCh0aGlzKTtcbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHByb29mIGVudHJpZXMsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgbWludCBhbmQgc3RhdGVcbiAgICovXG4gIGdldFByb29mRW50cmllcyA9IGdldFByb29mRW50cmllcy5iaW5kKHRoaXMpO1xuICAvKipcbiAgICogVXBkYXRlcyBpbmZvcm1hdGlvbiBhYm91dCBhIHByb29mXG4gICAqL1xuICB1cGRhdGVQcm9vZiA9IHVwZGF0ZVByb29mLmJpbmQodGhpcyk7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBwcm9vZnMsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgbWludCBhbmQgc3RhdGVcbiAgICogQHBhcmFtIG9wdHMubWludCAtIG9wdGlvbmFsIG1pbnQgdG8gZmlsdGVyIGJ5XG4gICAqIEBwYXJhbSBvcHRzLm9ubHlBdmFpbGFibGUgLSBvbmx5IGluY2x1ZGUgYXZhaWxhYmxlIHByb29mcyBAZGVmYXVsdCB0cnVlXG4gICAqIEBwYXJhbSBvcHRzLmluY2x1ZGVEZWxldGVkIC0gaW5jbHVkZSBkZWxldGVkIHByb29mcyBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ2V0UHJvb2ZzKG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQcm9vZkVudHJpZXMob3B0cykubWFwKChlbnRyeSkgPT4gZW50cnkucHJvb2YpO1xuICB9XG4gIGdldFRva2VucyhvcHRzID0geyBvbmx5QXZhaWxhYmxlOiB0cnVlIH0pIHtcbiAgICBjb25zdCBwcm9vZkVudHJpZXMgPSB0aGlzLmdldFByb29mRW50cmllcyhvcHRzKTtcbiAgICBjb25zdCB0b2tlbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3QgcHJvb2ZFbnRyeSBvZiBwcm9vZkVudHJpZXMpIHtcbiAgICAgIGNvbnN0IHRva2VuSWQgPSBwcm9vZkVudHJ5LnRva2VuSWQgPz8gbnVsbDtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSB0b2tlbnMuZ2V0KHRva2VuSWQpID8/IHtcbiAgICAgICAgdG9rZW5JZCxcbiAgICAgICAgbWludDogcHJvb2ZFbnRyeS5taW50LFxuICAgICAgICBwcm9vZkVudHJpZXM6IFtdXG4gICAgICB9O1xuICAgICAgY3VycmVudC50b2tlbiA/Pz0gdG9rZW5JZCA/IHRoaXMudG9rZW5zLmdldCh0b2tlbklkKT8udG9rZW4gOiB2b2lkIDA7XG4gICAgICBjdXJyZW50LnByb29mRW50cmllcy5wdXNoKHByb29mRW50cnkpO1xuICAgICAgdG9rZW5zLnNldCh0b2tlbklkLCBjdXJyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VucztcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIGxpc3Qgb2YgcHJvb2ZzIGZvciBlYWNoIG1pbnRcbiAgICogQHJldHVybnNcbiAgICovXG4gIGdldE1pbnRzUHJvb2ZzKHtcbiAgICB2YWxpZFN0YXRlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImF2YWlsYWJsZVwiXSlcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgbWludHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5wcm9vZnMudmFsdWVzKCkpIHtcbiAgICAgIGlmICghZW50cnkubWludCB8fCAhZW50cnkucHJvb2YpIGNvbnRpbnVlO1xuICAgICAgaWYgKCF2YWxpZFN0YXRlcy5oYXMoZW50cnkuc3RhdGUpKSBjb250aW51ZTtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSBtaW50cy5nZXQoZW50cnkubWludCkgfHwgW107XG4gICAgICBjdXJyZW50LnB1c2goZW50cnkucHJvb2YpO1xuICAgICAgbWludHMuc2V0KGVudHJ5Lm1pbnQsIGN1cnJlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gbWludHM7XG4gIH1cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgKiBCYWxhbmNlXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBiYWxhbmNlIG9mIHRoZSB3YWxsZXQsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgbWludCBhbmQgc3RhdGVcbiAgICpcbiAgICogQHBhcmFtcyBvcHRzLm1pbnQgLSBvcHRpb25hbCBtaW50IHRvIGZpbHRlciBieVxuICAgKiBAcGFyYW1zIG9wdHMub25seUF2YWlsYWJsZSAtIG9ubHkgaW5jbHVkZSBhdmFpbGFibGUgcHJvb2ZzIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGdldEJhbGFuY2UgPSBnZXRCYWxhbmNlLmJpbmQodGhpcyk7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBiYWxhbmNlcyBvZiB0aGUgZGlmZmVyZW50IG1pbnRzXG4gICAqXG4gICAqIEBwYXJhbXMgb3B0cy5vbmx5QXZhaWxhYmxlIC0gb25seSBpbmNsdWRlIGF2YWlsYWJsZSBwcm9vZnMgQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgZ2V0TWludHNCYWxhbmNlID0gZ2V0TWludHNCYWxhbmNlcy5iaW5kKHRoaXMpO1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAqIFN0YXRlIHVwZGF0ZVxuICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICB1cGRhdGUgPSB1cGRhdGUuYmluZCh0aGlzKTtcbn07XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L3dhbGxldC9pbmRleC50c1xudmFyIF9zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuZnVuY3Rpb24gbG9nKF9tc2cpIHtcbn1cbnZhciBOREtDYXNodVdhbGxldCA9IGNsYXNzIF9OREtDYXNodVdhbGxldCBleHRlbmRzIE5ES1dhbGxldCB7XG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcIm5pcC02MFwiO1xuICB9XG4gIF9wMnBrO1xuICBzdWI7XG4gIHN0YXR1cyA9IFwiaW5pdGlhbFwiIC8qIElOSVRJQUwgKi87XG4gIHN0YXRpYyBraW5kID0gTkRLS2luZDQuQ2FzaHVXYWxsZXQ7XG4gIHN0YXRpYyBraW5kcyA9IFtOREtLaW5kNC5DYXNodVdhbGxldF07XG4gIG1pbnRzID0gW107XG4gIHByaXZrZXlzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgc2lnbmVyO1xuICB3YWxsZXRJZCA9IFwibmlwLTYwXCI7XG4gIGRlcG9zaXRNb25pdG9yID0gbmV3IE5ES0Nhc2h1RGVwb3NpdE1vbml0b3IoKTtcbiAgLyoqXG4gICAqIFdhcm5pbmdzIHRoYXQgaGF2ZSBiZWVuIHJhaXNlZFxuICAgKi9cbiAgd2FybmluZ3MgPSBbXTtcbiAgcGF5bWVudEhhbmRsZXI7XG4gIHN0YXRlO1xuICByZWxheVNldDtcbiAgY29uc3RydWN0b3IobmRrKSB7XG4gICAgc3VwZXIobmRrKTtcbiAgICB0aGlzLm5kayA9IG5kaztcbiAgICB0aGlzLnBheW1lbnRIYW5kbGVyID0gbmV3IFBheW1lbnRIYW5kbGVyKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSBuZXcgV2FsbGV0U3RhdGUodGhpcyk7XG4gICAgbG9nKFwiTkRLIENhc2h1IFdhbGxldCBjb25zdHJ1Y3RvclwiKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgYmFja3VwIGV2ZW50IGZvciB0aGlzIHdhbGxldFxuICAgKi9cbiAgYXN5bmMgYmFja3VwKHB1Ymxpc2ggPSB0cnVlKSB7XG4gICAgbG9nKFwiTkRLIENhc2h1IFdhbGxldCBnZW5lcmF0aW5nIGJhY2t1cFwiKTtcbiAgICBpZiAodGhpcy5wcml2a2V5cy5zaXplID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJubyBwcml2a2V5IHRvIGJhY2t1cFwiKTtcbiAgICBjb25zdCBiYWNrdXAgPSBuZXcgTkRLQ2FzaHVXYWxsZXRCYWNrdXAodGhpcy5uZGspO1xuICAgIGNvbnN0IHByaXZrZXlzID0gW107XG4gICAgZm9yIChjb25zdCBbX3B1YmtleSwgc2lnbmVyXSBvZiB0aGlzLnByaXZrZXlzLmVudHJpZXMoKSkge1xuICAgICAgcHJpdmtleXMucHVzaChzaWduZXIucHJpdmF0ZUtleSk7XG4gICAgfVxuICAgIGJhY2t1cC5wcml2a2V5cyA9IHByaXZrZXlzO1xuICAgIGJhY2t1cC5taW50cyA9IHRoaXMubWludHM7XG4gICAgaWYgKHB1Ymxpc2gpIGJhY2t1cC5zYXZlKHRoaXMucmVsYXlTZXQpO1xuICAgIHJldHVybiBiYWNrdXA7XG4gIH1cbiAgY29uc29saWRhdGVUb2tlbnMgPSBjb25zb2xpZGF0ZVRva2Vucy5iaW5kKHRoaXMpO1xuICAvKipcbiAgICogR2VuZXJhdGVzIG51dHMgdGhhdCBjYW4gYmUgdXNlZCB0byBzZW5kIHRvIHNvbWVvbmUuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IHNlbmQgYW55dGhpbmcsIGl0IGp1c3QgZ2VuZXJhdGVzIGEgc3BlY2lmaWMgYW1vdW50IG9mIHByb29mcy5cbiAgICogQHBhcmFtIGFtb3VudHNcbiAgICogQHJldHVybnNcbiAgICovXG4gIGFzeW5jIG1pbnROdXRzKGFtb3VudHMpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGNvbnN0IHRvdGFsQW1vdW50ID0gYW1vdW50cy5yZWR1Y2UoKGFjYywgYW1vdW50KSA9PiBhY2MgKyBhbW91bnQsIDApO1xuICAgIGZvciAoY29uc3QgbWludCBvZiB0aGlzLm1pbnRzKSB7XG4gICAgICBjb25zdCB3YWxsZXQgPSBhd2FpdCB0aGlzLmdldENhc2h1V2FsbGV0KG1pbnQpO1xuICAgICAgY29uc3QgbWludFByb29mczIgPSBhd2FpdCB0aGlzLnN0YXRlLmdldFByb29mcyh7IG1pbnQgfSk7XG4gICAgICByZXN1bHQgPSBhd2FpdCB3YWxsZXQuc2VuZCh0b3RhbEFtb3VudCwgbWludFByb29mczIsIHtcbiAgICAgICAgcHJvb2ZzV2VIYXZlOiBtaW50UHJvb2ZzMixcbiAgICAgICAgaW5jbHVkZUZlZXM6IHRydWUsXG4gICAgICAgIG91dHB1dEFtb3VudHM6IHtcbiAgICAgICAgICBzZW5kQW1vdW50czogYW1vdW50c1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChyZXN1bHQuc2VuZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGNoYW5nZSA9IHsgc3RvcmU6IHJlc3VsdD8ua2VlcCA/PyBbXSwgZGVzdHJveTogcmVzdWx0LnNlbmQsIG1pbnQgfTtcbiAgICAgICAgY29uc3QgdXBkYXRlUmVzID0gYXdhaXQgdGhpcy5zdGF0ZS51cGRhdGUoY2hhbmdlKTtcbiAgICAgICAgY3JlYXRlT3V0VHhFdmVudChcbiAgICAgICAgICB0aGlzLm5kayxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYXltZW50RGVzY3JpcHRpb246IFwibWludGVkIG51dHNcIixcbiAgICAgICAgICAgIGFtb3VudDogYW1vdW50cy5yZWR1Y2UoKGFjYywgYW1vdW50KSA9PiBhY2MgKyBhbW91bnQsIDApXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXN1bHQ6IHsgcHJvb2ZzOiByZXN1bHQuc2VuZCwgbWludCB9LFxuICAgICAgICAgICAgcHJvb2ZzQ2hhbmdlOiBjaGFuZ2UsXG4gICAgICAgICAgICBzdGF0ZVVwZGF0ZTogdXBkYXRlUmVzLFxuICAgICAgICAgICAgbWludCxcbiAgICAgICAgICAgIGZlZTogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGhpcy5yZWxheVNldFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmVtaXQoXCJiYWxhbmNlX3VwZGF0ZWRcIik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBMb2FkcyBhIHdhbGxldCBpbmZvcm1hdGlvbiBmcm9tIGFuIGV2ZW50XG4gICAqIEBwYXJhbSBldmVudFxuICAgKi9cbiAgYXN5bmMgbG9hZEZyb21FdmVudChldmVudCkge1xuICAgIGNvbnN0IF9ldmVudCA9IG5ldyBOREtFdmVudDMoZXZlbnQubmRrLCBldmVudC5yYXdFdmVudCgpKTtcbiAgICBhd2FpdCBfZXZlbnQuZGVjcnlwdCgpO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBKU09OLnBhcnNlKF9ldmVudC5jb250ZW50KTtcbiAgICBmb3IgKGNvbnN0IHRhZyBvZiBjb250ZW50KSB7XG4gICAgICBpZiAodGFnWzBdID09PSBcIm1pbnRcIikge1xuICAgICAgICB0aGlzLm1pbnRzLnB1c2godGFnWzFdKTtcbiAgICAgIH0gZWxzZSBpZiAodGFnWzBdID09PSBcInByaXZrZXlcIikge1xuICAgICAgICBhd2FpdCB0aGlzLmFkZFByaXZrZXkodGFnWzFdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgYXdhaXQgdGhpcy5nZXRQMnBrKCk7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGZyb20oZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50Lm5kaykgdGhyb3cgbmV3IEVycm9yKFwibm8gbmRrIGluc3RhbmNlIG9uIGV2ZW50XCIpO1xuICAgIGNvbnN0IHdhbGxldCA9IG5ldyBfTkRLQ2FzaHVXYWxsZXQoZXZlbnQubmRrKTtcbiAgICBhd2FpdCB3YWxsZXQubG9hZEZyb21FdmVudChldmVudCk7XG4gICAgcmV0dXJuIHdhbGxldDtcbiAgfVxuICAvKipcbiAgICogU3RhcnRzIG1vbml0b3JpbmcgdGhlIHdhbGxldC5cbiAgICpcbiAgICogVXNlIGBzaW5jZWAgdG8gc3RhcnQgc3luY2luZyBzdGF0ZSBmcm9tIGEgc3BlY2lmaWMgdGltZXN0YW1wLiBUaGlzIHNob3VsZCBiZVxuICAgKiB1c2VkIGJ5IHN0b3JpbmcgYXQgdGhlIGFwcCBsZXZlbCBhIHRpbWUgaW4gd2hpY2ggd2Uga25vdyB3ZSB3ZXJlIGFibGUgdG8gY29tbXVuaWNhdGVcbiAgICogd2l0aCB0aGUgcmVsYXlzLCBmb3IgZXhhbXBsZSwgYnkgc2F2aW5nIHRoZSB0aW1lIHRoZSB3YWxsZXQgaGFzIGVtaXR0ZWQgYSBcInJlYWR5XCIgZXZlbnQuXG4gICAqL1xuICBzdGFydChvcHRzKSB7XG4gICAgbG9nKFwiTkRLIENhc2h1IFdhbGxldCBzdGFydGluZ1wiKTtcbiAgICBjb25zdCBhY3RpdmVVc2VyID0gdGhpcy5uZGs/LmFjdGl2ZVVzZXI7XG4gICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInJlYWR5XCIgLyogUkVBRFkgKi8pIHJldHVybjtcbiAgICB0aGlzLnN0YXR1cyA9IFwibG9hZGluZ1wiIC8qIExPQURJTkcgKi87XG4gICAgY29uc3QgcHVia2V5ID0gb3B0cz8ucHVia2V5ID8/IGFjdGl2ZVVzZXI/LnB1YmtleTtcbiAgICBpZiAoIXB1YmtleSkgdGhyb3cgbmV3IEVycm9yKFwibm8gcHVia2V5XCIpO1xuICAgIGNvbnN0IGZpbHRlcnMgPSBbXG4gICAgICB7IGtpbmRzOiBbTkRLS2luZDQuQ2FzaHVUb2tlbl0sIGF1dGhvcnM6IFtwdWJrZXldIH0sXG4gICAgICB7IGtpbmRzOiBbTkRLS2luZDQuQ2FzaHVRdW90ZV0sIGF1dGhvcnM6IFtwdWJrZXldIH0sXG4gICAgICB7XG4gICAgICAgIGtpbmRzOiBbTkRLS2luZDQuRXZlbnREZWxldGlvbl0sXG4gICAgICAgIGF1dGhvcnM6IFtwdWJrZXldLFxuICAgICAgICBcIiNrXCI6IFtOREtLaW5kNC5DYXNodVRva2VuLnRvU3RyaW5nKCldXG4gICAgICB9XG4gICAgXTtcbiAgICBpZiAob3B0cz8uc2luY2UpIHtcbiAgICAgIGZpbHRlcnNbMF0uc2luY2UgPSBvcHRzLnNpbmNlO1xuICAgICAgZmlsdGVyc1sxXS5zaW5jZSA9IG9wdHMuc2luY2U7XG4gICAgICBmaWx0ZXJzWzJdLnNpbmNlID0gb3B0cy5zaW5jZTtcbiAgICB9XG4gICAgY29uc3Qgc3ViT3B0cyA9IG9wdHMgPz8ge307XG4gICAgc3ViT3B0cy5zdWJJZCA/Pz0gXCJjYXNodS13YWxsZXQtc3RhdGVcIjtcbiAgICBsb2coYFN1YnNjcmliaW5nIHRvICR7SlNPTi5zdHJpbmdpZnkoZmlsdGVycyl9IGFuZCBvcHRzICR7SlNPTi5zdHJpbmdpZnkob3B0cyl9YCk7XG4gICAgdGhpcy5zdWIgPSB0aGlzLm5kay5zdWJzY3JpYmUoZmlsdGVycywgeyAuLi5zdWJPcHRzLCByZWxheVNldDogdGhpcy5yZWxheVNldCB9LCBmYWxzZSk7XG4gICAgdGhpcy5zdWIub24oXCJldmVudDpkdXBcIiwgZXZlbnREdXBIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc3ViLm9uKFwiZXZlbnRcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBsb2coYEV2ZW50ICR7ZXZlbnQua2luZH0gcmVjZWl2ZWRgKTtcbiAgICAgIGV2ZW50SGFuZGxlci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9KTtcbiAgICB0aGlzLnN1Yi5vbihcImVvc2VcIiwgKCkgPT4ge1xuICAgICAgbG9nKFwiRW9zZSByZWNlaXZlZFwiKTtcbiAgICAgIHRoaXMuZW1pdChcInJlYWR5XCIpO1xuICAgICAgdGhpcy5zdGF0dXMgPSBcInJlYWR5XCIgLyogUkVBRFkgKi87XG4gICAgfSk7XG4gICAgdGhpcy5zdWIuc3RhcnQodHJ1ZSk7XG4gIH1cbiAgc3RvcCgpIHtcbiAgICB0aGlzLnN1Yj8uc3RvcCgpO1xuICAgIHRoaXMuc3RhdHVzID0gXCJpbml0aWFsXCIgLyogSU5JVElBTCAqLztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcDJwayBvZiB0aGlzIHdhbGxldCBvciBnZW5lcmF0ZXMgYSBuZXcgb25lIGlmIHdlIGRvbid0IGhhdmUgb25lXG4gICAqL1xuICBhc3luYyBnZXRQMnBrKCkge1xuICAgIGlmICh0aGlzLl9wMnBrKSByZXR1cm4gdGhpcy5fcDJwaztcbiAgICBpZiAodGhpcy5wcml2a2V5cy5zaXplID09PSAwKSB7XG4gICAgICBjb25zdCBzaWduZXIgPSBOREtQcml2YXRlS2V5U2lnbmVyLmdlbmVyYXRlKCk7XG4gICAgICBhd2FpdCB0aGlzLmFkZFByaXZrZXkoc2lnbmVyLnByaXZhdGVLZXkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wMnBrO1xuICB9XG4gIC8qKlxuICAgKiBJZiB0aGlzIHdhbGxldCBoYXMgYWNjZXNzIHRvIG1vcmUgdGhhbiBvbmUgcHJpdmtleSwgdGhpcyB3aWxsIHJldHVybiBhbGwgb2YgdGhlbS5cbiAgICovXG4gIGdldCBwMnBrcygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnByaXZrZXlzLmtleXMoKSk7XG4gIH1cbiAgYXN5bmMgYWRkUHJpdmtleShwcml2a2V5KSB7XG4gICAgY29uc3Qgc2lnbmVyID0gbmV3IE5ES1ByaXZhdGVLZXlTaWduZXIocHJpdmtleSk7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHNpZ25lci51c2VyKCk7XG4gICAgdGhpcy5wcml2a2V5cy5zZXQodXNlci5wdWJrZXksIHNpZ25lcik7XG4gICAgdGhpcy5fcDJwayA/Pz0gdXNlci5wdWJrZXk7XG4gICAgcmV0dXJuIHRoaXMuX3AycGs7XG4gIH1cbiAgZ2V0IHAycGsoKSB7XG4gICAgaWYgKCF0aGlzLl9wMnBrKSB0aHJvdyBuZXcgRXJyb3IoXCJwMnBrIG5vdCBzZXRcIik7XG4gICAgcmV0dXJuIHRoaXMuX3AycGs7XG4gIH1cbiAgc2V0IHAycGsocHVia2V5KSB7XG4gICAgaWYgKHRoaXMucHJpdmtleXMuaGFzKHB1YmtleSkpIHtcbiAgICAgIHRoaXMuc2lnbmVyID0gdGhpcy5wcml2a2V5cy5nZXQocHVia2V5KTtcbiAgICAgIHRoaXMucDJwayA9IHB1YmtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBwcml2a2V5IGZvciAke3B1YmtleX0gbm90IGZvdW5kYCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgdGhlIHBheWxvYWQgZm9yIGEgd2FsbGV0IGV2ZW50XG4gICAqL1xuICB3YWxsZXRQYXlsb2FkKCkge1xuICAgIGNvbnN0IHByaXZrZXlzID0gQXJyYXkuZnJvbSh0aGlzLnByaXZrZXlzLnZhbHVlcygpKS5tYXAoKHNpZ25lcikgPT4gc2lnbmVyLnByaXZhdGVLZXkpO1xuICAgIHJldHVybiBwYXlsb2FkRm9yRXZlbnQocHJpdmtleXMsIHRoaXMubWludHMpO1xuICB9XG4gIGFzeW5jIHB1Ymxpc2goKSB7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgTkRLRXZlbnQzKHRoaXMubmRrLCB7XG4gICAgICBjb250ZW50OiBKU09OLnN0cmluZ2lmeSh0aGlzLndhbGxldFBheWxvYWQoKSksXG4gICAgICBraW5kOiBOREtLaW5kNC5DYXNodVdhbGxldFxuICAgIH0pO1xuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLm5kaz8uc2lnbmVyPy51c2VyKCk7XG4gICAgYXdhaXQgZXZlbnQuZW5jcnlwdCh1c2VyLCB2b2lkIDAsIFwibmlwNDRcIik7XG4gICAgcmV0dXJuIGV2ZW50LnB1Ymxpc2godGhpcy5yZWxheVNldCk7XG4gIH1cbiAgLyoqXG4gICAqIFByZXBhcmVzIGEgZGVwb3NpdFxuICAgKiBAcGFyYW0gYW1vdW50XG4gICAqIEBwYXJhbSBtaW50XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHdhbGxldCA9IG5ldyBOREtDYXNodVdhbGxldCguLi4pO1xuICAgKiBjb25zdCBkZXBvc2l0ID0gd2FsbGV0LmRlcG9zaXQoMTAwMCwgXCJodHRwczovL21pbnQuZXhhbXBsZS5jb21cIiwgXCJzYXRzXCIpO1xuICAgKiBkZXBvc2l0Lm9uKFwic3VjY2Vzc1wiLCAodG9rZW4pID0+IHtcbiAgICogfSk7XG4gICAqIGRlcG9zaXQub24oXCJlcnJvclwiLCAoZXJyb3IpID0+IHtcbiAgICogfSk7XG4gICAqXG4gICAqIC8vIHN0YXJ0IG1vbml0b3JpbmcgdGhlIGRlcG9zaXRcbiAgICogZGVwb3NpdC5zdGFydCgpO1xuICAgKi9cbiAgZGVwb3NpdChhbW91bnQsIG1pbnQpIHtcbiAgICBjb25zdCBkZXBvc2l0ID0gbmV3IE5ES0Nhc2h1RGVwb3NpdCh0aGlzLCBhbW91bnQsIG1pbnQpO1xuICAgIGRlcG9zaXQub24oXCJzdWNjZXNzXCIsICh0b2tlbikgPT4ge1xuICAgICAgdGhpcy5zdGF0ZS5hZGRUb2tlbih0b2tlbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlcG9zaXQ7XG4gIH1cbiAgLyoqXG4gICAqIFJlY2VpdmVzIGEgdG9rZW4gYW5kIGFkZHMgaXQgdG8gdGhlIHdhbGxldFxuICAgKiBAcGFyYW0gdG9rZW5cbiAgICogQHJldHVybnMgdGhlIHRva2VuIGV2ZW50IHRoYXQgd2FzIGNyZWF0ZWRcbiAgICovXG4gIGFzeW5jIHJlY2VpdmVUb2tlbih0b2tlbiwgZGVzY3JpcHRpb24pIHtcbiAgICBjb25zdCB7IG1pbnQgfSA9IGdldERlY29kZWRUb2tlbih0b2tlbik7XG4gICAgY29uc3Qgd2FsbGV0ID0gYXdhaXQgdGhpcy5nZXRDYXNodVdhbGxldChtaW50KTtcbiAgICBjb25zdCBwcm9vZnMgPSBhd2FpdCB3YWxsZXQucmVjZWl2ZSh0b2tlbik7XG4gICAgY29uc3QgdXBkYXRlUmVzID0gYXdhaXQgdGhpcy5zdGF0ZS51cGRhdGUoe1xuICAgICAgc3RvcmU6IHByb29mcyxcbiAgICAgIG1pbnRcbiAgICB9KTtcbiAgICBjb25zdCB0b2tlbkV2ZW50ID0gdXBkYXRlUmVzLmNyZWF0ZWQ7XG4gICAgY3JlYXRlSW5UeEV2ZW50KHRoaXMubmRrLCBwcm9vZnMsIG1pbnQsIHVwZGF0ZVJlcywgeyBkZXNjcmlwdGlvbiB9LCB0aGlzLnJlbGF5U2V0KTtcbiAgICByZXR1cm4gdG9rZW5FdmVudDtcbiAgfVxuICAvKipcbiAgICogUGF5IGEgTE4gaW52b2ljZSB3aXRoIHRoaXMgd2FsbGV0XG4gICAqL1xuICBhc3luYyBsblBheShwYXltZW50LCBjcmVhdGVUeEV2ZW50ID0gdHJ1ZSkge1xuICAgIHJldHVybiB0aGlzLnBheW1lbnRIYW5kbGVyLmxuUGF5KHBheW1lbnQsIGNyZWF0ZVR4RXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBTd2FwcyB0b2tlbnMgdG8gYSBzcGVjaWZpYyBhbW91bnQsIG9wdGlvbmFsbHkgbG9ja2luZyB0byBhIHAycGsuXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gaGFzIHNpZGUgZWZmZWN0czpcbiAgICogLSBJdCBzd2FwcyB0b2tlbnMgYXQgdGhlIG1pbnRcbiAgICogLSBJdCB1cGRhdGVzIHRoZSB3YWxsZXQgc3RhdGUgKGRlbGV0ZXMgYWZmZWN0ZWQgdG9rZW5zLCBtaWdodCBjcmVhdGUgbmV3IG9uZXMpXG4gICAqIC0gSXQgY3JlYXRlcyBhIHdhbGxldCB0cmFuc2FjdGlvbiBldmVudFxuICAgKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHByb29mcyB0aGF0IG5lZWQgdG8gYmUgc2VudCB0byB0aGUgcmVjaXBpZW50LlxuICAgKiBAcGFyYW0gYW1vdW50XG4gICAqL1xuICBhc3luYyBjYXNodVBheShwYXltZW50KSB7XG4gICAgcmV0dXJuIHRoaXMucGF5bWVudEhhbmRsZXIuY2FzaHVQYXkocGF5bWVudCk7XG4gIH1cbiAgd2FsbGV0cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGFzeW5jIHJlZGVlbU51dHphcHMobnV0emFwcywgcHJpdmtleSwgeyBtaW50LCBwcm9vZnMsIGNhc2h1V2FsbGV0IH0pIHtcbiAgICBpZiAoY2FzaHVXYWxsZXQpIHtcbiAgICAgIG1pbnQgPz89IGNhc2h1V2FsbGV0Lm1pbnQubWludFVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFtaW50KSB0aHJvdyBuZXcgRXJyb3IoXCJtaW50IG5vdCBzZXRcIik7XG4gICAgICBjYXNodVdhbGxldCA9IGF3YWl0IHRoaXMuZ2V0Q2FzaHVXYWxsZXQobWludCk7XG4gICAgfVxuICAgIGlmICghbWludCkgdGhyb3cgbmV3IEVycm9yKFwibWludCBub3Qgc2V0XCIpO1xuICAgIGlmICghcHJvb2ZzKSB0aHJvdyBuZXcgRXJyb3IoXCJwcm9vZnMgbm90IHNldFwiKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcHJvb2ZzV2VIYXZlID0gdGhpcy5zdGF0ZS5nZXRQcm9vZnMoeyBtaW50IH0pO1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgY2FzaHVXYWxsZXQucmVjZWl2ZSh7IHByb29mcywgbWludCB9LCB7IHByb29mc1dlSGF2ZSwgcHJpdmtleSB9KTtcbiAgICAgIGNvbnN0IHJlY2VpdmVkQW1vdW50ID0gcHJvb2ZzLnJlZHVjZSgoYWNjLCBwcm9vZikgPT4gYWNjICsgcHJvb2YuYW1vdW50LCAwKTtcbiAgICAgIGNvbnN0IHJlZGVlbWVkQW1vdW50ID0gcmVzLnJlZHVjZSgoYWNjLCBwcm9vZikgPT4gYWNjICsgcHJvb2YuYW1vdW50LCAwKTtcbiAgICAgIGNvbnN0IGZlZSA9IHJlY2VpdmVkQW1vdW50IC0gcmVkZWVtZWRBbW91bnQ7XG4gICAgICBjb25zdCB1cGRhdGVSZXMgPSBhd2FpdCB0aGlzLnN0YXRlLnVwZGF0ZSh7XG4gICAgICAgIHN0b3JlOiByZXMsXG4gICAgICAgIG1pbnRcbiAgICAgIH0pO1xuICAgICAgY3JlYXRlSW5UeEV2ZW50KHRoaXMubmRrLCByZXMsIG1pbnQsIHVwZGF0ZVJlcywgeyBudXR6YXBzLCBmZWUgfSwgdGhpcy5yZWxheVNldCk7XG4gICAgICByZXR1cm4gcmVjZWl2ZWRBbW91bnQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgXCJlcnJvciByZWRlZW1pbmcgbnV0emFwc1wiLFxuICAgICAgICBudXR6YXBzLm1hcCgobikgPT4gbi5lbmNvZGUoKSksXG4gICAgICAgIGVcbiAgICAgICk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuICB3YXJuKG1zZywgZXZlbnQsIHJlbGF5cykge1xuICAgIHJlbGF5cyA/Pz0gZXZlbnQ/Lm9uUmVsYXlzO1xuICAgIHRoaXMud2FybmluZ3MucHVzaCh7IG1zZywgZXZlbnQsIHJlbGF5cyB9KTtcbiAgICB0aGlzLmVtaXQoXCJ3YXJuaW5nXCIsIHsgbXNnLCBldmVudCwgcmVsYXlzIH0pO1xuICB9XG4gIGdldCBiYWxhbmNlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbW91bnQ6IHRoaXMuc3RhdGUuZ2V0QmFsYW5jZSh7IG9ubHlBdmFpbGFibGU6IHRydWUgfSlcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0b3RhbCBiYWxhbmNlIGZvciBhIHNwZWNpZmljIG1pbnQsIGluY2x1ZGluZyByZXNlcnZlZCBwcm9vZnNcbiAgICovXG4gIG1pbnRCYWxhbmNlKG1pbnQpIHtcbiAgICByZXR1cm4gdGhpcy5taW50QmFsYW5jZXNbbWludF0gfHwgMDtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhbGwgdG9rZW5zLCBncm91cGVkIGJ5IG1pbnQgd2l0aCB0aGVpciB0b3RhbCBiYWxhbmNlc1xuICAgKi9cbiAgZ2V0IG1pbnRCYWxhbmNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5nZXRNaW50c0JhbGFuY2UoeyBvbmx5QXZhaWxhYmxlOiB0cnVlIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBtaW50cyB0aGF0IGhhdmUgZW5vdWdoIGF2YWlsYWJsZSBiYWxhbmNlIChleGNsdWRpbmcgcmVzZXJ2ZWQgcHJvb2ZzKVxuICAgKiB0byBjb3ZlciB0aGUgc3BlY2lmaWVkIGFtb3VudFxuICAgKi9cbiAgZ2V0TWludHNXaXRoQmFsYW5jZShhbW91bnQpIHtcbiAgICBjb25zdCBhdmFpbGFibGVCYWxhbmNlcyA9IHRoaXMuc3RhdGUuZ2V0TWludHNCYWxhbmNlKHsgb25seUF2YWlsYWJsZTogdHJ1ZSB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoYXZhaWxhYmxlQmFsYW5jZXMpLmZpbHRlcigoW18sIGJhbGFuY2VdKSA9PiBiYWxhbmNlID49IGFtb3VudCkubWFwKChbbWludF0pID0+IG1pbnQpO1xuICB9XG59O1xudmFyIE5ES0Nhc2h1V2FsbGV0QmFja3VwID0gY2xhc3MgX05ES0Nhc2h1V2FsbGV0QmFja3VwIGV4dGVuZHMgTkRLRXZlbnQzIHtcbiAgcHJpdmtleXMgPSBbXTtcbiAgbWludHMgPSBbXTtcbiAgY29uc3RydWN0b3IobmRrLCBldmVudCkge1xuICAgIHN1cGVyKG5kaywgZXZlbnQpO1xuICAgIHRoaXMua2luZCA/Pz0gTkRLS2luZDQuQ2FzaHVXYWxsZXRCYWNrdXA7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGZyb20oZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50Lm5kaykgdGhyb3cgbmV3IEVycm9yKFwibm8gbmRrIGluc3RhbmNlIG9uIGV2ZW50XCIpO1xuICAgIGNvbnN0IGJhY2t1cCA9IG5ldyBfTkRLQ2FzaHVXYWxsZXRCYWNrdXAoZXZlbnQubmRrLCBldmVudCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGJhY2t1cC5kZWNyeXB0KCk7XG4gICAgICBjb25zdCBjb250ZW50ID0gSlNPTi5wYXJzZShiYWNrdXAuY29udGVudCk7XG4gICAgICBmb3IgKGNvbnN0IHRhZyBvZiBjb250ZW50KSB7XG4gICAgICAgIGlmICh0YWdbMF0gPT09IFwibWludFwiKSB7XG4gICAgICAgICAgYmFja3VwLm1pbnRzLnB1c2godGFnWzFdKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YWdbMF0gPT09IFwicHJpdmtleVwiKSB7XG4gICAgICAgICAgYmFja3VwLnByaXZrZXlzLnB1c2godGFnWzFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJlcnJvciBkZWNyeXB0aW5nIGJhY2t1cCBldmVudFwiLCBiYWNrdXAuZW5jb2RlKCksIGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gYmFja3VwO1xuICB9XG4gIGFzeW5jIHNhdmUocmVsYXlTZXQpIHtcbiAgICBpZiAoIXRoaXMubmRrKSB0aHJvdyBuZXcgRXJyb3IoXCJubyBuZGsgaW5zdGFuY2VcIik7XG4gICAgaWYgKCF0aGlzLnByaXZrZXlzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKFwibm8gcHJpdmtleXNcIik7XG4gICAgdGhpcy5jb250ZW50ID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZEZvckV2ZW50KHRoaXMucHJpdmtleXMsIHRoaXMubWludHMpKTtcbiAgICBhd2FpdCB0aGlzLmVuY3J5cHQodGhpcy5uZGsuYWN0aXZlVXNlciwgdm9pZCAwLCBcIm5pcDQ0XCIpO1xuICAgIHJldHVybiB0aGlzLnB1Ymxpc2gocmVsYXlTZXQpO1xuICB9XG59O1xuZnVuY3Rpb24gcGF5bG9hZEZvckV2ZW50KHByaXZrZXlzLCBtaW50cykge1xuICBpZiAocHJpdmtleXMubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJwcml2a2V5IG5vdCBzZXRcIik7XG4gIGNvbnN0IHBheWxvYWQgPSBbXG4gICAgLi4ubWludHMubWFwKChtaW50KSA9PiBbXCJtaW50XCIsIG1pbnRdKSxcbiAgICAuLi5wcml2a2V5cy5tYXAoKHByaXZrZXkpID0+IFtcInByaXZrZXlcIiwgcHJpdmtleV0pXG4gIF07XG4gIHJldHVybiBwYXlsb2FkO1xufVxuXG4vLyBzcmMvbnV0emFwLW1vbml0b3IvZmV0Y2gtcGFnZS50c1xuaW1wb3J0IHtcbiAgTkRLTnV0emFwLFxuICBOREtTdWJzY3JpcHRpb25DYWNoZVVzYWdlXG59IGZyb20gXCJAbm9zdHItZGV2LWtpdC9uZGtcIjtcbmFzeW5jIGZ1bmN0aW9uIGZldGNoUGFnZShuZGssIGZpbHRlciwgX2tub3duTnV0emFwcywgcmVsYXlTZXQpIHtcbiAgY29uc3QgZXZlbnRzID0gYXdhaXQgbmRrLmZldGNoRXZlbnRzKFxuICAgIGZpbHRlcixcbiAgICB7XG4gICAgICBjYWNoZVVzYWdlOiBOREtTdWJzY3JpcHRpb25DYWNoZVVzYWdlLk9OTFlfUkVMQVksXG4gICAgICBncm91cGFibGU6IGZhbHNlLFxuICAgICAgc3ViSWQ6IFwicmVjZW50LW51dHphcFwiXG4gICAgfSxcbiAgICByZWxheVNldFxuICApO1xuICByZXR1cm4gQXJyYXkuZnJvbShldmVudHMpLm1hcCgoZSkgPT4gTkRLTnV0emFwLmZyb20oZSkpLmZpbHRlcigobikgPT4gISFuKTtcbn1cblxuLy8gc3JjL251dHphcC1tb25pdG9yL2dyb3VwLW51dHphcHMudHNcbmltcG9ydCB7IGNhc2h1UHVia2V5VG9Ob3N0clB1YmtleSwgcHJvb2ZQMnBrIH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuZnVuY3Rpb24gZ3JvdXBOdXR6YXBzKG51dHphcHMsIG1vbml0b3IpIHtcbiAgY29uc3QgcmVzdWx0ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY29uc3QgZ2V0S2V5ID0gKG1pbnQsIHAycGsgPSBcIm5vLWtleVwiKSA9PiBgJHttaW50fToke3AycGt9YDtcbiAgZm9yIChjb25zdCBudXR6YXAgb2YgbnV0emFwcykge1xuICAgIGlmICghbW9uaXRvci5zaG91bGRUcnlSZWRlZW0obnV0emFwKSkgY29udGludWU7XG4gICAgY29uc3QgbWludCA9IG51dHphcC5taW50O1xuICAgIGZvciAoY29uc3QgcHJvb2Ygb2YgbnV0emFwLnByb29mcykge1xuICAgICAgY29uc3QgY2FzaHVQdWJrZXkgPSBwcm9vZlAycGsocHJvb2YpID8/IFwibm8ta2V5XCI7XG4gICAgICBjb25zdCBrZXkgPSBnZXRLZXkobWludCwgY2FzaHVQdWJrZXkpO1xuICAgICAgY29uc3QgZ3JvdXAgPSByZXN1bHQuZ2V0KGtleSkgPz8ge1xuICAgICAgICBtaW50LFxuICAgICAgICBjYXNodVB1YmtleSxcbiAgICAgICAgbm9zdHJQdWJrZXk6IGNhc2h1UHVia2V5VG9Ob3N0clB1YmtleShjYXNodVB1YmtleSksXG4gICAgICAgIG51dHphcHM6IFtdXG4gICAgICB9O1xuICAgICAgZ3JvdXAubnV0emFwcy5wdXNoKG51dHphcCk7XG4gICAgICByZXN1bHQuc2V0KGtleSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShyZXN1bHQudmFsdWVzKCkpO1xufVxuXG4vLyBzcmMvbnV0emFwLW1vbml0b3Ivc3BlbmQtc3RhdHVzLnRzXG5pbXBvcnQgeyBDaGVja1N0YXRlRW51bSBhcyBDaGVja1N0YXRlRW51bTIgfSBmcm9tIFwiQGNhc2h1L2Nhc2h1LXRzXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRQcm9vZlNwZW5kU3RhdGUod2FsbGV0LCBudXR6YXBzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB1bnNwZW50UHJvb2ZzOiBbXSxcbiAgICBzcGVudFByb29mczogW10sXG4gICAgbnV0emFwc1dpdGhVbnNwZW50UHJvb2ZzOiBbXSxcbiAgICBudXR6YXBzV2l0aFNwZW50UHJvb2ZzOiBbXVxuICB9O1xuICBjb25zdCBwcm9vZkNzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgY29uc3QgcHJvb2ZzID0gW107XG4gIGNvbnN0IG51dHphcE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGZvciAoY29uc3QgbnV0emFwIG9mIG51dHphcHMpIHtcbiAgICBmb3IgKGNvbnN0IHByb29mIG9mIG51dHphcC5wcm9vZnMpIHtcbiAgICAgIGlmIChwcm9vZkNzLmhhcyhwcm9vZi5DKSkgY29udGludWU7XG4gICAgICBwcm9vZkNzLmFkZChwcm9vZi5DKTtcbiAgICAgIHByb29mcy5wdXNoKHByb29mKTtcbiAgICAgIG51dHphcE1hcC5zZXQocHJvb2YuQywgbnV0emFwKTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc3RhdGVzID0gYXdhaXQgd2FsbGV0LmNoZWNrUHJvb2ZzU3RhdGVzKHByb29mcyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBzdGF0ZXNbaV07XG4gICAgY29uc3QgcHJvb2YgPSBwcm9vZnNbaV07XG4gICAgY29uc3QgbnV0emFwID0gbnV0emFwTWFwLmdldChwcm9vZi5DKTtcbiAgICBpZiAoIW51dHphcCkgY29udGludWU7XG4gICAgaWYgKHN0YXRlLnN0YXRlID09PSBDaGVja1N0YXRlRW51bTIuU1BFTlQpIHtcbiAgICAgIHJlc3VsdC5zcGVudFByb29mcy5wdXNoKHByb29mKTtcbiAgICAgIGlmICghcmVzdWx0Lm51dHphcHNXaXRoU3BlbnRQcm9vZnMuc29tZSgobikgPT4gbi5pZCA9PT0gbnV0emFwLmlkKSkge1xuICAgICAgICByZXN1bHQubnV0emFwc1dpdGhTcGVudFByb29mcy5wdXNoKG51dHphcCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5zdGF0ZSA9PT0gQ2hlY2tTdGF0ZUVudW0yLlVOU1BFTlQpIHtcbiAgICAgIHJlc3VsdC51bnNwZW50UHJvb2ZzLnB1c2gocHJvb2YpO1xuICAgICAgaWYgKCFyZXN1bHQubnV0emFwc1dpdGhVbnNwZW50UHJvb2ZzLnNvbWUoKG4pID0+IG4uaWQgPT09IG51dHphcC5pZCkpIHtcbiAgICAgICAgcmVzdWx0Lm51dHphcHNXaXRoVW5zcGVudFByb29mcy5wdXNoKG51dHphcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIHNyYy9udXR6YXAtbW9uaXRvci9pbmRleC50c1xudmFyIF9zdGFydFRpbWUyID0gRGF0ZS5ub3coKTtcbmZ1bmN0aW9uIGxvZzIoX21zZykge1xufVxudmFyIE5ES051dHphcE1vbml0b3IgPSBjbGFzcyBleHRlbmRzIEV2ZW50RW1pdHRlcjQge1xuICBzdG9yZTtcbiAgbmRrO1xuICB1c2VyO1xuICByZWxheVNldDtcbiAgc3ViO1xuICBudXR6YXBTdGF0ZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBfd2FsbGV0O1xuICBtaW50TGlzdDtcbiAgcHJpdmtleXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjYXNodVdhbGxldHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBnZXRDYXNodVdhbGxldCA9IGdldENhc2h1V2FsbGV0LmJpbmQodGhpcyk7XG4gIG9uTWludEluZm9OZWVkZWQ7XG4gIG9uTWludEluZm9Mb2FkZWQ7XG4gIG9uTWludEtleXNOZWVkZWQ7XG4gIG9uTWludEtleXNMb2FkZWQ7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgbnV0emFwIG1vbml0b3IuXG4gICAqIEBwYXJhbSBuZGsgLSBUaGUgTkRLIGluc3RhbmNlLlxuICAgKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyIHRvIG1vbml0b3IuXG4gICAqIEBwYXJhbSBtaW50TGlzdCAtIEFuIG9wdGlvbmFsIG1pbnQgbGlzdCB0byBtb25pdG9yIHphcHMgb24sIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQsIHRoZSBtb25pdG9yIHdpbGwgdXNlIHRoZSByZWxheSBzZXQgZnJvbSB0aGUgbWludCBsaXN0LCB3aGljaCBpcyB0aGUgY29ycmVjdCBkZWZhdWx0IGJlaGF2aW9yIG9mIE5JUC02MSB6YXBzLlxuICAgKiBAcGFyYW0gc3RvcmUgLSBBbiBvcHRpb25hbCBzdG9yZSB0byBzYXZlIGFuZCBsb2FkIG51dHphcCBzdGF0ZXMgdG8uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuZGssIHVzZXIsIHsgbWludExpc3QsIHN0b3JlIH0pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubmRrID0gbmRrO1xuICAgIHRoaXMudXNlciA9IHVzZXI7XG4gICAgdGhpcy5taW50TGlzdCA9IG1pbnRMaXN0O1xuICAgIHRoaXMucmVsYXlTZXQgPSBtaW50TGlzdD8ucmVsYXlTZXQ7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICB9XG4gIHNldCB3YWxsZXQod2FsbGV0KSB7XG4gICAgdGhpcy5fd2FsbGV0ID0gd2FsbGV0O1xuICAgIGlmICh3YWxsZXQpIHtcbiAgICAgIHRoaXMub25NaW50SW5mb05lZWRlZCA/Pz0gd2FsbGV0Lm9uTWludEluZm9OZWVkZWQ7XG4gICAgICB0aGlzLm9uTWludEluZm9Mb2FkZWQgPz89IHdhbGxldC5vbk1pbnRJbmZvTG9hZGVkO1xuICAgICAgdGhpcy5vbk1pbnRLZXlzTmVlZGVkID8/PSB3YWxsZXQub25NaW50S2V5c05lZWRlZDtcbiAgICAgIHRoaXMub25NaW50S2V5c0xvYWRlZCA/Pz0gd2FsbGV0Lm9uTWludEtleXNMb2FkZWQ7XG4gICAgICBpZiAod2FsbGV0IGluc3RhbmNlb2YgTkRLQ2FzaHVXYWxsZXQgJiYgd2FsbGV0Py5wcml2a2V5cykge1xuICAgICAgICBmb3IgKGNvbnN0IFtwdWJrZXksIHNpZ25lcl0gb2Ygd2FsbGV0LnByaXZrZXlzLmVudHJpZXMoKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmFkZFByaXZrZXkoc2lnbmVyKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZmFpbGVkIHRvIGFkZCBwcml2a2V5IGZyb20gd2FsbGV0IHdpdGggcHVia2V5XCIsIHB1YmtleSwgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldCB3YWxsZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dhbGxldDtcbiAgfVxuICAvKipcbiAgICogUHJvdmlkZSBwcml2YXRlIGtleXMgdGhhdCBjYW4gYmUgdXNlZCB0byByZWRlZW0gbnV0emFwcy5cbiAgICpcbiAgICogVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIHdoZW4gYSBOV0Mgd2FsbGV0IGlzIHVzZWQgdG8gcmVjZWl2ZSB0aGUgbnV0emFwcyxcbiAgICogc2luY2UgaXQgZG9lc24ndCBoYXZlIGEgcHJpdmF0ZSBrZXksIHRoaXMgYWxsb3dzIGtlZXBpbmcgdGhlIHByaXZhdGUga2V5IGluIGEgc2VwYXJhdGVcbiAgICogcGxhY2UgKGlkZWFsbHkgYSBOSVAtNjAgd2FsbGV0IGV2ZW50KS5cbiAgICpcbiAgICogTXVsdGlwbGUga2V5cyBjYW4gYmUgYWRkZWQsIGFuZCB0aGUgbW9uaXRvciB3aWxsIHVzZSB0aGUgY29ycmVjdCBrZXkgZm9yIHRoZSBudXR6YXAuXG4gICAqL1xuICBhc3luYyBhZGRQcml2a2V5KHNpZ25lcikge1xuICAgIGNvbnN0IHB1YmtleSA9IChhd2FpdCBzaWduZXIudXNlcigpKS5wdWJrZXk7XG4gICAgaWYgKHRoaXMucHJpdmtleXMuaGFzKHB1YmtleSkpIHJldHVybjtcbiAgICB0aGlzLnByaXZrZXlzLnNldChwdWJrZXksIHNpZ25lcik7XG4gICAgaWYgKCF0aGlzLnN1YikgcmV0dXJuO1xuICAgIGNvbnN0IGluTXNzaW5nUHJpdktleVN0YXRlID0gKHN0YXRlKSA9PiBzdGF0ZS5zdGF0dXMgPT09IE5ka051dHphcFN0YXR1cy5NSVNTSU5HX1BSSVZLRVk7XG4gICAgY29uc3QgZW5zdXJlSXNDYXNodVB1YmtleTIgPSAoc3RhdGUpID0+IHN0YXRlLm51dHphcD8ucDJwayA9PT0gcHVia2V5O1xuICAgIGNvbnN0IGNhbmRpZGF0ZU51dHphcHMgPSBBcnJheS5mcm9tKHRoaXMubnV0emFwU3RhdGVzLnZhbHVlcygpKS5maWx0ZXIoaW5Nc3NpbmdQcml2S2V5U3RhdGUpLmZpbHRlcihlbnN1cmVJc0Nhc2h1UHVia2V5Mik7XG4gICAgaWYgKGNhbmRpZGF0ZU51dHphcHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbnV0emFwcyA9IGNhbmRpZGF0ZU51dHphcHMubWFwKChjKSA9PiBjLm51dHphcCkuZmlsdGVyKChuKSA9PiAhIW4pO1xuICAgICAgY29uc3QgZ3JvdXBlZE51dHphcHMgPSBncm91cE51dHphcHMobnV0emFwcywgdGhpcyk7XG4gICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIGdyb3VwZWROdXR6YXBzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY2hlY2tBbmRSZWRlZW1Hcm91cChncm91cCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFzeW5jIGFkZFVzZXJQcml2S2V5KCkge1xuICAgIGNvbnN0IHsgc2lnbmVyIH0gPSB0aGlzLm5kaztcbiAgICBpZiAoc2lnbmVyIGluc3RhbmNlb2YgTkRLUHJpdmF0ZUtleVNpZ25lcjIpIHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBzaWduZXIudXNlcigpO1xuICAgICAgY29uc3QgcHVia2V5ID0gdXNlci5wdWJrZXk7XG4gICAgICB0aGlzLnByaXZrZXlzLnNldChwdWJrZXksIHNpZ25lcik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBMb2FkcyBraW5kOjM3NSBiYWNrdXAgZXZlbnRzIGZyb20gdGhpcyB1c2VyIHRvIGZpbmQgYWxsIGJhY2t1cCBrZXlzIHRoaXMgdXNlciBtaWdodCBoYXZlIHVzZWQuXG4gICAqL1xuICBhc3luYyBnZXRCYWNrdXBLZXlzKCkge1xuICAgIGNvbnN0IGJhY2t1cEV2ZW50cyA9IGF3YWl0IHRoaXMubmRrLmZldGNoRXZlbnRzKFxuICAgICAgW3sga2luZHM6IFtOREtLaW5kNS5DYXNodVdhbGxldEJhY2t1cF0sIGF1dGhvcnM6IFt0aGlzLnVzZXIucHVia2V5XSB9XSxcbiAgICAgIHZvaWQgMCxcbiAgICAgIHRoaXMucmVsYXlTZXRcbiAgICApO1xuICAgIGNvbnN0IGtleXMgPSBBcnJheS5mcm9tKHRoaXMucHJpdmtleXMudmFsdWVzKCkpO1xuICAgIGNvbnN0IGtleXNOb3RGb3VuZCA9IG5ldyBTZXQoa2V5cy5tYXAoKHNpZ25lcikgPT4gc2lnbmVyLnByaXZhdGVLZXkpKTtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGJhY2t1cEV2ZW50cykge1xuICAgICAgY29uc3QgYmFja3VwID0gYXdhaXQgTkRLQ2FzaHVXYWxsZXRCYWNrdXAuZnJvbShldmVudCk7XG4gICAgICBpZiAoIWJhY2t1cCkgY29udGludWU7XG4gICAgICBmb3IgKGNvbnN0IHByaXZrZXkgb2YgYmFja3VwLnByaXZrZXlzKSB7XG4gICAgICAgIGlmIChrZXlzTm90Rm91bmQuaGFzKHByaXZrZXkpKSBrZXlzTm90Rm91bmQuZGVsZXRlKHByaXZrZXkpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHNpZ25lciA9IG5ldyBOREtQcml2YXRlS2V5U2lnbmVyMihwcml2a2V5KTtcbiAgICAgICAgICB0aGlzLmFkZFByaXZrZXkoc2lnbmVyKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJmYWlsZWQgdG8gYWRkIHByaXZrZXlcIiwgcHJpdmtleSwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGtleXNOb3RGb3VuZC5zaXplID4gMCkge1xuICAgICAgY29uc3QgYmFja3VwID0gbmV3IE5ES0Nhc2h1V2FsbGV0QmFja3VwKHRoaXMubmRrKTtcbiAgICAgIGJhY2t1cC5wcml2a2V5cyA9IEFycmF5LmZyb20oa2V5c05vdEZvdW5kKTtcbiAgICAgIGF3YWl0IGJhY2t1cC5zYXZlKHRoaXMucmVsYXlTZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU3RhcnQgdGhlIG51dHphcCBtb25pdG9yLiBUaGUgbW9uaXRvciB3aWxsIGluaXRpYWxseSBsb29rIGJhY2tcbiAgICogZm9yIG51dHphcHMgaXQgZG9lc24ndCBrbm93IGFib3V0IGFuZCB3aWxsIHRyeSB0byByZWRlZW0gdGhlbS5cbiAgICpcbiAgICogQHBhcmFtIGtub3duTnV0emFwcyAtIEFuIG9wdGlvbmFsIHNldCBvZiBudXR6YXBzIHRoZSBhcHAga25vd3MgYWJvdXQuIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIHNvIHRoYXQgd2UgZG9uJ3QgdHJ5IHRvIHJlZGVlbSBudXR6YXBzIHdlIGtub3cgaGF2ZSBhbHJlYWR5IGJlZW4gcmVkZWVtZWQuXG4gICAqIEBwYXJhbSBwYWdlU2l6ZSAtIFRoZSBudW1iZXIgb2YgbnV0emFwcyB0byBmZXRjaCBwZXIgcGFnZS5cbiAgICpcbiAgICovXG4gIGFzeW5jIHN0YXJ0KHsgZmlsdGVyLCBvcHRzIH0pIHtcbiAgICBsb2cyKFwiU3RhcnRpbmcgbnV0emFwIG1vbml0b3JcIik7XG4gICAgaWYgKHRoaXMuc3ViKSB0aGlzLnN1Yi5zdG9wKCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuZ2V0QmFja3VwS2V5cygpO1xuICAgICAgbG9nMihgR290IGJhY2t1cCBrZXlzICR7dGhpcy5wcml2a2V5cy5zaXplfWApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJcXHUyNzRDIEZhaWxlZCB0byBnZXQgYmFja3VwIGtleXNcIiwgZSk7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuYWRkVXNlclByaXZLZXkoKTtcbiAgICBsb2cyKGBBZGRlZCB1c2VyIHByaXZrZXkgJHt0aGlzLnByaXZrZXlzLnNpemV9YCk7XG4gICAgY29uc3Qgc2luY2UgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxZTMpO1xuICAgIGNvbnN0IG1vbml0b3JGaWx0ZXIgPSB7IGtpbmRzOiBbTkRLS2luZDUuTnV0emFwXSwgXCIjcFwiOiBbdGhpcy51c2VyLnB1YmtleV0sIHNpbmNlIH07XG4gICAgaWYgKHRoaXMuc3RvcmUpIHtcbiAgICAgIGxvZzIoXCJXaWxsIGxvYWQgbnV0emFwcyBmcm9tIHN0b3JlXCIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbnV0emFwcyA9IGF3YWl0IHRoaXMuc3RvcmUuZ2V0QWxsTnV0emFwcygpO1xuICAgICAgICBsb2cyKGBMb2FkZWQgJHtudXR6YXBzLnNpemV9IG51dHphcHNgKTtcbiAgICAgICAgZm9yIChjb25zdCBbaWQsIHN0YXRlXSBvZiBudXR6YXBzLmVudHJpZXMoKSkge1xuICAgICAgICAgIHRoaXMubnV0emFwU3RhdGVzLnNldChpZCwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGxvZzIoYENoYW5nZWQgdGhlIHN0YXRlIG9mICR7bnV0emFwcy5zaXplfSBudXR6YXBzYCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJcXHUyNzRDIEZhaWxlZCB0byBsb2FkIG51dHphcHMgZnJvbSBzdG9yZVwiLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGxvZzIoXCJXaWxsIHN0YXJ0IHByb2Nlc3NpbmcgcmVkZWVtYWJsZSBudXR6YXBzIGZyb20gc3RvcmVcIik7XG4gICAgICBhd2FpdCB0aGlzLnByb2Nlc3NSZWRlZW1hYmxlTnV0emFwc0Zyb21TdG9yZSgpO1xuICAgICAgbG9nMihcIkZpbmlzaGVkIHByb2Nlc3NpbmcgcmVkZWVtYWJsZSBudXR6YXBzIGZyb20gc3RvcmVcIik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIlxcdTI3NEMgRmFpbGVkIHRvIHByb2Nlc3MgcmVkZWVtYWJsZSBudXR6YXBzIGZyb20gc3RvcmVcIiwgZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBsb2cyKFwiV2lsbCBzdGFydCBwcm9jZXNzaW5nIGFjY3VtdWxhdGVkIG51dHphcHNcIik7XG4gICAgICBhd2FpdCB0aGlzLnByb2Nlc3NBY2N1bXVsYXRlZE51dHphcHMoZmlsdGVyLCBvcHRzKTtcbiAgICAgIGxvZzIoYEZpbmlzaGVkIHByb2Nlc3NpbmcgYWNjdW11bGF0ZWQgbnV0emFwcyAke3RoaXMubnV0emFwU3RhdGVzLnNpemV9YCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIlxcdTI3NEMgRmFpbGVkIHRvIHByb2Nlc3MgbnV0emFwc1wiLCBlKTtcbiAgICB9XG4gICAgbG9nMihgUnVubmluZyBmaWx0ZXIgJHtKU09OLnN0cmluZ2lmeShtb25pdG9yRmlsdGVyKX1gKTtcbiAgICBjb25zdCBzdWJzY3JpYmVPcHRzID0ge1xuICAgICAgc3ViSWQ6IFwibmRrLXdhbGxldDpudXR6YXAtbW9uaXRvclwiLFxuICAgICAgY2FjaGVVc2FnZTogTkRLU3Vic2NyaXB0aW9uQ2FjaGVVc2FnZTIuT05MWV9SRUxBWSxcbiAgICAgIHdyYXA6IGZhbHNlLFxuICAgICAgLy8gV2Ugc2tpcCB2YWxpZGF0aW9uIHNvIHRoZSB1c2VyIGtub3dzIGFib3V0IG51dHphcHMgdGhhdCB3ZXJlIHNlbnQgYnV0IGFyZSBub3QgdmFsaWRcbiAgICAgIC8vIHRoaXMgd2F5IHRvb2xpbmcgY2FuIGJlIG1vcmUgY29tcHJlaGVuc2l2ZSBhbmQgaW5jbHVkZSBudXR6YXBzIHRoYXQgd2VyZSBub3QgdmFsaWRcbiAgICAgIHNraXBWYWxpZGF0aW9uOiB0cnVlLFxuICAgICAgLi4ub3B0cyxcbiAgICAgIHJlbGF5U2V0OiB0aGlzLnJlbGF5U2V0XG4gICAgICAvLyBQYXNzIHJlbGF5U2V0IHZpYSBvcHRpb25zXG4gICAgfTtcbiAgICB0aGlzLnN1YiA9IHRoaXMubmRrLnN1YnNjcmliZShcbiAgICAgIG1vbml0b3JGaWx0ZXIsXG4gICAgICBzdWJzY3JpYmVPcHRzLFxuICAgICAgLy8gdGhpcy5yZWxheVNldCwgLy8gUmVtb3ZlZDogUGFzc2VkIHZpYSBvcHRzXG4gICAgICB7XG4gICAgICAgIC8vIGF1dG9TdGFydCBoYW5kbGVycyAobm93IDNyZCBhcmd1bWVudClcbiAgICAgICAgb25FdmVudDogKGV2ZW50KSA9PiB0aGlzLmV2ZW50SGFuZGxlcihldmVudClcbiAgICAgICAgLy8gQWRkZWQgTkRLRXZlbnQgdHlwZVxuICAgICAgfVxuICAgICk7XG4gICAgbG9nMihcIlxcdTI3MDUgTnV0emFwIG1vbml0b3Igc3RhcnRlZCBzdWNjZXNzZnVsbHlcIik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgZ3JvdXAgb2YgbnV0emFwcyBjYW4gYmUgcmVkZWVtZWQgYW5kIHJlZGVlbXMgdGhlIG9uZXMgdGhhdCBjYW4gYmUuXG4gICAqL1xuICBhc3luYyBjaGVja0FuZFJlZGVlbUdyb3VwKGdyb3VwLCBvbGRlc3RVbnNwZW50TnV0emFwVGltZSkge1xuICAgIGNvbnN0IGNhc2h1V2FsbGV0ID0gYXdhaXQgdGhpcy5nZXRDYXNodVdhbGxldChncm91cC5taW50KTtcbiAgICBjb25zdCBzcGVuZFN0YXRlcyA9IGF3YWl0IGdldFByb29mU3BlbmRTdGF0ZShjYXNodVdhbGxldCwgZ3JvdXAubnV0emFwcyk7XG4gICAgZm9yIChjb25zdCBudXR6YXAgb2Ygc3BlbmRTdGF0ZXMubnV0emFwc1dpdGhTcGVudFByb29mcykge1xuICAgICAgdGhpcy51cGRhdGVOdXR6YXBTdGF0ZShudXR6YXAuaWQsIHsgc3RhdHVzOiBOZGtOdXR6YXBTdGF0dXMuU1BFTlQsIG51dHphcCB9KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBudXR6YXAgb2Ygc3BlbmRTdGF0ZXMubnV0emFwc1dpdGhVbnNwZW50UHJvb2ZzKSB7XG4gICAgICB0aGlzLmVtaXQoXCJzZWVuXCIsIG51dHphcCk7XG4gICAgICB0aGlzLnVwZGF0ZU51dHphcFN0YXRlKG51dHphcC5pZCwgeyBzdGF0dXM6IE5ka051dHphcFN0YXR1cy5JTklUSUFMLCBudXR6YXAgfSk7XG4gICAgfVxuICAgIGlmIChzcGVuZFN0YXRlcy51bnNwZW50UHJvb2ZzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAoY29uc3QgbnV0emFwIG9mIHNwZW5kU3RhdGVzLm51dHphcHNXaXRoVW5zcGVudFByb29mcykge1xuICAgICAgICBpZiAoIW9sZGVzdFVuc3BlbnROdXR6YXBUaW1lIHx8IG9sZGVzdFVuc3BlbnROdXR6YXBUaW1lID4gbnV0emFwLmNyZWF0ZWRfYXQpIHtcbiAgICAgICAgICBvbGRlc3RVbnNwZW50TnV0emFwVGltZSA9IG51dHphcC5jcmVhdGVkX2F0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLnJlZGVlbU51dHphcHMoZ3JvdXAubWludCwgc3BlbmRTdGF0ZXMubnV0emFwc1dpdGhVbnNwZW50UHJvb2ZzLCBzcGVuZFN0YXRlcy51bnNwZW50UHJvb2ZzKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3NlcyBudXR6YXBzIHRoYXQgaGF2ZSBiZWVuIGFjY3VtdWxhdGVkIHdoaWxlIHRoZSBtb25pdG9yIHdhcyBvZmZsaW5lLlxuICAgKiBAcGFyYW0gc3RhcnRPcHRzXG4gICAqIEBwYXJhbSBvcHRzXG4gICAqL1xuICBhc3luYyBwcm9jZXNzQWNjdW11bGF0ZWROdXR6YXBzKGZpbHRlciA9IHt9LCBvcHRzKSB7XG4gICAgbG9nMihcIlByb2Nlc3NpbmcgYWNjdW11bGF0ZWQgbnV0emFwc1wiKTtcbiAgICBsZXQgb2xkZXN0VW5zcGVudE51dHphcFRpbWU7XG4gICAgY29uc3QgX2ZpbHRlciA9IHsgLi4uZmlsdGVyIH07XG4gICAgX2ZpbHRlci5raW5kcyA9IFtOREtLaW5kNS5OdXR6YXBdO1xuICAgIF9maWx0ZXJbXCIjcFwiXSA9IFt0aGlzLnVzZXIucHVia2V5XTtcbiAgICBjb25zdCBrbm93bk51dHphcElkcyA9IG5ldyBTZXQodGhpcy5udXR6YXBTdGF0ZXMua2V5cygpKTtcbiAgICBjb25zdCBudXR6YXBzID0gYXdhaXQgZmV0Y2hQYWdlKHRoaXMubmRrLCBfZmlsdGVyLCBrbm93bk51dHphcElkcywgdGhpcy5yZWxheVNldCk7XG4gICAgbG9nMihgV2UgbG9hZGVkICR7bnV0emFwcy5sZW5ndGh9IG51dHphcHMgZnJvbSByZWxheXNgKTtcbiAgICBvbGRlc3RVbnNwZW50TnV0emFwVGltZSA9IGF3YWl0IHRoaXMucHJvY2Vzc051dHphcHMobnV0emFwcywgb2xkZXN0VW5zcGVudE51dHphcFRpbWUpO1xuICAgIGxvZzIoXCJXZSBmaW5pc2hlZCBwcm9jZXNzaW5nIHRoZXNlbnV0emFwc1wiKTtcbiAgICBpZiAob2xkZXN0VW5zcGVudE51dHphcFRpbWUpIHtcbiAgICAgIF9maWx0ZXIuc2luY2UgPSBvbGRlc3RVbnNwZW50TnV0emFwVGltZSAtIDE7XG4gICAgICBhd2FpdCB0aGlzLnByb2Nlc3NBY2N1bXVsYXRlZE51dHphcHMoX2ZpbHRlciwgb3B0cyk7XG4gICAgfVxuICB9XG4gIHN0b3AoKSB7XG4gICAgdGhpcy5zdWI/LnN0b3AoKTtcbiAgfVxuICB1cGRhdGVOdXR6YXBTdGF0ZShpZCwgc3RhdGUpIHtcbiAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB0aGlzLm51dHphcFN0YXRlcy5nZXQoaWQpID8/IHt9O1xuICAgIGlmICghY3VycmVudFN0YXRlLnN0YXR1cykgc3RhdGUuc3RhdHVzID8/PSBOZGtOdXR6YXBTdGF0dXMuSU5JVElBTDtcbiAgICBjb25zdCBzdGF0ZUlzVW5jaGFuZ2VkID0gT2JqZWN0LmVudHJpZXMoc3RhdGUpLmV2ZXJ5KChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmIChrZXkgPT09IFwibnV0emFwXCIgJiYgY3VycmVudFN0YXRlLm51dHphcCAmJiB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gY3VycmVudFN0YXRlLm51dHphcC5pZCA9PT0gdmFsdWUuaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3VycmVudFN0YXRlW2tleV0gPT09IHZhbHVlO1xuICAgIH0pO1xuICAgIGlmIChzdGF0ZUlzVW5jaGFuZ2VkKSByZXR1cm47XG4gICAgdGhpcy5udXR6YXBTdGF0ZXMuc2V0KGlkLCB7IC4uLmN1cnJlbnRTdGF0ZSwgLi4uc3RhdGUgfSk7XG4gICAgdGhpcy5lbWl0KFwic3RhdGVfY2hhbmdlZFwiLCBpZCwgY3VycmVudFN0YXRlLnN0YXR1cyk7XG4gICAgY29uc3Qgc2VyaWFsaXplZFN0YXRlID0gKHN0YXRlMikgPT4ge1xuICAgICAgY29uc3QgcmVzID0geyAuLi5zdGF0ZTIgfTtcbiAgICAgIGlmIChyZXMubnV0emFwKSByZXMubnV0emFwID0gcmVzLm51dHphcC5pZDtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXMpO1xuICAgIH07XG4gICAgY29uc3QgY3VycmVudFN0YXR1c1N0ciA9IHNlcmlhbGl6ZWRTdGF0ZShjdXJyZW50U3RhdGUpO1xuICAgIGNvbnN0IG5ld1N0YXR1c1N0ciA9IHNlcmlhbGl6ZWRTdGF0ZShzdGF0ZSk7XG4gICAgbG9nMihgWyR7aWQuc3Vic3RyaW5nKDAsIDYpfV0gJHtjdXJyZW50U3RhdHVzU3RyfSBjaGFuZ2VkIHRvIFxcdXsxRjQ0OX0gJHtuZXdTdGF0dXNTdHJ9YCk7XG4gICAgdGhpcy5zdG9yZT8uc2V0TnV0emFwU3RhdGUoaWQsIHN0YXRlKTtcbiAgfVxuICBhc3luYyBldmVudEhhbmRsZXIoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5udXR6YXBTdGF0ZXMuaGFzKGV2ZW50LmlkKSkgcmV0dXJuO1xuICAgIGNvbnN0IG51dHphcCA9IGF3YWl0IE5ES051dHphcDIuZnJvbShldmVudCk7XG4gICAgaWYgKCFudXR6YXApIHtcbiAgICAgIHRoaXMudXBkYXRlTnV0emFwU3RhdGUoZXZlbnQuaWQsIHtcbiAgICAgICAgc3RhdHVzOiBOZGtOdXR6YXBTdGF0dXMuUEVSTUFORU5UX0VSUk9SLFxuICAgICAgICBlcnJvck1lc3NhZ2U6IFwiRmFpbGVkIHRvIHBhcnNlIG51dHphcFwiXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMubWludExpc3QgJiYgIXRoaXMubWludExpc3QubWludHMuaW5jbHVkZXMobnV0emFwLm1pbnQpKSB7XG4gICAgICB0aGlzLmVtaXQoXCJzZWVuX2luX3Vua25vd25fbWludFwiLCBudXR6YXApO1xuICAgIH1cbiAgICB0aGlzLnJlZGVlbU51dHphcChudXR6YXApO1xuICB9XG4gIC8qKlxuICAgKiBHYXRoZXJzIHRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gdG8gcmVkZWVtIGEgbnV0emFwIGFuZCB0aGVuIHJlZGVlbXMgaXQuXG4gICAqIEBwYXJhbSBudXR6YXBcbiAgICovXG4gIGFzeW5jIHJlZGVlbU51dHphcChudXR6YXApIHtcbiAgICBpZiAoIXRoaXMubnV0emFwU3RhdGVzLmhhcyhudXR6YXAuaWQpKVxuICAgICAgdGhpcy51cGRhdGVOdXR6YXBTdGF0ZShudXR6YXAuaWQsIHsgc3RhdHVzOiBOZGtOdXR6YXBTdGF0dXMuSU5JVElBTCwgbnV0emFwIH0pO1xuICAgIGNvbnN0IHJhd1AycGsgPSBudXR6YXAucmF3UDJwaztcbiAgICBpZiAocmF3UDJwaykge1xuICAgICAgY29uc3QgY2FzaHVQdWJrZXkgPSBwcm9vZlAycGsyKG51dHphcC5wcm9vZnNbMF0pO1xuICAgICAgaWYgKGNhc2h1UHVia2V5KSB7XG4gICAgICAgIGNvbnN0IG5vc3RyUHVia2V5ID0gY2FzaHVQdWJrZXlUb05vc3RyUHVia2V5MihjYXNodVB1YmtleSk7XG4gICAgICAgIGlmIChub3N0clB1YmtleSAmJiAhdGhpcy5wcml2a2V5cy5oYXMobm9zdHJQdWJrZXkpKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVOdXR6YXBTdGF0ZShudXR6YXAuaWQsIHtcbiAgICAgICAgICAgIHN0YXR1czogTmRrTnV0emFwU3RhdHVzLk1JU1NJTkdfUFJJVktFWSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogXCJObyBwcml2a2V5IGZvdW5kIGZvciBwMnBrXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5udXR6YXBTdGF0ZXMuZ2V0KG51dHphcC5pZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYXdhaXQgdGhpcy5yZWRlZW1OdXR6YXBzKG51dHphcC5taW50LCBbbnV0emFwXSwgbnV0emFwLnByb29mcyk7XG4gICAgcmV0dXJuIHRoaXMubnV0emFwU3RhdGVzLmdldChudXR6YXAuaWQpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJlZGVlbXMgYSBsaXN0IG9mIHByb29mcy5cbiAgICpcbiAgICogUHJvb2ZzIHdpbGwgYmUgYXR0ZW1wdGVkIHRvIGJlIHJlZGVlbWVkIGluIGEgc2luZ2xlIGNhbGwsIHNvIHRoZXkgd2lsbCBhbGwgd29yayBvciBub25lIHdpbGwuXG4gICAqIEVpdGhlciBjYWxsIHRoaXMgZnVuY3Rpb24gd2l0aCBwcm9vZnMgdGhhdCBoYXZlIGJlZW4gdmVyaWZpZWQgdG8gYmUgcmVkZWVtYWJsZSBvciBkb24ndCBncm91cCB0aGVtLFxuICAgKiBhbmQgcHJvdmlkZSBhIHNpbmdsZSBudXR6YXAgcGVyIGNhbGwuXG4gICAqXG4gICAqIEFsbCBudXR6YXBzIE1VU1QgYmUgcDJwa2VkIHRvIHRoZSBzYW1lIHB1YmtleS5cbiAgICpcbiAgICogQHBhcmFtIG1pbnRcbiAgICogQHBhcmFtIG51dHphcHNcbiAgICogQHBhcmFtIHByb29mc1xuICAgKiBAcGFyYW0gcHJpdmtleSBQcml2YXRlIGtleSB0aGF0IGlzIG5lZWRlZCB0byByZWRlZW0gdGhlIG51dHphcHMuXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBhc3luYyByZWRlZW1OdXR6YXBzKG1pbnQsIG51dHphcHMsIHByb29mcykge1xuICAgIGlmICghdGhpcy53YWxsZXQpIHRocm93IG5ldyBFcnJvcihcIndhbGxldCBub3Qgc2V0XCIpO1xuICAgIGlmICghdGhpcy53YWxsZXQucmVkZWVtTnV0emFwcykgdGhyb3cgbmV3IEVycm9yKFwid2FsbGV0IGRvZXMgbm90IHN1cHBvcnQgcmVkZWVtaW5nIG51dHphcHNcIik7XG4gICAgY29uc3QgY2FzaHVXYWxsZXQgPSBhd2FpdCB0aGlzLmdldENhc2h1V2FsbGV0KG1pbnQpO1xuICAgIGNvbnN0IHZhbGlkTnV0emFwcyA9IFtdO1xuICAgIGlmIChwcm9vZnMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgY2FzaHVQdWJrZXkyID0gcHJvb2ZQMnBrMihwcm9vZnNbMF0pO1xuICAgICAgaWYgKCFjYXNodVB1YmtleTIpIHtcbiAgICAgICAgZm9yIChjb25zdCBudXR6YXAgb2YgbnV0emFwcykge1xuICAgICAgICAgIHRoaXMudXBkYXRlTnV0emFwU3RhdGUobnV0emFwLmlkLCB7XG4gICAgICAgICAgICBzdGF0dXM6IE5ka051dHphcFN0YXR1cy5JTlZBTElEX05VVFpBUCxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogXCJJbnZhbGlkIG51dHphcDogcHJvb2YgaXMgbm90IHAycGtcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vc3RyUHVia2V5MiA9IGNhc2h1UHVia2V5VG9Ob3N0clB1YmtleTIoY2FzaHVQdWJrZXkyKTtcbiAgICAgIGlmICghbm9zdHJQdWJrZXkyKSB7XG4gICAgICAgIGZvciAoY29uc3QgbnV0emFwIG9mIG51dHphcHMpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU51dHphcFN0YXRlKG51dHphcC5pZCwge1xuICAgICAgICAgICAgc3RhdHVzOiBOZGtOdXR6YXBTdGF0dXMuSU5WQUxJRF9OVVRaQVAsXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwiSW52YWxpZCBudXR6YXA6IGxvY2tlZCB0byBhbiBpbnZhbGlkIHB1YmxpYyBrZXkgKG5vdCBhIG5vc3RyIGtleSlcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByaXZrZXkyID0gdGhpcy5wcml2a2V5cy5nZXQobm9zdHJQdWJrZXkyKTtcbiAgICAgIGlmICghcHJpdmtleTIpIHtcbiAgICAgICAgZm9yIChjb25zdCBudXR6YXAgb2YgbnV0emFwcykge1xuICAgICAgICAgIHRoaXMudXBkYXRlTnV0emFwU3RhdGUobnV0emFwLmlkLCB7XG4gICAgICAgICAgICBzdGF0dXM6IE5ka051dHphcFN0YXR1cy5NSVNTSU5HX1BSSVZLRVksXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwiTm8gcHJpdmtleSBmb3VuZCBmb3IgcDJwa1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IG51dHphcCBvZiBudXR6YXBzKSB7XG4gICAgICBpZiAoIW51dHphcC5pc1ZhbGlkKSB7XG4gICAgICAgIHRoaXMudXBkYXRlTnV0emFwU3RhdGUobnV0emFwLmlkLCB7XG4gICAgICAgICAgc3RhdHVzOiBOZGtOdXR6YXBTdGF0dXMuSU5WQUxJRF9OVVRaQVAsXG4gICAgICAgICAgZXJyb3JNZXNzYWdlOiBcIkludmFsaWQgbnV0emFwXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgcmF3UDJwayA9IG51dHphcC5yYXdQMnBrO1xuICAgICAgaWYgKCFyYXdQMnBrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlTnV0emFwU3RhdGUobnV0emFwLmlkLCB7XG4gICAgICAgICAgc3RhdHVzOiBOZGtOdXR6YXBTdGF0dXMuSU5WQUxJRF9OVVRaQVAsXG4gICAgICAgICAgZXJyb3JNZXNzYWdlOiBcIkludmFsaWQgbnV0emFwOiBsb2NrZWQgdG8gYW4gaW52YWxpZCBwdWJsaWMga2V5IChubyBwMnBrKVwiXG4gICAgICAgIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChyYXdQMnBrLmxlbmd0aCAhPT0gNjYpIHtcbiAgICAgICAgdGhpcy51cGRhdGVOdXR6YXBTdGF0ZShudXR6YXAuaWQsIHtcbiAgICAgICAgICBzdGF0dXM6IE5ka051dHphcFN0YXR1cy5JTlZBTElEX05VVFpBUCxcbiAgICAgICAgICBlcnJvck1lc3NhZ2U6IGBJbnZhbGlkIG51dHphcDogbG9ja2VkIHRvIGFuIGludmFsaWQgcHVibGljIGtleSAobGVuZ3RoICR7cmF3UDJway5sZW5ndGh9KWBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFsaWROdXR6YXBzLnB1c2gobnV0emFwKTtcbiAgICB9XG4gICAgaWYgKHZhbGlkTnV0emFwcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBjb25zdCBjYXNodVB1YmtleSA9IHByb29mUDJwazIocHJvb2ZzWzBdKTtcbiAgICBpZiAoIWNhc2h1UHVia2V5KSByZXR1cm47XG4gICAgY29uc3Qgbm9zdHJQdWJrZXkgPSBjYXNodVB1YmtleVRvTm9zdHJQdWJrZXkyKGNhc2h1UHVia2V5KTtcbiAgICBpZiAoIW5vc3RyUHVia2V5KSByZXR1cm47XG4gICAgY29uc3QgcHJpdmtleSA9IHRoaXMucHJpdmtleXMuZ2V0KG5vc3RyUHVia2V5KTtcbiAgICBpZiAoIXByaXZrZXkpIHtcbiAgICAgIGZvciAoY29uc3QgbnV0emFwIG9mIHZhbGlkTnV0emFwcykge1xuICAgICAgICB0aGlzLnVwZGF0ZU51dHphcFN0YXRlKG51dHphcC5pZCwge1xuICAgICAgICAgIHN0YXR1czogTmRrTnV0emFwU3RhdHVzLk1JU1NJTkdfUFJJVktFWSxcbiAgICAgICAgICBlcnJvck1lc3NhZ2U6IFwiTm8gcHJpdmtleSBmb3VuZCBmb3IgcDJwa1wiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG51dHphcCBvZiB2YWxpZE51dHphcHMpIHtcbiAgICAgIHRoaXMudXBkYXRlTnV0emFwU3RhdGUobnV0emFwLmlkLCB7IHN0YXR1czogTmRrTnV0emFwU3RhdHVzLlBST0NFU1NJTkcgfSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCB0b3RhbEFtb3VudCA9IGF3YWl0IHRoaXMud2FsbGV0LnJlZGVlbU51dHphcHMobnV0emFwcywgcHJpdmtleS5wcml2YXRlS2V5LCB7XG4gICAgICAgIGNhc2h1V2FsbGV0LFxuICAgICAgICBwcm9vZnMsXG4gICAgICAgIG1pbnRcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0KFwicmVkZWVtZWRcIiwgbnV0emFwcywgdG90YWxBbW91bnQpO1xuICAgICAgZm9yIChjb25zdCBudXR6YXAgb2YgbnV0emFwcykge1xuICAgICAgICBjb25zdCBudXR6YXBUb3RhbEFtb3VudCA9IHByb29mc1RvdGFsKHByb29mc0ludGVyc2VjdGlvbihwcm9vZnMsIG51dHphcC5wcm9vZnMpKTtcbiAgICAgICAgdGhpcy51cGRhdGVOdXR6YXBTdGF0ZShudXR6YXAuaWQsIHtcbiAgICAgICAgICBzdGF0dXM6IE5ka051dHphcFN0YXR1cy5SRURFRU1FRCxcbiAgICAgICAgICByZWRlZW1lZEFtb3VudDogbnV0emFwVG90YWxBbW91bnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIlxcdTI3NEMgRmFpbGVkIHRvIHJlZGVlbSBudXR6YXBzXCIsIGUubWVzc2FnZSk7XG4gICAgICBpZiAoZS5tZXNzYWdlPy5pbmNsdWRlcyhcInVua25vd24gcHVibGljIGtleSBzaXplXCIpKSB7XG4gICAgICAgIGZvciAoY29uc3QgbnV0emFwIG9mIG51dHphcHMpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU51dHphcFN0YXRlKG51dHphcC5pZCwge1xuICAgICAgICAgICAgc3RhdHVzOiBOZGtOdXR6YXBTdGF0dXMuUEVSTUFORU5UX0VSUk9SLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBcIkludmFsaWQgcDJwazogdW5rbm93biBwdWJsaWMga2V5IHNpemVcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuZW1pdChcImZhaWxlZFwiLCBudXR6YXAsIFwiSW52YWxpZCBwMnBrOiB1bmtub3duIHB1YmxpYyBrZXkgc2l6ZVwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBudXR6YXAgb2YgbnV0emFwcykge1xuICAgICAgICAgIHRoaXMuZW1pdChcImZhaWxlZFwiLCBudXR6YXAsIGUubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc2hvdWxkVHJ5UmVkZWVtKG51dHphcCkge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5udXR6YXBTdGF0ZXMuZ2V0KG51dHphcC5pZCk7XG4gICAgaWYgKCFzdGF0ZSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKFtOZGtOdXR6YXBTdGF0dXMuSU5JVElBTF0uaW5jbHVkZXMoc3RhdGUuc3RhdHVzKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKHN0YXRlLnN0YXR1cyA9PT0gTmRrTnV0emFwU3RhdHVzLk1JU1NJTkdfUFJJVktFWSkge1xuICAgICAgY29uc3QgcDJwayA9IHN0YXRlLm51dHphcD8ucDJwaztcbiAgICAgIGlmIChwMnBrICYmIHRoaXMucHJpdmtleXMuaGFzKHAycGspKSByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKFtOZGtOdXR6YXBTdGF0dXMuU1BFTlQsIE5ka051dHphcFN0YXR1cy5SRURFRU1FRF0uaW5jbHVkZXMoc3RhdGUuc3RhdHVzKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChbTmRrTnV0emFwU3RhdHVzLlBFUk1BTkVOVF9FUlJPUiwgTmRrTnV0emFwU3RhdHVzLklOVkFMSURfTlVUWkFQXS5pbmNsdWRlcyhzdGF0ZS5zdGF0dXMpKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzIG51dHphcHMgZnJvbSB0aGUgc3RvcmUgdGhhdCBhcmUgaW4gYSByZWRlZW1hYmxlIHN0YXRlLlxuICAgKiBUaGlzIGluY2x1ZGVzIG51dHphcHMgaW4gSU5JVElBTCBzdGF0ZSBhbmQgdGhvc2UgaW4gTUlTU0lOR19QUklWS0VZIHN0YXRlXG4gICAqIGZvciB3aGljaCB3ZSBub3cgaGF2ZSB0aGUgcHJpdmF0ZSBrZXkuXG4gICAqL1xuICBhc3luYyBwcm9jZXNzUmVkZWVtYWJsZU51dHphcHNGcm9tU3RvcmUoKSB7XG4gICAgY29uc3QgcmVkZWVtYWJsZU51dHphcHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IFtfaWQsIHN0YXRlXSBvZiB0aGlzLm51dHphcFN0YXRlcy5lbnRyaWVzKCkpIHtcbiAgICAgIGlmICghc3RhdGUubnV0emFwKSBjb250aW51ZTtcbiAgICAgIGlmICh0aGlzLnNob3VsZFRyeVJlZGVlbShzdGF0ZS5udXR6YXApKSB7XG4gICAgICAgIHJlZGVlbWFibGVOdXR6YXBzLnB1c2goc3RhdGUubnV0emFwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlZGVlbWFibGVOdXR6YXBzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGxvZzIoYFdlIGZvdW5kICR7cmVkZWVtYWJsZU51dHphcHMubGVuZ3RofSByZWRlZW1hYmxlIG51dHphcHMgaW4gdGhlIHN0b3JlYCk7XG4gICAgYXdhaXQgdGhpcy5wcm9jZXNzTnV0emFwcyhyZWRlZW1hYmxlTnV0emFwcyk7XG4gIH1cbiAgLyoqXG4gICAqIENvbW1vbiBtZXRob2QgdG8gcHJvY2VzcyBhIGNvbGxlY3Rpb24gb2YgbnV0emFwczpcbiAgICogLSBHcm91cCB0aGVtIGJ5IG1pbnRcbiAgICogLSBDaGVjayBhbmQgcmVkZWVtIGVhY2ggZ3JvdXBcbiAgICpcbiAgICogQHBhcmFtIG51dHphcHMgVGhlIG51dHphcHMgdG8gcHJvY2Vzc1xuICAgKiBAcGFyYW0gb2xkZXN0VW5zcGVudE51dHphcFRpbWUgT3B0aW9uYWwgdGltZXN0YW1wIHRvIHRyYWNrIHRoZSBvbGRlc3QgdW5zcGVudCBudXR6YXBcbiAgICogQHJldHVybnMgVGhlIHVwZGF0ZWQgb2xkZXN0VW5zcGVudE51dHphcFRpbWUgaWYgYW55IG51dHphcHMgd2VyZSBwcm9jZXNzZWRcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NOdXR6YXBzKG51dHphcHMsIG9sZGVzdFVuc3BlbnROdXR6YXBUaW1lKSB7XG4gICAgY29uc3QgZ3JvdXBlZE51dHphcHMgPSBncm91cE51dHphcHMobnV0emFwcywgdGhpcyk7XG4gICAgZm9yIChjb25zdCBncm91cCBvZiBncm91cGVkTnV0emFwcykge1xuICAgICAgbG9nMihgUHJvY2Vzc2luZyBncm91cCAke2dyb3VwLm1pbnR9IHdpdGggJHtncm91cC5udXR6YXBzLmxlbmd0aH0gbnV0emFwc2ApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5jaGVja0FuZFJlZGVlbUdyb3VwKGdyb3VwLCBvbGRlc3RVbnNwZW50TnV0emFwVGltZSk7XG4gICAgICAgIGxvZzIoYEZpbmlzaGVkIHByb2Nlc3NpbmcgZ3JvdXAgJHtncm91cC5taW50fWApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cyKGBGYWlsZWQgdG8gcHJvY2VzcyBncm91cCAke2dyb3VwLm1pbnR9YCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFxcdTI3NEMgRmFpbGVkIHRvIHByb2Nlc3MgZ3JvdXAgJHtncm91cC5taW50fWAsIGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2xkZXN0VW5zcGVudE51dHphcFRpbWU7XG4gIH1cbn07XG5mdW5jdGlvbiBwcm9vZnNJbnRlcnNlY3Rpb24ocHJvb2ZzMSwgcHJvb2ZzMikge1xuICBjb25zdCBwcm9vZnMyQ3MgPSBuZXcgU2V0KHByb29mczIubWFwKChwKSA9PiBwLkMpKTtcbiAgcmV0dXJuIHByb29mczEuZmlsdGVyKChwKSA9PiBwcm9vZnMyQ3MuaGFzKHAuQykpO1xufVxuZnVuY3Rpb24gcHJvb2ZzVG90YWwocHJvb2ZzKSB7XG4gIHJldHVybiBwcm9vZnMucmVkdWNlKChhY2MsIHByb29mKSA9PiBhY2MgKyBwcm9vZi5hbW91bnQsIDApO1xufVxuXG4vLyBzcmMvd2FsbGV0cy9jYXNodS9taW50L3V0aWxzLnRzXG5pbXBvcnQgeyBOREtLaW5kIGFzIE5ES0tpbmQ2IH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0Q2FzaHVNaW50UmVjb21tZW5kYXRpb25zKG5kaywgZmlsdGVyKSB7XG4gIGNvbnN0IGYgPSBbXG4gICAgeyBraW5kczogW05ES0tpbmQ2LkVjYXNoTWludFJlY29tbWVuZGF0aW9uXSwgXCIja1wiOiBbXCIzODAwMlwiXSwgLi4uZmlsdGVyIHx8IHt9IH0sXG4gICAgeyBraW5kczogW05ES0tpbmQ2LkNhc2h1TWludExpc3RdLCAuLi5maWx0ZXIgfHwge30gfVxuICBdO1xuICBjb25zdCByZXMgPSB7fTtcbiAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gYXdhaXQgbmRrLmZldGNoRXZlbnRzKGYpO1xuICBmb3IgKGNvbnN0IGV2ZW50IG9mIHJlY29tbWVuZGF0aW9ucykge1xuICAgIHN3aXRjaCAoZXZlbnQua2luZCkge1xuICAgICAgY2FzZSBOREtLaW5kNi5FY2FzaE1pbnRSZWNvbW1lbmRhdGlvbjpcbiAgICAgICAgZm9yIChjb25zdCB1VGFnIG9mIGV2ZW50LmdldE1hdGNoaW5nVGFncyhcInVcIikpIHtcbiAgICAgICAgICBpZiAodVRhZ1syXSAmJiB1VGFnWzJdICE9PSBcImNhc2h1XCIpIGNvbnRpbnVlO1xuICAgICAgICAgIGNvbnN0IHVybCA9IHVUYWdbMV07XG4gICAgICAgICAgaWYgKCF1cmwpIGNvbnRpbnVlO1xuICAgICAgICAgIGNvbnN0IGVudHJ5ID0gcmVzW3VybF0gfHwgeyBldmVudHM6IFtdLCBwdWJrZXlzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpIH07XG4gICAgICAgICAgZW50cnkuZXZlbnRzLnB1c2goZXZlbnQpO1xuICAgICAgICAgIGVudHJ5LnB1YmtleXMuYWRkKGV2ZW50LnB1YmtleSk7XG4gICAgICAgICAgcmVzW3VybF0gPSBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTkRLS2luZDYuQ2FzaHVNaW50TGlzdDpcbiAgICAgICAgZm9yIChjb25zdCBtaW50VGFnIG9mIGV2ZW50LmdldE1hdGNoaW5nVGFncyhcIm1pbnRcIikpIHtcbiAgICAgICAgICBjb25zdCB1cmwgPSBtaW50VGFnWzFdO1xuICAgICAgICAgIGlmICghdXJsKSBjb250aW51ZTtcbiAgICAgICAgICBjb25zdCBlbnRyeSA9IHJlc1t1cmxdIHx8IHsgZXZlbnRzOiBbXSwgcHVia2V5czogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSB9O1xuICAgICAgICAgIGVudHJ5LmV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgICAgICBlbnRyeS5wdWJrZXlzLmFkZChldmVudC5wdWJrZXkpO1xuICAgICAgICAgIHJlc1t1cmxdID0gZW50cnk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8vIHNyYy93YWxsZXRzL2Nhc2h1L3dhbGxldC9taWdyYXRlLnRzXG5pbXBvcnQgeyBOREtDYXNodU1pbnRMaXN0LCBOREtLaW5kIGFzIE5ES0tpbmQ3IH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuYXN5bmMgZnVuY3Rpb24gbWlncmF0ZUNhc2h1V2FsbGV0KG5kaykge1xuICBsZXQgbWludExpc3QgPSBhd2FpdCBnZXRNaW50TGlzdChuZGspO1xuICBjb25zdCBvbGRXYWxsZXRzID0gYXdhaXQgZ2V0T2xkV2FsbGV0cyhuZGspO1xuICBpZiAob2xkV2FsbGV0cy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgY29uc3QgcHJpdktleXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCBtaW50cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IG5ld1dhbGxldCA9IG5ldyBOREtDYXNodVdhbGxldChuZGspO1xuICBmb3IgKGNvbnN0IHdhbGxldCBvZiBvbGRXYWxsZXRzKSB7XG4gICAgY29uc3QgeyBwcml2a2V5LCBtaW50czogd2FsbGV0TWludHMgfSA9IGF3YWl0IGV4dHJhY3RJbmZvRnJvbUxlZ2FjeVdhbGxldCh3YWxsZXQpO1xuICAgIGlmIChwcml2a2V5KSB7XG4gICAgICBuZXdXYWxsZXQuYWRkUHJpdmtleShwcml2a2V5KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBtaW50IG9mIHdhbGxldE1pbnRzKSBtaW50cy5hZGQobWludCk7XG4gIH1cbiAgY2xlYW51cE1pbnRzKG1pbnRzKTtcbiAgaWYgKG1pbnRMaXN0KSB7XG4gICAgY2xlYW51cE1pbnRMaXN0KG1pbnRMaXN0KTtcbiAgICBmb3IgKGNvbnN0IG1pbnQgb2YgbWludExpc3QubWludHMpIG1pbnRzLmFkZChtaW50KTtcbiAgICBtaW50TGlzdC5taW50cyA9IEFycmF5LmZyb20obWludHMpO1xuICAgIGlmICghbWludExpc3QucDJwayAmJiBwcml2S2V5cy5zaXplID4gMCkgbWludExpc3QucDJwayA9IEFycmF5LmZyb20ocHJpdktleXMua2V5cygpKVswXTtcbiAgICBhd2FpdCBtaW50TGlzdC50b05vc3RyRXZlbnQoKTtcbiAgfSBlbHNlIHtcbiAgICBtaW50TGlzdCA9IG5ldyBOREtDYXNodU1pbnRMaXN0KG5kayk7XG4gICAgbWludExpc3QubWludHMgPSBBcnJheS5mcm9tKG1pbnRzKTtcbiAgICBhd2FpdCBtaW50TGlzdC50b05vc3RyRXZlbnQoKTtcbiAgfVxuICBuZXdXYWxsZXQubWludHMgPSBBcnJheS5mcm9tKG1pbnRzKTtcbiAgYXdhaXQgbmV3V2FsbGV0LnB1Ymxpc2goKTtcbiAgbWludExpc3QucDJwayA9IGF3YWl0IG5ld1dhbGxldC5nZXRQMnBrKCk7XG4gIGF3YWl0IG1pbnRMaXN0LnB1Ymxpc2hSZXBsYWNlYWJsZSgpO1xuICBmb3IgKGNvbnN0IHdhbGxldCBvZiBvbGRXYWxsZXRzKSB7XG4gICAgd2FsbGV0LnRhZ3MgPSBbW1wiZFwiLCB3YWxsZXQuZFRhZyA/PyBcIlwiXSwgW1wiZGVsZXRlZFwiXV07XG4gICAgYXdhaXQgd2FsbGV0LnB1Ymxpc2hSZXBsYWNlYWJsZSgpO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiBnZXRNaW50TGlzdChuZGspIHtcbiAgY29uc3QgYWN0aXZlVXNlciA9IG5kay5hY3RpdmVVc2VyO1xuICBpZiAoIWFjdGl2ZVVzZXIpIHRocm93IG5ldyBFcnJvcihcIk5vIGFjdGl2ZSB1c2VyXCIpO1xuICBjb25zdCBtaW50TGlzdCA9IGF3YWl0IG5kay5mZXRjaEV2ZW50KHtcbiAgICBraW5kczogW05ES0tpbmQ3LkNhc2h1TWludExpc3RdLFxuICAgIGF1dGhvcnM6IFthY3RpdmVVc2VyLnB1YmtleV1cbiAgfSk7XG4gIGlmICghbWludExpc3QpIHJldHVybjtcbiAgcmV0dXJuIE5ES0Nhc2h1TWludExpc3QuZnJvbShtaW50TGlzdCk7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRPbGRXYWxsZXRzKG5kaykge1xuICBjb25zdCB1c2VyID0gbmRrLmFjdGl2ZVVzZXI7XG4gIGlmICghdXNlcikgdGhyb3cgbmV3IEVycm9yKFwiTm8gYWN0aXZlIHVzZXJcIik7XG4gIGNvbnN0IHdhbGxldEV2ZW50cyA9IGF3YWl0IG5kay5mZXRjaEV2ZW50cyhbeyBraW5kczogW05ES0tpbmQ3LkxlZ2FjeUNhc2h1V2FsbGV0XSwgYXV0aG9yczogW3VzZXIucHVia2V5XSB9XSk7XG4gIHJldHVybiBBcnJheS5mcm9tKHdhbGxldEV2ZW50cykuZmlsdGVyKChldmVudCkgPT4gIWV2ZW50Lmhhc1RhZyhcImRlbGV0ZWRcIikpO1xufVxuYXN5bmMgZnVuY3Rpb24gZXh0cmFjdEluZm9Gcm9tTGVnYWN5V2FsbGV0KHdhbGxldCkge1xuICBjb25zdCBtaW50cyA9IFtdO1xuICBsZXQgcHJpdmtleTtcbiAgdHJ5IHtcbiAgICBjb25zdCBvcmlnQ29udGVudCA9IHdhbGxldC5jb250ZW50O1xuICAgIGF3YWl0IHdhbGxldC5kZWNyeXB0KCk7XG4gICAgY29uc3QgcHJpdlRhZ3MgPSBKU09OLnBhcnNlKHdhbGxldC5jb250ZW50KTtcbiAgICBmb3IgKGNvbnN0IHRhZyBvZiBwcml2VGFncykge1xuICAgICAgaWYgKHRhZ1swXSA9PT0gXCJwcml2a2V5XCIpIHByaXZrZXkgPSB0YWdbMV07XG4gICAgICBpZiAodGFnWzBdID09PSBcIm1pbnRcIikgbWludHMucHVzaCh0YWdbMV0pO1xuICAgIH1cbiAgICB3YWxsZXQuY29udGVudCA9IG9yaWdDb250ZW50O1xuICAgIHJldHVybiB7IHByaXZrZXksIG1pbnRzIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGRlY3J5cHRpbmcgbGVnYWN5IHdhbGxldFwiLCBlcnJvcik7XG4gIH1cbiAgcmV0dXJuIHsgcHJpdmtleSwgbWludHMgfTtcbn1cbmZ1bmN0aW9uIGNsZWFudXBNaW50cyhtaW50cykge1xuICBmb3IgKGNvbnN0IG1pbnQgb2YgbWludHMpIGlmIChtaW50Lm1hdGNoKC90ZXN0bnV0LykpIG1pbnRzLmRlbGV0ZShtaW50KTtcbiAgcmV0dXJuIG1pbnRzO1xufVxuZnVuY3Rpb24gY2xlYW51cE1pbnRMaXN0KG1pbnRMaXN0KSB7XG4gIG1pbnRMaXN0Lm1pbnRzID0gbWludExpc3QubWludHMuZmlsdGVyKChtaW50KSA9PiAhbWludC5tYXRjaCgvdGVzdG51dC8pKTtcbn1cblxuLy8gc3JjL3dhbGxldHMvd2VibG4vaW5kZXgudHNcbmltcG9ydCB7IHJlcXVlc3RQcm92aWRlciB9IGZyb20gXCJ3ZWJsblwiO1xuXG4vLyBzcmMvd2FsbGV0cy93ZWJsbi9wYXkudHNcbmltcG9ydCB7IENhc2h1TWludCBhcyBDYXNodU1pbnQyLCBDYXNodVdhbGxldCBhcyBDYXNodVdhbGxldDIgfSBmcm9tIFwiQGNhc2h1L2Nhc2h1LXRzXCI7XG52YXIgTkRLTG5QYXkgPSBjbGFzcyB7XG4gIHdhbGxldDtcbiAgaW5mbztcbiAgdHlwZSA9IFwibG5cIjtcbiAgY29uc3RydWN0b3Iod2FsbGV0LCBpbmZvKSB7XG4gICAgdGhpcy53YWxsZXQgPSB3YWxsZXQ7XG4gICAgdGhpcy5pbmZvID0gaW5mbztcbiAgfVxuICBhc3luYyBwYXkoKSB7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gXCJsblwiKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXlMbigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wYXlOdXQoKTtcbiAgfVxuICAvKipcbiAgICogVXNlcyBMTiBiYWxhbmNlIHRvIHBheSB0byBhIG1pbnRcbiAgICovXG4gIGFzeW5jIHBheU51dCgpIHtcbiAgICBjb25zdCB7IG1pbnRzLCBwMnBrIH0gPSB0aGlzLmluZm87XG4gICAgbGV0IHsgYW1vdW50LCB1bml0IH0gPSB0aGlzLmluZm87XG4gICAgaWYgKCFtaW50cykgdGhyb3cgbmV3IEVycm9yKFwiTm8gbWludHMgcHJvdmlkZWRcIik7XG4gICAgaWYgKHVuaXQgPT09IFwibXNhdFwiKSB7XG4gICAgICBhbW91bnQgLz0gMWUzO1xuICAgICAgdW5pdCA9IFwic2F0XCI7XG4gICAgfVxuICAgIGNvbnN0IHF1b3Rlc1Byb21pc2VzID0gbWludHMubWFwKGFzeW5jIChtaW50MikgPT4ge1xuICAgICAgY29uc3Qgd2FsbGV0MiA9IG5ldyBDYXNodVdhbGxldDIobmV3IENhc2h1TWludDIobWludDIpLCB7IHVuaXQgfSk7XG4gICAgICBjb25zdCBxdW90ZTIgPSBhd2FpdCB3YWxsZXQyLmNyZWF0ZU1pbnRRdW90ZShhbW91bnQpO1xuICAgICAgcmV0dXJuIHsgcXVvdGU6IHF1b3RlMiwgbWludDogbWludDIgfTtcbiAgICB9KTtcbiAgICBjb25zdCB7IHF1b3RlLCBtaW50IH0gPSBhd2FpdCBQcm9taXNlLmFueShxdW90ZXNQcm9taXNlcyk7XG4gICAgaWYgKCFxdW90ZSkge1xuICAgICAgY29uc29sZS53YXJuKFwiZmFpbGVkIHRvIGdldCBxdW90ZSBmcm9tIGFueSBtaW50XCIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmFpbGVkIHRvIGdldCBxdW90ZSBmcm9tIGFueSBtaW50XCIpO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLndhbGxldC5wYXkoeyBwcjogcXVvdGUucmVxdWVzdCB9KTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgY29uc29sZS53YXJuKFwicGF5bWVudCBmYWlsZWRcIik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXltZW50IGZhaWxlZFwiKTtcbiAgICB9XG4gICAgY29uc3Qgd2FsbGV0ID0gbmV3IENhc2h1V2FsbGV0MihuZXcgQ2FzaHVNaW50MihtaW50KSwgeyB1bml0IH0pO1xuICAgIGNvbnN0IHByb29mcyA9IGF3YWl0IHdhbGxldC5taW50UHJvb2ZzKGFtb3VudCwgcXVvdGUucXVvdGUsIHtcbiAgICAgIHB1YmtleTogcDJwa1xuICAgIH0pO1xuICAgIGNvbnNvbGUud2FybihcIm1pbnRlZCB0b2tlbnMgd2l0aCBwcm9vZnMgJW9cIiwgcHJvb2ZzKTtcbiAgICByZXR1cm4geyBwcm9vZnMsIG1pbnQgfTtcbiAgfVxuICAvKipcbiAgICogU3RyYWlnaHRmb3J3YXJkOyB1c2VzIExOIGJhbGFuY2UgdG8gcGF5IGEgTE4gaW52b2ljZVxuICAgKi9cbiAgYXN5bmMgcGF5TG4oKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuaW5mbztcbiAgICBpZiAoIWRhdGEucHIpIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgcHJcIik7XG4gICAgY29uc3QgX3BhaWQgPSBmYWxzZTtcbiAgICBjb25zdCByZXQgPSBhd2FpdCB0aGlzLndhbGxldC5wYXkoZGF0YSk7XG4gICAgcmV0dXJuIHJldCA/IHJldC5wcmVpbWFnZSA6IHZvaWQgMDtcbiAgfVxufTtcblxuLy8gc3JjL3dhbGxldHMvd2VibG4vaW5kZXgudHNcbnZhciBOREtXZWJMTldhbGxldCA9IGNsYXNzIGV4dGVuZHMgTkRLV2FsbGV0IHtcbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIFwid2VibG5cIjtcbiAgfVxuICB3YWxsZXRJZCA9IFwid2VibG5cIjtcbiAgc3RhdHVzID0gXCJpbml0aWFsXCIgLyogSU5JVElBTCAqLztcbiAgcHJvdmlkZXI7XG4gIF9iYWxhbmNlO1xuICBjb25zdHJ1Y3RvcihuZGspIHtcbiAgICBzdXBlcihuZGspO1xuICAgIHJlcXVlc3RQcm92aWRlcigpLnRoZW4oKHApID0+IHtcbiAgICAgIGlmIChwKSB7XG4gICAgICAgIHRoaXMucHJvdmlkZXIgPSBwO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IFwicmVhZHlcIiAvKiBSRUFEWSAqLztcbiAgICAgICAgdGhpcy5lbWl0KFwicmVhZHlcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXR1cyA9IFwiZmFpbGVkXCIgLyogRkFJTEVEICovO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKCgpID0+IHRoaXMuc3RhdHVzID0gXCJmYWlsZWRcIiAvKiBGQUlMRUQgKi8pO1xuICB9XG4gIGFzeW5jIHBheShwYXltZW50KSB7XG4gICAgaWYgKCF0aGlzLnByb3ZpZGVyKSB0aHJvdyBuZXcgRXJyb3IoXCJQcm92aWRlciBub3QgcmVhZHlcIik7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuc2VuZFBheW1lbnQocGF5bWVudC5wcik7XG4gIH1cbiAgYXN5bmMgbG5QYXkocGF5bWVudCkge1xuICAgIGNvbnN0IHBheSA9IG5ldyBOREtMblBheSh0aGlzLCBwYXltZW50KTtcbiAgICBjb25zdCBwcmVpbWFnZSA9IGF3YWl0IHBheS5wYXlMbigpO1xuICAgIGlmICghcHJlaW1hZ2UpIHJldHVybjtcbiAgICByZXR1cm4geyBwcmVpbWFnZSB9O1xuICB9XG4gIGFzeW5jIGNhc2h1UGF5KHBheW1lbnQpIHtcbiAgICBjb25zdCBwYXkgPSBuZXcgTkRLTG5QYXkodGhpcywgcGF5bWVudCk7XG4gICAgcmV0dXJuIHBheS5wYXlOdXQoKTtcbiAgfVxuICBhc3luYyB1cGRhdGVCYWxhbmNlKCkge1xuICAgIGlmICghdGhpcy5wcm92aWRlcikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRoaXMub25jZShcInJlYWR5XCIsICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGIgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmdldEJhbGFuY2U/LigpO1xuICAgIGlmIChiKSB0aGlzLl9iYWxhbmNlID0geyBhbW91bnQ6IGIuYmFsYW5jZSB9O1xuICAgIHJldHVybjtcbiAgfVxuICBnZXQgYmFsYW5jZSgpIHtcbiAgICBpZiAoIXRoaXMucHJvdmlkZXIpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9iYWxhbmNlO1xuICB9XG59O1xuXG4vLyBzcmMvd2FsbGV0cy9ud2MvaW5kZXgudHNcbmltcG9ydCB7IENhc2h1TWludCBhcyBDYXNodU1pbnQzLCBDYXNodVdhbGxldCBhcyBDYXNodVdhbGxldDMgfSBmcm9tIFwiQGNhc2h1L2Nhc2h1LXRzXCI7XG5pbXBvcnQge1xuICBOREtQb29sLFxuICBOREtQcml2YXRlS2V5U2lnbmVyIGFzIE5ES1ByaXZhdGVLZXlTaWduZXIzLFxuICBOREtSZWxheVNldFxufSBmcm9tIFwiQG5vc3RyLWRldi1raXQvbmRrXCI7XG5pbXBvcnQgY3JlYXRlRGVidWczIGZyb20gXCJkZWJ1Z1wiO1xuXG4vLyBzcmMvd2FsbGV0cy9ud2MvbnV0emFwLnRzXG5pbXBvcnQgeyBOREtDYXNodVRva2VuIGFzIE5ES0Nhc2h1VG9rZW4zIH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuYXN5bmMgZnVuY3Rpb24gcmVkZWVtTnV0emFwcyhudXR6YXBzLCBwcml2a2V5LCB7IGNhc2h1V2FsbGV0LCBwcm9vZnMsIG1pbnQgfSkge1xuICBwcm9vZnMgPz89IG51dHphcHMuZmxhdE1hcCgobikgPT4gbi5wcm9vZnMpO1xuICBpZiAoIWNhc2h1V2FsbGV0KSB7XG4gICAgaWYgKCFtaW50KSB0aHJvdyBuZXcgRXJyb3IoXCJObyBtaW50IHByb3ZpZGVkXCIpO1xuICAgIGNhc2h1V2FsbGV0ID0gYXdhaXQgdGhpcy5nZXRDYXNodVdhbGxldChtaW50KTtcbiAgfSBlbHNlIHtcbiAgICBtaW50ID0gY2FzaHVXYWxsZXQubWludC5taW50VXJsO1xuICB9XG4gIGNvbnN0IGluZm8gPSBhd2FpdCB0aGlzLmdldEluZm8oKTtcbiAgaWYgKCFpbmZvLm1ldGhvZHMuaW5jbHVkZXMoXCJtYWtlX2ludm9pY2VcIikpIHRocm93IG5ldyBFcnJvcihcIlRoaXMgTldDIHdhbGxldCBkb2VzIG5vdCBzdXBwb3J0IG1ha2luZyBpbnZvaWNlc1wiKTtcbiAgY29uc3QgdG90YWxBdmFpbGFibGUgPSBwcm9vZnMucmVkdWNlKChhY2MsIHByb29mKSA9PiBhY2MgKyBwcm9vZi5hbW91bnQsIDApO1xuICBsZXQgc3dlZXBBbW91bnQgPSB0b3RhbEF2YWlsYWJsZTtcbiAgd2hpbGUgKHN3ZWVwQW1vdW50ID4gMCkge1xuICAgIGNvbnN0IGludm9pY2UgPSBhd2FpdCB0aGlzLm1ha2VJbnZvaWNlKHN3ZWVwQW1vdW50ICogMWUzLCBcIk51dHphcCByZWRlbXB0aW9uXCIpO1xuICAgIGNvbnN0IG1lbHRRdW90ZSA9IGF3YWl0IGNhc2h1V2FsbGV0LmNyZWF0ZU1lbHRRdW90ZShpbnZvaWNlLmludm9pY2UpO1xuICAgIGNvbnN0IHRvdGFsUmVxdWlyZWQgPSBtZWx0UXVvdGUuYW1vdW50ICsgbWVsdFF1b3RlLmZlZV9yZXNlcnZlO1xuICAgIGlmICh0b3RhbFJlcXVpcmVkID4gdG90YWxBdmFpbGFibGUpIHtcbiAgICAgIHN3ZWVwQW1vdW50IC09IG1lbHRRdW90ZS5mZWVfcmVzZXJ2ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYXNodVdhbGxldC5tZWx0UHJvb2ZzKG1lbHRRdW90ZSwgcHJvb2ZzLCB7IHByaXZrZXkgfSk7XG4gICAgbGV0IGNoYW5nZTtcbiAgICBpZiAocmVzdWx0LmNoYW5nZS5sZW5ndGggPiAwKSBjaGFuZ2UgPSBhd2FpdCBzYXZlQ2hhbmdlKHRoaXMubmRrLCBtaW50LCByZXN1bHQuY2hhbmdlKTtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGBOdXR6YXAgcmVkZW1wdGlvbiB0byBleHRlcm5hbCB3YWxsZXQgKCR7dGhpcy53YWxsZXRJZH0pYDtcbiAgICBjcmVhdGVPdXRUeEV2ZW50KFxuICAgICAgdGhpcy5uZGssXG4gICAgICB7XG4gICAgICAgIHByOiBpbnZvaWNlLmludm9pY2UsXG4gICAgICAgIHBheW1lbnREZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJlc3VsdDogeyBwcmVpbWFnZTogaW52b2ljZS5wcmVpbWFnZSB9LFxuICAgICAgICBtaW50LFxuICAgICAgICBmZWU6IG1lbHRRdW90ZS5mZWVfcmVzZXJ2ZSxcbiAgICAgICAgcHJvb2ZzQ2hhbmdlOiB7IHN0b3JlOiBjaGFuZ2U/LnByb29mcywgbWludCB9LFxuICAgICAgICBzdGF0ZVVwZGF0ZToge1xuICAgICAgICAgIGNyZWF0ZWQ6IGNoYW5nZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdGhpcy5yZWxheVNldCxcbiAgICAgIHsgbnV0emFwcyB9XG4gICAgKTtcbiAgICByZXR1cm4gc3dlZXBBbW91bnQ7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHJlZGVlbSBudXR6YXBzXCIpO1xufVxuYXN5bmMgZnVuY3Rpb24gc2F2ZUNoYW5nZShuZGssIG1pbnQsIGNoYW5nZSkge1xuICBjb25zdCB0b3RhbENoYW5nZSA9IGNoYW5nZS5yZWR1Y2UoKGFjYywgcHJvb2YpID0+IGFjYyArIHByb29mLmFtb3VudCwgMCk7XG4gIGlmICh0b3RhbENoYW5nZSA9PT0gMCkgcmV0dXJuO1xuICBjb25zdCB0b2tlbiA9IG5ldyBOREtDYXNodVRva2VuMyhuZGspO1xuICB0b2tlbi5taW50ID0gbWludDtcbiAgdG9rZW4ucHJvb2ZzID0gY2hhbmdlO1xuICB0b2tlbi5wdWJsaXNoKCk7XG4gIHJldHVybiB0b2tlbjtcbn1cblxuLy8gc3JjL3dhbGxldHMvbndjL3JlcS50c1xuaW1wb3J0IHsgTkRLRXZlbnQgYXMgTkRLRXZlbnQ0LCBOREtLaW5kIGFzIE5ES0tpbmQ5IH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuXG4vLyBzcmMvd2FsbGV0cy9ud2MvcmVzLnRzXG5pbXBvcnQgeyBOREtLaW5kIGFzIE5ES0tpbmQ4IH0gZnJvbSBcIkBub3N0ci1kZXYta2l0L25ka1wiO1xuYXN5bmMgZnVuY3Rpb24gd2FpdEZvclJlc3BvbnNlKHJlcXVlc3QpIHtcbiAgaWYgKCF0aGlzLnBvb2wpIHRocm93IG5ldyBFcnJvcihcIldhbGxldCBub3QgaW5pdGlhbGl6ZWRcIik7XG4gIGNvbnN0IHNlbmRSZXF1ZXN0ID0gKCkgPT4ge1xuICAgIGlmICh3YWl0Rm9yRW9zZVRpbWVvdXQpIGNsZWFyVGltZW91dCh3YWl0Rm9yRW9zZVRpbWVvdXQpO1xuICAgIHJlcXVlc3QucHVibGlzaCh0aGlzLnJlbGF5U2V0KTtcbiAgfTtcbiAgY29uc3Qgd2FpdEZvckVvc2VUaW1lb3V0ID0gc2V0VGltZW91dChzZW5kUmVxdWVzdCwgMjUwMCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgc3ViID0gdGhpcy5uZGsuc3Vic2NyaWJlKFxuICAgICAge1xuICAgICAgICBraW5kczogW05ES0tpbmQ4Lk5vc3RyV2FsbGV0Q29ubmVjdFJlc10sXG4gICAgICAgIFwiI2VcIjogW3JlcXVlc3QuaWRdLFxuICAgICAgICBsaW1pdDogMVxuICAgICAgfSxcbiAgICAgIHsgZ3JvdXBhYmxlOiBmYWxzZSwgcG9vbDogdGhpcy5wb29sIH0sXG4gICAgICB0aGlzLnJlbGF5U2V0XG4gICAgKTtcbiAgICBzdWIub24oXCJldmVudFwiLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGV2ZW50LmRlY3J5cHQoZXZlbnQuYXV0aG9yLCB0aGlzLnNpZ25lcik7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGV2ZW50LmNvbnRlbnQpO1xuICAgICAgICBpZiAoY29udGVudC5lcnJvcikge1xuICAgICAgICAgIHJlamVjdChjb250ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJlcnJvciBkZWNyeXB0aW5nIGV2ZW50XCIsIGUpO1xuICAgICAgICByZWplY3Qoe1xuICAgICAgICAgIHJlc3VsdF90eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIGNvZGU6IFwiZmFpbGVkX3RvX3BhcnNlX3Jlc3BvbnNlXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBlLm1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc3ViLnN0b3AoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzdWIub24oXCJlb3NlXCIsICgpID0+IHtcbiAgICAgIHNlbmRSZXF1ZXN0KCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vLyBzcmMvd2FsbGV0cy9ud2MvcmVxLnRzXG5hc3luYyBmdW5jdGlvbiBzZW5kUmVxKG1ldGhvZCwgcGFyYW1zKSB7XG4gIGlmICghdGhpcy53YWxsZXRTZXJ2aWNlIHx8ICF0aGlzLnNpZ25lcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIldhbGxldCBub3QgaW5pdGlhbGl6ZWRcIik7XG4gIH1cbiAgY29uc3QgZXZlbnQgPSBuZXcgTkRLRXZlbnQ0KHRoaXMubmRrLCB7XG4gICAga2luZDogTkRLS2luZDkuTm9zdHJXYWxsZXRDb25uZWN0UmVxLFxuICAgIHRhZ3M6IFtbXCJwXCIsIHRoaXMud2FsbGV0U2VydmljZS5wdWJrZXldXSxcbiAgICBjb250ZW50OiBKU09OLnN0cmluZ2lmeSh7IG1ldGhvZCwgcGFyYW1zIH0pXG4gIH0pO1xuICBhd2FpdCBldmVudC5lbmNyeXB0KHRoaXMud2FsbGV0U2VydmljZSwgdGhpcy5zaWduZXIsIFwibmlwMDRcIik7XG4gIGF3YWl0IGV2ZW50LnNpZ24odGhpcy5zaWduZXIpO1xuICBjb25zdCByZXNwb25zZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgd2FpdEZvclJlc3BvbnNlLmNhbGwodGhpcywgZXZlbnQpLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgfSk7XG4gIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICBjb25zdCB0aW1lb3V0UHJvbWlzZSA9IG5ldyBQcm9taXNlKFxuICAgICAgKF8sIHJlamVjdCkgPT4gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZW1pdChcInRpbWVvdXRcIiwgbWV0aG9kKTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgUmVxdWVzdCB0aW1lZCBvdXQgYWZ0ZXIgJHt0aGlzLnRpbWVvdXR9bXNgKSk7XG4gICAgICB9LCB0aGlzLnRpbWVvdXQpXG4gICAgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtyZXNwb25zZVByb21pc2UsIHRpbWVvdXRQcm9taXNlXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3BvbnNlUHJvbWlzZTtcbn1cblxuLy8gc3JjL3dhbGxldHMvbndjL2luZGV4LnRzXG52YXIgZDMgPSBjcmVhdGVEZWJ1ZzMoXCJuZGstd2FsbGV0Om53Y1wiKTtcbnZhciBOREtOV0NXYWxsZXQgPSBjbGFzcyBleHRlbmRzIE5ES1dhbGxldCB7XG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcIm53Y1wiO1xuICB9XG4gIHN0YXR1cyA9IFwiaW5pdGlhbFwiIC8qIElOSVRJQUwgKi87XG4gIHdhbGxldElkID0gXCJud2NcIjtcbiAgcGFpcmluZ0NvZGU7XG4gIHdhbGxldFNlcnZpY2U7XG4gIHJlbGF5U2V0O1xuICBzaWduZXI7XG4gIF9iYWxhbmNlO1xuICBjYWNoZWRJbmZvO1xuICBwb29sO1xuICB0aW1lb3V0O1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIG5ka1xuICAgKiBAcGFyYW0gdGltZW91dCBBIHRpbWVlb3V0IHRvIHVzZSBmb3IgYWxsIG9wZXJhdGlvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuZGssIHtcbiAgICB0aW1lb3V0LFxuICAgIHBhaXJpbmdDb2RlLFxuICAgIHB1YmtleSxcbiAgICByZWxheVVybHMsXG4gICAgc2VjcmV0XG4gIH0pIHtcbiAgICBzdXBlcihuZGspO1xuICAgIGlmIChwYWlyaW5nQ29kZSkge1xuICAgICAgY29uc3QgdSA9IG5ldyBVUkwocGFpcmluZ0NvZGUpO1xuICAgICAgcHVia2V5ID0gdS5ob3N0ID8/IHUucGF0aG5hbWU7XG4gICAgICByZWxheVVybHMgPSB1LnNlYXJjaFBhcmFtcy5nZXRBbGwoXCJyZWxheVwiKTtcbiAgICAgIHNlY3JldCA9IHUuc2VhcmNoUGFyYW1zLmdldChcInNlY3JldFwiKTtcbiAgICAgIHRoaXMucGFpcmluZ0NvZGUgPSBwYWlyaW5nQ29kZTtcbiAgICB9XG4gICAgaWYgKCFwdWJrZXkgfHwgIXJlbGF5VXJscyB8fCAhc2VjcmV0KSB0aHJvdyBuZXcgRXJyb3IoXCJJbmNvbXBsZXRlIGluaXRpYWxpemF0aW9uIHBhcmFtZXRlcnNcIik7XG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgICB0aGlzLndhbGxldFNlcnZpY2UgPSB0aGlzLm5kay5nZXRVc2VyKHsgcHVia2V5IH0pO1xuICAgIHRoaXMucG9vbCA9IHRoaXMuZ2V0UG9vbChyZWxheVVybHMpO1xuICAgIHRoaXMucmVsYXlTZXQgPSBOREtSZWxheVNldC5mcm9tUmVsYXlVcmxzKHJlbGF5VXJscywgdGhpcy5uZGssIHRydWUsIHRoaXMucG9vbCk7XG4gICAgdGhpcy5zaWduZXIgPSBuZXcgTkRLUHJpdmF0ZUtleVNpZ25lcjMoc2VjcmV0KTtcbiAgICB0aGlzLnBvb2wub24oXCJjb25uZWN0XCIsICgpID0+IHtcbiAgICAgIHRoaXMuc3RhdHVzID0gXCJyZWFkeVwiIC8qIFJFQURZICovO1xuICAgICAgdGhpcy5lbWl0KFwicmVhZHlcIik7XG4gICAgfSk7XG4gICAgdGhpcy5wb29sLm9uKFwicmVsYXk6ZGlzY29ubmVjdFwiLCAoKSA9PiB0aGlzLnN0YXR1cyA9IFwibG9hZGluZ1wiIC8qIExPQURJTkcgKi8pO1xuICAgIHRoaXMucG9vbC5jb25uZWN0KCk7XG4gICAgaWYgKHRoaXMucG9vbC5jb25uZWN0ZWRSZWxheXMoKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnN0YXR1cyA9IFwicmVhZHlcIiAvKiBSRUFEWSAqLztcbiAgICAgIHRoaXMuZW1pdChcInJlYWR5XCIpO1xuICAgIH1cbiAgfVxuICBnZXRQb29sKHJlbGF5VXJscykge1xuICAgIGZvciAoY29uc3QgcG9vbCBvZiB0aGlzLm5kay5wb29scykgaWYgKHBvb2wubmFtZSA9PT0gXCJOV0NcIikgcmV0dXJuIHBvb2w7XG4gICAgcmV0dXJuIG5ldyBOREtQb29sKHJlbGF5VXJscywgW10sIHRoaXMubmRrLCB7IG5hbWU6IFwiTldDXCIgfSk7XG4gIH1cbiAgYXN5bmMgbG5QYXkocGF5bWVudCkge1xuICAgIGlmICghdGhpcy5zaWduZXIpIHRocm93IG5ldyBFcnJvcihcIldhbGxldCBub3QgaW5pdGlhbGl6ZWRcIik7XG4gICAgZDMoXCJsblBheVwiLCBwYXltZW50LnByKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnJlcShcInBheV9pbnZvaWNlXCIsIHsgaW52b2ljZTogcGF5bWVudC5wciB9KTtcbiAgICBkMyhcImxuUGF5IHJlc1wiLCByZXMpO1xuICAgIGlmIChyZXMucmVzdWx0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmVpbWFnZTogcmVzLnJlc3VsdC5wcmVpbWFnZVxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVCYWxhbmNlKCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKHJlcy5lcnJvcj8ubWVzc2FnZSB8fCBcIlBheW1lbnQgZmFpbGVkXCIpO1xuICB9XG4gIC8qKlxuICAgKiBQYXkgYnkgbWludGluZyB0b2tlbnMuXG4gICAqXG4gICAqIFRoaXMgY3JlYXRlcyBhIHF1b3RlIG9uIGEgbWludCwgcGF5cyBpdCB1c2luZyBOV0MgYW5kIHRoZW4gbWludHMgdGhlIHRva2Vucy5cbiAgICpcbiAgICogQHBhcmFtIHBheW1lbnQgLSBUaGUgcGF5bWVudCB0byBwYXlcbiAgICogQHBhcmFtIG9uTG5QYXltZW50IC0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIGFuIExOIHBheW1lbnQgd2lsbCBiZSBwcm9jZXNzZWRcbiAgICogQHJldHVybnMgVGhlIHBheW1lbnQgY29uZmlybWF0aW9uXG4gICAqL1xuICBhc3luYyBjYXNodVBheShwYXltZW50LCBvbkxuSW52b2ljZSwgb25MblBheW1lbnQpIHtcbiAgICBpZiAoIXBheW1lbnQubWludHMpIHRocm93IG5ldyBFcnJvcihcIk5vIG1pbnRzIHByb3ZpZGVkXCIpO1xuICAgIGZvciAoY29uc3QgbWludCBvZiBwYXltZW50Lm1pbnRzKSB7XG4gICAgICBsZXQgYW1vdW50ID0gcGF5bWVudC5hbW91bnQ7XG4gICAgICBhbW91bnQgPSBhbW91bnQgLyAxZTM7XG4gICAgICBjb25zdCB3YWxsZXQgPSBuZXcgQ2FzaHVXYWxsZXQzKG5ldyBDYXNodU1pbnQzKG1pbnQpLCB7IHVuaXQ6IFwic2F0XCIgfSk7XG4gICAgICBsZXQgcXVvdGU7XG4gICAgICB0cnkge1xuICAgICAgICBxdW90ZSA9IGF3YWl0IHdhbGxldC5jcmVhdGVNaW50UXVvdGUoYW1vdW50KTtcbiAgICAgICAgZDMoXCJjYXNodVBheSBxdW90ZVwiLCBxdW90ZSk7XG4gICAgICAgIG9uTG5JbnZvaWNlPy4ocXVvdGUucmVxdWVzdCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJlcnJvciBjcmVhdGluZyBtaW50IHF1b3RlXCIsIGUpO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgICAgaWYgKCFxdW90ZSkgdGhyb3cgbmV3IEVycm9yKFwiRGlkbnQgcmVjZWl2ZSBhIG1pbnQgcXVvdGVcIik7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnJlcShcInBheV9pbnZvaWNlXCIsIHsgaW52b2ljZTogcXVvdGUucmVxdWVzdCB9KTtcbiAgICAgICAgaWYgKHJlcy5yZXN1bHQ/LnByZWltYWdlKSB7XG4gICAgICAgICAgb25MblBheW1lbnQ/LihtaW50LCByZXMucmVzdWx0LnByZWltYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBkMyhcImNhc2h1UGF5IHJlc1wiLCByZXMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZT8uZXJyb3I/Lm1lc3NhZ2UgfHwgZT8ubWVzc2FnZSB8fCBcInVua25vd24gZXJyb3JcIjtcbiAgICAgICAgY29uc29sZS5lcnJvcihcImVycm9yIHBheWluZyBpbnZvaWNlXCIsIGUsIHsgbWVzc2FnZSB9KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVCYWxhbmNlKCk7XG4gICAgICByZXR1cm4gbWludFByb29mcyh3YWxsZXQsIHF1b3RlLCBhbW91bnQsIG1pbnQsIHBheW1lbnQucDJwayk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWRlZW0gYSBzZXQgb2YgbnV0emFwcyBpbnRvIGFuIE5XQyB3YWxsZXQuXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gZ2V0cyBhbiBpbnZvaWNlIGZyb20gdGhlIE5XQyB3YWxsZXQgdW50aWwgdGhlIHRvdGFsIGFtb3VudCBvZiB0aGUgbnV0emFwcyBpcyBlbm91Z2ggdG8gcGF5IGZvciB0aGUgaW52b2ljZVxuICAgKiB3aGVuIGFjY291bnRpbmcgZm9yIGZlZXMuXG4gICAqXG4gICAqIEBwYXJhbSBjYXNodVdhbGxldCAtIFRoZSBjYXNodSB3YWxsZXQgdG8gcmVkZWVtIHRoZSBudXR6YXBzIGludG9cbiAgICogQHBhcmFtIG51dHphcHMgLSBUaGUgbnV0emFwcyB0byByZWRlZW1cbiAgICogQHBhcmFtIHByb29mcyAtIFRoZSBwcm9vZnMgdG8gcmVkZWVtXG4gICAqIEBwYXJhbSBtaW50IC0gVGhlIG1pbnQgdG8gcmVkZWVtIHRoZSBudXR6YXBzIGludG9cbiAgICogQHBhcmFtIHByaXZrZXkgLSBUaGUgcHJpdmF0ZSBrZXkgbmVlZGVkIHRvIHJlZGVlbSBwMnBrIHByb29mcy5cbiAgICovXG4gIHJlZGVlbU51dHphcHMgPSByZWRlZW1OdXR6YXBzLmJpbmQodGhpcyk7XG4gIC8qKlxuICAgKiBGZXRjaCB0aGUgYmFsYW5jZSBvZiB0aGlzIHdhbGxldFxuICAgKi9cbiAgYXN5bmMgdXBkYXRlQmFsYW5jZSgpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnJlcShcImdldF9iYWxhbmNlXCIsIHt9KTtcbiAgICBpZiAoIXJlcy5yZXN1bHQpIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgYmFsYW5jZVwiKTtcbiAgICBpZiAocmVzLmVycm9yKSB0aHJvdyBuZXcgRXJyb3IocmVzLmVycm9yLm1lc3NhZ2UpO1xuICAgIHRoaXMuX2JhbGFuY2UgPSB7XG4gICAgICBhbW91bnQ6IHJlcy5yZXN1bHQ/LmJhbGFuY2UgPz8gMFxuICAgIH07XG4gICAgdGhpcy5fYmFsYW5jZS5hbW91bnQgLz0gMWUzO1xuICAgIHRoaXMuZW1pdChcImJhbGFuY2VfdXBkYXRlZFwiKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBiYWxhbmNlIG9mIHRoaXMgd2FsbGV0XG4gICAqL1xuICBnZXQgYmFsYW5jZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYmFsYW5jZTtcbiAgfVxuICByZXEgPSBzZW5kUmVxLmJpbmQodGhpcyk7XG4gIGFzeW5jIGdldEluZm8ocmVmZXRjaCA9IGZhbHNlKSB7XG4gICAgaWYgKHJlZmV0Y2gpIHtcbiAgICAgIHRoaXMuY2FjaGVkSW5mbyA9IHZvaWQgMDtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2FjaGVkSW5mbykgcmV0dXJuIHRoaXMuY2FjaGVkSW5mbztcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnJlcShcImdldF9pbmZvXCIsIHt9KTtcbiAgICBkMyhcImluZm9cIiwgcmVzKTtcbiAgICBpZiAoIXJlcy5yZXN1bHQpIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgaW5mb1wiKTtcbiAgICBpZiAocmVzLmVycm9yKSB0aHJvdyBuZXcgRXJyb3IocmVzLmVycm9yLm1lc3NhZ2UpO1xuICAgIHRoaXMuY2FjaGVkSW5mbyA9IHJlcy5yZXN1bHQ7XG4gICAgaWYgKHJlcy5yZXN1bHQuYWxpYXMpIHRoaXMud2FsbGV0SWQgPSByZXMucmVzdWx0LmFsaWFzO1xuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG4gIGFzeW5jIGxpc3RUcmFuc2FjdGlvbnMoKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5yZXEoXCJsaXN0X3RyYW5zYWN0aW9uc1wiLCB7fSk7XG4gICAgaWYgKCFyZXMucmVzdWx0KSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gbGlzdCB0cmFuc2FjdGlvbnNcIik7XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cbiAgYXN5bmMgbWFrZUludm9pY2UoYW1vdW50LCBkZXNjcmlwdGlvbikge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucmVxKFwibWFrZV9pbnZvaWNlXCIsIHsgYW1vdW50LCBkZXNjcmlwdGlvbiB9KTtcbiAgICBpZiAoIXJlcy5yZXN1bHQpIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBtYWtlIGludm9pY2VcIik7XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cbn07XG5leHBvcnQge1xuICBOREtDYXNodURlcG9zaXQsXG4gIE5ES0Nhc2h1V2FsbGV0LFxuICBOREtDYXNodVdhbGxldEJhY2t1cCxcbiAgTkRLTldDV2FsbGV0LFxuICBOREtOdXR6YXBNb25pdG9yLFxuICBOREtXYWxsZXQsXG4gIE5ES1dhbGxldFN0YXR1cyxcbiAgTkRLV2ViTE5XYWxsZXQsXG4gIFdhbGxldFN0YXRlLFxuICBjYWxjdWxhdGVOZXdTdGF0ZSxcbiAgY29uc29saWRhdGVNaW50VG9rZW5zLFxuICBjb25zb2xpZGF0ZVRva2VucyxcbiAgZ2V0Qm9sdDExQW1vdW50LFxuICBnZXRCb2x0MTFEZXNjcmlwdGlvbixcbiAgZ2V0Qm9sdDExRXhwaXJlc0F0LFxuICBnZXRDYXNodU1pbnRSZWNvbW1lbmRhdGlvbnMsXG4gIG1pZ3JhdGVDYXNodVdhbGxldCxcbiAgdXBkYXRlXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-wallet/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@nostr-dev-kit/ndk-wallet/node_modules/@nostr-dev-kit/ndk/dist/index.mjs":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@nostr-dev-kit/ndk-wallet/node_modules/@nostr-dev-kit/ndk/dist/index.mjs ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BECH32_REGEX: () => (/* binding */ BECH32_REGEX),\n/* harmony export */   NDKAppHandlerEvent: () => (/* binding */ NDKAppHandlerEvent),\n/* harmony export */   NDKAppSettings: () => (/* binding */ NDKAppSettings),\n/* harmony export */   NDKArticle: () => (/* binding */ NDKArticle),\n/* harmony export */   NDKCashuMintList: () => (/* binding */ NDKCashuMintList),\n/* harmony export */   NDKCashuToken: () => (/* binding */ NDKCashuToken),\n/* harmony export */   NDKCashuWalletTx: () => (/* binding */ NDKCashuWalletTx),\n/* harmony export */   NDKClassified: () => (/* binding */ NDKClassified),\n/* harmony export */   NDKDVMJobFeedback: () => (/* binding */ NDKDVMJobFeedback),\n/* harmony export */   NDKDVMJobResult: () => (/* binding */ NDKDVMJobResult),\n/* harmony export */   NDKDVMRequest: () => (/* binding */ NDKDVMRequest),\n/* harmony export */   NDKDraft: () => (/* binding */ NDKDraft),\n/* harmony export */   NDKDvmJobFeedbackStatus: () => (/* binding */ NDKDvmJobFeedbackStatus),\n/* harmony export */   NDKEvent: () => (/* binding */ NDKEvent),\n/* harmony export */   NDKHighlight: () => (/* binding */ NDKHighlight),\n/* harmony export */   NDKImage: () => (/* binding */ NDKImage),\n/* harmony export */   NDKKind: () => (/* binding */ NDKKind),\n/* harmony export */   NDKList: () => (/* binding */ NDKList),\n/* harmony export */   NDKListKinds: () => (/* binding */ NDKListKinds),\n/* harmony export */   NDKNip07Signer: () => (/* binding */ NDKNip07Signer),\n/* harmony export */   NDKNip46Backend: () => (/* binding */ NDKNip46Backend),\n/* harmony export */   NDKNip46Signer: () => (/* binding */ NDKNip46Signer),\n/* harmony export */   NDKNostrRpc: () => (/* binding */ NDKNostrRpc),\n/* harmony export */   NDKNutzap: () => (/* binding */ NDKNutzap),\n/* harmony export */   NDKPool: () => (/* binding */ NDKPool),\n/* harmony export */   NDKPrivateKeySigner: () => (/* binding */ NDKPrivateKeySigner),\n/* harmony export */   NDKPublishError: () => (/* binding */ NDKPublishError),\n/* harmony export */   NDKRelay: () => (/* binding */ NDKRelay),\n/* harmony export */   NDKRelayAuthPolicies: () => (/* binding */ NDKRelayAuthPolicies),\n/* harmony export */   NDKRelayList: () => (/* binding */ NDKRelayList),\n/* harmony export */   NDKRelaySet: () => (/* binding */ NDKRelaySet),\n/* harmony export */   NDKRelayStatus: () => (/* binding */ NDKRelayStatus),\n/* harmony export */   NDKRepost: () => (/* binding */ NDKRepost),\n/* harmony export */   NDKSimpleGroup: () => (/* binding */ NDKSimpleGroup),\n/* harmony export */   NDKSimpleGroupMemberList: () => (/* binding */ NDKSimpleGroupMemberList),\n/* harmony export */   NDKSimpleGroupMetadata: () => (/* binding */ NDKSimpleGroupMetadata),\n/* harmony export */   NDKStory: () => (/* binding */ NDKStory),\n/* harmony export */   NDKStorySticker: () => (/* binding */ NDKStorySticker),\n/* harmony export */   NDKStoryStickerType: () => (/* binding */ NDKStoryStickerType),\n/* harmony export */   NDKSubscription: () => (/* binding */ NDKSubscription),\n/* harmony export */   NDKSubscriptionCacheUsage: () => (/* binding */ NDKSubscriptionCacheUsage),\n/* harmony export */   NDKSubscriptionReceipt: () => (/* binding */ NDKSubscriptionReceipt),\n/* harmony export */   NDKSubscriptionStart: () => (/* binding */ NDKSubscriptionStart),\n/* harmony export */   NDKSubscriptionTier: () => (/* binding */ NDKSubscriptionTier),\n/* harmony export */   NDKTranscriptionDVM: () => (/* binding */ NDKTranscriptionDVM),\n/* harmony export */   NDKUser: () => (/* binding */ NDKUser),\n/* harmony export */   NDKVideo: () => (/* binding */ NDKVideo),\n/* harmony export */   NDKWiki: () => (/* binding */ NDKWiki),\n/* harmony export */   NDKWikiMergeRequest: () => (/* binding */ NDKWikiMergeRequest),\n/* harmony export */   NDKZapper: () => (/* binding */ NDKZapper),\n/* harmony export */   NIP33_A_REGEX: () => (/* binding */ NIP33_A_REGEX),\n/* harmony export */   NdkNutzapStatus: () => (/* binding */ NdkNutzapStatus),\n/* harmony export */   calculateRelaySetFromEvent: () => (/* binding */ calculateRelaySetFromEvent),\n/* harmony export */   calculateTermDurationInSeconds: () => (/* binding */ calculateTermDurationInSeconds),\n/* harmony export */   cashuPubkeyToNostrPubkey: () => (/* binding */ cashuPubkeyToNostrPubkey),\n/* harmony export */   compareFilter: () => (/* binding */ compareFilter),\n/* harmony export */   \"default\": () => (/* binding */ NDK),\n/* harmony export */   defaultOpts: () => (/* binding */ defaultOpts),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   dvmSchedule: () => (/* binding */ dvmSchedule),\n/* harmony export */   eventHasETagMarkers: () => (/* binding */ eventHasETagMarkers),\n/* harmony export */   eventIsPartOfThread: () => (/* binding */ eventIsPartOfThread),\n/* harmony export */   eventIsReply: () => (/* binding */ eventIsReply),\n/* harmony export */   eventReplies: () => (/* binding */ eventReplies),\n/* harmony export */   eventThreadIds: () => (/* binding */ eventThreadIds),\n/* harmony export */   eventThreads: () => (/* binding */ eventThreads),\n/* harmony export */   eventsBySameAuthor: () => (/* binding */ eventsBySameAuthor),\n/* harmony export */   filterAndRelaySetFromBech32: () => (/* binding */ filterAndRelaySetFromBech32),\n/* harmony export */   filterFingerprint: () => (/* binding */ filterFingerprint),\n/* harmony export */   filterForEventsTaggingId: () => (/* binding */ filterForEventsTaggingId),\n/* harmony export */   filterFromId: () => (/* binding */ filterFromId),\n/* harmony export */   generateContentTags: () => (/* binding */ generateContentTags),\n/* harmony export */   generateHashtags: () => (/* binding */ generateHashtags),\n/* harmony export */   generateSubId: () => (/* binding */ generateSubId),\n/* harmony export */   generateZapRequest: () => (/* binding */ generateZapRequest),\n/* harmony export */   getEventReplyId: () => (/* binding */ getEventReplyId),\n/* harmony export */   getNip57ZapSpecFromLud: () => (/* binding */ getNip57ZapSpecFromLud),\n/* harmony export */   getRelayListForUser: () => (/* binding */ getRelayListForUser),\n/* harmony export */   getRelayListForUsers: () => (/* binding */ getRelayListForUsers),\n/* harmony export */   getReplyTag: () => (/* binding */ getReplyTag),\n/* harmony export */   getRootEventId: () => (/* binding */ getRootEventId),\n/* harmony export */   getRootTag: () => (/* binding */ getRootTag),\n/* harmony export */   giftUnwrap: () => (/* binding */ giftUnwrap),\n/* harmony export */   giftWrap: () => (/* binding */ giftWrap),\n/* harmony export */   imetaTagToTag: () => (/* binding */ imetaTagToTag),\n/* harmony export */   isEventOriginalPost: () => (/* binding */ isEventOriginalPost),\n/* harmony export */   isNip33AValue: () => (/* binding */ isNip33AValue),\n/* harmony export */   mapImetaTag: () => (/* binding */ mapImetaTag),\n/* harmony export */   matchFilter: () => (/* binding */ matchFilter),\n/* harmony export */   mergeFilters: () => (/* binding */ mergeFilters),\n/* harmony export */   mergeTags: () => (/* binding */ mergeTags),\n/* harmony export */   ndkSignerFromPayload: () => (/* binding */ ndkSignerFromPayload),\n/* harmony export */   newAmount: () => (/* binding */ newAmount),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeRelayUrl: () => (/* binding */ normalizeRelayUrl),\n/* harmony export */   normalizeUrl: () => (/* binding */ normalizeUrl),\n/* harmony export */   parseTagToSubscriptionAmount: () => (/* binding */ parseTagToSubscriptionAmount),\n/* harmony export */   pinEvent: () => (/* binding */ pinEvent),\n/* harmony export */   possibleIntervalFrequencies: () => (/* binding */ possibleIntervalFrequencies),\n/* harmony export */   profileFromEvent: () => (/* binding */ profileFromEvent),\n/* harmony export */   proofP2pk: () => (/* binding */ proofP2pk),\n/* harmony export */   proofP2pkNostr: () => (/* binding */ proofP2pkNostr),\n/* harmony export */   proofsTotalBalance: () => (/* binding */ proofsTotalBalance),\n/* harmony export */   queryFullyFilled: () => (/* binding */ queryFullyFilled),\n/* harmony export */   relayListFromKind3: () => (/* binding */ relayListFromKind3),\n/* harmony export */   relaysFromBech32: () => (/* binding */ relaysFromBech32),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serializeProfile: () => (/* binding */ serializeProfile),\n/* harmony export */   signerRegistry: () => (/* binding */ signerRegistry),\n/* harmony export */   strToDimension: () => (/* binding */ strToDimension),\n/* harmony export */   strToPosition: () => (/* binding */ strToPosition),\n/* harmony export */   tryNormalizeRelayUrl: () => (/* binding */ tryNormalizeRelayUrl),\n/* harmony export */   uniqueTag: () => (/* binding */ uniqueTag),\n/* harmony export */   wrapEvent: () => (/* binding */ wrapEvent),\n/* harmony export */   zapInvoiceFromEvent: () => (/* binding */ zapInvoiceFromEvent)\n/* harmony export */ });\n/* harmony import */ var tseep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tseep */ \"(ssr)/./node_modules/tseep/lib/index.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var nostr_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! nostr-tools */ \"(ssr)/./node_modules/.pnpm/nostr-tools@2.14.2_typescript@5.8.3/node_modules/nostr-tools/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! typescript-lru-cache */ \"(ssr)/./node_modules/typescript-lru-cache/dist/index.js\");\n/* harmony import */ var light_bolt11_decoder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! light-bolt11-decoder */ \"(ssr)/./node_modules/light-bolt11-decoder/bolt11.js\");\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@scure/base/lib/esm/index.js\");\n// src/types.ts\nvar NdkNutzapStatus = /* @__PURE__ */ ((NdkNutzapStatus2) => {\n  NdkNutzapStatus2[\"INITIAL\"] = \"initial\";\n  NdkNutzapStatus2[\"PROCESSING\"] = \"processing\";\n  NdkNutzapStatus2[\"REDEEMED\"] = \"redeemed\";\n  NdkNutzapStatus2[\"SPENT\"] = \"spent\";\n  NdkNutzapStatus2[\"MISSING_PRIVKEY\"] = \"missing_privkey\";\n  NdkNutzapStatus2[\"TEMPORARY_ERROR\"] = \"temporary_error\";\n  NdkNutzapStatus2[\"PERMANENT_ERROR\"] = \"permanent_error\";\n  NdkNutzapStatus2[\"INVALID_NUTZAP\"] = \"invalid_nutzap\";\n  return NdkNutzapStatus2;\n})(NdkNutzapStatus || {});\n\n// src/events/kinds/index.ts\nvar NDKKind = /* @__PURE__ */ ((NDKKind2) => {\n  NDKKind2[NDKKind2[\"Metadata\"] = 0] = \"Metadata\";\n  NDKKind2[NDKKind2[\"Text\"] = 1] = \"Text\";\n  NDKKind2[NDKKind2[\"RecommendRelay\"] = 2] = \"RecommendRelay\";\n  NDKKind2[NDKKind2[\"Contacts\"] = 3] = \"Contacts\";\n  NDKKind2[NDKKind2[\"EncryptedDirectMessage\"] = 4] = \"EncryptedDirectMessage\";\n  NDKKind2[NDKKind2[\"EventDeletion\"] = 5] = \"EventDeletion\";\n  NDKKind2[NDKKind2[\"Repost\"] = 6] = \"Repost\";\n  NDKKind2[NDKKind2[\"Reaction\"] = 7] = \"Reaction\";\n  NDKKind2[NDKKind2[\"BadgeAward\"] = 8] = \"BadgeAward\";\n  NDKKind2[NDKKind2[\"GroupChat\"] = 9] = \"GroupChat\";\n  NDKKind2[NDKKind2[\"GroupNote\"] = 11] = \"GroupNote\";\n  NDKKind2[NDKKind2[\"GroupReply\"] = 12] = \"GroupReply\";\n  NDKKind2[NDKKind2[\"GiftWrapSeal\"] = 13] = \"GiftWrapSeal\";\n  NDKKind2[NDKKind2[\"PrivateDirectMessage\"] = 14] = \"PrivateDirectMessage\";\n  NDKKind2[NDKKind2[\"Image\"] = 20] = \"Image\";\n  NDKKind2[NDKKind2[\"Video\"] = 21] = \"Video\";\n  NDKKind2[NDKKind2[\"ShortVideo\"] = 22] = \"ShortVideo\";\n  NDKKind2[NDKKind2[\"Story\"] = 23] = \"Story\";\n  NDKKind2[NDKKind2[\"Vanish\"] = 62] = \"Vanish\";\n  NDKKind2[NDKKind2[\"CashuWalletBackup\"] = 375] = \"CashuWalletBackup\";\n  NDKKind2[NDKKind2[\"GiftWrap\"] = 1059] = \"GiftWrap\";\n  NDKKind2[NDKKind2[\"GenericRepost\"] = 16] = \"GenericRepost\";\n  NDKKind2[NDKKind2[\"ChannelCreation\"] = 40] = \"ChannelCreation\";\n  NDKKind2[NDKKind2[\"ChannelMetadata\"] = 41] = \"ChannelMetadata\";\n  NDKKind2[NDKKind2[\"ChannelMessage\"] = 42] = \"ChannelMessage\";\n  NDKKind2[NDKKind2[\"ChannelHideMessage\"] = 43] = \"ChannelHideMessage\";\n  NDKKind2[NDKKind2[\"ChannelMuteUser\"] = 44] = \"ChannelMuteUser\";\n  NDKKind2[NDKKind2[\"WikiMergeRequest\"] = 818] = \"WikiMergeRequest\";\n  NDKKind2[NDKKind2[\"GenericReply\"] = 1111] = \"GenericReply\";\n  NDKKind2[NDKKind2[\"Media\"] = 1063] = \"Media\";\n  NDKKind2[NDKKind2[\"Report\"] = 1984] = \"Report\";\n  NDKKind2[NDKKind2[\"Label\"] = 1985] = \"Label\";\n  NDKKind2[NDKKind2[\"DVMReqTextExtraction\"] = 5e3] = \"DVMReqTextExtraction\";\n  NDKKind2[NDKKind2[\"DVMReqTextSummarization\"] = 5001] = \"DVMReqTextSummarization\";\n  NDKKind2[NDKKind2[\"DVMReqTextTranslation\"] = 5002] = \"DVMReqTextTranslation\";\n  NDKKind2[NDKKind2[\"DVMReqTextGeneration\"] = 5050] = \"DVMReqTextGeneration\";\n  NDKKind2[NDKKind2[\"DVMReqImageGeneration\"] = 5100] = \"DVMReqImageGeneration\";\n  NDKKind2[NDKKind2[\"DVMReqTextToSpeech\"] = 5250] = \"DVMReqTextToSpeech\";\n  NDKKind2[NDKKind2[\"DVMReqDiscoveryNostrContent\"] = 5300] = \"DVMReqDiscoveryNostrContent\";\n  NDKKind2[NDKKind2[\"DVMReqDiscoveryNostrPeople\"] = 5301] = \"DVMReqDiscoveryNostrPeople\";\n  NDKKind2[NDKKind2[\"DVMReqTimestamping\"] = 5900] = \"DVMReqTimestamping\";\n  NDKKind2[NDKKind2[\"DVMEventSchedule\"] = 5905] = \"DVMEventSchedule\";\n  NDKKind2[NDKKind2[\"DVMJobFeedback\"] = 7e3] = \"DVMJobFeedback\";\n  NDKKind2[NDKKind2[\"Subscribe\"] = 7001] = \"Subscribe\";\n  NDKKind2[NDKKind2[\"Unsubscribe\"] = 7002] = \"Unsubscribe\";\n  NDKKind2[NDKKind2[\"SubscriptionReceipt\"] = 7003] = \"SubscriptionReceipt\";\n  NDKKind2[NDKKind2[\"CashuReserve\"] = 7373] = \"CashuReserve\";\n  NDKKind2[NDKKind2[\"CashuQuote\"] = 7374] = \"CashuQuote\";\n  NDKKind2[NDKKind2[\"CashuToken\"] = 7375] = \"CashuToken\";\n  NDKKind2[NDKKind2[\"CashuWalletTx\"] = 7376] = \"CashuWalletTx\";\n  NDKKind2[NDKKind2[\"GroupAdminAddUser\"] = 9e3] = \"GroupAdminAddUser\";\n  NDKKind2[NDKKind2[\"GroupAdminRemoveUser\"] = 9001] = \"GroupAdminRemoveUser\";\n  NDKKind2[NDKKind2[\"GroupAdminEditMetadata\"] = 9002] = \"GroupAdminEditMetadata\";\n  NDKKind2[NDKKind2[\"GroupAdminEditStatus\"] = 9006] = \"GroupAdminEditStatus\";\n  NDKKind2[NDKKind2[\"GroupAdminCreateGroup\"] = 9007] = \"GroupAdminCreateGroup\";\n  NDKKind2[NDKKind2[\"GroupAdminRequestJoin\"] = 9021] = \"GroupAdminRequestJoin\";\n  NDKKind2[NDKKind2[\"MuteList\"] = 1e4] = \"MuteList\";\n  NDKKind2[NDKKind2[\"PinList\"] = 10001] = \"PinList\";\n  NDKKind2[NDKKind2[\"RelayList\"] = 10002] = \"RelayList\";\n  NDKKind2[NDKKind2[\"BookmarkList\"] = 10003] = \"BookmarkList\";\n  NDKKind2[NDKKind2[\"CommunityList\"] = 10004] = \"CommunityList\";\n  NDKKind2[NDKKind2[\"PublicChatList\"] = 10005] = \"PublicChatList\";\n  NDKKind2[NDKKind2[\"BlockRelayList\"] = 10006] = \"BlockRelayList\";\n  NDKKind2[NDKKind2[\"SearchRelayList\"] = 10007] = \"SearchRelayList\";\n  NDKKind2[NDKKind2[\"SimpleGroupList\"] = 10009] = \"SimpleGroupList\";\n  NDKKind2[NDKKind2[\"InterestList\"] = 10015] = \"InterestList\";\n  NDKKind2[NDKKind2[\"CashuMintList\"] = 10019] = \"CashuMintList\";\n  NDKKind2[NDKKind2[\"EmojiList\"] = 10030] = \"EmojiList\";\n  NDKKind2[NDKKind2[\"DirectMessageReceiveRelayList\"] = 10050] = \"DirectMessageReceiveRelayList\";\n  NDKKind2[NDKKind2[\"BlossomList\"] = 10063] = \"BlossomList\";\n  NDKKind2[NDKKind2[\"NostrWaletConnectInfo\"] = 13194] = \"NostrWaletConnectInfo\";\n  NDKKind2[NDKKind2[\"TierList\"] = 17e3] = \"TierList\";\n  NDKKind2[NDKKind2[\"CashuWallet\"] = 17375] = \"CashuWallet\";\n  NDKKind2[NDKKind2[\"FollowSet\"] = 3e4] = \"FollowSet\";\n  NDKKind2[NDKKind2[\"CategorizedPeopleList\"] = 3e4 /* FollowSet */] = \"CategorizedPeopleList\";\n  NDKKind2[NDKKind2[\"CategorizedBookmarkList\"] = 30001] = \"CategorizedBookmarkList\";\n  NDKKind2[NDKKind2[\"RelaySet\"] = 30002] = \"RelaySet\";\n  NDKKind2[NDKKind2[\"CategorizedRelayList\"] = 30002 /* RelaySet */] = \"CategorizedRelayList\";\n  NDKKind2[NDKKind2[\"BookmarkSet\"] = 30003] = \"BookmarkSet\";\n  NDKKind2[NDKKind2[\"CurationSet\"] = 30004] = \"CurationSet\";\n  NDKKind2[NDKKind2[\"ArticleCurationSet\"] = 30004] = \"ArticleCurationSet\";\n  NDKKind2[NDKKind2[\"VideoCurationSet\"] = 30005] = \"VideoCurationSet\";\n  NDKKind2[NDKKind2[\"ImageCurationSet\"] = 30006] = \"ImageCurationSet\";\n  NDKKind2[NDKKind2[\"InterestSet\"] = 30015] = \"InterestSet\";\n  NDKKind2[NDKKind2[\"InterestsList\"] = 30015 /* InterestSet */] = \"InterestsList\";\n  NDKKind2[NDKKind2[\"EmojiSet\"] = 30030] = \"EmojiSet\";\n  NDKKind2[NDKKind2[\"ModularArticle\"] = 30040] = \"ModularArticle\";\n  NDKKind2[NDKKind2[\"ModularArticleItem\"] = 30041] = \"ModularArticleItem\";\n  NDKKind2[NDKKind2[\"Wiki\"] = 30818] = \"Wiki\";\n  NDKKind2[NDKKind2[\"Draft\"] = 31234] = \"Draft\";\n  NDKKind2[NDKKind2[\"SubscriptionTier\"] = 37001] = \"SubscriptionTier\";\n  NDKKind2[NDKKind2[\"EcashMintRecommendation\"] = 38e3] = \"EcashMintRecommendation\";\n  NDKKind2[NDKKind2[\"HighlightSet\"] = 39802] = \"HighlightSet\";\n  NDKKind2[NDKKind2[\"CategorizedHighlightList\"] = 39802 /* HighlightSet */] = \"CategorizedHighlightList\";\n  NDKKind2[NDKKind2[\"Nutzap\"] = 9321] = \"Nutzap\";\n  NDKKind2[NDKKind2[\"ZapRequest\"] = 9734] = \"ZapRequest\";\n  NDKKind2[NDKKind2[\"Zap\"] = 9735] = \"Zap\";\n  NDKKind2[NDKKind2[\"Highlight\"] = 9802] = \"Highlight\";\n  NDKKind2[NDKKind2[\"ClientAuth\"] = 22242] = \"ClientAuth\";\n  NDKKind2[NDKKind2[\"NostrWalletConnectReq\"] = 23194] = \"NostrWalletConnectReq\";\n  NDKKind2[NDKKind2[\"NostrWalletConnectRes\"] = 23195] = \"NostrWalletConnectRes\";\n  NDKKind2[NDKKind2[\"NostrConnect\"] = 24133] = \"NostrConnect\";\n  NDKKind2[NDKKind2[\"BlossomUpload\"] = 24242] = \"BlossomUpload\";\n  NDKKind2[NDKKind2[\"HttpAuth\"] = 27235] = \"HttpAuth\";\n  NDKKind2[NDKKind2[\"ProfileBadge\"] = 30008] = \"ProfileBadge\";\n  NDKKind2[NDKKind2[\"BadgeDefinition\"] = 30009] = \"BadgeDefinition\";\n  NDKKind2[NDKKind2[\"MarketStall\"] = 30017] = \"MarketStall\";\n  NDKKind2[NDKKind2[\"MarketProduct\"] = 30018] = \"MarketProduct\";\n  NDKKind2[NDKKind2[\"Article\"] = 30023] = \"Article\";\n  NDKKind2[NDKKind2[\"AppSpecificData\"] = 30078] = \"AppSpecificData\";\n  NDKKind2[NDKKind2[\"Classified\"] = 30402] = \"Classified\";\n  NDKKind2[NDKKind2[\"HorizontalVideo\"] = 34235] = \"HorizontalVideo\";\n  NDKKind2[NDKKind2[\"VerticalVideo\"] = 34236] = \"VerticalVideo\";\n  NDKKind2[NDKKind2[\"LegacyCashuWallet\"] = 37375] = \"LegacyCashuWallet\";\n  NDKKind2[NDKKind2[\"GroupMetadata\"] = 39e3] = \"GroupMetadata\";\n  NDKKind2[NDKKind2[\"GroupAdmins\"] = 39001] = \"GroupAdmins\";\n  NDKKind2[NDKKind2[\"GroupMembers\"] = 39002] = \"GroupMembers\";\n  NDKKind2[NDKKind2[\"AppRecommendation\"] = 31989] = \"AppRecommendation\";\n  NDKKind2[NDKKind2[\"AppHandler\"] = 31990] = \"AppHandler\";\n  return NDKKind2;\n})(NDKKind || {});\nvar NDKListKinds = [\n  1e4 /* MuteList */,\n  10001 /* PinList */,\n  10002 /* RelayList */,\n  10003 /* BookmarkList */,\n  10004 /* CommunityList */,\n  10005 /* PublicChatList */,\n  10006 /* BlockRelayList */,\n  10007 /* SearchRelayList */,\n  10015 /* InterestList */,\n  10030 /* EmojiList */,\n  10050 /* DirectMessageReceiveRelayList */,\n  3e4 /* FollowSet */,\n  30003 /* BookmarkSet */,\n  30001 /* CategorizedBookmarkList */,\n  // Backwards compatibility\n  30002 /* RelaySet */,\n  30004 /* ArticleCurationSet */,\n  30005 /* VideoCurationSet */,\n  30015 /* InterestSet */,\n  30030 /* EmojiSet */,\n  39802 /* HighlightSet */\n];\n\n// src/events/index.ts\n\n\n// src/relay/sets/calculate.ts\n\n\n// src/outbox/write.ts\nfunction getRelaysForSync(ndk, author, type = \"write\") {\n  if (!ndk.outboxTracker) return void 0;\n  const item = ndk.outboxTracker.data.get(author);\n  if (!item) return void 0;\n  if (type === \"write\") {\n    return item.writeRelays;\n  }\n  return item.readRelays;\n}\nasync function getWriteRelaysFor(ndk, author, type = \"write\") {\n  if (!ndk.outboxTracker) return void 0;\n  if (!ndk.outboxTracker.data.has(author)) {\n    await ndk.outboxTracker.trackUsers([author]);\n  }\n  return getRelaysForSync(ndk, author, type);\n}\n\n// src/outbox/relay-ranking.ts\nfunction getTopRelaysForAuthors(ndk, authors) {\n  const relaysWithCount = /* @__PURE__ */ new Map();\n  authors.forEach((author) => {\n    const writeRelays = getRelaysForSync(ndk, author);\n    if (writeRelays) {\n      writeRelays.forEach((relay) => {\n        const count = relaysWithCount.get(relay) || 0;\n        relaysWithCount.set(relay, count + 1);\n      });\n    }\n  });\n  const sortedRelays = Array.from(relaysWithCount.entries()).sort((a, b) => b[1] - a[1]);\n  return sortedRelays.map((entry) => entry[0]);\n}\n\n// src/outbox/index.ts\nfunction getAllRelaysForAllPubkeys(ndk, pubkeys, type = \"read\") {\n  const pubkeysToRelays = /* @__PURE__ */ new Map();\n  const authorsMissingRelays = /* @__PURE__ */ new Set();\n  pubkeys.forEach((pubkey) => {\n    const relays = getRelaysForSync(ndk, pubkey, type);\n    if (relays && relays.size > 0) {\n      relays.forEach((relay) => {\n        const pubkeysInRelay = pubkeysToRelays.get(relay) || /* @__PURE__ */ new Set();\n        pubkeysInRelay.add(pubkey);\n      });\n      pubkeysToRelays.set(pubkey, relays);\n    } else {\n      authorsMissingRelays.add(pubkey);\n    }\n  });\n  return { pubkeysToRelays, authorsMissingRelays };\n}\nfunction chooseRelayCombinationForPubkeys(ndk, pubkeys, type, { count, preferredRelays } = {}) {\n  count ??= 2;\n  preferredRelays ??= /* @__PURE__ */ new Set();\n  const pool = ndk.pool;\n  const connectedRelays = pool.connectedRelays();\n  connectedRelays.forEach((relay) => {\n    preferredRelays?.add(relay.url);\n  });\n  const relayToAuthorsMap = /* @__PURE__ */ new Map();\n  const { pubkeysToRelays, authorsMissingRelays } = getAllRelaysForAllPubkeys(ndk, pubkeys, type);\n  const sortedRelays = getTopRelaysForAuthors(ndk, pubkeys);\n  const addAuthorToRelay = (author, relay) => {\n    const authorsInRelay = relayToAuthorsMap.get(relay) || [];\n    authorsInRelay.push(author);\n    relayToAuthorsMap.set(relay, authorsInRelay);\n  };\n  for (const [author, authorRelays] of pubkeysToRelays.entries()) {\n    let missingRelayCount = count;\n    for (const relay of connectedRelays) {\n      if (authorRelays.has(relay.url)) {\n        addAuthorToRelay(author, relay.url);\n        missingRelayCount--;\n      }\n    }\n    for (const authorRelay of authorRelays) {\n      if (relayToAuthorsMap.has(authorRelay)) {\n        addAuthorToRelay(author, authorRelay);\n        missingRelayCount--;\n      }\n    }\n    if (missingRelayCount <= 0) continue;\n    for (const relay of sortedRelays) {\n      if (missingRelayCount <= 0) break;\n      if (authorRelays.has(relay)) {\n        addAuthorToRelay(author, relay);\n        missingRelayCount--;\n      }\n    }\n  }\n  for (const author of authorsMissingRelays) {\n    pool.permanentAndConnectedRelays().forEach((relay) => {\n      const authorsInRelay = relayToAuthorsMap.get(relay.url) || [];\n      authorsInRelay.push(author);\n      relayToAuthorsMap.set(relay.url, authorsInRelay);\n    });\n  }\n  return relayToAuthorsMap;\n}\n\n// src/outbox/read/with-authors.ts\nfunction getRelaysForFilterWithAuthors(ndk, authors, relayGoalPerAuthor = 2) {\n  return chooseRelayCombinationForPubkeys(ndk, authors, \"write\", { count: relayGoalPerAuthor });\n}\n\n// src/utils/normalize-url.ts\nfunction tryNormalizeRelayUrl(url) {\n  try {\n    return normalizeRelayUrl(url);\n  } catch {\n    return void 0;\n  }\n}\nfunction normalizeRelayUrl(url) {\n  let r = normalizeUrl(url, {\n    stripAuthentication: false,\n    stripWWW: false,\n    stripHash: true\n  });\n  if (!r.endsWith(\"/\")) {\n    r += \"/\";\n  }\n  return r;\n}\nfunction normalize(urls) {\n  const normalized = /* @__PURE__ */ new Set();\n  for (const url of urls) {\n    try {\n      normalized.add(normalizeRelayUrl(url));\n    } catch {\n    }\n  }\n  return Array.from(normalized);\n}\nvar DATA_URL_DEFAULT_MIME_TYPE = \"text/plain\";\nvar DATA_URL_DEFAULT_CHARSET = \"us-ascii\";\nvar testParameter = (name, filters) => filters.some((filter) => filter instanceof RegExp ? filter.test(name) : filter === name);\nvar supportedProtocols = /* @__PURE__ */ new Set([\"https:\", \"http:\", \"file:\"]);\nvar hasCustomProtocol = (urlString) => {\n  try {\n    const { protocol } = new URL(urlString);\n    return protocol.endsWith(\":\") && !protocol.includes(\".\") && !supportedProtocols.has(protocol);\n  } catch {\n    return false;\n  }\n};\nvar normalizeDataURL = (urlString, { stripHash }) => {\n  const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n  if (!match) {\n    throw new Error(`Invalid URL: ${urlString}`);\n  }\n  const type = match.groups?.type ?? \"\";\n  const data = match.groups?.data ?? \"\";\n  let hash = match.groups?.hash ?? \"\";\n  const mediaType = type.split(\";\");\n  hash = stripHash ? \"\" : hash;\n  let isBase64 = false;\n  if (mediaType[mediaType.length - 1] === \"base64\") {\n    mediaType.pop();\n    isBase64 = true;\n  }\n  const mimeType = mediaType.shift()?.toLowerCase() ?? \"\";\n  const attributes = mediaType.map((attribute) => {\n    let [key, value = \"\"] = attribute.split(\"=\").map((string) => string.trim());\n    if (key === \"charset\") {\n      value = value.toLowerCase();\n      if (value === DATA_URL_DEFAULT_CHARSET) {\n        return \"\";\n      }\n    }\n    return `${key}${value ? `=${value}` : \"\"}`;\n  }).filter(Boolean);\n  const normalizedMediaType = [...attributes];\n  if (isBase64) {\n    normalizedMediaType.push(\"base64\");\n  }\n  if (normalizedMediaType.length > 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {\n    normalizedMediaType.unshift(mimeType);\n  }\n  return `data:${normalizedMediaType.join(\";\")},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : \"\"}`;\n};\nfunction normalizeUrl(urlString, options = {}) {\n  options = {\n    defaultProtocol: \"http\",\n    normalizeProtocol: true,\n    forceHttp: false,\n    forceHttps: false,\n    stripAuthentication: true,\n    stripHash: false,\n    stripTextFragment: true,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeSingleSlash: true,\n    removeDirectoryIndex: false,\n    removeExplicitPort: false,\n    sortQueryParameters: true,\n    ...options\n  };\n  if (typeof options.defaultProtocol === \"string\" && !options.defaultProtocol.endsWith(\":\")) {\n    options.defaultProtocol = `${options.defaultProtocol}:`;\n  }\n  urlString = urlString.trim();\n  if (/^data:/i.test(urlString)) {\n    return normalizeDataURL(urlString, options);\n  }\n  if (hasCustomProtocol(urlString)) {\n    return urlString;\n  }\n  const hasRelativeProtocol = urlString.startsWith(\"//\");\n  const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n  if (!isRelativeUrl) {\n    urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n  }\n  const urlObject = new URL(urlString);\n  urlObject.hostname = urlObject.hostname.toLowerCase();\n  if (options.forceHttp && options.forceHttps) {\n    throw new Error(\"The `forceHttp` and `forceHttps` options cannot be used together\");\n  }\n  if (options.forceHttp && urlObject.protocol === \"https:\") {\n    urlObject.protocol = \"http:\";\n  }\n  if (options.forceHttps && urlObject.protocol === \"http:\") {\n    urlObject.protocol = \"https:\";\n  }\n  if (options.stripAuthentication) {\n    urlObject.username = \"\";\n    urlObject.password = \"\";\n  }\n  if (options.stripHash) {\n    urlObject.hash = \"\";\n  } else if (options.stripTextFragment) {\n    urlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, \"\");\n  }\n  if (urlObject.pathname) {\n    const protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\n    let lastIndex = 0;\n    let result = \"\";\n    for (; ; ) {\n      const match = protocolRegex.exec(urlObject.pathname);\n      if (!match) {\n        break;\n      }\n      const protocol = match[0];\n      const protocolAtIndex = match.index;\n      const intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\n      result += intermediate.replace(/\\/{2,}/g, \"/\");\n      result += protocol;\n      lastIndex = protocolAtIndex + protocol.length;\n    }\n    const remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\n    result += remnant.replace(/\\/{2,}/g, \"/\");\n    urlObject.pathname = result;\n  }\n  if (urlObject.pathname) {\n    try {\n      urlObject.pathname = decodeURI(urlObject.pathname);\n    } catch {\n    }\n  }\n  if (options.removeDirectoryIndex === true) {\n    options.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n  if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n    let pathComponents = urlObject.pathname.split(\"/\");\n    const lastComponent = pathComponents[pathComponents.length - 1];\n    if (testParameter(lastComponent, options.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, -1);\n      urlObject.pathname = `${pathComponents.slice(1).join(\"/\")}/`;\n    }\n  }\n  if (urlObject.hostname) {\n    urlObject.hostname = urlObject.hostname.replace(/\\.$/, \"\");\n    if (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\n      urlObject.hostname = urlObject.hostname.replace(/^www\\./, \"\");\n    }\n  }\n  if (Array.isArray(options.removeQueryParameters)) {\n    for (const key of [...urlObject.searchParams.keys()]) {\n      if (testParameter(key, options.removeQueryParameters)) {\n        urlObject.searchParams.delete(key);\n      }\n    }\n  }\n  if (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\n    urlObject.search = \"\";\n  }\n  if (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\n    for (const key of [...urlObject.searchParams.keys()]) {\n      if (!testParameter(key, options.keepQueryParameters)) {\n        urlObject.searchParams.delete(key);\n      }\n    }\n  }\n  if (options.sortQueryParameters) {\n    urlObject.searchParams.sort();\n    try {\n      urlObject.search = decodeURIComponent(urlObject.search);\n    } catch {\n    }\n  }\n  if (options.removeTrailingSlash) {\n    urlObject.pathname = urlObject.pathname.replace(/\\/$/, \"\");\n  }\n  if (options.removeExplicitPort && urlObject.port) {\n    urlObject.port = \"\";\n  }\n  const oldUrlString = urlString;\n  urlString = urlObject.toString();\n  if (!options.removeSingleSlash && urlObject.pathname === \"/\" && !oldUrlString.endsWith(\"/\") && urlObject.hash === \"\") {\n    urlString = urlString.replace(/\\/$/, \"\");\n  }\n  if ((options.removeTrailingSlash || urlObject.pathname === \"/\") && urlObject.hash === \"\" && options.removeSingleSlash) {\n    urlString = urlString.replace(/\\/$/, \"\");\n  }\n  if (hasRelativeProtocol && !options.normalizeProtocol) {\n    urlString = urlString.replace(/^http:\\/\\//, \"//\");\n  }\n  if (options.stripProtocol) {\n    urlString = urlString.replace(/^(?:https?:)?\\/\\//, \"\");\n  }\n  return urlString;\n}\n\n// src/relay/index.ts\n\n\n\n// src/relay/connectivity.ts\nvar MAX_RECONNECT_ATTEMPTS = 5;\nvar FLAPPING_THRESHOLD_MS = 1e3;\nvar NDKRelayConnectivity = class {\n  ndkRelay;\n  ws;\n  _status;\n  timeoutMs;\n  connectedAt;\n  _connectionStats = {\n    attempts: 0,\n    success: 0,\n    durations: []\n  };\n  debug;\n  netDebug;\n  connectTimeout;\n  reconnectTimeout;\n  ndk;\n  openSubs = /* @__PURE__ */ new Map();\n  openCountRequests = /* @__PURE__ */ new Map();\n  openEventPublishes = /* @__PURE__ */ new Map();\n  serial = 0;\n  baseEoseTimeout = 4400;\n  constructor(ndkRelay, ndk) {\n    this.ndkRelay = ndkRelay;\n    this._status = 1 /* DISCONNECTED */;\n    const rand = Math.floor(Math.random() * 1e3);\n    this.debug = this.ndkRelay.debug.extend(`connectivity${rand}`);\n    this.ndk = ndk;\n  }\n  /**\n   * Connects to the NDK relay and handles the connection lifecycle.\n   *\n   * This method attempts to establish a WebSocket connection to the NDK relay specified in the `ndkRelay` object.\n   * If the connection is successful, it updates the connection statistics, sets the connection status to `CONNECTED`,\n   * and emits `connect` and `ready` events on the `ndkRelay` object.\n   *\n   * If the connection attempt fails, it handles the error by either initiating a reconnection attempt or emitting a\n   * `delayed-connect` event on the `ndkRelay` object, depending on the `reconnect` parameter.\n   *\n   * @param timeoutMs - The timeout in milliseconds for the connection attempt. If not provided, the default timeout from the `ndkRelay` object is used.\n   * @param reconnect - Indicates whether a reconnection should be attempted if the connection fails. Defaults to `true`.\n   * @returns A Promise that resolves when the connection is established, or rejects if the connection fails.\n   */\n  async connect(timeoutMs, reconnect = true) {\n    if (this._status !== 2 /* RECONNECTING */ && this._status !== 1 /* DISCONNECTED */ || this.reconnectTimeout) {\n      this.debug(\n        \"Relay requested to be connected but was in state %s or it had a reconnect timeout\",\n        this._status\n      );\n      return;\n    }\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = void 0;\n    }\n    if (this.connectTimeout) {\n      clearTimeout(this.connectTimeout);\n      this.connectTimeout = void 0;\n    }\n    timeoutMs ??= this.timeoutMs;\n    if (!this.timeoutMs && timeoutMs) this.timeoutMs = timeoutMs;\n    if (this.timeoutMs) this.connectTimeout = setTimeout(() => this.onConnectionError(reconnect), this.timeoutMs);\n    try {\n      this.updateConnectionStats.attempt();\n      if (this._status === 1 /* DISCONNECTED */) this._status = 4 /* CONNECTING */;\n      else this._status = 2 /* RECONNECTING */;\n      this.ws = new WebSocket(this.ndkRelay.url);\n      this.ws.onopen = this.onConnect.bind(this);\n      this.ws.onclose = this.onDisconnect.bind(this);\n      this.ws.onmessage = this.onMessage.bind(this);\n      this.ws.onerror = this.onError.bind(this);\n    } catch (e) {\n      this.debug(`Failed to connect to ${this.ndkRelay.url}`, e);\n      this._status = 1 /* DISCONNECTED */;\n      if (reconnect) this.handleReconnection();\n      else this.ndkRelay.emit(\"delayed-connect\", 2 * 24 * 60 * 60 * 1e3);\n      throw e;\n    }\n  }\n  /**\n   * Disconnects the WebSocket connection to the NDK relay.\n   * This method sets the connection status to `NDKRelayStatus.DISCONNECTING`,\n   * attempts to close the WebSocket connection, and sets the status to\n   * `NDKRelayStatus.DISCONNECTED` if the disconnect operation fails.\n   */\n  disconnect() {\n    this._status = 0 /* DISCONNECTING */;\n    try {\n      this.ws?.close();\n    } catch (e) {\n      this.debug(\"Failed to disconnect\", e);\n      this._status = 1 /* DISCONNECTED */;\n    }\n  }\n  /**\n   * Handles the error that occurred when attempting to connect to the NDK relay.\n   * If `reconnect` is `true`, this method will initiate a reconnection attempt.\n   * Otherwise, it will emit a `delayed-connect` event on the `ndkRelay` object,\n   * indicating that a reconnection should be attempted after a delay.\n   *\n   * @param reconnect - Indicates whether a reconnection should be attempted.\n   */\n  onConnectionError(reconnect) {\n    this.debug(`Error connecting to ${this.ndkRelay.url}`, this.timeoutMs);\n    if (reconnect && !this.reconnectTimeout) {\n      this.handleReconnection();\n    }\n  }\n  /**\n   * Handles the connection event when the WebSocket connection is established.\n   * This method is called when the WebSocket connection is successfully opened.\n   * It clears any existing connection and reconnection timeouts, updates the connection statistics,\n   * sets the connection status to `CONNECTED`, and emits `connect` and `ready` events on the `ndkRelay` object.\n   */\n  onConnect() {\n    this.netDebug?.(\"connected\", this.ndkRelay);\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = void 0;\n    }\n    if (this.connectTimeout) {\n      clearTimeout(this.connectTimeout);\n      this.connectTimeout = void 0;\n    }\n    this.updateConnectionStats.connected();\n    this._status = 5 /* CONNECTED */;\n    this.ndkRelay.emit(\"connect\");\n    this.ndkRelay.emit(\"ready\");\n  }\n  /**\n   * Handles the disconnection event when the WebSocket connection is closed.\n   * This method is called when the WebSocket connection is successfully closed.\n   * It updates the connection statistics, sets the connection status to `DISCONNECTED`,\n   * initiates a reconnection attempt if we didn't disconnect ourselves,\n   * and emits a `disconnect` event on the `ndkRelay` object.\n   */\n  onDisconnect() {\n    this.netDebug?.(\"disconnected\", this.ndkRelay);\n    this.updateConnectionStats.disconnected();\n    if (this._status === 5 /* CONNECTED */) {\n      this.handleReconnection();\n    }\n    this._status = 1 /* DISCONNECTED */;\n    this.ndkRelay.emit(\"disconnect\");\n  }\n  /**\n   * Handles incoming messages from the NDK relay WebSocket connection.\n   * This method is called whenever a message is received from the relay.\n   * It parses the message data and dispatches the appropriate handling logic based on the message type.\n   *\n   * @param event - The MessageEvent containing the received message data.\n   */\n  onMessage(event) {\n    this.netDebug?.(event.data, this.ndkRelay, \"recv\");\n    try {\n      const data = JSON.parse(event.data);\n      const [cmd, id, ..._rest] = data;\n      switch (cmd) {\n        case \"EVENT\": {\n          const so = this.openSubs.get(id);\n          const event2 = data[2];\n          if (!so) {\n            this.debug(`Received event for unknown subscription ${id}`);\n            return;\n          }\n          so.onevent(event2);\n          return;\n        }\n        case \"COUNT\": {\n          const payload = data[2];\n          const cr = this.openCountRequests.get(id);\n          if (cr) {\n            cr.resolve(payload.count);\n            this.openCountRequests.delete(id);\n          }\n          return;\n        }\n        case \"EOSE\": {\n          const so = this.openSubs.get(id);\n          if (!so) return;\n          so.oneose(id);\n          return;\n        }\n        case \"OK\": {\n          const ok = data[2];\n          const reason = data[3];\n          const ep = this.openEventPublishes.get(id);\n          const firstEp = ep?.pop();\n          if (!ep || !firstEp) {\n            this.debug(\"Received OK for unknown event publish\", id);\n            return;\n          }\n          if (ok) firstEp.resolve(reason);\n          else firstEp.reject(new Error(reason));\n          if (ep.length === 0) {\n            this.openEventPublishes.delete(id);\n          } else {\n            this.openEventPublishes.set(id, ep);\n          }\n          return;\n        }\n        case \"CLOSED\": {\n          const so = this.openSubs.get(id);\n          if (!so) return;\n          so.onclosed(data[2]);\n          return;\n        }\n        case \"NOTICE\":\n          this.onNotice(data[1]);\n          return;\n        case \"AUTH\": {\n          this.onAuthRequested(data[1]);\n          return;\n        }\n      }\n    } catch (error) {\n      this.debug(`Error parsing message from ${this.ndkRelay.url}: ${error.message}`, error?.stack);\n      return;\n    }\n  }\n  /**\n   * Handles an authentication request from the NDK relay.\n   *\n   * If an authentication policy is configured, it will be used to authenticate the connection.\n   * Otherwise, the `auth` event will be emitted to allow the application to handle the authentication.\n   *\n   * @param challenge - The authentication challenge provided by the NDK relay.\n   */\n  async onAuthRequested(challenge) {\n    const authPolicy = this.ndkRelay.authPolicy ?? this.ndk?.relayAuthDefaultPolicy;\n    this.debug(\"Relay requested authentication\", {\n      havePolicy: !!authPolicy\n    });\n    if (this._status === 7 /* AUTHENTICATING */) {\n      this.debug(\"Already authenticating, ignoring\");\n      return;\n    }\n    this._status = 6 /* AUTH_REQUESTED */;\n    if (authPolicy) {\n      if (this._status >= 5 /* CONNECTED */) {\n        this._status = 7 /* AUTHENTICATING */;\n        let res;\n        try {\n          res = await authPolicy(this.ndkRelay, challenge);\n        } catch (e) {\n          this.debug(\"Authentication policy threw an error\", e);\n          res = false;\n        }\n        this.debug(\"Authentication policy returned\", !!res);\n        if (res instanceof NDKEvent || res === true) {\n          if (res instanceof NDKEvent) {\n            await this.auth(res);\n          }\n          const authenticate = async () => {\n            if (this._status >= 5 /* CONNECTED */ && this._status < 8 /* AUTHENTICATED */) {\n              const event = new NDKEvent(this.ndk);\n              event.kind = 22242 /* ClientAuth */;\n              event.tags = [\n                [\"relay\", this.ndkRelay.url],\n                [\"challenge\", challenge]\n              ];\n              await event.sign();\n              this.auth(event).then(() => {\n                this._status = 8 /* AUTHENTICATED */;\n                this.ndkRelay.emit(\"authed\");\n                this.debug(\"Authentication successful\");\n              }).catch((e) => {\n                this._status = 6 /* AUTH_REQUESTED */;\n                this.ndkRelay.emit(\"auth:failed\", e);\n                this.debug(\"Authentication failed\", e);\n              });\n            } else {\n              this.debug(\"Authentication failed, it changed status, status is %d\", this._status);\n            }\n          };\n          if (res === true) {\n            if (!this.ndk?.signer) {\n              this.debug(\"No signer available for authentication localhost\");\n              this.ndk?.once(\"signer:ready\", authenticate);\n            } else {\n              authenticate().catch((e) => {\n                console.error(\"Error authenticating\", e);\n              });\n            }\n          }\n          this._status = 5 /* CONNECTED */;\n          this.ndkRelay.emit(\"authed\");\n        }\n      }\n    } else {\n      this.ndkRelay.emit(\"auth\", challenge);\n    }\n  }\n  /**\n   * Handles errors that occur on the WebSocket connection to the relay.\n   * @param error - The error or event that occurred.\n   */\n  onError(error) {\n    this.debug(`WebSocket error on ${this.ndkRelay.url}:`, error);\n  }\n  /**\n   * Gets the current status of the NDK relay connection.\n   * @returns {NDKRelayStatus} The current status of the NDK relay connection.\n   */\n  get status() {\n    return this._status;\n  }\n  /**\n   * Checks if the NDK relay connection is currently available.\n   * @returns {boolean} `true` if the relay connection is in the `CONNECTED` status, `false` otherwise.\n   */\n  isAvailable() {\n    return this._status === 5 /* CONNECTED */;\n  }\n  /**\n   * Checks if the NDK relay connection is flapping, which means the connection is rapidly\n   * disconnecting and reconnecting. This is determined by analyzing the durations of the\n   * last three connection attempts. If the standard deviation of the durations is less\n   * than 1000 milliseconds, the connection is considered to be flapping.\n   *\n   * @returns {boolean} `true` if the connection is flapping, `false` otherwise.\n   */\n  isFlapping() {\n    const durations = this._connectionStats.durations;\n    if (durations.length % 3 !== 0) return false;\n    const sum = durations.reduce((a, b) => a + b, 0);\n    const avg = sum / durations.length;\n    const variance = durations.map((x) => (x - avg) ** 2).reduce((a, b) => a + b, 0) / durations.length;\n    const stdDev = Math.sqrt(variance);\n    const isFlapping = stdDev < FLAPPING_THRESHOLD_MS;\n    return isFlapping;\n  }\n  /**\n   * Handles a notice received from the NDK relay.\n   * If the notice indicates the relay is complaining (e.g. \"too many\" or \"maximum\"),\n   * the method disconnects from the relay and attempts to reconnect after a 2-second delay.\n   * A debug message is logged with the relay URL and the notice text.\n   * The \"notice\" event is emitted on the ndkRelay instance with the notice text.\n   *\n   * @param notice - The notice text received from the NDK relay.\n   */\n  async onNotice(notice) {\n    this.ndkRelay.emit(\"notice\", notice);\n  }\n  /**\n   * Attempts to reconnect to the NDK relay after a connection is lost.\n   * This function is called recursively to handle multiple reconnection attempts.\n   * It checks if the relay is flapping and emits a \"flapping\" event if so.\n   * It then calculates a delay before the next reconnection attempt based on the number of previous attempts.\n   * The function sets a timeout to execute the next reconnection attempt after the calculated delay.\n   * If the maximum number of reconnection attempts is reached, a debug message is logged.\n   *\n   * @param attempt - The current attempt number (default is 0).\n   */\n  handleReconnection(attempt = 0) {\n    if (this.reconnectTimeout) return;\n    if (this.isFlapping()) {\n      this.ndkRelay.emit(\"flapping\", this._connectionStats);\n      this._status = 3 /* FLAPPING */;\n      return;\n    }\n    const reconnectDelay = this.connectedAt ? Math.max(0, 6e4 - (Date.now() - this.connectedAt)) : 5e3 * (this._connectionStats.attempts + 1);\n    this.reconnectTimeout = setTimeout(() => {\n      this.reconnectTimeout = void 0;\n      this._status = 2 /* RECONNECTING */;\n      this.connect().catch((_err) => {\n        if (attempt < MAX_RECONNECT_ATTEMPTS) {\n          setTimeout(\n            () => {\n              this.handleReconnection(attempt + 1);\n            },\n            1e3 * (attempt + 1) ^ 4\n          );\n        } else {\n          this.debug(\"Reconnect failed\");\n        }\n      });\n    }, reconnectDelay);\n    this.ndkRelay.emit(\"delayed-connect\", reconnectDelay);\n    this.debug(\"Reconnecting in\", reconnectDelay);\n    this._connectionStats.nextReconnectAt = Date.now() + reconnectDelay;\n  }\n  /**\n   * Sends a message to the NDK relay if the connection is in the CONNECTED state and the WebSocket is open.\n   * If the connection is not in the CONNECTED state or the WebSocket is not open, logs a debug message and throws an error.\n   *\n   * @param message - The message to send to the NDK relay.\n   * @throws {Error} If attempting to send on a closed relay connection.\n   */\n  async send(message) {\n    if (this._status >= 5 /* CONNECTED */ && this.ws?.readyState === WebSocket.OPEN) {\n      this.ws?.send(message);\n      this.netDebug?.(message, this.ndkRelay, \"send\");\n    } else {\n      this.debug(`Not connected to ${this.ndkRelay.url} (%d), not sending message ${message}`, this._status);\n    }\n  }\n  /**\n   * Authenticates the NDK event by sending it to the NDK relay and returning a promise that resolves with the result.\n   *\n   * @param event - The NDK event to authenticate.\n   * @returns A promise that resolves with the authentication result.\n   */\n  async auth(event) {\n    const ret = new Promise((resolve, reject) => {\n      const val = this.openEventPublishes.get(event.id) ?? [];\n      val.push({ resolve, reject });\n      this.openEventPublishes.set(event.id, val);\n    });\n    this.send(`[\"AUTH\",${JSON.stringify(event.rawEvent())}]`);\n    return ret;\n  }\n  /**\n   * Publishes an NDK event to the relay and returns a promise that resolves with the result.\n   *\n   * @param event - The NDK event to publish.\n   * @returns A promise that resolves with the result of the event publication.\n   * @throws {Error} If attempting to publish on a closed relay connection.\n   */\n  async publish(event) {\n    const ret = new Promise((resolve, reject) => {\n      const val = this.openEventPublishes.get(event.id) ?? [];\n      if (val.length > 0) {\n        console.warn(`Duplicate event publishing detected, you are publishing event ${event.id} twice`);\n      }\n      val.push({ resolve, reject });\n      this.openEventPublishes.set(event.id, val);\n    });\n    this.send(`[\"EVENT\",${JSON.stringify(event)}]`);\n    return ret;\n  }\n  /**\n   * Counts the number of events that match the provided filters.\n   *\n   * @param filters - The filters to apply to the count request.\n   * @param params - An optional object containing a custom id for the count request.\n   * @returns A promise that resolves with the number of matching events.\n   * @throws {Error} If attempting to send the count request on a closed relay connection.\n   */\n  async count(filters, params) {\n    this.serial++;\n    const id = params?.id || `count:${this.serial}`;\n    const ret = new Promise((resolve, reject) => {\n      this.openCountRequests.set(id, { resolve, reject });\n    });\n    this.send(`[\"COUNT\",\"${id}\",${JSON.stringify(filters).substring(1)}`);\n    return ret;\n  }\n  close(subId, reason) {\n    this.send(`[\"CLOSE\",\"${subId}\"]`);\n    const sub = this.openSubs.get(subId);\n    this.openSubs.delete(subId);\n    if (sub) sub.onclose(reason);\n  }\n  /**\n   * Subscribes to the NDK relay with the provided filters and parameters.\n   *\n   * @param filters - The filters to apply to the subscription.\n   * @param params - The subscription parameters, including an optional custom id.\n   * @returns A new NDKRelaySubscription instance.\n   */\n  req(relaySub) {\n    `${this.send(`[\"REQ\",\"${relaySub.subId}\",${JSON.stringify(relaySub.executeFilters).substring(1)}`)}]`;\n    this.openSubs.set(relaySub.subId, relaySub);\n  }\n  /**\n   * Utility functions to update the connection stats.\n   */\n  updateConnectionStats = {\n    connected: () => {\n      this._connectionStats.success++;\n      this._connectionStats.connectedAt = Date.now();\n    },\n    disconnected: () => {\n      if (this._connectionStats.connectedAt) {\n        this._connectionStats.durations.push(Date.now() - this._connectionStats.connectedAt);\n        if (this._connectionStats.durations.length > 100) {\n          this._connectionStats.durations.shift();\n        }\n      }\n      this._connectionStats.connectedAt = void 0;\n    },\n    attempt: () => {\n      this._connectionStats.attempts++;\n      this._connectionStats.connectedAt = Date.now();\n    }\n  };\n  /** Returns the connection stats. */\n  get connectionStats() {\n    return this._connectionStats;\n  }\n  /** Returns the relay URL */\n  get url() {\n    return this.ndkRelay.url;\n  }\n  get connected() {\n    return this._status >= 5 /* CONNECTED */ && this.ws?.readyState === WebSocket.OPEN;\n  }\n};\n\n// src/relay/publisher.ts\nvar NDKRelayPublisher = class {\n  ndkRelay;\n  debug;\n  constructor(ndkRelay) {\n    this.ndkRelay = ndkRelay;\n    this.debug = ndkRelay.debug.extend(\"publisher\");\n  }\n  /**\n   * Published an event to the relay; if the relay is not connected, it will\n   * wait for the relay to connect before publishing the event.\n   *\n   * If the relay does not connect within the timeout, the publish operation\n   * will fail.\n   * @param event  The event to publish\n   * @param timeoutMs  The timeout for the publish operation in milliseconds\n   * @returns A promise that resolves when the event has been published or rejects if the operation times out\n   */\n  async publish(event, timeoutMs = 2500) {\n    let timeout;\n    const publishConnected = () => {\n      return new Promise((resolve, reject) => {\n        try {\n          this.publishEvent(event).then((_result) => {\n            this.ndkRelay.emit(\"published\", event);\n            event.emit(\"relay:published\", this.ndkRelay);\n            resolve(true);\n          }).catch(reject);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    };\n    const timeoutPromise = new Promise((_, reject) => {\n      timeout = setTimeout(() => {\n        timeout = void 0;\n        reject(new Error(`Timeout: ${timeoutMs}ms`));\n      }, timeoutMs);\n    });\n    const onConnectHandler = () => {\n      publishConnected().then((result) => connectResolve(result)).catch((err) => connectReject(err));\n    };\n    let connectResolve;\n    let connectReject;\n    const onError = (err) => {\n      this.ndkRelay.debug(\"Publish failed\", err, event.id);\n      this.ndkRelay.emit(\"publish:failed\", event, err);\n      event.emit(\"relay:publish:failed\", this.ndkRelay, err);\n      throw err;\n    };\n    const onFinally = () => {\n      if (timeout) clearTimeout(timeout);\n      this.ndkRelay.removeListener(\"connect\", onConnectHandler);\n    };\n    if (this.ndkRelay.status >= 5 /* CONNECTED */) {\n      return Promise.race([publishConnected(), timeoutPromise]).catch(onError).finally(onFinally);\n    }\n    if (this.ndkRelay.status <= 1 /* DISCONNECTED */) {\n      console.warn(\"Relay is disconnected, trying to connect to publish an event\", this.ndkRelay.url);\n      this.ndkRelay.connect();\n    } else {\n      console.warn(\"Relay not connected, waiting for connection to publish an event\", this.ndkRelay.url);\n    }\n    return Promise.race([\n      new Promise((resolve, reject) => {\n        connectResolve = resolve;\n        connectReject = reject;\n        this.ndkRelay.once(\"connect\", onConnectHandler);\n      }),\n      timeoutPromise\n    ]).catch(onError).finally(onFinally);\n  }\n  async publishEvent(event) {\n    return this.ndkRelay.connectivity.publish(event.rawEvent());\n  }\n};\n\n// src/subscription/grouping.ts\nfunction filterFingerprint(filters, closeOnEose) {\n  const elements = [];\n  for (const filter of filters) {\n    const keys = Object.entries(filter || {}).map(([key, values]) => {\n      if ([\"since\", \"until\"].includes(key)) {\n        return `${key}:${values}`;\n      }\n      return key;\n    }).sort().join(\"-\");\n    elements.push(keys);\n  }\n  let id = closeOnEose ? \"+\" : \"\";\n  id += elements.join(\"|\");\n  return id;\n}\nfunction mergeFilters(filters) {\n  const result = [];\n  const lastResult = {};\n  filters.filter((f) => !!f.limit).forEach((filterWithLimit) => result.push(filterWithLimit));\n  filters = filters.filter((f) => !f.limit);\n  if (filters.length === 0) return result;\n  filters.forEach((filter) => {\n    Object.entries(filter).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        if (lastResult[key] === void 0) {\n          lastResult[key] = [...value];\n        } else {\n          lastResult[key] = Array.from(/* @__PURE__ */ new Set([...lastResult[key], ...value]));\n        }\n      } else {\n        lastResult[key] = value;\n      }\n    });\n  });\n  return [...result, lastResult];\n}\n\n// src/relay/subscription.ts\nvar NDKRelaySubscription = class {\n  fingerprint;\n  items = /* @__PURE__ */ new Map();\n  topSubManager;\n  debug;\n  /**\n   * Tracks the status of this REQ.\n   */\n  status = 0 /* INITIAL */;\n  onClose;\n  relay;\n  /**\n   * Whether this subscription has reached EOSE.\n   */\n  eosed = false;\n  /**\n   * Timeout at which this subscription will\n   * start executing.\n   */\n  executionTimer;\n  /**\n   * Track the time at which this subscription will fire.\n   */\n  fireTime;\n  /**\n   * The delay type that the current fireTime was calculated with.\n   */\n  delayType;\n  /**\n   * The filters that have been executed.\n   */\n  executeFilters;\n  id = Math.random().toString(36).substring(7);\n  /**\n   *\n   * @param fingerprint The fingerprint of this subscription.\n   */\n  constructor(relay, fingerprint, topSubManager) {\n    this.relay = relay;\n    this.topSubManager = topSubManager;\n    this.debug = relay.debug.extend(`sub[${this.id}]`);\n    this.fingerprint = fingerprint || Math.random().toString(36).substring(7);\n  }\n  _subId;\n  get subId() {\n    if (this._subId) return this._subId;\n    this._subId = this.fingerprint.slice(0, 15);\n    return this._subId;\n  }\n  subIdParts = /* @__PURE__ */ new Set();\n  addSubIdPart(part) {\n    this.subIdParts.add(part);\n  }\n  addItem(subscription, filters) {\n    this.debug(\"Adding item\", {\n      filters,\n      internalId: subscription.internalId,\n      status: this.status,\n      fingerprint: this.fingerprint,\n      id: this.subId,\n      items: this.items,\n      itemsSize: this.items.size\n    });\n    if (this.items.has(subscription.internalId)) return;\n    subscription.on(\"close\", this.removeItem.bind(this, subscription));\n    this.items.set(subscription.internalId, { subscription, filters });\n    if (this.status !== 3 /* RUNNING */) {\n      if (subscription.subId && (!this._subId || this._subId.length < 48)) {\n        if (this.status === 0 /* INITIAL */ || this.status === 1 /* PENDING */) {\n          this.addSubIdPart(subscription.subId);\n        }\n      }\n    }\n    switch (this.status) {\n      case 0 /* INITIAL */:\n        this.evaluateExecutionPlan(subscription);\n        break;\n      case 3 /* RUNNING */:\n        break;\n      case 1 /* PENDING */:\n        this.evaluateExecutionPlan(subscription);\n        break;\n      case 4 /* CLOSED */:\n        this.debug(\"Subscription is closed, cannot add new items %o (%o)\", subscription, filters);\n        throw new Error(\"Cannot add new items to a closed subscription\");\n    }\n  }\n  /**\n   * A subscription has been closed, remove it from the list of items.\n   * @param subscription\n   */\n  removeItem(subscription) {\n    this.items.delete(subscription.internalId);\n    if (this.items.size === 0) {\n      if (!this.eosed) return;\n      this.close();\n      this.cleanup();\n    }\n  }\n  close() {\n    if (this.status === 4 /* CLOSED */) return;\n    const prevStatus = this.status;\n    this.status = 4 /* CLOSED */;\n    if (prevStatus === 3 /* RUNNING */) {\n      try {\n        this.relay.close(this.subId);\n      } catch (e) {\n        this.debug(\"Error closing subscription\", e, this);\n      }\n    } else {\n      this.debug(\"Subscription wanted to close but it wasn't running, this is probably ok\", {\n        subId: this.subId,\n        prevStatus,\n        sub: this\n      });\n    }\n    this.cleanup();\n  }\n  cleanup() {\n    if (this.executionTimer) clearTimeout(this.executionTimer);\n    this.relay.off(\"ready\", this.executeOnRelayReady);\n    this.relay.off(\"authed\", this.reExecuteAfterAuth);\n    if (this.onClose) this.onClose(this);\n  }\n  evaluateExecutionPlan(subscription) {\n    if (!subscription.isGroupable()) {\n      this.status = 1 /* PENDING */;\n      this.execute();\n      return;\n    }\n    if (subscription.filters.find((filter) => !!filter.limit)) {\n      this.executeFilters = this.compileFilters();\n      if (this.executeFilters.length >= 10) {\n        this.status = 1 /* PENDING */;\n        this.execute();\n        return;\n      }\n    }\n    const delay = subscription.groupableDelay;\n    const delayType = subscription.groupableDelayType;\n    if (!delay) throw new Error(\"Cannot group a subscription without a delay\");\n    if (this.status === 0 /* INITIAL */) {\n      this.schedule(delay, delayType);\n    } else {\n      const existingDelayType = this.delayType;\n      const timeUntilFire = this.fireTime - Date.now();\n      if (existingDelayType === \"at-least\" && delayType === \"at-least\") {\n        if (timeUntilFire < delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else if (existingDelayType === \"at-least\" && delayType === \"at-most\") {\n        if (timeUntilFire > delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else if (existingDelayType === \"at-most\" && delayType === \"at-most\") {\n        if (timeUntilFire > delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else if (existingDelayType === \"at-most\" && delayType === \"at-least\") {\n        if (timeUntilFire > delay) {\n          if (this.executionTimer) clearTimeout(this.executionTimer);\n          this.schedule(delay, delayType);\n        }\n      } else {\n        throw new Error(`Unknown delay type combination ${existingDelayType} ${delayType}`);\n      }\n    }\n  }\n  schedule(delay, delayType) {\n    this.status = 1 /* PENDING */;\n    const currentTime = Date.now();\n    this.fireTime = currentTime + delay;\n    this.delayType = delayType;\n    const timer = setTimeout(this.execute.bind(this), delay);\n    if (delayType === \"at-least\") {\n      this.executionTimer = timer;\n    }\n  }\n  executeOnRelayReady = () => {\n    if (this.status !== 2 /* WAITING */) return;\n    if (this.items.size === 0) {\n      this.debug(\"No items to execute; this relay was probably too slow to respond and the caller gave up\", {\n        status: this.status,\n        fingerprint: this.fingerprint,\n        items: this.items,\n        itemsSize: this.items.size,\n        id: this.id,\n        subId: this.subId\n      });\n      this.cleanup();\n      return;\n    }\n    this.debug(\"Executing on relay ready\", {\n      status: this.status,\n      fingerprint: this.fingerprint,\n      items: this.items,\n      itemsSize: this.items.size\n    });\n    this.status = 1 /* PENDING */;\n    this.execute();\n  };\n  finalizeSubId() {\n    if (this.subIdParts.size > 0) {\n      this._subId = Array.from(this.subIdParts).join(\"-\");\n    } else {\n      this._subId = this.fingerprint.slice(0, 15);\n    }\n    this._subId += `-${Math.random().toString(36).substring(2, 7)}`;\n  }\n  // we do it this way so that we can remove the listener\n  reExecuteAfterAuth = (() => {\n    const oldSubId = this.subId;\n    this.debug(\"Re-executing after auth\", this.items.size);\n    if (this.eosed) {\n      this.relay.close(this.subId);\n    } else {\n      this.debug(\"We are abandoning an opened subscription, once it EOSE's, the handler will close it\", {\n        oldSubId\n      });\n    }\n    this._subId = void 0;\n    this.status = 1 /* PENDING */;\n    this.execute();\n    this.debug(\"Re-executed after auth %s \\u{1F449} %s\", oldSubId, this.subId);\n  }).bind(this);\n  execute() {\n    if (this.status !== 1 /* PENDING */) {\n      return;\n    }\n    if (!this.relay.connected) {\n      this.status = 2 /* WAITING */;\n      this.debug(\"Waiting for relay to be ready\", {\n        status: this.status,\n        id: this.subId,\n        fingerprint: this.fingerprint,\n        items: this.items,\n        itemsSize: this.items.size\n      });\n      this.relay.once(\"ready\", this.executeOnRelayReady);\n      return;\n    }\n    if (this.relay.status < 8 /* AUTHENTICATED */) {\n      this.relay.once(\"authed\", this.reExecuteAfterAuth);\n    }\n    this.status = 3 /* RUNNING */;\n    this.finalizeSubId();\n    this.executeFilters = this.compileFilters();\n    this.relay.req(this);\n  }\n  onstart() {\n  }\n  onevent(event) {\n    this.topSubManager.dispatchEvent(event, this.relay);\n  }\n  oneose(subId) {\n    this.eosed = true;\n    if (subId !== this.subId) {\n      this.debug(\"Received EOSE for an abandoned subscription\", subId, this.subId);\n      this.relay.close(subId);\n      return;\n    }\n    if (this.items.size === 0) {\n      this.close();\n    }\n    for (const { subscription } of this.items.values()) {\n      subscription.eoseReceived(this.relay);\n      if (subscription.closeOnEose) {\n        this.debug(\"Removing item because of EOSE\", {\n          filters: subscription.filters,\n          internalId: subscription.internalId,\n          status: this.status,\n          fingerprint: this.fingerprint,\n          items: this.items,\n          itemsSize: this.items.size\n        });\n        this.removeItem(subscription);\n      }\n    }\n  }\n  onclose(_reason) {\n    this.status = 4 /* CLOSED */;\n  }\n  onclosed(reason) {\n    if (!reason) return;\n    for (const { subscription } of this.items.values()) {\n      subscription.closedReceived(this.relay, reason);\n    }\n  }\n  /**\n   * Grabs the filters from all the subscriptions\n   * and merges them into a single filter.\n   */\n  compileFilters() {\n    const mergedFilters = [];\n    const filters = Array.from(this.items.values()).map((item) => item.filters);\n    if (!filters[0]) {\n      this.debug(\"\\u{1F440} No filters to merge\", this.items);\n      console.error(\"BUG: No filters to merge!\", this.items);\n      return [];\n    }\n    const filterCount = filters[0].length;\n    for (let i = 0; i < filterCount; i++) {\n      const allFiltersAtIndex = filters.map((filter) => filter[i]);\n      mergedFilters.push(...mergeFilters(allFiltersAtIndex));\n    }\n    return mergedFilters;\n  }\n};\n\n// src/relay/sub-manager.ts\nvar NDKRelaySubscriptionManager = class {\n  relay;\n  subscriptions;\n  generalSubManager;\n  /**\n   * @param relay - The relay instance.\n   * @param generalSubManager - The subscription manager instance.\n   */\n  constructor(relay, generalSubManager) {\n    this.relay = relay;\n    this.subscriptions = /* @__PURE__ */ new Map();\n    this.generalSubManager = generalSubManager;\n  }\n  /**\n   * Adds a subscription to the manager.\n   */\n  addSubscription(sub, filters) {\n    let relaySub;\n    if (!sub.isGroupable()) {\n      relaySub = this.createSubscription(sub, filters);\n    } else {\n      const filterFp = filterFingerprint(filters, sub.closeOnEose);\n      if (filterFp) {\n        const existingSubs = this.subscriptions.get(filterFp);\n        relaySub = (existingSubs || []).find((sub2) => sub2.status < 3 /* RUNNING */);\n      }\n      relaySub ??= this.createSubscription(sub, filters, filterFp);\n    }\n    relaySub.addItem(sub, filters);\n  }\n  createSubscription(_sub, _filters, fingerprint) {\n    const relaySub = new NDKRelaySubscription(this.relay, fingerprint || null, this.generalSubManager);\n    relaySub.onClose = this.onRelaySubscriptionClose.bind(this);\n    const currentVal = this.subscriptions.get(relaySub.fingerprint) ?? [];\n    this.subscriptions.set(relaySub.fingerprint, [...currentVal, relaySub]);\n    return relaySub;\n  }\n  onRelaySubscriptionClose(sub) {\n    let currentVal = this.subscriptions.get(sub.fingerprint) ?? [];\n    if (!currentVal) {\n      console.warn(\"Unexpectedly did not find a subscription with fingerprint\", sub.fingerprint);\n    } else if (currentVal.length === 1) {\n      this.subscriptions.delete(sub.fingerprint);\n    } else {\n      currentVal = currentVal.filter((s) => s.id !== sub.id);\n      this.subscriptions.set(sub.fingerprint, currentVal);\n    }\n  }\n};\n\n// src/relay/index.ts\nvar NDKRelayStatus = /* @__PURE__ */ ((NDKRelayStatus2) => {\n  NDKRelayStatus2[NDKRelayStatus2[\"DISCONNECTING\"] = 0] = \"DISCONNECTING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n  NDKRelayStatus2[NDKRelayStatus2[\"RECONNECTING\"] = 2] = \"RECONNECTING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"FLAPPING\"] = 3] = \"FLAPPING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"CONNECTING\"] = 4] = \"CONNECTING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"CONNECTED\"] = 5] = \"CONNECTED\";\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTH_REQUESTED\"] = 6] = \"AUTH_REQUESTED\";\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTHENTICATING\"] = 7] = \"AUTHENTICATING\";\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTHENTICATED\"] = 8] = \"AUTHENTICATED\";\n  return NDKRelayStatus2;\n})(NDKRelayStatus || {});\nvar NDKRelay = class _NDKRelay extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  url;\n  scores;\n  connectivity;\n  subs;\n  publisher;\n  authPolicy;\n  /**\n   * The lowest validation ratio this relay can reach.\n   */\n  lowestValidationRatio;\n  /**\n   * Current validation ratio this relay is targeting.\n   */\n  targetValidationRatio;\n  validationRatioFn;\n  /**\n   * This tracks events that have been seen by this relay\n   * with a valid signature.\n   */\n  validatedEventCount = 0;\n  /**\n   * This tracks events that have been seen by this relay\n   * but have not been validated.\n   */\n  nonValidatedEventCount = 0;\n  /**\n   * Whether this relay is trusted.\n   *\n   * Trusted relay's events do not get their signature verified.\n   */\n  trusted = false;\n  complaining = false;\n  debug;\n  static defaultValidationRatioUpdateFn = (relay, validatedCount, _nonValidatedCount) => {\n    if (relay.lowestValidationRatio === void 0 || relay.targetValidationRatio === void 0) return 1;\n    let newRatio = relay.validationRatio;\n    if (relay.validationRatio > relay.targetValidationRatio) {\n      const factor = validatedCount / 100;\n      newRatio = Math.max(relay.lowestValidationRatio, relay.validationRatio - factor);\n    }\n    if (newRatio < relay.validationRatio) {\n      return newRatio;\n    }\n    return relay.validationRatio;\n  };\n  constructor(url, authPolicy, ndk) {\n    super();\n    this.url = normalizeRelayUrl(url);\n    this.scores = /* @__PURE__ */ new Map();\n    this.debug = debug__WEBPACK_IMPORTED_MODULE_1__(`ndk:relay:${url}`);\n    this.connectivity = new NDKRelayConnectivity(this, ndk);\n    this.connectivity.netDebug = ndk?.netDebug;\n    this.req = this.connectivity.req.bind(this.connectivity);\n    this.close = this.connectivity.close.bind(this.connectivity);\n    this.subs = new NDKRelaySubscriptionManager(this, ndk.subManager);\n    this.publisher = new NDKRelayPublisher(this);\n    this.authPolicy = authPolicy;\n    this.targetValidationRatio = ndk?.initialValidationRatio;\n    this.lowestValidationRatio = ndk?.lowestValidationRatio;\n    this.validationRatioFn = (ndk?.validationRatioFn ?? _NDKRelay.defaultValidationRatioUpdateFn).bind(this);\n    this.updateValidationRatio();\n    if (!ndk) {\n      console.trace(\"relay created without ndk\");\n    }\n  }\n  updateValidationRatio() {\n    setTimeout(() => {\n      this.updateValidationRatio();\n    }, 3e4);\n  }\n  get status() {\n    return this.connectivity.status;\n  }\n  get connectionStats() {\n    return this.connectivity.connectionStats;\n  }\n  /**\n   * Connects to the relay.\n   */\n  async connect(timeoutMs, reconnect = true) {\n    return this.connectivity.connect(timeoutMs, reconnect);\n  }\n  /**\n   * Disconnects from the relay.\n   */\n  disconnect() {\n    if (this.status === 1 /* DISCONNECTED */) {\n      return;\n    }\n    this.connectivity.disconnect();\n  }\n  /**\n   * Queues or executes the subscription of a specific set of filters\n   * within this relay.\n   *\n   * @param subscription NDKSubscription this filters belong to.\n   * @param filters Filters to execute\n   */\n  subscribe(subscription, filters) {\n    this.subs.addSubscription(subscription, filters);\n  }\n  /**\n   * Publishes an event to the relay with an optional timeout.\n   *\n   * If the relay is not connected, the event will be published when the relay connects,\n   * unless the timeout is reached before the relay connects.\n   *\n   * @param event The event to publish\n   * @param timeoutMs The timeout for the publish operation in milliseconds\n   * @returns A promise that resolves when the event has been published or rejects if the operation times out\n   */\n  async publish(event, timeoutMs = 2500) {\n    return this.publisher.publish(event, timeoutMs);\n  }\n  referenceTags() {\n    return [[\"r\", this.url]];\n  }\n  addValidatedEvent() {\n    this.validatedEventCount++;\n  }\n  addNonValidatedEvent() {\n    this.nonValidatedEventCount++;\n  }\n  /**\n   * The current validation ratio this relay has achieved.\n   */\n  get validationRatio() {\n    if (this.nonValidatedEventCount === 0) {\n      return 1;\n    }\n    return this.validatedEventCount / (this.validatedEventCount + this.nonValidatedEventCount);\n  }\n  shouldValidateEvent() {\n    if (this.trusted) {\n      return false;\n    }\n    if (this.targetValidationRatio === void 0) {\n      return true;\n    }\n    return this.validationRatio < this.targetValidationRatio;\n  }\n  get connected() {\n    return this.connectivity.connected;\n  }\n  req;\n  close;\n};\n\n// src/relay/sets/index.ts\nvar NDKPublishError = class extends Error {\n  errors;\n  publishedToRelays;\n  /**\n   * Intended relay set where the publishing was intended to happen.\n   */\n  intendedRelaySet;\n  constructor(message, errors, publishedToRelays, intendedRelaySet) {\n    super(message);\n    this.errors = errors;\n    this.publishedToRelays = publishedToRelays;\n    this.intendedRelaySet = intendedRelaySet;\n  }\n  get relayErrors() {\n    const errors = [];\n    for (const [relay, err] of this.errors) {\n      errors.push(`${relay.url}: ${err}`);\n    }\n    return errors.join(\"\\n\");\n  }\n};\nvar NDKRelaySet = class _NDKRelaySet {\n  relays;\n  debug;\n  ndk;\n  pool;\n  constructor(relays, ndk, pool) {\n    this.relays = relays;\n    this.ndk = ndk;\n    this.pool = pool ?? ndk.pool;\n    this.debug = ndk.debug.extend(\"relayset\");\n  }\n  /**\n   * Adds a relay to this set.\n   */\n  addRelay(relay) {\n    this.relays.add(relay);\n  }\n  get relayUrls() {\n    return Array.from(this.relays).map((r) => r.url);\n  }\n  /**\n   * Creates a relay set from a list of relay URLs.\n   *\n   * If no connection to the relay is found in the pool it will temporarily\n   * connect to it.\n   *\n   * @param relayUrls - list of relay URLs to include in this set\n   * @param ndk\n   * @param connect - whether to connect to the relay immediately if it was already in the pool but not connected\n   * @returns NDKRelaySet\n   */\n  static fromRelayUrls(relayUrls, ndk, connect = true, pool) {\n    pool = pool ?? ndk.pool;\n    if (!pool) throw new Error(\"No pool provided\");\n    const relays = /* @__PURE__ */ new Set();\n    for (const url of relayUrls) {\n      const relay = pool.relays.get(normalizeRelayUrl(url));\n      if (relay) {\n        if (relay.status < 5 /* CONNECTED */ && connect) {\n          relay.connect();\n        }\n        relays.add(relay);\n      } else {\n        const temporaryRelay = new NDKRelay(normalizeRelayUrl(url), ndk?.relayAuthDefaultPolicy, ndk);\n        pool.useTemporaryRelay(temporaryRelay, void 0, `requested from fromRelayUrls ${relayUrls}`);\n        relays.add(temporaryRelay);\n      }\n    }\n    return new _NDKRelaySet(new Set(relays), ndk, pool);\n  }\n  /**\n   * Publish an event to all relays in this relay set.\n   *\n   * This method implements a robust mechanism for publishing events to multiple relays with\n   * built-in handling for race conditions, timeouts, and partial failures. The implementation\n   * uses a dual-tracking mechanism to ensure accurate reporting of which relays successfully\n   * received an event.\n   *\n   * Key aspects of this implementation:\n   *\n   * 1. DUAL-TRACKING MECHANISM:\n   *    - Promise-based tracking: Records successes/failures from the promises returned by relay.publish()\n   *    - Event-based tracking: Listens for 'relay:published' events that indicate successful publishing\n   *    This approach ensures we don't miss successful publishes even if there are subsequent errors in\n   *    the promise chain.\n   *\n   * 2. RACE CONDITION HANDLING:\n   *    - If a relay emits a success event but later fails in the promise chain, we still count it as a success\n   *    - If a relay times out after successfully publishing, we still count it as a success\n   *    - All relay operations happen in parallel, with proper tracking regardless of completion order\n   *\n   * 3. TIMEOUT MANAGEMENT:\n   *    - Individual timeouts for each relay operation\n   *    - Proper cleanup of timeouts to prevent memory leaks\n   *    - Clear timeout error reporting\n   *\n   * 4. ERROR HANDLING:\n   *    - Detailed tracking of specific errors for each failed relay\n   *    - Special handling for ephemeral events (which don't expect acknowledgement)\n   *    - RequiredRelayCount parameter to control the minimum success threshold\n   *\n   * @param event Event to publish\n   * @param timeoutMs Timeout in milliseconds for each relay publish operation\n   * @param requiredRelayCount The minimum number of relays we expect the event to be published to\n   * @returns A set of relays the event was published to\n   * @throws {NDKPublishError} If the event could not be published to at least `requiredRelayCount` relays\n   * @example\n   * ```typescript\n   * const relaySet = new NDKRelaySet(new Set([relay1, relay2]), ndk);\n   * const publishedToRelays = await relaySet.publish(event);\n   * // publishedToRelays can contain relay1, relay2, both, or none\n   * // depending on which relays the event was successfully published to\n   * if (publishedToRelays.size > 0) {\n   *   console.log(\"Event published to at least one relay\");\n   * }\n   * ```\n   */\n  async publish(event, timeoutMs, requiredRelayCount = 1) {\n    const publishedToRelays = /* @__PURE__ */ new Set();\n    const errors = /* @__PURE__ */ new Map();\n    const isEphemeral2 = event.isEphemeral();\n    event.publishStatus = \"pending\";\n    const relayPublishedHandler = (relay) => {\n      publishedToRelays.add(relay);\n    };\n    event.on(\"relay:published\", relayPublishedHandler);\n    try {\n      const promises = Array.from(this.relays).map((relay) => {\n        return new Promise((resolve) => {\n          const timeoutId = timeoutMs ? setTimeout(() => {\n            if (!publishedToRelays.has(relay)) {\n              errors.set(relay, new Error(`Publish timeout after ${timeoutMs}ms`));\n              resolve(false);\n            }\n          }, timeoutMs) : null;\n          relay.publish(event, timeoutMs).then((success) => {\n            if (timeoutId) clearTimeout(timeoutId);\n            if (success) {\n              publishedToRelays.add(relay);\n              resolve(true);\n            } else {\n              resolve(false);\n            }\n          }).catch((err) => {\n            if (timeoutId) clearTimeout(timeoutId);\n            if (!isEphemeral2) {\n              errors.set(relay, err);\n            }\n            resolve(false);\n          });\n        });\n      });\n      await Promise.all(promises);\n      if (publishedToRelays.size < requiredRelayCount) {\n        if (!isEphemeral2) {\n          const error = new NDKPublishError(\n            \"Not enough relays received the event\",\n            errors,\n            publishedToRelays,\n            this\n          );\n          event.publishStatus = \"error\";\n          event.publishError = error;\n          this.ndk?.emit(\"event:publish-failed\", event, error, this.relayUrls);\n          throw error;\n        }\n      } else {\n        event.publishStatus = \"success\";\n        event.emit(\"published\", { relaySet: this, publishedToRelays });\n      }\n      return publishedToRelays;\n    } finally {\n      event.off(\"relay:published\", relayPublishedHandler);\n    }\n  }\n  get size() {\n    return this.relays.size;\n  }\n};\n\n// src/relay/sets/calculate.ts\nvar d = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:outbox:calculate\");\nasync function calculateRelaySetFromEvent(ndk, event) {\n  const relays = /* @__PURE__ */ new Set();\n  const authorWriteRelays = await getWriteRelaysFor(ndk, event.pubkey);\n  if (authorWriteRelays) {\n    authorWriteRelays.forEach((relayUrl) => {\n      const relay = ndk.pool?.getRelay(relayUrl);\n      if (relay) relays.add(relay);\n    });\n  }\n  let relayHints = event.tags.filter((tag) => [\"a\", \"e\"].includes(tag[0])).map((tag) => tag[2]).filter((url) => url?.startsWith(\"wss://\")).filter((url) => {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }).map((url) => normalizeRelayUrl(url));\n  relayHints = Array.from(new Set(relayHints)).slice(0, 5);\n  relayHints.forEach((relayUrl) => {\n    const relay = ndk.pool?.getRelay(relayUrl, true, true);\n    if (relay) {\n      d(\"Adding relay hint %s\", relayUrl);\n      relays.add(relay);\n    }\n  });\n  const pTags = event.getMatchingTags(\"p\").map((tag) => tag[1]);\n  if (pTags.length < 5) {\n    const pTaggedRelays = Array.from(\n      chooseRelayCombinationForPubkeys(ndk, pTags, \"read\", {\n        preferredRelays: new Set(authorWriteRelays)\n      }).keys()\n    );\n    pTaggedRelays.forEach((relayUrl) => {\n      const relay = ndk.pool?.getRelay(relayUrl, false, true);\n      if (relay) {\n        d(\"Adding p-tagged relay %s\", relayUrl);\n        relays.add(relay);\n      }\n    });\n  } else {\n    d(\"Too many p-tags to consider %d\", pTags.length);\n  }\n  ndk.pool?.permanentAndConnectedRelays().forEach((relay) => relays.add(relay));\n  return new NDKRelaySet(relays, ndk);\n}\nfunction calculateRelaySetsFromFilter(ndk, filters, pool) {\n  const result = /* @__PURE__ */ new Map();\n  const authors = /* @__PURE__ */ new Set();\n  filters.forEach((filter) => {\n    if (filter.authors) {\n      filter.authors.forEach((author) => authors.add(author));\n    }\n  });\n  if (authors.size > 0) {\n    const authorToRelaysMap = getRelaysForFilterWithAuthors(ndk, Array.from(authors));\n    for (const relayUrl of authorToRelaysMap.keys()) {\n      result.set(relayUrl, []);\n    }\n    for (const filter of filters) {\n      if (filter.authors) {\n        for (const [relayUrl, authors2] of authorToRelaysMap.entries()) {\n          const authorFilterAndRelayPubkeyIntersection = filter.authors.filter(\n            (author) => authors2.includes(author)\n          );\n          result.set(relayUrl, [\n            ...result.get(relayUrl),\n            {\n              ...filter,\n              // Overwrite authors sent to this relay with the authors that were\n              // present in the filter and are also present in the relay\n              authors: authorFilterAndRelayPubkeyIntersection\n            }\n          ]);\n        }\n      } else {\n        for (const relayUrl of authorToRelaysMap.keys()) {\n          result.set(relayUrl, [...result.get(relayUrl), filter]);\n        }\n      }\n    }\n  } else {\n    if (ndk.explicitRelayUrls) {\n      ndk.explicitRelayUrls.forEach((relayUrl) => {\n        result.set(relayUrl, filters);\n      });\n    }\n  }\n  if (result.size === 0) {\n    pool.permanentAndConnectedRelays().slice(0, 5).forEach((relay) => {\n      result.set(relay.url, filters);\n    });\n  }\n  return result;\n}\nfunction calculateRelaySetsFromFilters(ndk, filters, pool) {\n  const a = calculateRelaySetsFromFilter(ndk, filters, pool);\n  return a;\n}\n\n// src/events/content-tagger.ts\n\nfunction mergeTags(tags1, tags2) {\n  const tagMap = /* @__PURE__ */ new Map();\n  const generateKey = (tag) => tag.join(\",\");\n  const isContained = (smaller, larger) => {\n    return smaller.every((value, index) => value === larger[index]);\n  };\n  const processTag = (tag) => {\n    for (const [key, existingTag] of tagMap) {\n      if (isContained(existingTag, tag) || isContained(tag, existingTag)) {\n        if (tag.length >= existingTag.length) {\n          tagMap.set(key, tag);\n        }\n        return;\n      }\n    }\n    tagMap.set(generateKey(tag), tag);\n  };\n  tags1.concat(tags2).forEach(processTag);\n  return Array.from(tagMap.values());\n}\nfunction uniqueTag(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  const sameLength = aLength === bLength;\n  if (sameLength) {\n    if (a.every((v, i) => v === b[i])) {\n      return [a];\n    }\n    return [a, b];\n  }\n  if (aLength > bLength && a.every((v, i) => v === b[i])) {\n    return [a];\n  }\n  if (bLength > aLength && b.every((v, i) => v === a[i])) {\n    return [b];\n  }\n  return [a, b];\n}\nvar hashtagRegex = /(?<=\\s|^)(#[^\\s!@#$%^&*()=+./,[{\\]};:'\"?><]+)/g;\nfunction generateHashtags(content) {\n  const hashtags = content.match(hashtagRegex);\n  const tagIds = /* @__PURE__ */ new Set();\n  const tag = /* @__PURE__ */ new Set();\n  if (hashtags) {\n    for (const hashtag of hashtags) {\n      if (tagIds.has(hashtag.slice(1))) continue;\n      tag.add(hashtag.slice(1));\n      tagIds.add(hashtag.slice(1));\n    }\n  }\n  return Array.from(tag);\n}\nasync function generateContentTags(content, tags = []) {\n  const tagRegex = /(@|nostr:)(npub|nprofile|note|nevent|naddr)[a-zA-Z0-9]+/g;\n  const promises = [];\n  const addTagIfNew = (t) => {\n    if (!tags.find((t2) => [\"q\", t[0]].includes(t2[0]) && t2[1] === t[1])) {\n      tags.push(t);\n    }\n  };\n  content = content.replace(tagRegex, (tag) => {\n    try {\n      const entity = tag.split(/(@|nostr:)/)[2];\n      const { type, data } = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(entity);\n      let t;\n      switch (type) {\n        case \"npub\":\n          t = [\"p\", data];\n          break;\n        case \"nprofile\":\n          t = [\"p\", data.pubkey];\n          break;\n        case \"note\":\n          promises.push(\n            new Promise(async (resolve) => {\n              addTagIfNew([\"q\", data, await maybeGetEventRelayUrl(entity)]);\n              resolve();\n            })\n          );\n          break;\n        case \"nevent\":\n          promises.push(\n            new Promise(async (resolve) => {\n              const { id, author } = data;\n              let { relays } = data;\n              if (!relays || relays.length === 0) {\n                relays = [await maybeGetEventRelayUrl(entity)];\n              }\n              addTagIfNew([\"q\", id, relays[0]]);\n              if (author) addTagIfNew([\"p\", author]);\n              resolve();\n            })\n          );\n          break;\n        case \"naddr\":\n          promises.push(\n            new Promise(async (resolve) => {\n              const id = [data.kind, data.pubkey, data.identifier].join(\":\");\n              let relays = data.relays ?? [];\n              if (relays.length === 0) {\n                relays = [await maybeGetEventRelayUrl(entity)];\n              }\n              addTagIfNew([\"q\", id, relays[0]]);\n              addTagIfNew([\"p\", data.pubkey]);\n              resolve();\n            })\n          );\n          break;\n        default:\n          return tag;\n      }\n      if (t) addTagIfNew(t);\n      return `nostr:${entity}`;\n    } catch (_error) {\n      return tag;\n    }\n  });\n  await Promise.all(promises);\n  const newTags = generateHashtags(content).map((hashtag) => [\"t\", hashtag]);\n  tags = mergeTags(tags, newTags);\n  return { content, tags };\n}\nasync function maybeGetEventRelayUrl(_nip19Id) {\n  return \"\";\n}\n\n// src/events/encryption.ts\nasync function encrypt(recipient, signer, scheme = \"nip44\") {\n  let encrypted;\n  if (!this.ndk) throw new Error(\"No NDK instance found!\");\n  let currentSigner = signer;\n  if (!currentSigner) {\n    this.ndk.assertSigner();\n    currentSigner = this.ndk.signer;\n  }\n  if (!currentSigner) throw new Error(\"no NDK signer\");\n  const currentRecipient = recipient || (() => {\n    const pTags = this.getMatchingTags(\"p\");\n    if (pTags.length !== 1) {\n      throw new Error(\"No recipient could be determined and no explicit recipient was provided\");\n    }\n    return this.ndk.getUser({ pubkey: pTags[0][1] });\n  })();\n  if (scheme === \"nip44\" && await isEncryptionEnabled(currentSigner, \"nip44\")) {\n    encrypted = await currentSigner.encrypt(currentRecipient, this.content, \"nip44\");\n  }\n  if ((!encrypted || scheme === \"nip04\") && await isEncryptionEnabled(currentSigner, \"nip04\")) {\n    encrypted = await currentSigner.encrypt(currentRecipient, this.content, \"nip04\");\n  }\n  if (!encrypted) throw new Error(\"Failed to encrypt event.\");\n  this.content = encrypted;\n}\nasync function decrypt(sender, signer, scheme) {\n  if (this.ndk?.cacheAdapter?.getDecryptedEvent) {\n    let cachedEvent = null;\n    if (typeof this.ndk.cacheAdapter.getDecryptedEvent === \"function\") {\n      cachedEvent = this.ndk.cacheAdapter.getDecryptedEvent(this.id);\n    }\n    if (cachedEvent) {\n      this.content = cachedEvent.content;\n      return;\n    }\n  }\n  let decrypted;\n  if (!this.ndk) throw new Error(\"No NDK instance found!\");\n  let currentSigner = signer;\n  if (!currentSigner) {\n    this.ndk.assertSigner();\n    currentSigner = this.ndk.signer;\n  }\n  if (!currentSigner) throw new Error(\"no NDK signer\");\n  const currentSender = sender || this.author;\n  if (!currentSender) throw new Error(\"No sender provided and no author available\");\n  const currentScheme = scheme || (this.content.match(/\\\\?iv=/) ? \"nip04\" : \"nip44\");\n  if ((currentScheme === \"nip04\" || this.kind === 4) && await isEncryptionEnabled(currentSigner, \"nip04\") && this.content.search(\"\\\\?iv=\")) {\n    decrypted = await currentSigner.decrypt(currentSender, this.content, \"nip04\");\n  }\n  if (!decrypted && currentScheme === \"nip44\" && await isEncryptionEnabled(currentSigner, \"nip44\")) {\n    decrypted = await currentSigner.decrypt(currentSender, this.content, \"nip44\");\n  }\n  if (!decrypted) throw new Error(\"Failed to decrypt event.\");\n  this.content = decrypted;\n  if (this.ndk?.cacheAdapter?.addDecryptedEvent) {\n    this.ndk.cacheAdapter.addDecryptedEvent(this);\n  }\n}\nasync function isEncryptionEnabled(signer, scheme) {\n  if (!signer.encryptionEnabled) return false;\n  if (!scheme) return true;\n  return Boolean(await signer.encryptionEnabled(scheme));\n}\n\n// src/thread/index.ts\nfunction eventsBySameAuthor(op, events) {\n  const eventsByAuthor = /* @__PURE__ */ new Map();\n  eventsByAuthor.set(op.id, op);\n  events.forEach((event) => {\n    if (event.pubkey === op.pubkey) {\n      eventsByAuthor.set(event.id, event);\n    }\n  });\n  return eventsByAuthor;\n}\nvar hasMarkers = (event, tagType) => {\n  return event.getMatchingTags(tagType).some((tag) => tag[3] && tag[3] !== \"\");\n};\nfunction eventIsReply(op, event, threadIds = /* @__PURE__ */ new Set(), tagType) {\n  tagType ??= op.tagType();\n  const tags = event.getMatchingTags(tagType);\n  threadIds.add(op.tagId());\n  if (threadIds.has(event.tagId())) return false;\n  const heedExplicitReplyMarker = () => {\n    let eventIsTagged = false;\n    for (const tag of tags) {\n      if (tag[3] === \"reply\") return threadIds.has(tag[1]);\n      const markerIsEmpty = tag[3] === \"\" || tag[3] === void 0;\n      const markerIsRoot = tag[3] === \"root\";\n      if (tag[1] === op.tagId() && (markerIsEmpty || markerIsRoot)) {\n        eventIsTagged = markerIsRoot ? \"root\" : true;\n      }\n    }\n    if (!eventIsTagged) return false;\n    if (eventIsTagged === \"root\") return true;\n  };\n  const explicitReplyMarker = heedExplicitReplyMarker();\n  if (explicitReplyMarker !== void 0) return explicitReplyMarker;\n  if (hasMarkers(event, tagType)) return false;\n  const expectedTags = op.getMatchingTags(\"e\").map((tag) => tag[1]);\n  expectedTags.push(op.id);\n  return event.getMatchingTags(\"e\").every((tag) => expectedTags.includes(tag[1]));\n}\nfunction eventThreads(op, events) {\n  const eventsByAuthor = eventsBySameAuthor(op, events);\n  const threadEvents = events.filter((event) => eventIsPartOfThread(op, event, eventsByAuthor));\n  return threadEvents.sort((a, b) => a.created_at - b.created_at);\n}\nfunction getEventReplyId(event) {\n  const replyTag = getReplyTag(event);\n  if (replyTag) return replyTag[1];\n  const rootTag = getRootTag(event);\n  if (rootTag) return rootTag[1];\n}\nfunction isEventOriginalPost(event) {\n  return getEventReplyId(event) === void 0;\n}\nfunction eventThreadIds(op, events) {\n  const threadIds = /* @__PURE__ */ new Map();\n  const threadEvents = eventThreads(op, events);\n  threadEvents.forEach((event) => threadIds.set(event.id, event));\n  return threadIds;\n}\nfunction eventReplies(op, events, threadEventIds) {\n  threadEventIds ??= new Set(eventThreadIds(op, events).keys());\n  return events.filter((event) => eventIsReply(op, event, threadEventIds));\n}\nfunction eventIsPartOfThread(op, event, eventsByAuthor) {\n  if (op.pubkey !== event.pubkey) return false;\n  const taggedEventIds = event.getMatchingTags(\"e\").map((tag) => tag[1]);\n  const allTaggedEventsAreByOriginalAuthor = taggedEventIds.every((id) => eventsByAuthor.has(id));\n  return allTaggedEventsAreByOriginalAuthor;\n}\nfunction eventHasETagMarkers(event) {\n  for (const tag of event.tags) {\n    if (tag[0] === \"e\" && (tag[3] ?? \"\").length > 0) return true;\n  }\n  return false;\n}\nfunction getRootEventId(event, searchTag) {\n  searchTag ??= event.tagType();\n  const rootEventTag = getRootTag(event, searchTag);\n  if (rootEventTag) return rootEventTag[1];\n  const replyTag = getReplyTag(event, searchTag);\n  return replyTag?.[1];\n}\nfunction getRootTag(event, searchTag) {\n  searchTag ??= event.tagType();\n  const rootEventTag = event.tags.find(isTagRootTag);\n  if (!rootEventTag) {\n    if (eventHasETagMarkers(event)) return;\n    const matchingTags = event.getMatchingTags(searchTag);\n    if (matchingTags.length < 3) return matchingTags[0];\n  }\n  return rootEventTag;\n}\nvar nip22RootTags = /* @__PURE__ */ new Set([\"A\", \"E\", \"I\"]);\nvar nip22ReplyTags = /* @__PURE__ */ new Set([\"a\", \"e\", \"i\"]);\nfunction getReplyTag(event, searchTag) {\n  if (event.kind === 1111 /* GenericReply */) {\n    let replyTag2;\n    for (const tag of event.tags) {\n      if (nip22RootTags.has(tag[0])) replyTag2 = tag;\n      else if (nip22ReplyTags.has(tag[0])) {\n        replyTag2 = tag;\n        break;\n      }\n    }\n    return replyTag2;\n  }\n  searchTag ??= event.tagType();\n  let hasMarkers2 = false;\n  let replyTag;\n  for (const tag of event.tags) {\n    if (tag[0] !== searchTag) continue;\n    if ((tag[3] ?? \"\").length > 0) hasMarkers2 = true;\n    if (hasMarkers2 && tag[3] === \"reply\") return tag;\n    if (hasMarkers2 && tag[3] === \"root\") replyTag = tag;\n    if (!hasMarkers2) replyTag = tag;\n  }\n  return replyTag;\n}\nfunction isTagRootTag(tag) {\n  return tag[0] === \"E\" || tag[3] === \"root\";\n}\n\n// src/events/fetch-tagged-event.ts\nasync function fetchTaggedEvent(tag, marker) {\n  if (!this.ndk) throw new Error(\"NDK instance not found\");\n  const t = this.getMatchingTags(tag, marker);\n  if (t.length === 0) return void 0;\n  const [_, id, hint] = t[0];\n  let relay = hint !== \"\" ? this.ndk.pool.getRelay(hint) : void 0;\n  const event = await this.ndk.fetchEvent(id, {}, relay);\n  return event;\n}\nasync function fetchRootEvent(subOpts) {\n  if (!this.ndk) throw new Error(\"NDK instance not found\");\n  const rootTag = getRootTag(this);\n  if (!rootTag) return void 0;\n  return this.ndk.fetchEventFromTag(rootTag, this, subOpts);\n}\nasync function fetchReplyEvent(subOpts) {\n  if (!this.ndk) throw new Error(\"NDK instance not found\");\n  const replyTag = getReplyTag(this);\n  if (!replyTag) return void 0;\n  return this.ndk.fetchEventFromTag(replyTag, this, subOpts);\n}\n\n// src/events/kind.ts\nfunction isReplaceable() {\n  if (this.kind === void 0) throw new Error(\"Kind not set\");\n  return [0, 3].includes(this.kind) || this.kind >= 1e4 && this.kind < 2e4 || this.kind >= 3e4 && this.kind < 4e4;\n}\nfunction isEphemeral() {\n  if (this.kind === void 0) throw new Error(\"Kind not set\");\n  return this.kind >= 2e4 && this.kind < 3e4;\n}\nfunction isParamReplaceable() {\n  if (this.kind === void 0) throw new Error(\"Kind not set\");\n  return this.kind >= 3e4 && this.kind < 4e4;\n}\n\n// src/events/nip19.ts\n\nvar DEFAULT_RELAY_COUNT = 2;\nfunction encode(maxRelayCount = DEFAULT_RELAY_COUNT) {\n  let relays = [];\n  if (this.onRelays.length > 0) {\n    relays = this.onRelays.map((relay) => relay.url);\n  } else if (this.relay) {\n    relays = [this.relay.url];\n  }\n  if (relays.length > maxRelayCount) {\n    relays = relays.slice(0, maxRelayCount);\n  }\n  if (this.isParamReplaceable()) {\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.naddrEncode({\n      kind: this.kind,\n      pubkey: this.pubkey,\n      identifier: this.replaceableDTag(),\n      relays\n    });\n  }\n  if (relays.length > 0) {\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.neventEncode({\n      id: this.tagId(),\n      relays,\n      author: this.pubkey\n    });\n  }\n  return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.noteEncode(this.tagId());\n}\n\n// src/events/repost.ts\nasync function repost(publish = true, signer) {\n  if (!signer && publish) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    signer = this.ndk.signer;\n  }\n  const e = new NDKEvent(this.ndk, {\n    kind: getKind(this)\n  });\n  if (!this.isProtected) e.content = JSON.stringify(this.rawEvent());\n  e.tag(this);\n  if (this.kind !== 1 /* Text */) {\n    e.tags.push([\"k\", `${this.kind}`]);\n  }\n  if (signer) await e.sign(signer);\n  if (publish) await e.publish();\n  return e;\n}\nfunction getKind(event) {\n  if (event.kind === 1) {\n    return 6 /* Repost */;\n  }\n  return 16 /* GenericRepost */;\n}\n\n// src/events/serializer.ts\nfunction serialize(includeSig = false, includeId = false) {\n  const payload = [0, this.pubkey, this.created_at, this.kind, this.tags, this.content];\n  if (includeSig) payload.push(this.sig);\n  if (includeId) payload.push(this.id);\n  return JSON.stringify(payload);\n}\nfunction deserialize(serializedEvent) {\n  const eventArray = JSON.parse(serializedEvent);\n  const ret = {\n    pubkey: eventArray[1],\n    created_at: eventArray[2],\n    kind: eventArray[3],\n    tags: eventArray[4],\n    content: eventArray[5]\n  };\n  if (eventArray.length >= 7) {\n    const first = eventArray[6];\n    const second = eventArray[7];\n    if (first && first.length === 128) {\n      ret.sig = first;\n      if (second && second.length === 64) {\n        ret.id = second;\n      }\n    } else if (first && first.length === 64) {\n      ret.id = first;\n      if (second && second.length === 128) {\n        ret.sig = second;\n      }\n    }\n  }\n  return ret;\n}\n\n// src/events/validation.ts\n\n\n\n\n\n// src/events/signature.ts\nvar worker;\nvar processingQueue = {};\nfunction signatureVerificationInit(w) {\n  worker = w;\n  worker.onmessage = (msg) => {\n    const [eventId, result] = msg.data;\n    const record = processingQueue[eventId];\n    if (!record) {\n      console.error(\"No record found for event\", eventId);\n      return;\n    }\n    delete processingQueue[eventId];\n    for (const resolve of record.resolves) {\n      resolve(result);\n    }\n  };\n}\nasync function verifySignatureAsync(event, _persist) {\n  const promise = new Promise((resolve) => {\n    const serialized = event.serialize();\n    let enqueue = false;\n    if (!processingQueue[event.id]) {\n      processingQueue[event.id] = { event, resolves: [] };\n      enqueue = true;\n    }\n    processingQueue[event.id].resolves.push(resolve);\n    if (!enqueue) return;\n    worker?.postMessage({\n      serialized,\n      id: event.id,\n      sig: event.sig,\n      pubkey: event.pubkey\n    });\n  });\n  return promise;\n}\n\n// src/events/validation.ts\nvar PUBKEY_REGEX = /^[a-f0-9]{64}$/;\nfunction validate() {\n  if (typeof this.kind !== \"number\") return false;\n  if (typeof this.content !== \"string\") return false;\n  if (typeof this.created_at !== \"number\") return false;\n  if (typeof this.pubkey !== \"string\") return false;\n  if (!this.pubkey.match(PUBKEY_REGEX)) return false;\n  if (!Array.isArray(this.tags)) return false;\n  for (let i = 0; i < this.tags.length; i++) {\n    const tag = this.tags[i];\n    if (!Array.isArray(tag)) return false;\n    for (let j = 0; j < tag.length; j++) {\n      if (typeof tag[j] === \"object\") return false;\n    }\n  }\n  return true;\n}\nvar verifiedSignatures = new typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__.LRUCache({\n  maxSize: 1e3,\n  entryExpirationTimeInMS: 6e4\n});\nfunction verifySignature(persist) {\n  if (typeof this.signatureVerified === \"boolean\") return this.signatureVerified;\n  const prevVerification = verifiedSignatures.get(this.id);\n  if (prevVerification !== null) {\n    this.signatureVerified = !!prevVerification;\n    return this.signatureVerified;\n  }\n  try {\n    if (this.ndk?.asyncSigVerification) {\n      verifySignatureAsync(this, persist).then((result) => {\n        if (persist) {\n          this.signatureVerified = result;\n          if (result) verifiedSignatures.set(this.id, this.sig);\n        }\n        if (!result) {\n          this.ndk?.emit(\"event:invalid-sig\", this);\n          verifiedSignatures.set(this.id, false);\n        }\n      });\n    } else {\n      const hash = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(new TextEncoder().encode(this.serialize()));\n      const res = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_5__.schnorr.verify(this.sig, hash, this.pubkey);\n      if (res) verifiedSignatures.set(this.id, this.sig);\n      else verifiedSignatures.set(this.id, false);\n      this.signatureVerified = res;\n      return res;\n    }\n  } catch (_err) {\n    this.signatureVerified = false;\n    return false;\n  }\n}\nfunction getEventHash() {\n  return getEventHashFromSerializedEvent(this.serialize());\n}\nfunction getEventHashFromSerializedEvent(serializedEvent) {\n  const eventHash = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(new TextEncoder().encode(serializedEvent));\n  return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(eventHash);\n}\n\n// src/events/index.ts\nvar skipClientTagOnKinds = /* @__PURE__ */ new Set([\n  0 /* Metadata */,\n  4 /* EncryptedDirectMessage */,\n  1059 /* GiftWrap */,\n  13 /* GiftWrapSeal */,\n  3 /* Contacts */,\n  9734 /* ZapRequest */,\n  5 /* EventDeletion */\n]);\nvar NDKEvent = class _NDKEvent extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  ndk;\n  created_at;\n  content = \"\";\n  tags = [];\n  kind;\n  id = \"\";\n  sig;\n  pubkey = \"\";\n  signatureVerified;\n  _author = void 0;\n  /**\n   * The relay that this event was first received from.\n   */\n  relay;\n  /**\n   * The relays that this event was received from and/or successfully published to.\n   */\n  get onRelays() {\n    let res = [];\n    if (!this.ndk) {\n      if (this.relay) res.push(this.relay);\n    } else {\n      res = this.ndk.subManager.seenEvents.get(this.id) || [];\n    }\n    return res;\n  }\n  /**\n   * The status of the publish operation.\n   */\n  publishStatus = \"success\";\n  publishError;\n  constructor(ndk, event) {\n    super();\n    this.ndk = ndk;\n    this.created_at = event?.created_at;\n    this.content = event?.content || \"\";\n    this.tags = event?.tags || [];\n    this.id = event?.id || \"\";\n    this.sig = event?.sig;\n    this.pubkey = event?.pubkey || \"\";\n    this.kind = event?.kind;\n    if (event instanceof _NDKEvent) {\n      if (this.relay) {\n        this.relay = event.relay;\n        this.ndk?.subManager.seenEvent(event.id, this.relay);\n      }\n      this.publishStatus = event.publishStatus;\n      this.publishError = event.publishError;\n    }\n  }\n  /**\n   * Deserialize an NDKEvent from a serialized payload.\n   * @param ndk\n   * @param event\n   * @returns\n   */\n  static deserialize(ndk, event) {\n    return new _NDKEvent(ndk, deserialize(event));\n  }\n  /**\n   * Returns the event as is.\n   */\n  rawEvent() {\n    return {\n      created_at: this.created_at,\n      content: this.content,\n      tags: this.tags,\n      kind: this.kind,\n      pubkey: this.pubkey,\n      id: this.id,\n      sig: this.sig\n    };\n  }\n  set author(user) {\n    this.pubkey = user.pubkey;\n    this._author = user;\n    this._author.ndk ??= this.ndk;\n  }\n  /**\n   * Returns an NDKUser for the author of the event.\n   */\n  get author() {\n    if (this._author) return this._author;\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    const user = this.ndk.getUser({ pubkey: this.pubkey });\n    this._author = user;\n    return user;\n  }\n  /**\n   * NIP-73 tagging of external entities\n   * @param entity to be tagged\n   * @param type of the entity\n   * @param markerUrl to be used as the marker URL\n   *\n   * @example\n   * ```typescript\n   * event.tagExternal(\"https://example.com/article/123#nostr\", \"url\");\n   * event.tags => [[\"i\", \"https://example.com/123\"], [\"k\", \"https://example.com\"]]\n   * ```\n   *\n   * @example tag a podcast:item:guid\n   * ```typescript\n   * event.tagExternal(\"e32b4890-b9ea-4aef-a0bf-54b787833dc5\", \"podcast:item:guid\");\n   * event.tags => [[\"i\", \"podcast:item:guid:e32b4890-b9ea-4aef-a0bf-54b787833dc5\"], [\"k\", \"podcast:item:guid\"]]\n   * ```\n   *\n   * @see https://github.com/nostr-protocol/nips/blob/master/73.md\n   */\n  tagExternal(entity, type, markerUrl) {\n    const iTag = [\"i\"];\n    const kTag = [\"k\"];\n    switch (type) {\n      case \"url\": {\n        const url = new URL(entity);\n        url.hash = \"\";\n        iTag.push(url.toString());\n        kTag.push(`${url.protocol}//${url.host}`);\n        break;\n      }\n      case \"hashtag\":\n        iTag.push(`#${entity.toLowerCase()}`);\n        kTag.push(\"#\");\n        break;\n      case \"geohash\":\n        iTag.push(`geo:${entity.toLowerCase()}`);\n        kTag.push(\"geo\");\n        break;\n      case \"isbn\":\n        iTag.push(`isbn:${entity.replace(/-/g, \"\")}`);\n        kTag.push(\"isbn\");\n        break;\n      case \"podcast:guid\":\n        iTag.push(`podcast:guid:${entity}`);\n        kTag.push(\"podcast:guid\");\n        break;\n      case \"podcast:item:guid\":\n        iTag.push(`podcast:item:guid:${entity}`);\n        kTag.push(\"podcast:item:guid\");\n        break;\n      case \"podcast:publisher:guid\":\n        iTag.push(`podcast:publisher:guid:${entity}`);\n        kTag.push(\"podcast:publisher:guid\");\n        break;\n      case \"isan\":\n        iTag.push(`isan:${entity.split(\"-\").slice(0, 4).join(\"-\")}`);\n        kTag.push(\"isan\");\n        break;\n      case \"doi\":\n        iTag.push(`doi:${entity.toLowerCase()}`);\n        kTag.push(\"doi\");\n        break;\n      default:\n        throw new Error(`Unsupported NIP-73 entity type: ${type}`);\n    }\n    if (markerUrl) {\n      iTag.push(markerUrl);\n    }\n    this.tags.push(iTag);\n    this.tags.push(kTag);\n  }\n  /**\n   * Tag a user with an optional marker.\n   * @param target What is to be tagged. Can be an NDKUser, NDKEvent, or an NDKTag.\n   * @param marker The marker to use in the tag.\n   * @param skipAuthorTag Whether to explicitly skip adding the author tag of the event.\n   * @param forceTag Force a specific tag to be used instead of the default \"e\" or \"a\" tag.\n   * @example\n   * ```typescript\n   * reply.tag(opEvent, \"reply\");\n   * // reply.tags => [[\"e\", <id>, <relay>, \"reply\"]]\n   * ```\n   */\n  tag(target, marker, skipAuthorTag, forceTag) {\n    let tags = [];\n    const isNDKUser = target.fetchProfile !== void 0;\n    if (isNDKUser) {\n      forceTag ??= \"p\";\n      const tag = [forceTag, target.pubkey];\n      if (marker) tag.push(...[\"\", marker]);\n      tags.push(tag);\n    } else if (target instanceof _NDKEvent) {\n      const event = target;\n      skipAuthorTag ??= event?.pubkey === this.pubkey;\n      tags = event.referenceTags(marker, skipAuthorTag, forceTag);\n      for (const pTag of event.getMatchingTags(\"p\")) {\n        if (pTag[1] === this.pubkey) continue;\n        if (this.tags.find((t) => t[0] === \"p\" && t[1] === pTag[1])) continue;\n        this.tags.push([\"p\", pTag[1]]);\n      }\n    } else if (Array.isArray(target)) {\n      tags = [target];\n    } else {\n      throw new Error(\"Invalid argument\", target);\n    }\n    this.tags = mergeTags(this.tags, tags);\n  }\n  /**\n   * Return a NostrEvent object, trying to fill in missing fields\n   * when possible, adding tags when necessary.\n   * @param pubkey {string} The pubkey of the user who the event belongs to.\n   * @returns {Promise<NostrEvent>} A promise that resolves to a NostrEvent.\n   */\n  async toNostrEvent(pubkey) {\n    if (!pubkey && this.pubkey === \"\") {\n      const user = await this.ndk?.signer?.user();\n      this.pubkey = user?.pubkey || \"\";\n    }\n    if (!this.created_at) {\n      this.created_at = Math.floor(Date.now() / 1e3);\n    }\n    const { content, tags } = await this.generateTags();\n    this.content = content || \"\";\n    this.tags = tags;\n    try {\n      this.id = this.getEventHash();\n    } catch (_e) {\n    }\n    return this.rawEvent();\n  }\n  serialize = serialize.bind(this);\n  getEventHash = getEventHash.bind(this);\n  validate = validate.bind(this);\n  verifySignature = verifySignature.bind(this);\n  /**\n   * Is this event replaceable (whether parameterized or not)?\n   *\n   * This will return true for kind 0, 3, 10k-20k and 30k-40k\n   */\n  isReplaceable = isReplaceable.bind(this);\n  isEphemeral = isEphemeral.bind(this);\n  isDvm = () => this.kind && this.kind >= 5e3 && this.kind <= 7e3;\n  /**\n   * Is this event parameterized replaceable?\n   *\n   * This will return true for kind 30k-40k\n   */\n  isParamReplaceable = isParamReplaceable.bind(this);\n  /**\n   * Encodes a bech32 id.\n   *\n   * @param relays {string[]} The relays to encode in the id\n   * @returns {string} - Encoded naddr, note or nevent.\n   */\n  encode = encode.bind(this);\n  encrypt = encrypt.bind(this);\n  decrypt = decrypt.bind(this);\n  /**\n   * Get all tags with the given name\n   * @param tagName {string} The name of the tag to search for\n   * @returns {NDKTag[]} An array of the matching tags\n   */\n  getMatchingTags(tagName, marker) {\n    const t = this.tags.filter((tag) => tag[0] === tagName);\n    if (marker === void 0) return t;\n    return t.filter((tag) => tag[3] === marker);\n  }\n  /**\n   * Check if the event has a tag with the given name\n   * @param tagName\n   * @param marker\n   * @returns\n   */\n  hasTag(tagName, marker) {\n    return this.tags.some((tag) => tag[0] === tagName && (!marker || tag[3] === marker));\n  }\n  /**\n   * Get the first tag with the given name\n   * @param tagName Tag name to search for\n   * @returns The value of the first tag with the given name, or undefined if no such tag exists\n   */\n  tagValue(tagName, marker) {\n    const tags = this.getMatchingTags(tagName, marker);\n    if (tags.length === 0) return void 0;\n    return tags[0][1];\n  }\n  /**\n   * Gets the NIP-31 \"alt\" tag of the event.\n   */\n  get alt() {\n    return this.tagValue(\"alt\");\n  }\n  /**\n   * Sets the NIP-31 \"alt\" tag of the event. Use this to set an alt tag so\n   * clients that don't handle a particular event kind can display something\n   * useful for users.\n   */\n  set alt(alt) {\n    this.removeTag(\"alt\");\n    if (alt) this.tags.push([\"alt\", alt]);\n  }\n  /**\n   * Gets the NIP-33 \"d\" tag of the event.\n   */\n  get dTag() {\n    return this.tagValue(\"d\");\n  }\n  /**\n   * Sets the NIP-33 \"d\" tag of the event.\n   */\n  set dTag(value) {\n    this.removeTag(\"d\");\n    if (value) this.tags.push([\"d\", value]);\n  }\n  /**\n   * Remove all tags with the given name (e.g. \"d\", \"a\", \"p\")\n   * @param tagName Tag name(s) to search for and remove\n   * @param marker Optional marker to check for too\n   *\n   * @example\n   * Remove a tags with a \"defer\" marker\n   * ```typescript\n   * event.tags = [\n   *   [\"a\", \"....\", \"defer\"],\n   *   [\"a\", \"....\", \"no-defer\"],\n   * ]\n   *\n   * event.removeTag(\"a\", \"defer\");\n   *\n   * // event.tags => [[\"a\", \"....\", \"no-defer\"]]\n   *\n   * @returns {void}\n   */\n  removeTag(tagName, marker) {\n    const tagNames = Array.isArray(tagName) ? tagName : [tagName];\n    this.tags = this.tags.filter((tag) => {\n      const include = tagNames.includes(tag[0]);\n      const hasMarker = marker ? tag[3] === marker : true;\n      return !(include && hasMarker);\n    });\n  }\n  /**\n   * Replace a tag with a new value. If not found, it will be added.\n   * @param tag The tag to replace.\n   * @param value The new value for the tag.\n   */\n  replaceTag(tag) {\n    this.removeTag(tag[0]);\n    this.tags.push(tag);\n  }\n  /**\n   * Sign the event if a signer is present.\n   *\n   * It will generate tags.\n   * Repleacable events will have their created_at field set to the current time.\n   * @param signer {NDKSigner} The NDKSigner to use to sign the event\n   * @returns {Promise<string>} A Promise that resolves to the signature of the signed event.\n   */\n  async sign(signer) {\n    if (!signer) {\n      this.ndk?.assertSigner();\n      signer = this.ndk?.signer;\n    } else {\n      this.author = await signer.user();\n    }\n    const nostrEvent = await this.toNostrEvent();\n    this.sig = await signer.sign(nostrEvent);\n    return this.sig;\n  }\n  /**\n   *\n   * @param relaySet\n   * @param timeoutMs\n   * @param requiredRelayCount\n   * @returns\n   */\n  async publishReplaceable(relaySet, timeoutMs, requiredRelayCount) {\n    this.id = \"\";\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.sig = \"\";\n    return this.publish(relaySet, timeoutMs, requiredRelayCount);\n  }\n  /**\n   * Attempt to sign and then publish an NDKEvent to a given relaySet.\n   * If no relaySet is provided, the relaySet will be calculated by NDK.\n   * @param relaySet {NDKRelaySet} The relaySet to publish the even to.\n   * @param timeoutM {number} The timeout for the publish operation in milliseconds.\n   * @param requiredRelayCount The number of relays that must receive the event for the publish to be considered successful.\n   * @returns A promise that resolves to the relays the event was published to.\n   */\n  async publish(relaySet, timeoutMs, requiredRelayCount) {\n    if (!this.sig) await this.sign();\n    if (!this.ndk) throw new Error(\"NDKEvent must be associated with an NDK instance to publish\");\n    if (!relaySet || relaySet.size === 0) {\n      relaySet = this.ndk.devWriteRelaySet || await calculateRelaySetFromEvent(this.ndk, this);\n    }\n    if (this.kind === 5 /* EventDeletion */ && this.ndk.cacheAdapter?.deleteEventIds) {\n      const eTags = this.getMatchingTags(\"e\").map((tag) => tag[1]);\n      this.ndk.cacheAdapter.deleteEventIds(eTags);\n    }\n    const rawEvent = this.rawEvent();\n    if (this.ndk.cacheAdapter?.addUnpublishedEvent && shouldTrackUnpublishedEvent(this)) {\n      try {\n        this.ndk.cacheAdapter.addUnpublishedEvent(this, relaySet.relayUrls);\n      } catch (e) {\n        console.error(\"Error adding unpublished event to cache\", e);\n      }\n    }\n    if (this.kind === 5 /* EventDeletion */ && this.ndk.cacheAdapter?.deleteEventIds) {\n      this.ndk.cacheAdapter.deleteEventIds(this.getMatchingTags(\"e\").map((tag) => tag[1]));\n    }\n    this.ndk.subManager.dispatchEvent(rawEvent, void 0, true);\n    const relays = await relaySet.publish(this, timeoutMs, requiredRelayCount);\n    relays.forEach((relay) => this.ndk?.subManager.seenEvent(this.id, relay));\n    return relays;\n  }\n  /**\n   * Generates tags for users, notes, and other events tagged in content.\n   * Will also generate random \"d\" tag for parameterized replaceable events where needed.\n   * @returns {ContentTag} The tags and content of the event.\n   */\n  async generateTags() {\n    let tags = [];\n    const g = await generateContentTags(this.content, this.tags);\n    const content = g.content;\n    tags = g.tags;\n    if (this.kind && this.isParamReplaceable()) {\n      const dTag = this.getMatchingTags(\"d\")[0];\n      if (!dTag) {\n        const title = this.tagValue(\"title\");\n        const randLength = title ? 6 : 16;\n        let str = [...Array(randLength)].map(() => Math.random().toString(36)[2]).join(\"\");\n        if (title && title.length > 0) {\n          str = `${title.replace(/[^a-z0-9]+/gi, \"-\").replace(/^-|-$/g, \"\")}-${str}`;\n        }\n        tags.push([\"d\", str]);\n      }\n    }\n    if (this.shouldAddClientTag) {\n      const clientTag = [\"client\", this.ndk?.clientName ?? \"\"];\n      if (this.ndk?.clientNip89) clientTag.push(this.ndk?.clientNip89);\n      tags.push(clientTag);\n    } else if (this.shouldStripClientTag) {\n      tags = tags.filter((tag) => tag[0] !== \"client\");\n    }\n    return { content: content || \"\", tags };\n  }\n  get shouldAddClientTag() {\n    if (!this.ndk?.clientName && !this.ndk?.clientNip89) return false;\n    if (skipClientTagOnKinds.has(this.kind)) return false;\n    if (this.isEphemeral()) return false;\n    if (this.isReplaceable() && !this.isParamReplaceable()) return false;\n    if (this.isDvm()) return false;\n    if (this.hasTag(\"client\")) return false;\n    return true;\n  }\n  get shouldStripClientTag() {\n    return skipClientTagOnKinds.has(this.kind);\n  }\n  muted() {\n    const authorMutedEntry = this.ndk?.mutedIds.get(this.pubkey);\n    if (authorMutedEntry && authorMutedEntry === \"p\") return \"author\";\n    const eventTagReference = this.tagReference();\n    const eventMutedEntry = this.ndk?.mutedIds.get(eventTagReference[1]);\n    if (eventMutedEntry && eventMutedEntry === eventTagReference[0]) return \"event\";\n    return null;\n  }\n  /**\n   * Returns the \"d\" tag of a parameterized replaceable event or throws an error if the event isn't\n   * a parameterized replaceable event.\n   * @returns {string} the \"d\" tag of the event.\n   *\n   * @deprecated Use `dTag` instead.\n   */\n  replaceableDTag() {\n    if (this.kind && this.kind >= 3e4 && this.kind <= 4e4) {\n      const dTag = this.getMatchingTags(\"d\")[0];\n      const dTagId = dTag ? dTag[1] : \"\";\n      return dTagId;\n    }\n    throw new Error(\"Event is not a parameterized replaceable event\");\n  }\n  /**\n   * Provides a deduplication key for the event.\n   *\n   * For kinds 0, 3, 10k-20k this will be the event <kind>:<pubkey>\n   * For kinds 30k-40k this will be the event <kind>:<pubkey>:<d-tag>\n   * For all other kinds this will be the event id\n   */\n  deduplicationKey() {\n    if (this.kind === 0 || this.kind === 3 || this.kind && this.kind >= 1e4 && this.kind < 2e4) {\n      return `${this.kind}:${this.pubkey}`;\n    }\n    return this.tagId();\n  }\n  /**\n   * Returns the id of the event or, if it's a parameterized event, the generated id of the event using \"d\" tag, pubkey, and kind.\n   * @returns {string} The id\n   */\n  tagId() {\n    if (this.isParamReplaceable()) {\n      return this.tagAddress();\n    }\n    return this.id;\n  }\n  /**\n   * Returns a stable reference value for a replaceable event.\n   *\n   * Param replaceable events are returned in the expected format of `<kind>:<pubkey>:<d-tag>`.\n   * Kind-replaceable events are returned in the format of `<kind>:<pubkey>:`.\n   *\n   * @returns {string} A stable reference value for replaceable events\n   */\n  tagAddress() {\n    if (this.isParamReplaceable()) {\n      const dTagId = this.dTag ?? \"\";\n      return `${this.kind}:${this.pubkey}:${dTagId}`;\n    }\n    if (this.isReplaceable()) {\n      return `${this.kind}:${this.pubkey}:`;\n    }\n    throw new Error(\"Event is not a replaceable event\");\n  }\n  /**\n   * Determines the type of tag that can be used to reference this event from another event.\n   * @returns {string} The tag type\n   * @example\n   * event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   * event.tagType(); // \"a\"\n   */\n  tagType() {\n    return this.isParamReplaceable() ? \"a\" : \"e\";\n  }\n  /**\n   * Get the tag that can be used to reference this event from another event.\n   *\n   * Consider using referenceTags() instead (unless you have a good reason to use this)\n   *\n   * @example\n   *     event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   *     event.tagReference(); // [\"a\", \"30000:pubkey:d-code\"]\n   *\n   *     event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\n   *     event.tagReference(); // [\"e\", \"eventid\"]\n   * @returns {NDKTag} The NDKTag object referencing this event\n   */\n  tagReference(marker) {\n    let tag;\n    if (this.isParamReplaceable()) {\n      tag = [\"a\", this.tagAddress()];\n    } else {\n      tag = [\"e\", this.tagId()];\n    }\n    if (this.relay) {\n      tag.push(this.relay.url);\n    } else {\n      tag.push(\"\");\n    }\n    tag.push(marker ?? \"\");\n    if (!this.isParamReplaceable()) {\n      tag.push(this.pubkey);\n    }\n    return tag;\n  }\n  /**\n   * Get the tags that can be used to reference this event from another event\n   * @param marker The marker to use in the tag\n   * @param skipAuthorTag Whether to explicitly skip adding the author tag of the event\n   * @param forceTag Force a specific tag to be used instead of the default \"e\" or \"a\" tag\n   * @example\n   *     event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   *     event.referenceTags(); // [[\"a\", \"30000:pubkey:d-code\"], [\"e\", \"parent-id\"]]\n   *\n   *     event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\n   *     event.referenceTags(); // [[\"e\", \"parent-id\"]]\n   * @returns {NDKTag} The NDKTag object referencing this event\n   */\n  referenceTags(marker, skipAuthorTag, forceTag) {\n    let tags = [];\n    if (this.isParamReplaceable()) {\n      tags = [\n        [forceTag ?? \"a\", this.tagAddress()],\n        [forceTag ?? \"e\", this.id]\n      ];\n    } else {\n      tags = [[forceTag ?? \"e\", this.id]];\n    }\n    tags = tags.map((tag) => {\n      if (tag[0] === \"e\" || marker) {\n        tag.push(this.relay?.url ?? \"\");\n      } else if (this.relay?.url) {\n        tag.push(this.relay?.url);\n      }\n      return tag;\n    });\n    tags.forEach((tag) => {\n      if (tag[0] === \"e\") {\n        tag.push(marker ?? \"\");\n        tag.push(this.pubkey);\n      } else if (marker) {\n        tag.push(marker);\n      }\n    });\n    tags = [...tags, ...this.getMatchingTags(\"h\")];\n    if (!skipAuthorTag) tags.push(...this.author.referenceTags());\n    return tags;\n  }\n  /**\n   * Provides the filter that will return matching events for this event.\n   *\n   * @example\n   *    event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\n   *    event.filter(); // { \"#a\": [\"30000:pubkey:d-code\"] }\n   * @example\n   *    event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\n   *    event.filter(); // { \"#e\": [\"eventid\"] }\n   *\n   * @returns The filter that will return matching events for this event\n   */\n  filter() {\n    if (this.isParamReplaceable()) {\n      return { \"#a\": [this.tagId()] };\n    }\n    return { \"#e\": [this.tagId()] };\n  }\n  nip22Filter() {\n    if (this.isParamReplaceable()) {\n      return { \"#A\": [this.tagId()] };\n    }\n    return { \"#E\": [this.tagId()] };\n  }\n  /**\n   * Generates a deletion event of the current event\n   *\n   * @param reason The reason for the deletion\n   * @param publish Whether to publish the deletion event automatically\n   * @returns The deletion event\n   */\n  async delete(reason, publish = true) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    const e = new _NDKEvent(this.ndk, {\n      kind: 5 /* EventDeletion */,\n      content: reason || \"\"\n    });\n    e.tag(this, void 0, true);\n    e.tags.push([\"k\", this.kind?.toString()]);\n    if (publish) {\n      this.emit(\"deleted\");\n      await e.publish();\n    }\n    return e;\n  }\n  /**\n   * Establishes whether this is a NIP-70-protectede event.\n   * @@satisfies NIP-70\n   */\n  set isProtected(val) {\n    this.removeTag(\"-\");\n    if (val) this.tags.push([\"-\"]);\n  }\n  /**\n   * Whether this is a NIP-70-protected event.\n   * @@satisfies NIP-70\n   */\n  get isProtected() {\n    return this.hasTag(\"-\");\n  }\n  /**\n   * Fetch an event tagged with the given tag following relay hints if provided.\n   * @param tag The tag to search for\n   * @param marker The marker to use in the tag (e.g. \"root\")\n   * @returns The fetched event or null if no event was found, undefined if no matching tag was found in the event\n   * * @example\n   * const replyEvent = await ndk.fetchEvent(\"nevent1qqs8x8vnycyha73grv380gmvlury4wtmx0nr9a5ds2dngqwgu87wn6gpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3ql2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqz4cwjd\")\n   * const originalEvent = await replyEvent.fetchTaggedEvent(\"e\", \"reply\");\n   * console.log(replyEvent.encode() + \" is a reply to event \" + originalEvent?.encode());\n   */\n  fetchTaggedEvent = fetchTaggedEvent.bind(this);\n  /**\n   * Fetch the root event of the current event.\n   * @returns The fetched root event or null if no event was found\n   * @example\n   * const replyEvent = await ndk.fetchEvent(\"nevent1qqs8x8vnycyha73grv380gmvlury4wtmx0nr9a5ds2dngqwgu87wn6gpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3ql2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqz4cwjd\")\n   * const rootEvent = await replyEvent.fetchRootEvent();\n   * console.log(replyEvent.encode() + \" is a reply in the thread \" + rootEvent?.encode());\n   */\n  fetchRootEvent = fetchRootEvent.bind(this);\n  /**\n   * Fetch the event the current event is replying to.\n   * @returns The fetched reply event or null if no event was found\n   */\n  fetchReplyEvent = fetchReplyEvent.bind(this);\n  /**\n   * NIP-18 reposting event.\n   *\n   * @param publish Whether to publish the reposted event automatically @default true\n   * @param signer The signer to use for signing the reposted event\n   * @returns The reposted event\n   *\n   * @function\n   */\n  repost = repost.bind(this);\n  /**\n   * React to an existing event\n   *\n   * @param content The content of the reaction\n   */\n  async react(content, publish = true) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    const e = new _NDKEvent(this.ndk, {\n      kind: 7 /* Reaction */,\n      content\n    });\n    e.tag(this);\n    if (publish) await e.publish();\n    return e;\n  }\n  /**\n   * Checks whether the event is valid per underlying NIPs.\n   *\n   * This method is meant to be overridden by subclasses that implement specific NIPs\n   * to allow the enforcement of NIP-specific validation rules.\n   *\n   * Otherwise, it will only check for basic event properties.\n   *\n   */\n  get isValid() {\n    return this.validate();\n  }\n  get inspect() {\n    return JSON.stringify(this.rawEvent(), null, 4);\n  }\n  /**\n   * Dump the event to console for debugging purposes.\n   * Prints a JSON stringified version of rawEvent() with indentation\n   * and also lists all relay URLs for onRelays.\n   */\n  dump() {\n    console.debug(JSON.stringify(this.rawEvent(), null, 4));\n    console.debug(\"Event on relays:\", this.onRelays.map((relay) => relay.url).join(\", \"));\n  }\n  /**\n   * Creates a reply event for the current event.\n   *\n   * This function will use NIP-22 when appropriate (i.e. replies to non-kind:1 events).\n   * This function does not have side-effects; it will just return an event with the appropriate tags\n   * to generate the reply event; the caller is responsible for publishing the event.\n   */\n  reply() {\n    const reply = new _NDKEvent(this.ndk);\n    if (this.kind === 1) {\n      reply.kind = 1;\n      const opHasETag = this.hasTag(\"e\");\n      if (opHasETag) {\n        reply.tags = [\n          ...reply.tags,\n          ...this.getMatchingTags(\"e\"),\n          ...this.getMatchingTags(\"p\"),\n          ...this.getMatchingTags(\"a\"),\n          ...this.referenceTags(\"reply\")\n        ];\n      } else {\n        reply.tag(this, \"root\");\n      }\n    } else {\n      reply.kind = 1111 /* GenericReply */;\n      const carryOverTags = [\"A\", \"E\", \"I\", \"P\"];\n      const rootTags = this.tags.filter((tag) => carryOverTags.includes(tag[0]));\n      if (rootTags.length > 0) {\n        const rootKind = this.tagValue(\"K\");\n        reply.tags.push(...rootTags);\n        if (rootKind) reply.tags.push([\"K\", rootKind]);\n        const [type, id, _, ...extra] = this.tagReference();\n        const tag = [type, id, ...extra];\n        reply.tags.push(tag);\n      } else {\n        const [type, id, _, relayHint] = this.tagReference();\n        const tag = [type, id, relayHint ?? \"\"];\n        if (type === \"e\") tag.push(this.pubkey);\n        reply.tags.push(tag);\n        const uppercaseTag = [...tag];\n        uppercaseTag[0] = uppercaseTag[0].toUpperCase();\n        reply.tags.push(uppercaseTag);\n        reply.tags.push([\"K\", this.kind?.toString()]);\n        reply.tags.push([\"P\", this.pubkey]);\n      }\n      reply.tags.push([\"k\", this.kind?.toString()]);\n      reply.tags.push(...this.getMatchingTags(\"p\"));\n      reply.tags.push([\"p\", this.pubkey]);\n    }\n    return reply;\n  }\n};\nvar untrackedUnpublishedEvents = /* @__PURE__ */ new Set([\n  24133 /* NostrConnect */,\n  13194 /* NostrWaletConnectInfo */,\n  23194 /* NostrWalletConnectReq */,\n  23195 /* NostrWalletConnectRes */\n]);\nfunction shouldTrackUnpublishedEvent(event) {\n  return !untrackedUnpublishedEvents.has(event.kind);\n}\n\n// src/relay/pool/index.ts\n\nvar NDKPool = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  // TODO: This should probably be an LRU cache\n  _relays = /* @__PURE__ */ new Map();\n  status = \"idle\";\n  autoConnectRelays = /* @__PURE__ */ new Set();\n  poolBlacklistRelayUrls = /* @__PURE__ */ new Set();\n  debug;\n  temporaryRelayTimers = /* @__PURE__ */ new Map();\n  flappingRelays = /* @__PURE__ */ new Set();\n  // A map to store timeouts for each flapping relay.\n  backoffTimes = /* @__PURE__ */ new Map();\n  ndk;\n  get blacklistRelayUrls() {\n    const val = new Set(this.ndk.blacklistRelayUrls);\n    this.poolBlacklistRelayUrls.forEach((url) => val.add(url));\n    return val;\n  }\n  /**\n   * @param relayUrls - The URLs of the relays to connect to.\n   * @param blacklistedRelayUrls - URLs to blacklist for this pool IN ADDITION to those blacklisted at the ndk-level\n   * @param ndk - The NDK instance.\n   * @param opts - Options for the pool.\n   */\n  constructor(relayUrls, blacklistedRelayUrls, ndk, {\n    debug: debug8,\n    name\n  } = {}) {\n    super();\n    this.debug = debug8 ?? ndk.debug.extend(\"pool\");\n    if (name) this._name = name;\n    this.ndk = ndk;\n    this.relayUrls = relayUrls;\n    this.poolBlacklistRelayUrls = new Set(blacklistedRelayUrls);\n    this.ndk.pools.push(this);\n  }\n  get relays() {\n    return this._relays;\n  }\n  set relayUrls(urls) {\n    this._relays.clear();\n    for (const relayUrl of urls) {\n      const relay = new NDKRelay(relayUrl, void 0, this.ndk);\n      relay.connectivity.netDebug = this.ndk.netDebug;\n      this.addRelay(relay);\n    }\n  }\n  _name = \"unnamed\";\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._name = name;\n    this.debug = this.debug.extend(name);\n  }\n  /**\n   * Adds a relay to the pool, and sets a timer to remove it if it is not used within the specified time.\n   * @param relay - The relay to add to the pool.\n   * @param removeIfUnusedAfter - The time in milliseconds to wait before removing the relay from the pool after it is no longer used.\n   */\n  useTemporaryRelay(relay, removeIfUnusedAfter = 3e4, filters) {\n    const relayAlreadyInPool = this.relays.has(relay.url);\n    if (!relayAlreadyInPool) {\n      this.addRelay(relay);\n      this.debug(\"Adding temporary relay %s for filters %o\", relay.url, filters);\n    }\n    const existingTimer = this.temporaryRelayTimers.get(relay.url);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n    }\n    if (!relayAlreadyInPool || existingTimer) {\n      const timer = setTimeout(() => {\n        if (this.ndk.explicitRelayUrls?.includes(relay.url)) return;\n        this.removeRelay(relay.url);\n      }, removeIfUnusedAfter);\n      this.temporaryRelayTimers.set(relay.url, timer);\n    }\n  }\n  /**\n   * Adds a relay to the pool.\n   *\n   * @param relay - The relay to add to the pool.\n   * @param connect - Whether or not to connect to the relay.\n   */\n  addRelay(relay, connect = true) {\n    const isAlreadyInPool = this.relays.has(relay.url);\n    const isBlacklisted = this.blacklistRelayUrls?.has(relay.url);\n    const isCustomRelayUrl = relay.url.includes(\"/npub1\");\n    let reconnect = true;\n    const relayUrl = relay.url;\n    if (isAlreadyInPool) return;\n    if (isBlacklisted) {\n      this.debug(`Refusing to add relay ${relayUrl}: blacklisted`);\n      return;\n    }\n    if (isCustomRelayUrl) {\n      this.debug(`Refusing to add relay ${relayUrl}: is a filter relay`);\n      return;\n    }\n    if (this.ndk.cacheAdapter?.getRelayStatus) {\n      const info = this.ndk.cacheAdapter.getRelayStatus(relayUrl);\n      if (info?.dontConnectBefore) {\n        if (info.dontConnectBefore > Date.now()) {\n          const delay = info.dontConnectBefore - Date.now();\n          this.debug(`Refusing to add relay ${relayUrl}: delayed connect for ${delay}ms`);\n          setTimeout(() => {\n            this.addRelay(relay, connect);\n          }, delay);\n          return;\n        }\n        reconnect = false;\n      }\n    }\n    const noticeHandler = (notice) => this.emit(\"notice\", relay, notice);\n    const connectHandler = () => this.handleRelayConnect(relayUrl);\n    const readyHandler = () => this.handleRelayReady(relay);\n    const disconnectHandler = () => this.emit(\"relay:disconnect\", relay);\n    const flappingHandler = () => this.handleFlapping(relay);\n    const authHandler = (challenge) => this.emit(\"relay:auth\", relay, challenge);\n    const authedHandler = () => this.emit(\"relay:authed\", relay);\n    relay.off(\"notice\", noticeHandler);\n    relay.off(\"connect\", connectHandler);\n    relay.off(\"ready\", readyHandler);\n    relay.off(\"disconnect\", disconnectHandler);\n    relay.off(\"flapping\", flappingHandler);\n    relay.off(\"auth\", authHandler);\n    relay.off(\"authed\", authedHandler);\n    relay.on(\"notice\", noticeHandler);\n    relay.on(\"connect\", connectHandler);\n    relay.on(\"ready\", readyHandler);\n    relay.on(\"disconnect\", disconnectHandler);\n    relay.on(\"flapping\", flappingHandler);\n    relay.on(\"auth\", authHandler);\n    relay.on(\"authed\", authedHandler);\n    relay.on(\"delayed-connect\", (delay) => {\n      if (this.ndk.cacheAdapter?.updateRelayStatus) {\n        this.ndk.cacheAdapter.updateRelayStatus(relay.url, {\n          dontConnectBefore: Date.now() + delay\n        });\n      }\n    });\n    this._relays.set(relayUrl, relay);\n    if (connect) this.autoConnectRelays.add(relayUrl);\n    if (connect && this.status === \"active\") {\n      this.emit(\"relay:connecting\", relay);\n      relay.connect(void 0, reconnect).catch((e) => {\n        this.debug(`Failed to connect to relay ${relayUrl}`, e);\n      });\n    }\n  }\n  /**\n   * Removes a relay from the pool.\n   * @param relayUrl - The URL of the relay to remove.\n   * @returns {boolean} True if the relay was removed, false if it was not found.\n   */\n  removeRelay(relayUrl) {\n    const relay = this.relays.get(relayUrl);\n    if (relay) {\n      relay.disconnect();\n      this.relays.delete(relayUrl);\n      this.autoConnectRelays.delete(relayUrl);\n      this.emit(\"relay:disconnect\", relay);\n      return true;\n    }\n    const existingTimer = this.temporaryRelayTimers.get(relayUrl);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n      this.temporaryRelayTimers.delete(relayUrl);\n    }\n    return false;\n  }\n  /**\n   * Checks whether a relay is already connected in the pool.\n   */\n  isRelayConnected(url) {\n    const normalizedUrl = normalizeRelayUrl(url);\n    const relay = this.relays.get(normalizedUrl);\n    if (!relay) return false;\n    return relay.status === 5 /* CONNECTED */;\n  }\n  /**\n   * Fetches a relay from the pool, or creates a new one if it does not exist.\n   *\n   * New relays will be attempted to be connected.\n   */\n  getRelay(url, connect = true, temporary = false, filters) {\n    let relay = this.relays.get(normalizeRelayUrl(url));\n    if (!relay) {\n      relay = new NDKRelay(url, void 0, this.ndk);\n      relay.connectivity.netDebug = this.ndk.netDebug;\n      if (temporary) {\n        this.useTemporaryRelay(relay, 3e4, filters);\n      } else {\n        this.addRelay(relay, connect);\n      }\n    }\n    return relay;\n  }\n  handleRelayConnect(relayUrl) {\n    const relay = this.relays.get(relayUrl);\n    if (!relay) {\n      console.error(\"NDK BUG: relay not found in pool\", { relayUrl });\n      return;\n    }\n    this.emit(\"relay:connect\", relay);\n    if (this.stats().connected === this.relays.size) {\n      this.emit(\"connect\");\n    }\n  }\n  handleRelayReady(relay) {\n    this.emit(\"relay:ready\", relay);\n  }\n  /**\n   * Attempts to establish a connection to each relay in the pool.\n   *\n   * @async\n   * @param {number} [timeoutMs] - Optional timeout in milliseconds for each connection attempt.\n   * @returns {Promise<void>} A promise that resolves when all connection attempts have completed.\n   * @throws {Error} If any of the connection attempts result in an error or timeout.\n   */\n  async connect(timeoutMs) {\n    const promises = [];\n    this.status = \"active\";\n    this.debug(`Connecting to ${this.relays.size} relays${timeoutMs ? `, timeout ${timeoutMs}...` : \"\"}`);\n    const relaysToConnect = new Set(this.autoConnectRelays.keys());\n    for (const relayUrl of relaysToConnect) {\n      const relay = this.relays.get(relayUrl);\n      if (!relay) {\n        continue;\n      }\n      const connectPromise = new Promise((resolve, reject) => {\n        this.emit(\"relay:connecting\", relay);\n        return relay.connect(timeoutMs).then(resolve).catch(reject);\n      });\n      if (timeoutMs) {\n        const timeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => reject(`Timed out after ${timeoutMs}ms`), timeoutMs);\n        });\n        promises.push(\n          Promise.race([connectPromise, timeoutPromise]).catch((e) => {\n            this.debug(`Failed to connect to relay ${relay.url}: ${e ?? \"No reason specified\"}`);\n          })\n        );\n      } else {\n        promises.push(connectPromise);\n      }\n    }\n    const maybeEmitConnect = () => {\n      const allConnected = this.stats().connected === this.relays.size;\n      const someConnected = this.stats().connected > 0;\n      if (!allConnected && someConnected) {\n        this.emit(\"connect\");\n      }\n    };\n    if (timeoutMs) setTimeout(maybeEmitConnect, timeoutMs);\n    await Promise.all(promises);\n    maybeEmitConnect();\n  }\n  checkOnFlappingRelays() {\n    const flappingRelaysCount = this.flappingRelays.size;\n    const totalRelays = this.relays.size;\n    if (flappingRelaysCount / totalRelays >= 0.8) {\n      for (const relayUrl of this.flappingRelays) {\n        this.backoffTimes.set(relayUrl, 0);\n      }\n    }\n  }\n  handleFlapping(relay) {\n    this.debug(`Relay ${relay.url} is flapping`);\n    let currentBackoff = this.backoffTimes.get(relay.url) || 5e3;\n    currentBackoff = currentBackoff * 2;\n    this.backoffTimes.set(relay.url, currentBackoff);\n    this.debug(`Backoff time for ${relay.url} is ${currentBackoff}ms`);\n    setTimeout(() => {\n      this.debug(`Attempting to reconnect to ${relay.url}`);\n      this.emit(\"relay:connecting\", relay);\n      relay.connect();\n      this.checkOnFlappingRelays();\n    }, currentBackoff);\n    relay.disconnect();\n    this.emit(\"flapping\", relay);\n  }\n  size() {\n    return this.relays.size;\n  }\n  /**\n   * Returns the status of each relay in the pool.\n   * @returns {NDKPoolStats} An object containing the number of relays in each status.\n   */\n  stats() {\n    const stats = {\n      total: 0,\n      connected: 0,\n      disconnected: 0,\n      connecting: 0\n    };\n    for (const relay of this.relays.values()) {\n      stats.total++;\n      if (relay.status === 5 /* CONNECTED */) {\n        stats.connected++;\n      } else if (relay.status === 1 /* DISCONNECTED */) {\n        stats.disconnected++;\n      } else if (relay.status === 4 /* CONNECTING */) {\n        stats.connecting++;\n      }\n    }\n    return stats;\n  }\n  connectedRelays() {\n    return Array.from(this.relays.values()).filter((relay) => relay.status >= 5 /* CONNECTED */);\n  }\n  permanentAndConnectedRelays() {\n    return Array.from(this.relays.values()).filter(\n      (relay) => relay.status >= 5 /* CONNECTED */ && !this.temporaryRelayTimers.has(relay.url)\n    );\n  }\n  /**\n   * Get a list of all relay urls in the pool.\n   */\n  urls() {\n    return Array.from(this.relays.keys());\n  }\n};\n\n// src/user/index.ts\n\n\n// src/events/kinds/nutzap/mint-list.ts\nvar NDKCashuMintList = class _NDKCashuMintList extends NDKEvent {\n  static kind = 10019 /* CashuMintList */;\n  static kinds = [10019 /* CashuMintList */];\n  _p2pk;\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 10019 /* CashuMintList */;\n  }\n  static from(event) {\n    return new _NDKCashuMintList(event.ndk, event);\n  }\n  set relays(urls) {\n    this.tags = this.tags.filter((t) => t[0] !== \"relay\");\n    for (const url of urls) {\n      this.tags.push([\"relay\", url]);\n    }\n  }\n  get relays() {\n    const r = [];\n    for (const tag of this.tags) {\n      if (tag[0] === \"relay\") {\n        r.push(tag[1]);\n      }\n    }\n    return r;\n  }\n  set mints(urls) {\n    this.tags = this.tags.filter((t) => t[0] !== \"mint\");\n    for (const url of urls) {\n      this.tags.push([\"mint\", url]);\n    }\n  }\n  get mints() {\n    const r = [];\n    for (const tag of this.tags) {\n      if (tag[0] === \"mint\") {\n        r.push(tag[1]);\n      }\n    }\n    return Array.from(new Set(r));\n  }\n  get p2pk() {\n    if (this._p2pk) {\n      return this._p2pk;\n    }\n    this._p2pk = this.tagValue(\"pubkey\") ?? this.pubkey;\n    return this._p2pk;\n  }\n  set p2pk(pubkey) {\n    this._p2pk = pubkey;\n    this.removeTag(\"pubkey\");\n    if (pubkey) {\n      this.tags.push([\"pubkey\", pubkey]);\n    }\n  }\n  get relaySet() {\n    return NDKRelaySet.fromRelayUrls(this.relays, this.ndk);\n  }\n};\n\n// src/subscription/index.ts\n\n\n// src/events/kinds/article.ts\nvar NDKArticle = class _NDKArticle extends NDKEvent {\n  static kind = 30023 /* Article */;\n  static kinds = [30023 /* Article */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30023 /* Article */;\n  }\n  /**\n   * Creates a NDKArticle from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKArticle from.\n   * @returns NDKArticle\n   */\n  static from(event) {\n    return new _NDKArticle(event.ndk, event);\n  }\n  /**\n   * Getter for the article title.\n   *\n   * @returns {string | undefined} - The article title if available, otherwise undefined.\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the article title.\n   *\n   * @param {string | undefined} title - The title to set for the article.\n   */\n  set title(title) {\n    this.removeTag(\"title\");\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Getter for the article image.\n   *\n   * @returns {string | undefined} - The article image if available, otherwise undefined.\n   */\n  get image() {\n    return this.tagValue(\"image\");\n  }\n  /**\n   * Setter for the article image.\n   *\n   * @param {string | undefined} image - The image to set for the article.\n   */\n  set image(image) {\n    this.removeTag(\"image\");\n    if (image) this.tags.push([\"image\", image]);\n  }\n  get summary() {\n    return this.tagValue(\"summary\");\n  }\n  set summary(summary) {\n    this.removeTag(\"summary\");\n    if (summary) this.tags.push([\"summary\", summary]);\n  }\n  /**\n   * Getter for the article's publication timestamp.\n   *\n   * @returns {number | undefined} - The Unix timestamp of when the article was published or undefined.\n   */\n  get published_at() {\n    const tag = this.tagValue(\"published_at\");\n    if (tag) {\n      let val = Number.parseInt(tag);\n      if (val > 1e12) {\n        val = Math.floor(val / 1e3);\n      }\n      return val;\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the article's publication timestamp.\n   *\n   * @param {number | undefined} timestamp - The Unix timestamp to set for the article's publication date.\n   */\n  set published_at(timestamp) {\n    this.removeTag(\"published_at\");\n    if (timestamp !== void 0) {\n      this.tags.push([\"published_at\", timestamp.toString()]);\n    }\n  }\n  /**\n   * Generates content tags for the article.\n   *\n   * This method first checks and sets the publication date if not available,\n   * and then generates content tags based on the base NDKEvent class.\n   *\n   * @returns {ContentTag} - The generated content tags.\n   */\n  async generateTags() {\n    super.generateTags();\n    if (!this.published_at) {\n      this.published_at = this.created_at;\n    }\n    return super.generateTags();\n  }\n  /**\n   * Getter for the article's URL.\n   *\n   * @returns {string | undefined} - The article's URL if available, otherwise undefined.\n   */\n  get url() {\n    return this.tagValue(\"url\");\n  }\n  /**\n   * Setter for the article's URL.\n   *\n   * @param {string | undefined} url - The URL to set for the article.\n   */\n  set url(url) {\n    if (url) {\n      this.tags.push([\"url\", url]);\n    } else {\n      this.removeTag(\"url\");\n    }\n  }\n};\n\n// src/events/kinds/cashu/token.ts\nfunction proofsTotalBalance(proofs) {\n  return proofs.reduce((acc, proof) => {\n    if (proof.amount < 0) {\n      throw new Error(\"proof amount is negative\");\n    }\n    return acc + proof.amount;\n  }, 0);\n}\nvar NDKCashuToken = class _NDKCashuToken extends NDKEvent {\n  _proofs = [];\n  _mint;\n  static kind = 7375 /* CashuToken */;\n  static kinds = [7375 /* CashuToken */];\n  /**\n   * Tokens that this token superseeds\n   */\n  _deletes = [];\n  original;\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 7375 /* CashuToken */;\n  }\n  static async from(event) {\n    const token = new _NDKCashuToken(event.ndk, event);\n    token.original = event;\n    try {\n      await token.decrypt();\n    } catch {\n      token.content = token.original.content;\n    }\n    try {\n      const content = JSON.parse(token.content);\n      token.proofs = content.proofs;\n      token.mint = content.mint ?? token.tagValue(\"mint\");\n      token.deletedTokens = content.del ?? [];\n      if (!Array.isArray(token.proofs)) return;\n    } catch (_e) {\n      return;\n    }\n    return token;\n  }\n  get proofs() {\n    return this._proofs;\n  }\n  set proofs(proofs) {\n    const cs = /* @__PURE__ */ new Set();\n    this._proofs = proofs.filter((proof) => {\n      if (cs.has(proof.C)) {\n        console.warn(\"Passed in proofs had duplicates, ignoring\", proof.C);\n        return false;\n      }\n      if (proof.amount < 0) {\n        console.warn(\"Invalid proof with negative amount\", proof);\n        return false;\n      }\n      cs.add(proof.C);\n      return true;\n    }).map(this.cleanProof);\n  }\n  /**\n   * Returns a minimal proof object with only essential properties\n   */\n  cleanProof(proof) {\n    return {\n      id: proof.id,\n      amount: proof.amount,\n      C: proof.C,\n      secret: proof.secret\n    };\n  }\n  async toNostrEvent(pubkey) {\n    if (!this.ndk) throw new Error(\"no ndk\");\n    if (!this.ndk.signer) throw new Error(\"no signer\");\n    const payload = {\n      proofs: this.proofs.map(this.cleanProof),\n      mint: this.mint,\n      del: this.deletedTokens ?? []\n    };\n    this.content = JSON.stringify(payload);\n    const user = await this.ndk.signer.user();\n    await this.encrypt(user, void 0, \"nip44\");\n    return super.toNostrEvent(pubkey);\n  }\n  set mint(mint) {\n    this._mint = mint;\n  }\n  get mint() {\n    return this._mint;\n  }\n  /**\n   * Tokens that were deleted by the creation of this token.\n   */\n  get deletedTokens() {\n    return this._deletes;\n  }\n  /**\n   * Marks tokens that were deleted by the creation of this token.\n   */\n  set deletedTokens(tokenIds) {\n    this._deletes = tokenIds;\n  }\n  get amount() {\n    return proofsTotalBalance(this.proofs);\n  }\n  async publish(relaySet, timeoutMs, requiredRelayCount) {\n    if (this.original) {\n      return this.original.publish(relaySet, timeoutMs, requiredRelayCount);\n    }\n    return super.publish(relaySet, timeoutMs, requiredRelayCount);\n  }\n};\n\n// src/events/kinds/highlight.ts\n\nvar NDKHighlight = class _NDKHighlight extends NDKEvent {\n  _article;\n  static kind = 9802 /* Highlight */;\n  static kinds = [9802 /* Highlight */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 9802 /* Highlight */;\n  }\n  static from(event) {\n    return new _NDKHighlight(event.ndk, event);\n  }\n  get url() {\n    return this.tagValue(\"r\");\n  }\n  /**\n   * Context tag.\n   */\n  set context(context) {\n    if (context === void 0) {\n      this.tags = this.tags.filter(([tag, _value]) => tag !== \"context\");\n    } else {\n      this.tags = this.tags.filter(([tag, _value]) => tag !== \"context\");\n      this.tags.push([\"context\", context]);\n    }\n  }\n  get context() {\n    return this.tags.find(([tag, _value]) => tag === \"context\")?.[1] ?? void 0;\n  }\n  /**\n   * Will return the article URL or NDKEvent if they have already been\n   * set (it won't attempt to load remote events)\n   */\n  get article() {\n    return this._article;\n  }\n  /**\n   * Article the highlight is coming from.\n   *\n   * @param article Article URL or NDKEvent.\n   */\n  set article(article) {\n    this._article = article;\n    if (typeof article === \"string\") {\n      this.tags.push([\"r\", article]);\n    } else {\n      this.tag(article);\n    }\n  }\n  getArticleTag() {\n    return this.getMatchingTags(\"a\")[0] || this.getMatchingTags(\"e\")[0] || this.getMatchingTags(\"r\")[0];\n  }\n  async getArticle() {\n    if (this._article !== void 0) return this._article;\n    let taggedBech32;\n    const articleTag = this.getArticleTag();\n    if (!articleTag) return void 0;\n    switch (articleTag[0]) {\n      case \"a\": {\n        const [kind, pubkey, identifier] = articleTag[1].split(\":\");\n        taggedBech32 = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.naddrEncode({\n          kind: Number.parseInt(kind),\n          pubkey,\n          identifier\n        });\n        break;\n      }\n      case \"e\":\n        taggedBech32 = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.noteEncode(articleTag[1]);\n        break;\n      case \"r\":\n        this._article = articleTag[1];\n        break;\n    }\n    if (taggedBech32) {\n      let a = await this.ndk?.fetchEvent(taggedBech32);\n      if (a) {\n        if (a.kind === 30023 /* Article */) {\n          a = NDKArticle.from(a);\n        }\n        this._article = a;\n      }\n    }\n    return this._article;\n  }\n};\n\n// src/utils/imeta.ts\nfunction mapImetaTag(tag) {\n  const data = {};\n  if (tag.length === 2) {\n    const parts = tag[1].split(\" \");\n    for (let i = 0; i < parts.length; i += 2) {\n      const key = parts[i];\n      const value = parts[i + 1];\n      if (key === \"fallback\") {\n        if (!data.fallback) data.fallback = [];\n        data.fallback.push(value);\n      } else {\n        data[key] = value;\n      }\n    }\n    return data;\n  }\n  const tags = tag.slice(1);\n  for (const val of tags) {\n    const parts = val.split(\" \");\n    const key = parts[0];\n    const value = parts.slice(1).join(\" \");\n    if (key === \"fallback\") {\n      if (!data.fallback) data.fallback = [];\n      data.fallback.push(value);\n    } else {\n      data[key] = value;\n    }\n  }\n  return data;\n}\nfunction imetaTagToTag(imeta) {\n  const tag = [\"imeta\"];\n  for (const [key, value] of Object.entries(imeta)) {\n    if (Array.isArray(value)) {\n      for (const v of value) {\n        tag.push(`${key} ${v}`);\n      }\n    } else if (value) {\n      tag.push(`${key} ${value}`);\n    }\n  }\n  return tag;\n}\n\n// src/events/kinds/image.ts\nvar NDKImage = class _NDKImage extends NDKEvent {\n  static kind = 20 /* Image */;\n  static kinds = [20 /* Image */];\n  _imetas;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 20 /* Image */;\n  }\n  /**\n   * Creates a NDKImage from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKImage from.\n   * @returns NDKImage\n   */\n  static from(event) {\n    return new _NDKImage(event.ndk, event.rawEvent());\n  }\n  get isValid() {\n    return this.imetas.length > 0;\n  }\n  get imetas() {\n    if (this._imetas) return this._imetas;\n    this._imetas = this.tags.filter((tag) => tag[0] === \"imeta\").map(mapImetaTag).filter((imeta) => !!imeta.url);\n    return this._imetas;\n  }\n  set imetas(tags) {\n    this._imetas = tags;\n    this.tags = this.tags.filter((tag) => tag[0] !== \"imeta\");\n    this.tags.push(...tags.map(imetaTagToTag));\n  }\n};\n\n// src/events/kinds/lists/index.ts\nvar NDKList = class _NDKList extends NDKEvent {\n  _encryptedTags;\n  static kinds = [\n    10063 /* BlossomList */,\n    30001 /* CategorizedBookmarkList */,\n    10004 /* CommunityList */,\n    10050 /* DirectMessageReceiveRelayList */,\n    10030 /* EmojiList */,\n    10015 /* InterestList */,\n    10001 /* PinList */,\n    10002 /* RelayList */,\n    10007 /* SearchRelayList */,\n    10006 /* BlockRelayList */,\n    10003 /* BookmarkList */\n  ];\n  /**\n   * Stores the number of bytes the content was before decryption\n   * to expire the cache when the content changes.\n   */\n  encryptedTagsLength;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30001 /* CategorizedBookmarkList */;\n  }\n  /**\n   * Wrap a NDKEvent into a NDKList\n   */\n  static from(ndkEvent) {\n    return new _NDKList(ndkEvent.ndk, ndkEvent);\n  }\n  /**\n   * Returns the title of the list. Falls back on fetching the name tag value.\n   */\n  get title() {\n    const titleTag = this.tagValue(\"title\") || this.tagValue(\"name\");\n    if (titleTag) return titleTag;\n    if (this.kind === 3 /* Contacts */) {\n      return \"Contacts\";\n    }\n    if (this.kind === 1e4 /* MuteList */) {\n      return \"Mute\";\n    }\n    if (this.kind === 10001 /* PinList */) {\n      return \"Pinned Notes\";\n    }\n    if (this.kind === 10002 /* RelayList */) {\n      return \"Relay Metadata\";\n    }\n    if (this.kind === 10003 /* BookmarkList */) {\n      return \"Bookmarks\";\n    }\n    if (this.kind === 10004 /* CommunityList */) {\n      return \"Communities\";\n    }\n    if (this.kind === 10005 /* PublicChatList */) {\n      return \"Public Chats\";\n    }\n    if (this.kind === 10006 /* BlockRelayList */) {\n      return \"Blocked Relays\";\n    }\n    if (this.kind === 10007 /* SearchRelayList */) {\n      return \"Search Relays\";\n    }\n    if (this.kind === 10050 /* DirectMessageReceiveRelayList */) {\n      return \"Direct Message Receive Relays\";\n    }\n    if (this.kind === 10015 /* InterestList */) {\n      return \"Interests\";\n    }\n    if (this.kind === 10030 /* EmojiList */) {\n      return \"Emojis\";\n    }\n    return this.tagValue(\"d\");\n  }\n  /**\n   * Sets the title of the list.\n   */\n  set title(title) {\n    this.removeTag([\"title\", \"name\"]);\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Returns the name of the list.\n   * @deprecated Please use \"title\" instead.\n   */\n  get name() {\n    return this.title;\n  }\n  /**\n   * Sets the name of the list.\n   * @deprecated Please use \"title\" instead. This method will use the `title` tag instead.\n   */\n  set name(name) {\n    this.title = name;\n  }\n  /**\n   * Returns the description of the list.\n   */\n  get description() {\n    return this.tagValue(\"description\");\n  }\n  /**\n   * Sets the description of the list.\n   */\n  set description(name) {\n    this.removeTag(\"description\");\n    if (name) this.tags.push([\"description\", name]);\n  }\n  /**\n   * Returns the image of the list.\n   */\n  get image() {\n    return this.tagValue(\"image\");\n  }\n  /**\n   * Sets the image of the list.\n   */\n  set image(name) {\n    this.removeTag(\"image\");\n    if (name) this.tags.push([\"image\", name]);\n  }\n  isEncryptedTagsCacheValid() {\n    return !!(this._encryptedTags && this.encryptedTagsLength === this.content.length);\n  }\n  /**\n   * Returns the decrypted content of the list.\n   */\n  async encryptedTags(useCache = true) {\n    if (useCache && this.isEncryptedTagsCacheValid()) return this._encryptedTags;\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    const user = await this.ndk.signer.user();\n    try {\n      if (this.content.length > 0) {\n        try {\n          const decryptedContent = await this.ndk.signer.decrypt(user, this.content);\n          const a = JSON.parse(decryptedContent);\n          if (a?.[0]) {\n            this.encryptedTagsLength = this.content.length;\n            return this._encryptedTags = a;\n          }\n          this.encryptedTagsLength = this.content.length;\n          return this._encryptedTags = [];\n        } catch (_e) {\n        }\n      }\n    } catch (_e) {\n    }\n    return [];\n  }\n  /**\n   * This method can be overriden to validate that a tag is valid for this list.\n   *\n   * (i.e. the NDKPersonList can validate that items are NDKUser instances)\n   */\n  validateTag(_tagValue) {\n    return true;\n  }\n  getItems(type) {\n    return this.tags.filter((tag) => tag[0] === type);\n  }\n  /**\n   * Returns the unecrypted items in this list.\n   */\n  get items() {\n    return this.tags.filter((t) => {\n      return ![\n        \"d\",\n        \"L\",\n        \"l\",\n        \"title\",\n        \"name\",\n        \"description\",\n        \"published_at\",\n        \"summary\",\n        \"image\",\n        \"thumb\",\n        \"alt\",\n        \"expiration\",\n        \"subject\",\n        \"client\"\n      ].includes(t[0]);\n    });\n  }\n  /**\n   * Adds a new item to the list.\n   * @param relay Relay to add\n   * @param mark Optional mark to add to the item\n   * @param encrypted Whether to encrypt the item\n   * @param position Where to add the item in the list (top or bottom)\n   */\n  async addItem(item, mark = void 0, encrypted = false, position = \"bottom\") {\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    let tags;\n    if (item instanceof NDKEvent) {\n      tags = [item.tagReference(mark)];\n    } else if (item instanceof NDKUser) {\n      tags = item.referenceTags();\n    } else if (item instanceof NDKRelay) {\n      tags = item.referenceTags();\n    } else if (Array.isArray(item)) {\n      tags = [item];\n    } else {\n      throw new Error(\"Invalid object type\");\n    }\n    if (mark) tags[0].push(mark);\n    if (encrypted) {\n      const user = await this.ndk.signer.user();\n      const currentList = await this.encryptedTags();\n      if (position === \"top\") currentList.unshift(...tags);\n      else currentList.push(...tags);\n      this._encryptedTags = currentList;\n      this.encryptedTagsLength = this.content.length;\n      this.content = JSON.stringify(currentList);\n      await this.encrypt(user);\n    } else {\n      if (position === \"top\") this.tags.unshift(...tags);\n      else this.tags.push(...tags);\n    }\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.emit(\"change\");\n  }\n  /**\n   * Removes an item from the list from both the encrypted and unencrypted lists.\n   * @param value value of item to remove from the list\n   * @param publish whether to publish the change\n   * @returns\n   */\n  async removeItemByValue(value, publish = true) {\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    const index = this.tags.findIndex((tag) => tag[1] === value);\n    if (index >= 0) {\n      this.tags.splice(index, 1);\n    }\n    const user = await this.ndk.signer.user();\n    const encryptedTags = await this.encryptedTags();\n    const encryptedIndex = encryptedTags.findIndex((tag) => tag[1] === value);\n    if (encryptedIndex >= 0) {\n      encryptedTags.splice(encryptedIndex, 1);\n      this._encryptedTags = encryptedTags;\n      this.encryptedTagsLength = this.content.length;\n      this.content = JSON.stringify(encryptedTags);\n      await this.encrypt(user);\n    }\n    if (publish) {\n      return this.publishReplaceable();\n    }\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.emit(\"change\");\n  }\n  /**\n   * Removes an item from the list.\n   *\n   * @param index The index of the item to remove.\n   * @param encrypted Whether to remove from the encrypted list or not.\n   */\n  async removeItem(index, encrypted) {\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (!this.ndk.signer) throw new Error(\"NDK signer not set\");\n    if (encrypted) {\n      const user = await this.ndk.signer.user();\n      const currentList = await this.encryptedTags();\n      currentList.splice(index, 1);\n      this._encryptedTags = currentList;\n      this.encryptedTagsLength = this.content.length;\n      this.content = JSON.stringify(currentList);\n      await this.encrypt(user);\n    } else {\n      this.tags.splice(index, 1);\n    }\n    this.created_at = Math.floor(Date.now() / 1e3);\n    this.emit(\"change\");\n    return this;\n  }\n  has(item) {\n    return this.items.some((tag) => tag[1] === item);\n  }\n  /**\n   * Creates a filter that will result in fetching\n   * the items of this list\n   * @example\n   * const list = new NDKList(...);\n   * const filters = list.filterForItems();\n   * const events = await ndk.fetchEvents(filters);\n   */\n  filterForItems() {\n    const ids = /* @__PURE__ */ new Set();\n    const nip33Queries = /* @__PURE__ */ new Map();\n    const filters = [];\n    for (const tag of this.items) {\n      if (tag[0] === \"e\" && tag[1]) {\n        ids.add(tag[1]);\n      } else if (tag[0] === \"a\" && tag[1]) {\n        const [kind, pubkey, dTag] = tag[1].split(\":\");\n        if (!kind || !pubkey) continue;\n        const key = `${kind}:${pubkey}`;\n        const item = nip33Queries.get(key) || [];\n        item.push(dTag || \"\");\n        nip33Queries.set(key, item);\n      }\n    }\n    if (ids.size > 0) {\n      filters.push({ ids: Array.from(ids) });\n    }\n    if (nip33Queries.size > 0) {\n      for (const [key, values] of nip33Queries.entries()) {\n        const [kind, pubkey] = key.split(\":\");\n        filters.push({\n          kinds: [Number.parseInt(kind)],\n          authors: [pubkey],\n          \"#d\": values\n        });\n      }\n    }\n    return filters;\n  }\n};\nvar lists_default = NDKList;\n\n// src/events/kinds/nutzap/index.ts\n\nvar NDKNutzap = class _NDKNutzap extends NDKEvent {\n  debug;\n  _proofs = [];\n  static kind = 9321 /* Nutzap */;\n  static kinds = [_NDKNutzap.kind];\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 9321 /* Nutzap */;\n    this.debug = ndk?.debug.extend(\"nutzap\") ?? debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:nutzap\");\n    if (!this.alt) this.alt = \"This is a nutzap\";\n    try {\n      const proofTags = this.getMatchingTags(\"proof\");\n      if (proofTags.length) {\n        this._proofs = proofTags.map((tag) => JSON.parse(tag[1]));\n      } else {\n        this._proofs = JSON.parse(this.content);\n      }\n    } catch {\n      return;\n    }\n  }\n  static from(event) {\n    const e = new _NDKNutzap(event.ndk, event);\n    if (!e._proofs || !e._proofs.length) return;\n    return e;\n  }\n  set comment(comment) {\n    this.content = comment ?? \"\";\n  }\n  get comment() {\n    const c = this.tagValue(\"comment\");\n    if (c) return c;\n    return this.content;\n  }\n  set proofs(proofs) {\n    this._proofs = proofs;\n    this.tags = this.tags.filter((tag) => tag[0] !== \"proof\");\n    for (const proof of proofs) {\n      this.tags.push([\"proof\", JSON.stringify(proof)]);\n    }\n  }\n  get proofs() {\n    return this._proofs;\n  }\n  get rawP2pk() {\n    const firstProof = this.proofs[0];\n    try {\n      const secret = JSON.parse(firstProof.secret);\n      let payload;\n      if (typeof secret === \"string\") {\n        payload = JSON.parse(secret);\n        this.debug(\"stringified payload\", firstProof.secret);\n      } else if (typeof secret === \"object\") {\n        payload = secret;\n      }\n      if (Array.isArray(payload) && payload[0] === \"P2PK\" && payload.length > 1 && typeof payload[1] === \"object\" && payload[1] !== null) {\n        return payload[1].data;\n      }\n      if (typeof payload === \"object\" && payload !== null && typeof payload[1]?.data === \"string\") {\n        return payload[1].data;\n      }\n    } catch (e) {\n      this.debug(\"error parsing p2pk pubkey\", e, this.proofs[0]);\n    }\n    return void 0;\n  }\n  /**\n   * Gets the p2pk pubkey that is embedded in the first proof.\n   *\n   * Note that this returns a nostr pubkey, not a cashu pubkey (no \"02\" prefix)\n   */\n  get p2pk() {\n    const rawP2pk = this.rawP2pk;\n    if (!rawP2pk) return;\n    return rawP2pk.startsWith(\"02\") ? rawP2pk.slice(2) : rawP2pk;\n  }\n  /**\n   * Get the mint where this nutzap proofs exist\n   */\n  get mint() {\n    return this.tagValue(\"u\");\n  }\n  set mint(value) {\n    this.replaceTag([\"u\", value]);\n  }\n  get unit() {\n    let _unit = this.tagValue(\"unit\") ?? \"sat\";\n    if (_unit?.startsWith(\"msat\")) _unit = \"sat\";\n    return _unit;\n  }\n  set unit(value) {\n    this.removeTag(\"unit\");\n    if (value?.startsWith(\"msat\")) throw new Error(\"msat is not allowed, use sat denomination instead\");\n    if (value) this.tag([\"unit\", value]);\n  }\n  get amount() {\n    const amount = this.proofs.reduce((total, proof) => total + proof.amount, 0);\n    return amount;\n  }\n  sender = this.author;\n  /**\n   * Set the target of the nutzap\n   * @param target The target of the nutzap (a user or an event)\n   */\n  set target(target) {\n    this.tags = this.tags.filter((t) => t[0] !== \"p\");\n    if (target instanceof NDKEvent) {\n      this.tags.push(target.tagReference());\n    }\n  }\n  set recipientPubkey(pubkey) {\n    this.removeTag(\"p\");\n    this.tag([\"p\", pubkey]);\n  }\n  get recipientPubkey() {\n    return this.tagValue(\"p\");\n  }\n  get recipient() {\n    const pubkey = this.recipientPubkey;\n    if (this.ndk) return this.ndk.getUser({ pubkey });\n    return new NDKUser({ pubkey });\n  }\n  async toNostrEvent() {\n    if (this.unit === \"msat\") {\n      this.unit = \"sat\";\n    }\n    this.removeTag(\"amount\");\n    this.tags.push([\"amount\", this.amount.toString()]);\n    const event = await super.toNostrEvent();\n    event.content = this.comment;\n    return event;\n  }\n  /**\n   * Validates that the nutzap conforms to NIP-61\n   */\n  get isValid() {\n    let eTagCount = 0;\n    let pTagCount = 0;\n    let mintTagCount = 0;\n    for (const tag of this.tags) {\n      if (tag[0] === \"e\") eTagCount++;\n      if (tag[0] === \"p\") pTagCount++;\n      if (tag[0] === \"u\") mintTagCount++;\n    }\n    return (\n      // exactly one recipient and mint\n      pTagCount === 1 && mintTagCount === 1 && // must have at most one e tag\n      eTagCount <= 1 && // must have at least one proof\n      this.proofs.length > 0\n    );\n  }\n};\nfunction proofP2pk(proof) {\n  try {\n    const secret = JSON.parse(proof.secret);\n    let payload = {};\n    if (typeof secret === \"string\") {\n      payload = JSON.parse(secret);\n    } else if (typeof secret === \"object\") {\n      payload = secret;\n    }\n    const isP2PKLocked = payload[0] === \"P2PK\" && payload[1]?.data;\n    if (isP2PKLocked) {\n      return payload[1].data;\n    }\n  } catch (e) {\n    console.error(\"error parsing p2pk pubkey\", e, proof);\n  }\n}\nfunction proofP2pkNostr(proof) {\n  const p2pk = proofP2pk(proof);\n  if (!p2pk) return;\n  if (p2pk.startsWith(\"02\") && p2pk.length === 66) return p2pk.slice(2);\n  return p2pk;\n}\nfunction cashuPubkeyToNostrPubkey(cashuPubkey) {\n  if (cashuPubkey.startsWith(\"02\") && cashuPubkey.length === 66) return cashuPubkey.slice(2);\n  return void 0;\n}\n\n// src/events/kinds/simple-group/member-list.ts\nvar NDKSimpleGroupMemberList = class _NDKSimpleGroupMemberList extends NDKEvent {\n  relaySet;\n  memberSet = /* @__PURE__ */ new Set();\n  static kind = 39002 /* GroupMembers */;\n  static kinds = [39002 /* GroupMembers */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 39002 /* GroupMembers */;\n    this.memberSet = new Set(this.members);\n  }\n  static from(event) {\n    return new _NDKSimpleGroupMemberList(event.ndk, event);\n  }\n  get members() {\n    return this.getMatchingTags(\"p\").map((tag) => tag[1]);\n  }\n  hasMember(member) {\n    return this.memberSet.has(member);\n  }\n  async publish(relaySet, timeoutMs, requiredRelayCount) {\n    relaySet ??= this.relaySet;\n    return super.publishReplaceable(relaySet, timeoutMs, requiredRelayCount);\n  }\n};\n\n// src/events/kinds/simple-group/metadata.ts\nvar NDKSimpleGroupMetadata = class _NDKSimpleGroupMetadata extends NDKEvent {\n  static kind = 39e3 /* GroupMetadata */;\n  static kinds = [39e3 /* GroupMetadata */];\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 39e3 /* GroupMetadata */;\n  }\n  static from(event) {\n    return new _NDKSimpleGroupMetadata(event.ndk, event);\n  }\n  get name() {\n    return this.tagValue(\"name\");\n  }\n  get picture() {\n    return this.tagValue(\"picture\");\n  }\n  get about() {\n    return this.tagValue(\"about\");\n  }\n  get scope() {\n    if (this.getMatchingTags(\"public\").length > 0) return \"public\";\n    if (this.getMatchingTags(\"public\").length > 0) return \"private\";\n    return void 0;\n  }\n  set scope(scope) {\n    this.removeTag(\"public\");\n    this.removeTag(\"private\");\n    if (scope === \"public\") {\n      this.tags.push([\"public\", \"\"]);\n    } else if (scope === \"private\") {\n      this.tags.push([\"private\", \"\"]);\n    }\n  }\n  get access() {\n    if (this.getMatchingTags(\"open\").length > 0) return \"open\";\n    if (this.getMatchingTags(\"closed\").length > 0) return \"closed\";\n    return void 0;\n  }\n  set access(access) {\n    this.removeTag(\"open\");\n    this.removeTag(\"closed\");\n    if (access === \"open\") {\n      this.tags.push([\"open\", \"\"]);\n    } else if (access === \"closed\") {\n      this.tags.push([\"closed\", \"\"]);\n    }\n  }\n};\n\n// src/events/kinds/story.ts\nvar NDKStoryStickerType = /* @__PURE__ */ ((NDKStoryStickerType2) => {\n  NDKStoryStickerType2[\"Pubkey\"] = \"pubkey\";\n  NDKStoryStickerType2[\"Event\"] = \"event\";\n  NDKStoryStickerType2[\"Prompt\"] = \"prompt\";\n  NDKStoryStickerType2[\"Text\"] = \"text\";\n  NDKStoryStickerType2[\"Countdown\"] = \"countdown\";\n  return NDKStoryStickerType2;\n})(NDKStoryStickerType || {});\nfunction strToPosition(positionStr) {\n  const [x, y] = positionStr.split(\",\").map(Number);\n  return { x, y };\n}\nfunction strToDimension(dimensionStr) {\n  const [width, height] = dimensionStr.split(\"x\").map(Number);\n  return { width, height };\n}\nvar NDKStorySticker = class _NDKStorySticker {\n  static Text = \"text\" /* Text */;\n  static Pubkey = \"pubkey\" /* Pubkey */;\n  static Event = \"event\" /* Event */;\n  static Prompt = \"prompt\" /* Prompt */;\n  static Countdown = \"countdown\" /* Countdown */;\n  type;\n  value;\n  position;\n  dimension;\n  properties;\n  constructor(arg) {\n    if (Array.isArray(arg)) {\n      const tag = arg;\n      if (tag[0] !== \"sticker\" || tag.length < 5) {\n        throw new Error(\"Invalid sticker tag\");\n      }\n      this.type = tag[1];\n      this.value = tag[2];\n      this.position = strToPosition(tag[3]);\n      this.dimension = strToDimension(tag[4]);\n      const props = {};\n      for (let i = 5; i < tag.length; i++) {\n        const [key, ...rest] = tag[i].split(\" \");\n        props[key] = rest.join(\" \");\n      }\n      if (Object.keys(props).length > 0) {\n        this.properties = props;\n      }\n    } else {\n      this.type = arg;\n      this.value = void 0;\n      this.position = { x: 0, y: 0 };\n      this.dimension = { width: 0, height: 0 };\n    }\n  }\n  static fromTag(tag) {\n    try {\n      return new _NDKStorySticker(tag);\n    } catch {\n      return null;\n    }\n  }\n  get style() {\n    return this.properties?.style;\n  }\n  set style(style) {\n    if (style) this.properties = { ...this.properties, style };\n    else delete this.properties?.style;\n  }\n  get rotation() {\n    return this.properties?.rot ? Number.parseFloat(this.properties.rot) : void 0;\n  }\n  set rotation(rotation) {\n    if (rotation !== void 0) {\n      this.properties = { ...this.properties, rot: rotation.toString() };\n    } else {\n      delete this.properties?.rot;\n    }\n  }\n  /**\n   * Checks if the sticker is valid.\n   *\n   * @returns {boolean} - True if the sticker is valid, false otherwise.\n   */\n  get isValid() {\n    return this.hasValidDimensions() && this.hasValidPosition();\n  }\n  hasValidDimensions = () => {\n    return typeof this.dimension.width === \"number\" && typeof this.dimension.height === \"number\" && !Number.isNaN(this.dimension.width) && !Number.isNaN(this.dimension.height);\n  };\n  hasValidPosition = () => {\n    return typeof this.position.x === \"number\" && typeof this.position.y === \"number\" && !Number.isNaN(this.position.x) && !Number.isNaN(this.position.y);\n  };\n  toTag() {\n    if (!this.isValid) {\n      const errors = [\n        !this.hasValidDimensions() ? \"dimensions is invalid\" : void 0,\n        !this.hasValidPosition() ? \"position is invalid\" : void 0\n      ].filter(Boolean);\n      throw new Error(`Invalid sticker: ${errors.join(\", \")}`);\n    }\n    let value;\n    switch (this.type) {\n      case \"event\" /* Event */:\n        value = this.value.tagId();\n        break;\n      case \"pubkey\" /* Pubkey */:\n        value = this.value.pubkey;\n        break;\n      default:\n        value = this.value;\n    }\n    const tag = [\"sticker\", this.type, value, coordinates(this.position), dimension(this.dimension)];\n    if (this.properties) {\n      for (const [key, propValue] of Object.entries(this.properties)) {\n        tag.push(`${key} ${propValue}`);\n      }\n    }\n    return tag;\n  }\n};\nvar NDKStory = class _NDKStory extends NDKEvent {\n  static kind = 23 /* Story */;\n  static kinds = [23 /* Story */];\n  _imeta;\n  _dimensions;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 23 /* Story */;\n    if (rawEvent) {\n      for (const tag of rawEvent.tags) {\n        switch (tag[0]) {\n          case \"imeta\":\n            this._imeta = mapImetaTag(tag);\n            break;\n          case \"dim\":\n            this.dimensions = strToDimension(tag[1]);\n            break;\n        }\n      }\n    }\n  }\n  /**\n   * Creates a NDKStory from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKStory from.\n   * @returns NDKStory\n   */\n  static from(event) {\n    return new _NDKStory(event.ndk, event);\n  }\n  /**\n   * Checks if the story is valid (has exactly one imeta tag).\n   */\n  get isValid() {\n    return !!this.imeta;\n  }\n  /**\n   * Gets the first imeta tag (there should only be one).\n   */\n  get imeta() {\n    return this._imeta;\n  }\n  /**\n   * Sets a single imeta tag, replacing any existing ones.\n   */\n  set imeta(tag) {\n    this._imeta = tag;\n    this.tags = this.tags.filter((t) => t[0] !== \"imeta\");\n    if (tag) {\n      this.tags.push(imetaTagToTag(tag));\n    }\n  }\n  /**\n   * Getter for the story dimensions.\n   *\n   * @returns {NDKStoryDimension | undefined} - The story dimensions if available, otherwise undefined.\n   */\n  get dimensions() {\n    const dimTag = this.tagValue(\"dim\");\n    if (!dimTag) return void 0;\n    return strToDimension(dimTag);\n  }\n  /**\n   * Setter for the story dimensions.\n   *\n   * @param {NDKStoryDimension | undefined} dimensions - The dimensions to set for the story.\n   */\n  set dimensions(dimensions) {\n    this.removeTag(\"dim\");\n    if (dimensions) {\n      this.tags.push([\"dim\", `${dimensions.width}x${dimensions.height}`]);\n    }\n  }\n  /**\n   * Getter for the story duration.\n   *\n   * @returns {number | undefined} - The story duration in seconds if available, otherwise undefined.\n   */\n  get duration() {\n    const durTag = this.tagValue(\"dur\");\n    if (!durTag) return void 0;\n    return Number.parseInt(durTag);\n  }\n  /**\n   * Setter for the story duration.\n   *\n   * @param {number | undefined} duration - The duration in seconds to set for the story.\n   */\n  set duration(duration) {\n    this.removeTag(\"dur\");\n    if (duration !== void 0) {\n      this.tags.push([\"dur\", duration.toString()]);\n    }\n  }\n  /**\n   * Gets all stickers from the story.\n   *\n   * @returns {NDKStorySticker[]} - Array of stickers in the story.\n   */\n  get stickers() {\n    const stickers = [];\n    for (const tag of this.tags) {\n      if (tag[0] !== \"sticker\" || tag.length < 5) continue;\n      const sticker = NDKStorySticker.fromTag(tag);\n      if (sticker) stickers.push(sticker);\n    }\n    return stickers;\n  }\n  /**\n   * Adds a sticker to the story.\n   *\n   * @param {NDKStorySticker|StorySticker} sticker - The sticker to add.\n   */\n  addSticker(sticker) {\n    let stickerToAdd;\n    if (sticker instanceof NDKStorySticker) {\n      stickerToAdd = sticker;\n    } else {\n      const tag = [\n        \"sticker\",\n        sticker.type,\n        typeof sticker.value === \"string\" ? sticker.value : \"\",\n        coordinates(sticker.position),\n        dimension(sticker.dimension)\n      ];\n      if (sticker.properties) {\n        for (const [key, value] of Object.entries(sticker.properties)) {\n          tag.push(`${key} ${value}`);\n        }\n      }\n      stickerToAdd = new NDKStorySticker(tag);\n      stickerToAdd.value = sticker.value;\n    }\n    if (stickerToAdd.type === \"pubkey\" /* Pubkey */) {\n      this.tag(stickerToAdd.value);\n    } else if (stickerToAdd.type === \"event\" /* Event */) {\n      this.tag(stickerToAdd.value);\n    }\n    this.tags.push(stickerToAdd.toTag());\n  }\n  /**\n   * Removes a sticker from the story.\n   *\n   * @param {number} index - The index of the sticker to remove.\n   */\n  removeSticker(index) {\n    const stickers = this.stickers;\n    if (index < 0 || index >= stickers.length) return;\n    let stickerCount = 0;\n    for (let i = 0; i < this.tags.length; i++) {\n      if (this.tags[i][0] === \"sticker\") {\n        if (stickerCount === index) {\n          this.tags.splice(i, 1);\n          break;\n        }\n        stickerCount++;\n      }\n    }\n  }\n};\nvar coordinates = (position) => `${position.x},${position.y}`;\nvar dimension = (dimension2) => `${dimension2.width}x${dimension2.height}`;\n\n// src/events/kinds/subscriptions/amount.ts\nvar possibleIntervalFrequencies = [\n  \"daily\",\n  \"weekly\",\n  \"monthly\",\n  \"quarterly\",\n  \"yearly\"\n];\nfunction calculateTermDurationInSeconds(term) {\n  switch (term) {\n    case \"daily\":\n      return 24 * 60 * 60;\n    case \"weekly\":\n      return 7 * 24 * 60 * 60;\n    case \"monthly\":\n      return 30 * 24 * 60 * 60;\n    case \"quarterly\":\n      return 3 * 30 * 24 * 60 * 60;\n    case \"yearly\":\n      return 365 * 24 * 60 * 60;\n  }\n}\nfunction newAmount(amount, currency, term) {\n  return [\"amount\", amount.toString(), currency, term];\n}\nfunction parseTagToSubscriptionAmount(tag) {\n  const amount = Number.parseInt(tag[1]);\n  if (Number.isNaN(amount) || amount === void 0 || amount === null || amount <= 0) return void 0;\n  const currency = tag[2];\n  if (currency === void 0 || currency === \"\") return void 0;\n  const term = tag[3];\n  if (term === void 0) return void 0;\n  if (!possibleIntervalFrequencies.includes(term)) return void 0;\n  return {\n    amount,\n    currency,\n    term\n  };\n}\n\n// src/events/kinds/subscriptions/tier.ts\nvar NDKSubscriptionTier = class _NDKSubscriptionTier extends NDKArticle {\n  static kind = 37001 /* SubscriptionTier */;\n  static kinds = [37001 /* SubscriptionTier */];\n  constructor(ndk, rawEvent) {\n    const k = rawEvent?.kind ?? 37001 /* SubscriptionTier */;\n    super(ndk, rawEvent);\n    this.kind = k;\n  }\n  /**\n   * Creates a new NDKSubscriptionTier from an event\n   * @param event\n   * @returns NDKSubscriptionTier\n   */\n  static from(event) {\n    return new _NDKSubscriptionTier(event.ndk, event);\n  }\n  /**\n   * Returns perks for this tier\n   */\n  get perks() {\n    return this.getMatchingTags(\"perk\").map((tag) => tag[1]).filter((perk) => perk !== void 0);\n  }\n  /**\n   * Adds a perk to this tier\n   */\n  addPerk(perk) {\n    this.tags.push([\"perk\", perk]);\n  }\n  /**\n   * Returns the amount for this tier\n   */\n  get amounts() {\n    return this.getMatchingTags(\"amount\").map((tag) => parseTagToSubscriptionAmount(tag)).filter((a) => a !== void 0);\n  }\n  /**\n   * Adds an amount to this tier\n   * @param amount Amount in the smallest unit of the currency (e.g. cents, msats)\n   * @param currency Currency code. Use msat for millisatoshis\n   * @param term One of daily, weekly, monthly, quarterly, yearly\n   */\n  addAmount(amount, currency, term) {\n    this.tags.push(newAmount(amount, currency, term));\n  }\n  /**\n   * Sets a relay where content related to this tier can be found\n   * @param relayUrl URL of the relay\n   */\n  set relayUrl(relayUrl) {\n    this.tags.push([\"r\", relayUrl]);\n  }\n  /**\n   * Returns the relay URLs for this tier\n   */\n  get relayUrls() {\n    return this.getMatchingTags(\"r\").map((tag) => tag[1]).filter((relay) => relay !== void 0);\n  }\n  /**\n   * Gets the verifier pubkey for this tier. This is the pubkey that will generate\n   * subscription payment receipts\n   */\n  get verifierPubkey() {\n    return this.tagValue(\"p\");\n  }\n  /**\n   * Sets the verifier pubkey for this tier.\n   */\n  set verifierPubkey(pubkey) {\n    this.removeTag(\"p\");\n    if (pubkey) this.tags.push([\"p\", pubkey]);\n  }\n  /**\n   * Checks if this tier is valid\n   */\n  get isValid() {\n    return this.title !== void 0 && // Must have a title\n    this.amounts.length > 0;\n  }\n};\n\n// src/events/kinds/video.ts\nvar NDKVideo = class _NDKVideo extends NDKEvent {\n  static kind = 21 /* Video */;\n  static kinds = [34235 /* HorizontalVideo */, 34236 /* VerticalVideo */, 22 /* ShortVideo */, 21 /* Video */];\n  _imetas;\n  /**\n   * Creates a NDKArticle from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKArticle from.\n   * @returns NDKArticle\n   */\n  static from(event) {\n    return new _NDKVideo(event.ndk, event.rawEvent());\n  }\n  /**\n   * Getter for the article title.\n   *\n   * @returns {string | undefined} - The article title if available, otherwise undefined.\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the article title.\n   *\n   * @param {string | undefined} title - The title to set for the article.\n   */\n  set title(title) {\n    this.removeTag(\"title\");\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Getter for the article thumbnail.\n   *\n   * @returns {string | undefined} - The article thumbnail if available, otherwise undefined.\n   */\n  get thumbnail() {\n    let thumbnail;\n    if (this.imetas && this.imetas.length > 0) {\n      thumbnail = this.imetas[0].image?.[0];\n    }\n    return thumbnail ?? this.tagValue(\"thumb\");\n  }\n  get imetas() {\n    if (this._imetas) return this._imetas;\n    this._imetas = this.tags.filter((tag) => tag[0] === \"imeta\").map(mapImetaTag);\n    return this._imetas;\n  }\n  set imetas(tags) {\n    this._imetas = tags;\n    this.tags = this.tags.filter((tag) => tag[0] !== \"imeta\");\n    this.tags.push(...tags.map(imetaTagToTag));\n  }\n  get url() {\n    if (this.imetas && this.imetas.length > 0) {\n      return this.imetas[0].url;\n    }\n    return this.tagValue(\"url\");\n  }\n  /**\n   * Getter for the article's publication timestamp.\n   *\n   * @returns {number | undefined} - The Unix timestamp of when the article was published or undefined.\n   */\n  get published_at() {\n    const tag = this.tagValue(\"published_at\");\n    if (tag) {\n      return Number.parseInt(tag);\n    }\n    return void 0;\n  }\n  /**\n   * Generates content tags for the article.\n   *\n   * This method first checks and sets the publication date if not available,\n   * and then generates content tags based on the base NDKEvent class.\n   *\n   * @returns {ContentTag} - The generated content tags.\n   */\n  async generateTags() {\n    super.generateTags();\n    if (!this.kind) {\n      if (this.imetas?.[0]?.dim) {\n        const [width, height] = this.imetas[0].dim.split(\"x\");\n        const isPortrait = width && height && Number.parseInt(width) < Number.parseInt(height);\n        const isShort = this.duration && this.duration < 120;\n        if (isShort && isPortrait) this.kind = 22 /* ShortVideo */;\n        else this.kind = 21 /* Video */;\n      }\n    }\n    return super.generateTags();\n  }\n  get duration() {\n    const tag = this.tagValue(\"duration\");\n    if (tag) {\n      return Number.parseInt(tag);\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the video's duration\n   *\n   * @param {number | undefined} duration - The duration to set for the video (in seconds)\n   */\n  set duration(dur) {\n    this.removeTag(\"duration\");\n    if (dur !== void 0) {\n      this.tags.push([\"duration\", Math.floor(dur).toString()]);\n    }\n  }\n};\n\n// src/events/kinds/wiki.ts\nvar NDKWiki = class _NDKWiki extends NDKArticle {\n  static kind = 30818 /* Wiki */;\n  static kinds = [30818 /* Wiki */];\n  static from(event) {\n    return new _NDKWiki(event.ndk, event.rawEvent());\n  }\n  get isDefered() {\n    return this.hasTag(\"a\", \"defer\");\n  }\n  get deferedId() {\n    return this.tagValue(\"a\", \"defer\");\n  }\n  /**\n   * Defers the author's wiki event to another wiki event.\n   *\n   * Wiki-events can tag other wiki-events with a `defer` marker to indicate that it considers someone else's entry as a \"better\" version of itself. If using a `defer` marker both `a` and `e` tags SHOULD be used.\n   *\n   * @example\n   * myWiki.defer = betterWikiEntryOnTheSameTopic;\n   * myWiki.publishReplaceable()\n   */\n  set defer(deferedTo) {\n    this.removeTag(\"a\", \"defer\");\n    this.tag(deferedTo, \"defer\");\n  }\n};\nvar NDKWikiMergeRequest = class _NDKWikiMergeRequest extends NDKEvent {\n  static kind = 818 /* WikiMergeRequest */;\n  static kinds = [818 /* WikiMergeRequest */];\n  static from(event) {\n    return new _NDKWikiMergeRequest(event.ndk, event.rawEvent());\n  }\n  /**\n   * The target ID (<kind:pubkey:d-tag>) of the wiki event to merge into.\n   */\n  get targetId() {\n    return this.tagValue(\"a\");\n  }\n  /**\n   * Sets the target ID (<kind:pubkey:d-tag>) of the wiki event to merge into.\n   */\n  set target(targetEvent) {\n    this.tags = this.tags.filter((tag) => {\n      if (tag[0] === \"a\") return true;\n      if (tag[0] === \"e\" && tag[3] !== \"source\") return true;\n    });\n    this.tag(targetEvent);\n  }\n  /**\n   * The source ID of the wiki event to merge from.\n   */\n  get sourceId() {\n    return this.tagValue(\"e\", \"source\");\n  }\n  /**\n   * Sets the event we are asking to get merged into the target.\n   */\n  set source(sourceEvent) {\n    this.removeTag(\"e\", \"source\");\n    this.tag(sourceEvent, \"source\", false, \"e\");\n  }\n};\n\n// src/events/wrap.ts\nfunction wrapEvent(event) {\n  const eventWrappingMap = /* @__PURE__ */ new Map();\n  for (const klass2 of [\n    NDKImage,\n    NDKVideo,\n    NDKCashuMintList,\n    NDKArticle,\n    NDKHighlight,\n    NDKWiki,\n    NDKNutzap,\n    NDKSimpleGroupMemberList,\n    NDKSimpleGroupMetadata,\n    NDKSubscriptionTier,\n    NDKCashuToken,\n    NDKList,\n    NDKStory\n  ]) {\n    for (const kind of klass2.kinds) {\n      eventWrappingMap.set(kind, klass2);\n    }\n  }\n  const klass = eventWrappingMap.get(event.kind);\n  if (klass) return klass.from(event);\n  return event;\n}\n\n// src/subscription/utils.ts\n\nvar MAX_SUBID_LENGTH = 20;\nfunction queryFullyFilled(subscription) {\n  if (filterIncludesIds(subscription.filter)) {\n    if (resultHasAllRequestedIds(subscription)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction compareFilter(filter1, filter2) {\n  if (Object.keys(filter1).length !== Object.keys(filter2).length) return false;\n  for (const [key, value] of Object.entries(filter1)) {\n    const valuesInFilter2 = filter2[key];\n    if (!valuesInFilter2) return false;\n    if (Array.isArray(value) && Array.isArray(valuesInFilter2)) {\n      const v = value;\n      for (const valueInFilter2 of valuesInFilter2) {\n        const val = valueInFilter2;\n        if (!v.includes(val)) {\n          return false;\n        }\n      }\n    } else {\n      if (valuesInFilter2 !== value) return false;\n    }\n  }\n  return true;\n}\nfunction filterIncludesIds(filter) {\n  return !!filter.ids;\n}\nfunction resultHasAllRequestedIds(subscription) {\n  const ids = subscription.filter.ids;\n  return !!ids && ids.length === subscription.eventFirstSeen.size;\n}\nfunction generateSubId(subscriptions, filters) {\n  const subIds = subscriptions.map((sub) => sub.subId).filter(Boolean);\n  const subIdParts = [];\n  const filterNonKindKeys = /* @__PURE__ */ new Set();\n  const filterKinds = /* @__PURE__ */ new Set();\n  if (subIds.length > 0) {\n    subIdParts.push(Array.from(new Set(subIds)).join(\",\"));\n  } else {\n    for (const filter of filters) {\n      for (const key of Object.keys(filter)) {\n        if (key === \"kinds\") {\n          filter.kinds?.forEach((k) => filterKinds.add(k));\n        } else {\n          filterNonKindKeys.add(key);\n        }\n      }\n    }\n    if (filterKinds.size > 0) {\n      subIdParts.push(`kinds:${Array.from(filterKinds).join(\",\")}`);\n    }\n    if (filterNonKindKeys.size > 0) {\n      subIdParts.push(Array.from(filterNonKindKeys).join(\",\"));\n    }\n  }\n  let subId = subIdParts.join(\"-\");\n  if (subId.length > MAX_SUBID_LENGTH) subId = subId.substring(0, MAX_SUBID_LENGTH);\n  subId += `-${Math.floor(Math.random() * 999).toString()}`;\n  return subId;\n}\nfunction filterForEventsTaggingId(id) {\n  try {\n    const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(id);\n    switch (decoded.type) {\n      case \"naddr\":\n        return {\n          \"#a\": [`${decoded.data.kind}:${decoded.data.pubkey}:${decoded.data.identifier}`]\n        };\n      case \"nevent\":\n        return { \"#e\": [decoded.data.id] };\n      case \"note\":\n        return { \"#e\": [decoded.data] };\n      case \"nprofile\":\n        return { \"#p\": [decoded.data.pubkey] };\n      case \"npub\":\n        return { \"#p\": [decoded.data] };\n    }\n  } catch {\n  }\n}\nfunction filterAndRelaySetFromBech32(beche2, ndk) {\n  const filter = filterFromId(beche2);\n  const relays = relaysFromBech32(beche2, ndk);\n  if (relays.length === 0) return { filter };\n  return {\n    filter,\n    relaySet: new NDKRelaySet(new Set(relays), ndk)\n  };\n}\nfunction filterFromId(id) {\n  let decoded;\n  if (id.match(NIP33_A_REGEX)) {\n    const [kind, pubkey, identifier] = id.split(\":\");\n    const filter = {\n      authors: [pubkey],\n      kinds: [Number.parseInt(kind)]\n    };\n    if (identifier) {\n      filter[\"#d\"] = [identifier];\n    }\n    return filter;\n  }\n  if (id.match(BECH32_REGEX)) {\n    try {\n      decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(id);\n      switch (decoded.type) {\n        case \"nevent\": {\n          const filter = { ids: [decoded.data.id] };\n          if (decoded.data.author) filter.authors = [decoded.data.author];\n          if (decoded.data.kind) filter.kinds = [decoded.data.kind];\n          return filter;\n        }\n        case \"note\":\n          return { ids: [decoded.data] };\n        case \"naddr\": {\n          const filter = {\n            authors: [decoded.data.pubkey],\n            kinds: [decoded.data.kind]\n          };\n          if (decoded.data.identifier) filter[\"#d\"] = [decoded.data.identifier];\n          return filter;\n        }\n      }\n    } catch (e) {\n      console.error(\"Error decoding\", id, e);\n    }\n  }\n  return { ids: [id] };\n}\nfunction isNip33AValue(value) {\n  return value.match(NIP33_A_REGEX) !== null;\n}\nvar NIP33_A_REGEX = /^(\\d+):([0-9A-Fa-f]+)(?::(.*))?$/;\nvar BECH32_REGEX = /^n(event|ote|profile|pub|addr)1[\\d\\w]+$/;\nfunction relaysFromBech32(bech322, ndk) {\n  try {\n    const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(bech322);\n    if ([\"naddr\", \"nevent\"].includes(decoded?.type)) {\n      const data = decoded.data;\n      if (data?.relays) {\n        return data.relays.map((r) => new NDKRelay(r, ndk.relayAuthDefaultPolicy, ndk));\n      }\n    }\n  } catch (_e) {\n  }\n  return [];\n}\n\n// src/subscription/index.ts\nvar NDKSubscriptionCacheUsage = /* @__PURE__ */ ((NDKSubscriptionCacheUsage2) => {\n  NDKSubscriptionCacheUsage2[\"ONLY_CACHE\"] = \"ONLY_CACHE\";\n  NDKSubscriptionCacheUsage2[\"CACHE_FIRST\"] = \"CACHE_FIRST\";\n  NDKSubscriptionCacheUsage2[\"PARALLEL\"] = \"PARALLEL\";\n  NDKSubscriptionCacheUsage2[\"ONLY_RELAY\"] = \"ONLY_RELAY\";\n  return NDKSubscriptionCacheUsage2;\n})(NDKSubscriptionCacheUsage || {});\nvar defaultOpts = {\n  closeOnEose: false,\n  cacheUsage: \"CACHE_FIRST\" /* CACHE_FIRST */,\n  dontSaveToCache: false,\n  groupable: true,\n  groupableDelay: 100,\n  groupableDelayType: \"at-most\",\n  cacheUnconstrainFilter: [\"limit\", \"since\", \"until\"]\n};\nvar NDKSubscription = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  subId;\n  filters;\n  opts;\n  pool;\n  skipVerification = false;\n  skipValidation = false;\n  /**\n   * Tracks the filters as they are executed on each relay\n   */\n  relayFilters;\n  relaySet;\n  ndk;\n  debug;\n  /**\n   * Events that have been seen by the subscription, with the time they were first seen.\n   */\n  eventFirstSeen = /* @__PURE__ */ new Map();\n  /**\n   * Relays that have sent an EOSE.\n   */\n  eosesSeen = /* @__PURE__ */ new Set();\n  /**\n   * The time the last event was received by the subscription.\n   * This is used to calculate when EOSE should be emitted.\n   */\n  lastEventReceivedAt;\n  /**\n   * The most recent event timestamp from cache results.\n   * This is used for addSinceFromCache functionality.\n   */\n  mostRecentCacheEventTimestamp;\n  internalId;\n  /**\n   * Whether the subscription should close when all relays have reached the end of the event stream.\n   */\n  closeOnEose;\n  /**\n   * Pool monitor callback\n   */\n  poolMonitor;\n  skipOptimisticPublishEvent = false;\n  /**\n   * Filters to remove when querying the cache.\n   */\n  cacheUnconstrainFilter;\n  constructor(ndk, filters, opts, subId) {\n    super();\n    this.ndk = ndk;\n    this.opts = { ...defaultOpts, ...opts || {} };\n    this.pool = this.opts.pool || ndk.pool;\n    this.filters = Array.isArray(filters) ? filters : [filters];\n    this.subId = subId || this.opts.subId;\n    this.internalId = Math.random().toString(36).substring(7);\n    this.debug = ndk.debug.extend(`subscription[${this.opts.subId ?? this.internalId}]`);\n    if (this.opts.relaySet) {\n      this.relaySet = this.opts.relaySet;\n    } else if (this.opts.relayUrls) {\n      this.relaySet = NDKRelaySet.fromRelayUrls(this.opts.relayUrls, this.ndk);\n    }\n    this.skipVerification = this.opts.skipVerification || false;\n    this.skipValidation = this.opts.skipValidation || false;\n    this.closeOnEose = this.opts.closeOnEose || false;\n    this.skipOptimisticPublishEvent = this.opts.skipOptimisticPublishEvent || false;\n    this.cacheUnconstrainFilter = this.opts.cacheUnconstrainFilter;\n  }\n  /**\n   * Returns the relays that have not yet sent an EOSE.\n   */\n  relaysMissingEose() {\n    if (!this.relayFilters) return [];\n    const relaysMissingEose = Array.from(this.relayFilters?.keys()).filter(\n      (url) => !this.eosesSeen.has(this.pool.getRelay(url, false, false))\n    );\n    return relaysMissingEose;\n  }\n  /**\n   * Provides access to the first filter of the subscription for\n   * backwards compatibility.\n   */\n  get filter() {\n    return this.filters[0];\n  }\n  get groupableDelay() {\n    if (!this.isGroupable()) return void 0;\n    return this.opts?.groupableDelay;\n  }\n  get groupableDelayType() {\n    return this.opts?.groupableDelayType || \"at-most\";\n  }\n  isGroupable() {\n    return this.opts?.groupable || false;\n  }\n  shouldQueryCache() {\n    if (this.opts.addSinceFromCache) return true;\n    if (this.opts?.cacheUsage === \"ONLY_RELAY\" /* ONLY_RELAY */) return false;\n    const hasNonEphemeralKind = this.filters.some((f) => f.kinds?.some((k) => kindIsEphemeral(k)));\n    if (hasNonEphemeralKind) return true;\n    return true;\n  }\n  shouldQueryRelays() {\n    return this.opts?.cacheUsage !== \"ONLY_CACHE\" /* ONLY_CACHE */;\n  }\n  shouldWaitForCache() {\n    if (this.opts.addSinceFromCache) return true;\n    return (\n      // Must want to close on EOSE; subscriptions\n      // that want to receive further updates must\n      // always hit the relay\n      !!this.opts.closeOnEose && // Cache adapter must claim to be fast\n      !!this.ndk.cacheAdapter?.locking && // If explicitly told to run in parallel, then\n      // we should not wait for the cache\n      this.opts.cacheUsage !== \"PARALLEL\" /* PARALLEL */\n    );\n  }\n  /**\n   * Start the subscription. This is the main method that should be called\n   * after creating a subscription.\n   *\n   * @param emitCachedEvents - Whether to emit events coming from a synchronous cache\n   *\n   * When using a synchronous cache, the events will be returned immediately\n   * by this function. If you will use those returned events, you should\n   * set emitCachedEvents to false to prevent seeing them as duplicate events.\n   */\n  start(emitCachedEvents = true) {\n    let cacheResult;\n    const updateStateFromCacheResults = (events) => {\n      if (emitCachedEvents) {\n        for (const event of events) {\n          if (!this.mostRecentCacheEventTimestamp || event.created_at > this.mostRecentCacheEventTimestamp) {\n            this.mostRecentCacheEventTimestamp = event.created_at;\n          }\n          this.eventReceived(event, void 0, true, false);\n        }\n      } else {\n        cacheResult = [];\n        for (const event of events) {\n          if (!this.mostRecentCacheEventTimestamp || event.created_at > this.mostRecentCacheEventTimestamp) {\n            this.mostRecentCacheEventTimestamp = event.created_at;\n          }\n          event.ndk = this.ndk;\n          const e = this.opts.wrap ? wrapEvent(event) : event;\n          if (!e) break;\n          if (e instanceof Promise) {\n            e.then((wrappedEvent) => {\n              this.emitEvent(false, wrappedEvent, void 0, true, false);\n            });\n            break;\n          }\n          this.eventFirstSeen.set(e.id, Date.now());\n          cacheResult.push(e);\n        }\n      }\n    };\n    const loadFromRelays = () => {\n      if (this.shouldQueryRelays()) {\n        this.startWithRelays();\n        this.startPoolMonitor();\n      } else {\n        this.emit(\"eose\", this);\n      }\n    };\n    if (this.shouldQueryCache()) {\n      cacheResult = this.startWithCache();\n      if (cacheResult instanceof Promise) {\n        if (this.shouldWaitForCache()) {\n          cacheResult.then((events) => {\n            updateStateFromCacheResults(events);\n            if (queryFullyFilled(this)) {\n              this.emit(\"eose\", this);\n              return;\n            }\n            loadFromRelays();\n          });\n          return null;\n        }\n        cacheResult.then((events) => {\n          updateStateFromCacheResults(events);\n        });\n        loadFromRelays();\n        return null;\n      }\n      updateStateFromCacheResults(cacheResult);\n      if (queryFullyFilled(this)) {\n        this.emit(\"eose\", this);\n      } else {\n        loadFromRelays();\n      }\n      return cacheResult;\n    }\n    loadFromRelays();\n    return null;\n  }\n  /**\n   * We want to monitor for new relays that are coming online, in case\n   * they should be part of this subscription.\n   */\n  startPoolMonitor() {\n    const _d = this.debug.extend(\"pool-monitor\");\n    this.poolMonitor = (relay) => {\n      if (this.relayFilters?.has(relay.url)) return;\n      const calc = calculateRelaySetsFromFilters(this.ndk, this.filters, this.pool);\n      if (calc.get(relay.url)) {\n        this.relayFilters?.set(relay.url, this.filters);\n        relay.subscribe(this, this.filters);\n      }\n    };\n    this.pool.on(\"relay:connect\", this.poolMonitor);\n  }\n  onStopped;\n  stop() {\n    this.emit(\"close\", this);\n    this.poolMonitor && this.pool.off(\"relay:connect\", this.poolMonitor);\n    this.onStopped?.();\n  }\n  /**\n   * @returns Whether the subscription has an authors filter.\n   */\n  hasAuthorsFilter() {\n    return this.filters.some((f) => f.authors?.length);\n  }\n  startWithCache() {\n    if (this.ndk.cacheAdapter?.query) {\n      return this.ndk.cacheAdapter.query(this);\n    }\n    return [];\n  }\n  /**\n   * Find available relays that should be part of this subscription and execute in them.\n   *\n   * Note that this is executed in addition to using the pool monitor, so even if the relay set\n   * that is computed (i.e. we don't have any relays available), when relays come online, we will\n   * check if we need to execute in them.\n   */\n  startWithRelays() {\n    let filters = this.filters;\n    if (this.opts.addSinceFromCache && this.mostRecentCacheEventTimestamp) {\n      const sinceTimestamp = this.mostRecentCacheEventTimestamp + 1;\n      filters = filters.map((filter) => ({\n        ...filter,\n        since: Math.max(filter.since || 0, sinceTimestamp)\n      }));\n    }\n    if (!this.relaySet || this.relaySet.relays.size === 0) {\n      this.relayFilters = calculateRelaySetsFromFilters(this.ndk, filters, this.pool);\n    } else {\n      this.relayFilters = /* @__PURE__ */ new Map();\n      for (const relay of this.relaySet.relays) {\n        this.relayFilters.set(relay.url, filters);\n      }\n    }\n    for (const [relayUrl, filters2] of this.relayFilters) {\n      const relay = this.pool.getRelay(relayUrl, true, true, filters2);\n      relay.subscribe(this, filters2);\n    }\n  }\n  // EVENT handling\n  /**\n   * Called when an event is received from a relay or the cache\n   * @param event\n   * @param relay\n   * @param fromCache Whether the event was received from the cache\n   * @param optimisticPublish Whether this event is coming from an optimistic publish\n   */\n  eventReceived(event, relay, fromCache = false, optimisticPublish = false) {\n    const eventId = event.id;\n    const eventAlreadySeen = this.eventFirstSeen.has(eventId);\n    let ndkEvent;\n    if (event instanceof NDKEvent) ndkEvent = event;\n    if (!eventAlreadySeen) {\n      ndkEvent ??= new NDKEvent(this.ndk, event);\n      ndkEvent.ndk = this.ndk;\n      ndkEvent.relay = relay;\n      if (!fromCache && !optimisticPublish) {\n        if (!this.skipValidation) {\n          if (!ndkEvent.isValid) {\n            this.debug(\"Event failed validation %s from relay %s\", eventId, relay?.url);\n            return;\n          }\n        }\n        if (relay) {\n          if (relay?.shouldValidateEvent() !== false) {\n            if (!this.skipVerification) {\n              if (!ndkEvent.verifySignature(true) && !this.ndk.asyncSigVerification) {\n                this.debug(\"Event failed signature validation\", event);\n                return;\n              }\n              if (relay) {\n                relay.addValidatedEvent();\n              }\n            }\n          } else {\n            relay.addNonValidatedEvent();\n          }\n        }\n        if (this.ndk.cacheAdapter && !this.opts.dontSaveToCache) {\n          this.ndk.cacheAdapter.setEvent(ndkEvent, this.filters, relay);\n        }\n      }\n      if (!optimisticPublish || this.skipOptimisticPublishEvent !== true) {\n        this.emitEvent(this.opts?.wrap ?? false, ndkEvent, relay, fromCache, optimisticPublish);\n        this.eventFirstSeen.set(eventId, Date.now());\n      }\n    } else {\n      const timeSinceFirstSeen = Date.now() - (this.eventFirstSeen.get(eventId) || 0);\n      this.emit(\"event:dup\", event, relay, timeSinceFirstSeen, this, fromCache, optimisticPublish);\n      if (relay) {\n        const signature = verifiedSignatures.get(eventId);\n        if (signature && typeof signature === \"string\") {\n          if (event.sig === signature) {\n            relay.addValidatedEvent();\n          }\n        }\n      }\n    }\n    this.lastEventReceivedAt = Date.now();\n  }\n  /**\n   * Optionally wraps, sync or async, and emits the event (if one comes back from the wrapper)\n   */\n  emitEvent(wrap, evt, relay, fromCache, optimisticPublish) {\n    const wrapped = wrap ? wrapEvent(evt) : evt;\n    if (wrapped instanceof Promise) {\n      wrapped.then((e) => this.emitEvent(false, e, relay, fromCache, optimisticPublish));\n    } else if (wrapped) {\n      this.emit(\"event\", wrapped, relay, this, fromCache, optimisticPublish);\n    }\n  }\n  closedReceived(relay, reason) {\n    this.emit(\"closed\", relay, reason);\n  }\n  // EOSE handling\n  eoseTimeout;\n  eosed = false;\n  eoseReceived(relay) {\n    this.debug(\"EOSE received from %s\", relay.url);\n    this.eosesSeen.add(relay);\n    let lastEventSeen = this.lastEventReceivedAt ? Date.now() - this.lastEventReceivedAt : void 0;\n    const hasSeenAllEoses = this.eosesSeen.size === this.relayFilters?.size;\n    const queryFilled = queryFullyFilled(this);\n    const performEose = (reason) => {\n      this.debug(\"Performing EOSE: %s %d\", reason, this.eosed);\n      if (this.eosed) return;\n      if (this.eoseTimeout) clearTimeout(this.eoseTimeout);\n      this.emit(\"eose\", this);\n      this.eosed = true;\n      if (this.opts?.closeOnEose) this.stop();\n    };\n    if (queryFilled || hasSeenAllEoses) {\n      performEose(\"query filled or seen all\");\n    } else if (this.relayFilters) {\n      let timeToWaitForNextEose = 1e3;\n      const connectedRelays = new Set(this.pool.connectedRelays().map((r) => r.url));\n      const connectedRelaysWithFilters = Array.from(this.relayFilters.keys()).filter(\n        (url) => connectedRelays.has(url)\n      );\n      if (connectedRelaysWithFilters.length === 0) {\n        this.debug(\n          \"No connected relays, waiting for all relays to connect\",\n          Array.from(this.relayFilters.keys()).join(\", \")\n        );\n        return;\n      }\n      const percentageOfRelaysThatHaveSentEose = this.eosesSeen.size / connectedRelaysWithFilters.length;\n      this.debug(\"Percentage of relays that have sent EOSE\", {\n        subId: this.subId,\n        percentageOfRelaysThatHaveSentEose,\n        seen: this.eosesSeen.size,\n        total: connectedRelaysWithFilters.length\n      });\n      if (this.eosesSeen.size >= 2 && percentageOfRelaysThatHaveSentEose >= 0.5) {\n        timeToWaitForNextEose = timeToWaitForNextEose * (1 - percentageOfRelaysThatHaveSentEose);\n        if (timeToWaitForNextEose === 0) {\n          performEose(\"time to wait was 0\");\n          return;\n        }\n        if (this.eoseTimeout) clearTimeout(this.eoseTimeout);\n        const sendEoseTimeout = () => {\n          lastEventSeen = this.lastEventReceivedAt ? Date.now() - this.lastEventReceivedAt : void 0;\n          if (lastEventSeen !== void 0 && lastEventSeen < 20) {\n            this.eoseTimeout = setTimeout(sendEoseTimeout, timeToWaitForNextEose);\n          } else {\n            performEose(`send eose timeout: ${timeToWaitForNextEose}`);\n          }\n        };\n        this.eoseTimeout = setTimeout(sendEoseTimeout, timeToWaitForNextEose);\n      }\n    }\n  }\n};\nvar kindIsEphemeral = (kind) => kind >= 2e4 && kind < 3e4;\n\n// src/user/follows.ts\nasync function follows(opts, outbox, kind = 3 /* Contacts */) {\n  if (!this.ndk) throw new Error(\"NDK not set\");\n  const contactListEvent = await this.ndk.fetchEvent(\n    { kinds: [kind], authors: [this.pubkey] },\n    opts || { groupable: false }\n  );\n  if (contactListEvent) {\n    const pubkeys = /* @__PURE__ */ new Set();\n    contactListEvent.tags.forEach((tag) => {\n      if (tag[0] === \"p\") pubkeys.add(tag[1]);\n    });\n    if (outbox) {\n      this.ndk?.outboxTracker?.trackUsers(Array.from(pubkeys));\n    }\n    return [...pubkeys].reduce((acc, pubkey) => {\n      const user = new NDKUser({ pubkey });\n      user.ndk = this.ndk;\n      acc.add(user);\n      return acc;\n    }, /* @__PURE__ */ new Set());\n  }\n  return /* @__PURE__ */ new Set();\n}\n\n// src/user/nip05.ts\nvar NIP05_REGEX = /^(?:([\\w.+-]+)@)?([\\w.-]+)$/;\nasync function getNip05For(ndk, fullname, _fetch = fetch, fetchOpts = {}) {\n  return await ndk.queuesNip05.add({\n    id: fullname,\n    func: async () => {\n      if (ndk.cacheAdapter?.loadNip05) {\n        const profile = await ndk.cacheAdapter.loadNip05(fullname);\n        if (profile !== \"missing\") {\n          if (profile) {\n            const user = new NDKUser({\n              pubkey: profile.pubkey,\n              relayUrls: profile.relays,\n              nip46Urls: profile.nip46\n            });\n            user.ndk = ndk;\n            return user;\n          }\n          if (fetchOpts.cache !== \"no-cache\") {\n            return null;\n          }\n        }\n      }\n      const match = fullname.match(NIP05_REGEX);\n      if (!match) return null;\n      const [_, name = \"_\", domain] = match;\n      try {\n        const res = await _fetch(`https://${domain}/.well-known/nostr.json?name=${name}`, fetchOpts);\n        const { names, relays, nip46 } = parseNIP05Result(await res.json());\n        const pubkey = names[name.toLowerCase()];\n        let profile = null;\n        if (pubkey) {\n          profile = { pubkey, relays: relays?.[pubkey], nip46: nip46?.[pubkey] };\n        }\n        if (ndk?.cacheAdapter?.saveNip05) {\n          ndk.cacheAdapter.saveNip05(fullname, profile);\n        }\n        return profile;\n      } catch (_e) {\n        if (ndk?.cacheAdapter?.saveNip05) {\n          ndk?.cacheAdapter.saveNip05(fullname, null);\n        }\n        console.error(\"Failed to fetch NIP05 for\", fullname, _e);\n        return null;\n      }\n    }\n  });\n}\nfunction parseNIP05Result(json) {\n  const result = {\n    names: {}\n  };\n  for (const [name, pubkey] of Object.entries(json.names)) {\n    if (typeof name === \"string\" && typeof pubkey === \"string\") {\n      result.names[name.toLowerCase()] = pubkey;\n    }\n  }\n  if (json.relays) {\n    result.relays = {};\n    for (const [pubkey, relays] of Object.entries(json.relays)) {\n      if (typeof pubkey === \"string\" && Array.isArray(relays)) {\n        result.relays[pubkey] = relays.filter((relay) => typeof relay === \"string\");\n      }\n    }\n  }\n  if (json.nip46) {\n    result.nip46 = {};\n    for (const [pubkey, nip46] of Object.entries(json.nip46)) {\n      if (typeof pubkey === \"string\" && Array.isArray(nip46)) {\n        result.nip46[pubkey] = nip46.filter((relay) => typeof relay === \"string\");\n      }\n    }\n  }\n  return result;\n}\n\n// src/user/profile.ts\nfunction profileFromEvent(event) {\n  const profile = {};\n  let payload;\n  try {\n    payload = JSON.parse(event.content);\n  } catch (error) {\n    throw new Error(`Failed to parse profile event: ${error}`);\n  }\n  profile.profileEvent = JSON.stringify(event.rawEvent());\n  for (const key of Object.keys(payload)) {\n    switch (key) {\n      case \"name\":\n        profile.name = payload.name;\n        break;\n      case \"display_name\":\n        profile.displayName = payload.display_name;\n        break;\n      case \"image\":\n      case \"picture\":\n        profile.picture = payload.picture || payload.image;\n        profile.image = profile.picture;\n        break;\n      case \"banner\":\n        profile.banner = payload.banner;\n        break;\n      case \"bio\":\n        profile.bio = payload.bio;\n        break;\n      case \"nip05\":\n        profile.nip05 = payload.nip05;\n        break;\n      case \"lud06\":\n        profile.lud06 = payload.lud06;\n        break;\n      case \"lud16\":\n        profile.lud16 = payload.lud16;\n        break;\n      case \"about\":\n        profile.about = payload.about;\n        break;\n      case \"website\":\n        profile.website = payload.website;\n        break;\n      default:\n        profile[key] = payload[key];\n        break;\n    }\n  }\n  profile.created_at = event.created_at;\n  return profile;\n}\nfunction serializeProfile(profile) {\n  const payload = {};\n  for (const [key, val] of Object.entries(profile)) {\n    switch (key) {\n      case \"username\":\n      case \"name\":\n        payload.name = val;\n        break;\n      case \"displayName\":\n        payload.display_name = val;\n        break;\n      case \"image\":\n      case \"picture\":\n        payload.picture = val;\n        break;\n      case \"bio\":\n      case \"about\":\n        payload.about = val;\n        break;\n      default:\n        payload[key] = val;\n        break;\n    }\n  }\n  return JSON.stringify(payload);\n}\n\n// src/user/index.ts\nvar NDKUser = class _NDKUser {\n  ndk;\n  profile;\n  profileEvent;\n  _npub;\n  _pubkey;\n  relayUrls = [];\n  nip46Urls = [];\n  constructor(opts) {\n    if (opts.npub) this._npub = opts.npub;\n    if (opts.hexpubkey) this._pubkey = opts.hexpubkey;\n    if (opts.pubkey) this._pubkey = opts.pubkey;\n    if (opts.relayUrls) this.relayUrls = opts.relayUrls;\n    if (opts.nip46Urls) this.nip46Urls = opts.nip46Urls;\n    if (opts.nprofile) {\n      try {\n        const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(opts.nprofile);\n        if (decoded.type === \"nprofile\") {\n          this._pubkey = decoded.data.pubkey;\n          if (decoded.data.relays && decoded.data.relays.length > 0) {\n            this.relayUrls.push(...decoded.data.relays);\n          }\n        }\n      } catch (e) {\n        console.error(\"Failed to decode nprofile\", e);\n      }\n    }\n  }\n  get npub() {\n    if (!this._npub) {\n      if (!this._pubkey) throw new Error(\"pubkey not set\");\n      this._npub = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.npubEncode(this.pubkey);\n    }\n    return this._npub;\n  }\n  get nprofile() {\n    const relays = this.profileEvent?.onRelays?.map((r) => r.url);\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.nprofileEncode({\n      pubkey: this.pubkey,\n      relays\n    });\n  }\n  set npub(npub2) {\n    this._npub = npub2;\n  }\n  /**\n   * Get the user's pubkey\n   * @returns {string} The user's pubkey\n   */\n  get pubkey() {\n    if (!this._pubkey) {\n      if (!this._npub) throw new Error(\"npub not set\");\n      this._pubkey = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(this.npub).data;\n    }\n    return this._pubkey;\n  }\n  /**\n   * Set the user's pubkey\n   * @param pubkey {string} The user's pubkey\n   */\n  set pubkey(pubkey) {\n    this._pubkey = pubkey;\n  }\n  /**\n   * Equivalent to NDKEvent.filters().\n   * @returns {NDKFilter}\n   */\n  filter() {\n    return { \"#p\": [this.pubkey] };\n  }\n  /**\n   * Gets NIP-57 and NIP-61 information that this user has signaled\n   *\n   * @param getAll {boolean} Whether to get all zap info or just the first one\n   */\n  async getZapInfo(timeoutMs) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    const promiseWithTimeout = async (promise) => {\n      if (!timeoutMs) return promise;\n      let timeoutId;\n      const timeoutPromise = new Promise((_, reject) => {\n        timeoutId = setTimeout(() => reject(new Error(\"Timeout\")), timeoutMs);\n      });\n      try {\n        const result = await Promise.race([promise, timeoutPromise]);\n        if (timeoutId) clearTimeout(timeoutId);\n        return result;\n      } catch (e) {\n        if (e instanceof Error && e.message === \"Timeout\") {\n          try {\n            const result = await promise;\n            return result;\n          } catch (_originalError) {\n            return void 0;\n          }\n        }\n        return void 0;\n      }\n    };\n    const [userProfile, mintListEvent] = await Promise.all([\n      promiseWithTimeout(this.fetchProfile()),\n      promiseWithTimeout(this.ndk.fetchEvent({ kinds: [10019 /* CashuMintList */], authors: [this.pubkey] }))\n    ]);\n    const res = /* @__PURE__ */ new Map();\n    if (mintListEvent) {\n      const mintList = NDKCashuMintList.from(mintListEvent);\n      if (mintList.mints.length > 0) {\n        res.set(\"nip61\", {\n          mints: mintList.mints,\n          relays: mintList.relays,\n          p2pk: mintList.p2pk\n        });\n      }\n    }\n    if (userProfile) {\n      const { lud06, lud16 } = userProfile;\n      res.set(\"nip57\", { lud06, lud16 });\n    }\n    return res;\n  }\n  /**\n   * Instantiate an NDKUser from a NIP-05 string\n   * @param nip05Id {string} The user's NIP-05\n   * @param ndk {NDK} An NDK instance\n   * @param skipCache {boolean} Whether to skip the cache or not\n   * @returns {NDKUser | undefined} An NDKUser if one is found for the given NIP-05, undefined otherwise.\n   */\n  static async fromNip05(nip05Id, ndk, skipCache = false) {\n    if (!ndk) throw new Error(\"No NDK instance found\");\n    const opts = {};\n    if (skipCache) opts.cache = \"no-cache\";\n    const profile = await getNip05For(ndk, nip05Id, ndk?.httpFetch, opts);\n    if (profile) {\n      const user = new _NDKUser({\n        pubkey: profile.pubkey,\n        relayUrls: profile.relays,\n        nip46Urls: profile.nip46\n      });\n      user.ndk = ndk;\n      return user;\n    }\n  }\n  /**\n   * Fetch a user's profile\n   * @param opts {NDKSubscriptionOptions} A set of NDKSubscriptionOptions\n   * @param storeProfileEvent {boolean} Whether to store the profile event or not\n   * @returns User Profile\n   */\n  async fetchProfile(opts, storeProfileEvent = false) {\n    if (!this.ndk) throw new Error(\"NDK not set\");\n    let setMetadataEvent = null;\n    if (this.ndk.cacheAdapter && (this.ndk.cacheAdapter.fetchProfile || this.ndk.cacheAdapter.fetchProfileSync) && opts?.cacheUsage !== \"ONLY_RELAY\" /* ONLY_RELAY */) {\n      let profile = null;\n      if (this.ndk.cacheAdapter.fetchProfileSync) {\n        profile = this.ndk.cacheAdapter.fetchProfileSync(this.pubkey);\n      } else if (this.ndk.cacheAdapter.fetchProfile) {\n        profile = await this.ndk.cacheAdapter.fetchProfile(this.pubkey);\n      }\n      if (profile) {\n        this.profile = profile;\n        return profile;\n      }\n    }\n    opts ??= {};\n    opts.cacheUsage ??= \"ONLY_RELAY\" /* ONLY_RELAY */;\n    opts.closeOnEose ??= true;\n    opts.groupable ??= true;\n    opts.groupableDelay ??= 250;\n    if (!setMetadataEvent) {\n      setMetadataEvent = await this.ndk.fetchEvent({ kinds: [0], authors: [this.pubkey] }, opts);\n    }\n    if (!setMetadataEvent) return null;\n    this.profile = profileFromEvent(setMetadataEvent);\n    if (storeProfileEvent && this.profile && this.ndk.cacheAdapter && this.ndk.cacheAdapter.saveProfile) {\n      this.ndk.cacheAdapter.saveProfile(this.pubkey, this.profile);\n    }\n    return this.profile;\n  }\n  /**\n   * Returns a set of users that this user follows.\n   *\n   * @deprecated Use followSet instead\n   */\n  follows = follows.bind(this);\n  /**\n   * Returns a set of pubkeys that this user follows.\n   *\n   * @param opts - NDKSubscriptionOptions\n   * @param outbox - boolean\n   * @param kind - number\n   */\n  async followSet(opts, outbox, kind = 3 /* Contacts */) {\n    const follows2 = await this.follows(opts, outbox, kind);\n    return new Set(Array.from(follows2).map((f) => f.pubkey));\n  }\n  /** @deprecated Use referenceTags instead. */\n  /**\n   * Get the tag that can be used to reference this user in an event\n   * @returns {NDKTag} an NDKTag\n   */\n  tagReference() {\n    return [\"p\", this.pubkey];\n  }\n  /**\n   * Get the tags that can be used to reference this user in an event\n   * @returns {NDKTag[]} an array of NDKTag\n   */\n  referenceTags(marker) {\n    const tag = [[\"p\", this.pubkey]];\n    if (!marker) return tag;\n    tag[0].push(\"\", marker);\n    return tag;\n  }\n  /**\n   * Publishes the current profile.\n   */\n  async publish() {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    if (!this.profile) throw new Error(\"No profile available\");\n    this.ndk.assertSigner();\n    const event = new NDKEvent(this.ndk, {\n      kind: 0,\n      content: serializeProfile(this.profile)\n    });\n    await event.publish();\n  }\n  /**\n   * Add a follow to this user's contact list\n   *\n   * @param newFollow {NDKUser} The user to follow\n   * @param currentFollowList {Set<NDKUser>} The current follow list\n   * @param kind {NDKKind} The kind to use for this contact list (defaults to `3`)\n   * @returns {Promise<boolean>} True if the follow was added, false if the follow already exists\n   */\n  async follow(newFollow, currentFollowList, kind = 3 /* Contacts */) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    if (!currentFollowList) {\n      currentFollowList = await this.follows(void 0, void 0, kind);\n    }\n    if (currentFollowList.has(newFollow)) {\n      return false;\n    }\n    currentFollowList.add(newFollow);\n    const event = new NDKEvent(this.ndk, { kind });\n    for (const follow of currentFollowList) {\n      event.tag(follow);\n    }\n    await event.publish();\n    return true;\n  }\n  /**\n   * Remove a follow from this user's contact list\n   *\n   * @param user {NDKUser} The user to unfollow\n   * @param currentFollowList {Set<NDKUser>} The current follow list\n   * @param kind {NDKKind} The kind to use for this contact list (defaults to `3`)\n   * @returns The relays were the follow list was published or false if the user wasn't found\n   */\n  async unfollow(user, currentFollowList, kind = 3 /* Contacts */) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    this.ndk.assertSigner();\n    if (!currentFollowList) {\n      currentFollowList = await this.follows(void 0, void 0, kind);\n    }\n    const newUserFollowList = /* @__PURE__ */ new Set();\n    let foundUser = false;\n    for (const follow of currentFollowList) {\n      if (follow.pubkey !== user.pubkey) {\n        newUserFollowList.add(follow);\n      } else {\n        foundUser = true;\n      }\n    }\n    if (!foundUser) return false;\n    const event = new NDKEvent(this.ndk, { kind });\n    for (const follow of newUserFollowList) {\n      event.tag(follow);\n    }\n    return await event.publish();\n  }\n  /**\n   * Validate a user's NIP-05 identifier (usually fetched from their kind:0 profile data)\n   *\n   * @param nip05Id The NIP-05 string to validate\n   * @returns {Promise<boolean | null>} True if the NIP-05 is found and matches this user's pubkey,\n   * False if the NIP-05 is found but doesn't match this user's pubkey,\n   * null if the NIP-05 isn't found on the domain or we're unable to verify (because of network issues, etc.)\n   */\n  async validateNip05(nip05Id) {\n    if (!this.ndk) throw new Error(\"No NDK instance found\");\n    const profilePointer = await getNip05For(this.ndk, nip05Id);\n    if (profilePointer === null) return null;\n    return profilePointer.pubkey === this.pubkey;\n  }\n};\n\n// src/user/pin.ts\nasync function pinEvent(user, event, pinEvent2, publish) {\n  const kind = 10001 /* PinList */;\n  if (!user.ndk) throw new Error(\"No NDK instance found\");\n  user.ndk.assertSigner();\n  if (!pinEvent2) {\n    const events = await user.ndk.fetchEvents(\n      { kinds: [kind], authors: [user.pubkey] },\n      { cacheUsage: \"ONLY_RELAY\" /* ONLY_RELAY */ }\n    );\n    if (events.size > 0) {\n      pinEvent2 = lists_default.from(Array.from(events)[0]);\n    } else {\n      pinEvent2 = new NDKEvent(user.ndk, {\n        kind\n      });\n    }\n  }\n  pinEvent2.tag(event);\n  if (publish) {\n    await pinEvent2.publish();\n  }\n  return pinEvent2;\n}\n\n// src/events/kinds/classified.ts\nvar NDKClassified = class _NDKClassified extends NDKEvent {\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30402 /* Classified */;\n  }\n  /**\n   * Creates a NDKClassified from an existing NDKEvent.\n   *\n   * @param event NDKEvent to create the NDKClassified from.\n   * @returns NDKClassified\n   */\n  static from(event) {\n    return new _NDKClassified(event.ndk, event);\n  }\n  /**\n   * Getter for the classified title.\n   *\n   * @returns {string | undefined} - The classified title if available, otherwise undefined.\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the classified title.\n   *\n   * @param {string | undefined} title - The title to set for the classified.\n   */\n  set title(title) {\n    this.removeTag(\"title\");\n    if (title) this.tags.push([\"title\", title]);\n  }\n  /**\n   * Getter for the classified summary.\n   *\n   * @returns {string | undefined} - The classified summary if available, otherwise undefined.\n   */\n  get summary() {\n    return this.tagValue(\"summary\");\n  }\n  /**\n   * Setter for the classified summary.\n   *\n   * @param {string | undefined} summary - The summary to set for the classified.\n   */\n  set summary(summary) {\n    this.removeTag(\"summary\");\n    if (summary) this.tags.push([\"summary\", summary]);\n  }\n  /**\n   * Getter for the classified's publication timestamp.\n   *\n   * @returns {number | undefined} - The Unix timestamp of when the classified was published or undefined.\n   */\n  get published_at() {\n    const tag = this.tagValue(\"published_at\");\n    if (tag) {\n      return Number.parseInt(tag);\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the classified's publication timestamp.\n   *\n   * @param {number | undefined} timestamp - The Unix timestamp to set for the classified's publication date.\n   */\n  set published_at(timestamp) {\n    this.removeTag(\"published_at\");\n    if (timestamp !== void 0) {\n      this.tags.push([\"published_at\", timestamp.toString()]);\n    }\n  }\n  /**\n   * Getter for the classified location.\n   *\n   * @returns {string | undefined} - The classified location if available, otherwise undefined.\n   */\n  get location() {\n    return this.tagValue(\"location\");\n  }\n  /**\n   * Setter for the classified location.\n   *\n   * @param {string | undefined} location - The location to set for the classified.\n   */\n  set location(location) {\n    this.removeTag(\"location\");\n    if (location) this.tags.push([\"location\", location]);\n  }\n  /**\n   * Getter for the classified price.\n   *\n   * @returns {NDKClassifiedPriceTag | undefined} - The classified price if available, otherwise undefined.\n   */\n  get price() {\n    const priceTag = this.tags.find((tag) => tag[0] === \"price\");\n    if (priceTag) {\n      return {\n        amount: Number.parseFloat(priceTag[1]),\n        currency: priceTag[2],\n        frequency: priceTag[3]\n      };\n    }\n    return void 0;\n  }\n  /**\n   * Setter for the classified price.\n   *\n   * @param price - The price to set for the classified.\n   */\n  set price(priceTag) {\n    if (typeof priceTag === \"string\") {\n      priceTag = {\n        amount: Number.parseFloat(priceTag)\n      };\n    }\n    if (priceTag?.amount) {\n      const tag = [\"price\", priceTag.amount.toString()];\n      if (priceTag.currency) tag.push(priceTag.currency);\n      if (priceTag.frequency) tag.push(priceTag.frequency);\n      this.tags.push(tag);\n    } else {\n      this.removeTag(\"price\");\n    }\n  }\n  /**\n   * Generates content tags for the classified.\n   *\n   * This method first checks and sets the publication date if not available,\n   * and then generates content tags based on the base NDKEvent class.\n   *\n   * @returns {ContentTag} - The generated content tags.\n   */\n  async generateTags() {\n    super.generateTags();\n    if (!this.published_at) {\n      this.published_at = this.created_at;\n    }\n    return super.generateTags();\n  }\n};\n\n// src/events/kinds/drafts.ts\nvar NDKDraft = class _NDKDraft extends NDKEvent {\n  _event;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 31234 /* Draft */;\n  }\n  static from(event) {\n    return new _NDKDraft(event.ndk, event);\n  }\n  /**\n   * Sets an identifier (i.e. d-tag)\n   */\n  set identifier(id) {\n    this.removeTag(\"d\");\n    this.tags.push([\"d\", id]);\n  }\n  get identifier() {\n    return this.dTag;\n  }\n  /**\n   * Event that is to be saved.\n   */\n  set event(e) {\n    if (e instanceof NDKEvent) this._event = e.rawEvent();\n    else this._event = e;\n    this.prepareEvent();\n  }\n  /**\n   * Gets the event.\n   * @param param0\n   * @returns NDKEvent of the draft event or null if the draft event has been deleted (emptied).\n   */\n  async getEvent(signer) {\n    if (this._event) return new NDKEvent(this.ndk, this._event);\n    signer ??= this.ndk?.signer;\n    if (!signer) throw new Error(\"No signer available\");\n    const user = await signer.user();\n    if (this.content && this.content.length > 0) {\n      try {\n        await this.decrypt(user, signer);\n        const payload = JSON.parse(this.content);\n        this._event = payload;\n        return new NDKEvent(this.ndk, payload);\n      } catch (e) {\n        console.error(e);\n        return void 0;\n      }\n    } else {\n      return null;\n    }\n  }\n  prepareEvent() {\n    if (!this._event) throw new Error(\"No event has been provided\");\n    this.removeTag(\"k\");\n    if (this._event.kind) this.tags.push([\"k\", this._event.kind.toString()]);\n    this.content = JSON.stringify(this._event);\n  }\n  /**\n   * Generates draft event.\n   *\n   * @param signer: Optional signer to encrypt with\n   * @param publish: Whether to publish, optionally specifying relaySet to publish to\n   */\n  async save({ signer, publish, relaySet }) {\n    signer ??= this.ndk?.signer;\n    if (!signer) throw new Error(\"No signer available\");\n    const user = await signer.user();\n    await this.encrypt(user, signer);\n    if (publish === false) return;\n    return this.publish(relaySet);\n  }\n};\n\n// src/events/kinds/dvm/feedback.ts\nvar NDKDvmJobFeedbackStatus = /* @__PURE__ */ ((NDKDvmJobFeedbackStatus2) => {\n  NDKDvmJobFeedbackStatus2[\"Processing\"] = \"processing\";\n  NDKDvmJobFeedbackStatus2[\"Success\"] = \"success\";\n  NDKDvmJobFeedbackStatus2[\"Scheduled\"] = \"scheduled\";\n  NDKDvmJobFeedbackStatus2[\"PayReq\"] = \"payment_required\";\n  return NDKDvmJobFeedbackStatus2;\n})(NDKDvmJobFeedbackStatus || {});\nvar NDKDVMJobFeedback = class _NDKDVMJobFeedback extends NDKEvent {\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 7e3 /* DVMJobFeedback */;\n  }\n  static async from(event) {\n    const e = new _NDKDVMJobFeedback(event.ndk, event.rawEvent());\n    if (e.encrypted) await e.dvmDecrypt();\n    return e;\n  }\n  get status() {\n    return this.tagValue(\"status\");\n  }\n  set status(status) {\n    this.removeTag(\"status\");\n    if (status !== void 0) {\n      this.tags.push([\"status\", status]);\n    }\n  }\n  get encrypted() {\n    return !!this.getMatchingTags(\"encrypted\")[0];\n  }\n  async dvmDecrypt() {\n    await this.decrypt();\n    const decryptedContent = JSON.parse(this.content);\n    this.tags.push(...decryptedContent);\n  }\n};\n\n// src/events/kinds/dvm/request.ts\nvar NDKDVMRequest = class _NDKDVMRequest extends NDKEvent {\n  static from(event) {\n    return new _NDKDVMRequest(event.ndk, event.rawEvent());\n  }\n  set bid(msatAmount) {\n    if (msatAmount === void 0) {\n      this.removeTag(\"bid\");\n    } else {\n      this.tags.push([\"bid\", msatAmount.toString()]);\n    }\n  }\n  get bid() {\n    const v = this.tagValue(\"bid\");\n    if (v === void 0) return void 0;\n    return Number.parseInt(v);\n  }\n  /**\n   * Adds a new input to the job\n   * @param args The arguments to the input\n   */\n  addInput(...args) {\n    this.tags.push([\"i\", ...args]);\n  }\n  /**\n   * Adds a new parameter to the job\n   */\n  addParam(...args) {\n    this.tags.push([\"param\", ...args]);\n  }\n  set output(output) {\n    if (output === void 0) {\n      this.removeTag(\"output\");\n    } else {\n      if (typeof output === \"string\") output = [output];\n      this.tags.push([\"output\", ...output]);\n    }\n  }\n  get output() {\n    const outputTag = this.getMatchingTags(\"output\")[0];\n    return outputTag ? outputTag.slice(1) : void 0;\n  }\n  get params() {\n    const paramTags = this.getMatchingTags(\"param\");\n    return paramTags.map((t) => t.slice(1));\n  }\n  getParam(name) {\n    const paramTag = this.getMatchingTags(\"param\").find((t) => t[1] === name);\n    return paramTag ? paramTag[2] : void 0;\n  }\n  createFeedback(status) {\n    const feedback = new NDKDVMJobFeedback(this.ndk);\n    feedback.tag(this, \"job\");\n    feedback.status = status;\n    return feedback;\n  }\n  /**\n   * Enables job encryption for this event\n   * @param dvm DVM that will receive the event\n   * @param signer Signer to use for encryption\n   */\n  async encryption(dvm, signer) {\n    const dvmTags = [\"i\", \"param\", \"output\", \"relays\", \"bid\"];\n    const tags = this.tags.filter((t) => dvmTags.includes(t[0]));\n    this.tags = this.tags.filter((t) => !dvmTags.includes(t[0]));\n    this.content = JSON.stringify(tags);\n    this.tag(dvm);\n    this.tags.push([\"encrypted\"]);\n    await this.encrypt(dvm, signer);\n  }\n  /**\n   * Sets the DVM that will receive the event\n   */\n  set dvm(dvm) {\n    this.removeTag(\"p\");\n    if (dvm) this.tag(dvm);\n  }\n};\n\n// src/events/kinds/dvm/NDKTranscriptionDVM.ts\nvar NDKTranscriptionDVM = class _NDKTranscriptionDVM extends NDKDVMRequest {\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind = 5e3 /* DVMReqTextExtraction */;\n  }\n  static from(event) {\n    return new _NDKTranscriptionDVM(event.ndk, event.rawEvent());\n  }\n  /**\n   * Returns the original source of the transcription\n   */\n  get url() {\n    const inputTags = this.getMatchingTags(\"i\");\n    if (inputTags.length !== 1) {\n      return void 0;\n    }\n    return inputTags[0][1];\n  }\n  /**\n   * Getter for the title tag\n   */\n  get title() {\n    return this.tagValue(\"title\");\n  }\n  /**\n   * Setter for the title tag\n   */\n  set title(value) {\n    this.removeTag(\"title\");\n    if (value) {\n      this.tags.push([\"title\", value]);\n    }\n  }\n  /**\n   * Getter for the image tag\n   */\n  get image() {\n    return this.tagValue(\"image\");\n  }\n  /**\n   * Setter for the image tag\n   */\n  set image(value) {\n    this.removeTag(\"image\");\n    if (value) {\n      this.tags.push([\"image\", value]);\n    }\n  }\n};\n\n// src/events/kinds/dvm/result.ts\nvar NDKDVMJobResult = class _NDKDVMJobResult extends NDKEvent {\n  static from(event) {\n    return new _NDKDVMJobResult(event.ndk, event.rawEvent());\n  }\n  setAmount(msat, invoice) {\n    this.removeTag(\"amount\");\n    const tag = [\"amount\", msat.toString()];\n    if (invoice) tag.push(invoice);\n    this.tags.push(tag);\n  }\n  set result(result) {\n    if (result === void 0) {\n      this.content = \"\";\n    } else {\n      this.content = result;\n    }\n  }\n  get result() {\n    if (this.content === \"\") {\n      return void 0;\n    }\n    return this.content;\n  }\n  set status(status) {\n    this.removeTag(\"status\");\n    if (status !== void 0) {\n      this.tags.push([\"status\", status]);\n    }\n  }\n  get status() {\n    return this.tagValue(\"status\");\n  }\n  get jobRequestId() {\n    for (const eTag of this.getMatchingTags(\"e\")) {\n      if (eTag[2] === \"job\") return eTag[1];\n    }\n    if (this.jobRequest) return this.jobRequest.id;\n    return this.tagValue(\"e\");\n  }\n  set jobRequest(event) {\n    this.removeTag(\"request\");\n    if (event) {\n      this.kind = event.kind + 1e3;\n      this.tags.push([\"request\", JSON.stringify(event.rawEvent())]);\n      this.tag(event);\n    }\n  }\n  get jobRequest() {\n    const tag = this.tagValue(\"request\");\n    if (tag === void 0) {\n      return void 0;\n    }\n    return new NDKEvent(this.ndk, JSON.parse(tag));\n  }\n};\n\n// src/events/kinds/cashu/tx.ts\nvar MARKERS = {\n  REDEEMED: \"redeemed\",\n  CREATED: \"created\",\n  DESTROYED: \"destroyed\",\n  RESERVED: \"reserved\"\n};\nvar NDKCashuWalletTx = class _NDKCashuWalletTx extends NDKEvent {\n  static MARKERS = MARKERS;\n  static kind = 7376 /* CashuWalletTx */;\n  static kinds = [7376 /* CashuWalletTx */];\n  constructor(ndk, event) {\n    super(ndk, event);\n    this.kind ??= 7376 /* CashuWalletTx */;\n  }\n  static async from(event) {\n    const walletChange = new _NDKCashuWalletTx(event.ndk, event);\n    const prevContent = walletChange.content;\n    try {\n      await walletChange.decrypt();\n    } catch (_e) {\n      walletChange.content ??= prevContent;\n    }\n    try {\n      const contentTags = JSON.parse(walletChange.content);\n      walletChange.tags = [...contentTags, ...walletChange.tags];\n    } catch (_e) {\n      return;\n    }\n    return walletChange;\n  }\n  set direction(direction) {\n    this.removeTag(\"direction\");\n    if (direction) this.tags.push([\"direction\", direction]);\n  }\n  get direction() {\n    return this.tagValue(\"direction\");\n  }\n  set amount(amount) {\n    this.removeTag(\"amount\");\n    this.tags.push([\"amount\", amount.toString()]);\n  }\n  get amount() {\n    const val = this.tagValue(\"amount\");\n    if (val === void 0) return void 0;\n    return Number(val);\n  }\n  set fee(fee) {\n    this.removeTag(\"fee\");\n    this.tags.push([\"fee\", fee.toString()]);\n  }\n  get fee() {\n    const val = this.tagValue(\"fee\");\n    if (val === void 0) return void 0;\n    return Number(val);\n  }\n  set unit(unit) {\n    this.removeTag(\"unit\");\n    if (unit) this.tags.push([\"unit\", unit.toString()]);\n  }\n  get unit() {\n    return this.tagValue(\"unit\");\n  }\n  set description(description) {\n    this.removeTag(\"description\");\n    if (description) this.tags.push([\"description\", description.toString()]);\n  }\n  get description() {\n    return this.tagValue(\"description\");\n  }\n  set mint(mint) {\n    this.removeTag(\"mint\");\n    if (mint) this.tags.push([\"mint\", mint.toString()]);\n  }\n  get mint() {\n    return this.tagValue(\"mint\");\n  }\n  /**\n   * Tags tokens that were created in this history event\n   */\n  set destroyedTokens(events) {\n    for (const event of events) {\n      this.tags.push(event.tagReference(MARKERS.DESTROYED));\n    }\n  }\n  set destroyedTokenIds(ids) {\n    for (const id of ids) {\n      this.tags.push([\"e\", id, \"\", MARKERS.DESTROYED]);\n    }\n  }\n  /**\n   * Tags tokens that were created in this history event\n   */\n  set createdTokens(events) {\n    for (const event of events) {\n      this.tags.push(event.tagReference(MARKERS.CREATED));\n    }\n  }\n  set reservedTokens(events) {\n    for (const event of events) {\n      this.tags.push(event.tagReference(MARKERS.RESERVED));\n    }\n  }\n  addRedeemedNutzap(event) {\n    this.tag(event, MARKERS.REDEEMED);\n  }\n  async toNostrEvent(pubkey) {\n    const encryptedTags = [];\n    const unencryptedTags = [];\n    for (const tag of this.tags) {\n      if (!this.shouldEncryptTag(tag)) {\n        unencryptedTags.push(tag);\n      } else {\n        encryptedTags.push(tag);\n      }\n    }\n    this.tags = unencryptedTags.filter((t) => t[0] !== \"client\");\n    this.content = JSON.stringify(encryptedTags);\n    const user = await this.ndk?.signer?.user();\n    await this.encrypt(user, void 0, \"nip44\");\n    return super.toNostrEvent(pubkey);\n  }\n  /**\n   * Whether this entry includes a redemption of a Nutzap\n   */\n  get hasNutzapRedemption() {\n    return this.getMatchingTags(\"e\", MARKERS.REDEEMED).length > 0;\n  }\n  shouldEncryptTag(tag) {\n    const unencryptedTagNames = [\"client\"];\n    if (unencryptedTagNames.includes(tag[0])) {\n      return false;\n    }\n    if (tag[0] === \"e\" && tag[3] === MARKERS.REDEEMED) {\n      return false;\n    }\n    if (tag[0] === \"p\") return false;\n    return true;\n  }\n};\n\n// src/events/kinds/NDKRelayList.ts\nvar READ_MARKER = \"read\";\nvar WRITE_MARKER = \"write\";\nvar NDKRelayList = class _NDKRelayList extends NDKEvent {\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 10002 /* RelayList */;\n  }\n  static from(ndkEvent) {\n    return new _NDKRelayList(ndkEvent.ndk, ndkEvent.rawEvent());\n  }\n  get readRelayUrls() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2] || tag[2] && tag[2] === READ_MARKER).map((tag) => tryNormalizeRelayUrl(tag[1])).filter((url) => !!url);\n  }\n  set readRelayUrls(relays) {\n    for (const relay of relays) {\n      this.tags.push([\"r\", relay, READ_MARKER]);\n    }\n  }\n  get writeRelayUrls() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2] || tag[2] && tag[2] === WRITE_MARKER).map((tag) => tryNormalizeRelayUrl(tag[1])).filter((url) => !!url);\n  }\n  set writeRelayUrls(relays) {\n    for (const relay of relays) {\n      this.tags.push([\"r\", relay, WRITE_MARKER]);\n    }\n  }\n  get bothRelayUrls() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2]).map((tag) => tag[1]);\n  }\n  set bothRelayUrls(relays) {\n    for (const relay of relays) {\n      this.tags.push([\"r\", relay]);\n    }\n  }\n  get relays() {\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").map((tag) => tag[1]);\n  }\n  /**\n   * Provides a relaySet for the relays in this list.\n   */\n  get relaySet() {\n    if (!this.ndk) throw new Error(\"NDKRelayList has no NDK instance\");\n    return new NDKRelaySet(\n      new Set(this.relays.map((u) => this.ndk?.pool.getRelay(u)).filter((r) => !!r)),\n      this.ndk\n    );\n  }\n};\nfunction relayListFromKind3(ndk, contactList) {\n  try {\n    const content = JSON.parse(contactList.content);\n    const relayList = new NDKRelayList(ndk);\n    const readRelays = /* @__PURE__ */ new Set();\n    const writeRelays = /* @__PURE__ */ new Set();\n    for (let [key, config] of Object.entries(content)) {\n      try {\n        key = normalizeRelayUrl(key);\n      } catch {\n        continue;\n      }\n      if (!config) {\n        readRelays.add(key);\n        writeRelays.add(key);\n      } else {\n        const relayConfig = config;\n        if (relayConfig.write) writeRelays.add(key);\n        if (relayConfig.read) readRelays.add(key);\n      }\n    }\n    relayList.readRelayUrls = Array.from(readRelays);\n    relayList.writeRelayUrls = Array.from(writeRelays);\n    return relayList;\n  } catch {\n  }\n  return void 0;\n}\n\n// src/events/kinds/nip89/app-handler.ts\nvar NDKAppHandlerEvent = class _NDKAppHandlerEvent extends NDKEvent {\n  profile;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 31990 /* AppHandler */;\n  }\n  static from(ndkEvent) {\n    const event = new _NDKAppHandlerEvent(ndkEvent.ndk, ndkEvent.rawEvent());\n    if (event.isValid) {\n      return event;\n    }\n    return null;\n  }\n  get isValid() {\n    const combinations = /* @__PURE__ */ new Map();\n    const combinationFromTag = (tag) => [tag[0], tag[2]].join(\":\").toLowerCase();\n    const tagsToInspect = [\"web\", \"android\", \"ios\"];\n    for (const tag of this.tags) {\n      if (tagsToInspect.includes(tag[0])) {\n        const combination = combinationFromTag(tag);\n        if (combinations.has(combination)) {\n          if (combinations.get(combination) !== tag[1].toLowerCase()) {\n            return false;\n          }\n        }\n        combinations.set(combination, tag[1].toLowerCase());\n      }\n    }\n    return true;\n  }\n  /**\n   * Fetches app handler information\n   * If no app information is available on the kind:31990,\n   * we fetch the event's author's profile and return that instead.\n   */\n  async fetchProfile() {\n    if (this.profile === void 0 && this.content.length > 0) {\n      try {\n        const profile = JSON.parse(this.content);\n        if (profile?.name) {\n          return profile;\n        }\n        this.profile = null;\n      } catch (_e) {\n        this.profile = null;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      const author = this.author;\n      author.fetchProfile().then(() => {\n        resolve(author.profile);\n      }).catch(reject);\n    });\n  }\n};\n\n// src/events/kinds/repost.ts\nvar NDKRepost = class _NDKRepost extends NDKEvent {\n  _repostedEvents;\n  static from(event) {\n    return new _NDKRepost(event.ndk, event.rawEvent());\n  }\n  /**\n   * Returns all reposted events by the current event.\n   *\n   * @param klass Optional class to convert the events to.\n   * @returns\n   */\n  async repostedEvents(klass, opts) {\n    const items = [];\n    if (!this.ndk) throw new Error(\"NDK instance not set\");\n    if (this._repostedEvents !== void 0) return this._repostedEvents;\n    for (const eventId of this.repostedEventIds()) {\n      const filter = filterForId(eventId);\n      const event = await this.ndk.fetchEvent(filter, opts);\n      if (event) {\n        items.push(klass ? klass.from(event) : event);\n      }\n    }\n    return items;\n  }\n  /**\n   * Returns the reposted event IDs.\n   */\n  repostedEventIds() {\n    return this.tags.filter((t) => t[0] === \"e\" || t[0] === \"a\").map((t) => t[1]);\n  }\n};\nfunction filterForId(id) {\n  if (id.match(/:/)) {\n    const [kind, pubkey, identifier] = id.split(\":\");\n    return {\n      kinds: [Number.parseInt(kind)],\n      authors: [pubkey],\n      \"#d\": [identifier]\n    };\n  }\n  return { ids: [id] };\n}\n\n// src/events/kinds/subscriptions/receipt.ts\n\nvar NDKSubscriptionReceipt = class _NDKSubscriptionReceipt extends NDKEvent {\n  debug;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 7003 /* SubscriptionReceipt */;\n    this.debug = ndk?.debug.extend(\"subscription-start\") ?? debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:subscription-start\");\n  }\n  static from(event) {\n    return new _NDKSubscriptionReceipt(event.ndk, event.rawEvent());\n  }\n  /**\n   * This is the person being subscribed to\n   */\n  get recipient() {\n    const pTag = this.getMatchingTags(\"p\")?.[0];\n    if (!pTag) return void 0;\n    const user = new NDKUser({ pubkey: pTag[1] });\n    return user;\n  }\n  set recipient(user) {\n    this.removeTag(\"p\");\n    if (!user) return;\n    this.tags.push([\"p\", user.pubkey]);\n  }\n  /**\n   * This is the person subscribing\n   */\n  get subscriber() {\n    const PTag = this.getMatchingTags(\"P\")?.[0];\n    if (!PTag) return void 0;\n    const user = new NDKUser({ pubkey: PTag[1] });\n    return user;\n  }\n  set subscriber(user) {\n    this.removeTag(\"P\");\n    if (!user) return;\n    this.tags.push([\"P\", user.pubkey]);\n  }\n  set subscriptionStart(event) {\n    this.debug(`before setting subscription start: ${this.rawEvent}`);\n    this.removeTag(\"e\");\n    this.tag(event, \"subscription\", true);\n    this.debug(`after setting subscription start: ${this.rawEvent}`);\n  }\n  get tierName() {\n    const tag = this.getMatchingTags(\"tier\")?.[0];\n    return tag?.[1];\n  }\n  get isValid() {\n    const period = this.validPeriod;\n    if (!period) {\n      return false;\n    }\n    if (period.start > period.end) {\n      return false;\n    }\n    const pTags = this.getMatchingTags(\"p\");\n    const PTags = this.getMatchingTags(\"P\");\n    if (pTags.length !== 1 || PTags.length !== 1) {\n      return false;\n    }\n    return true;\n  }\n  get validPeriod() {\n    const tag = this.getMatchingTags(\"valid\")?.[0];\n    if (!tag) return void 0;\n    try {\n      return {\n        start: new Date(Number.parseInt(tag[1]) * 1e3),\n        end: new Date(Number.parseInt(tag[2]) * 1e3)\n      };\n    } catch {\n      return void 0;\n    }\n  }\n  set validPeriod(period) {\n    this.removeTag(\"valid\");\n    if (!period) return;\n    this.tags.push([\n      \"valid\",\n      Math.floor(period.start.getTime() / 1e3).toString(),\n      Math.floor(period.end.getTime() / 1e3).toString()\n    ]);\n  }\n  get startPeriod() {\n    return this.validPeriod?.start;\n  }\n  get endPeriod() {\n    return this.validPeriod?.end;\n  }\n  /**\n   * Whether the subscription is currently active\n   */\n  isActive(time) {\n    time ??= /* @__PURE__ */ new Date();\n    const period = this.validPeriod;\n    if (!period) return false;\n    if (time < period.start) return false;\n    if (time > period.end) return false;\n    return true;\n  }\n};\n\n// src/events/kinds/subscriptions/subscription-start.ts\n\nvar NDKSubscriptionStart = class _NDKSubscriptionStart extends NDKEvent {\n  debug;\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 7001 /* Subscribe */;\n    this.debug = ndk?.debug.extend(\"subscription-start\") ?? debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:subscription-start\");\n  }\n  static from(event) {\n    return new _NDKSubscriptionStart(event.ndk, event.rawEvent());\n  }\n  /**\n   * Recipient of the subscription. I.e. The author of this event subscribes to this user.\n   */\n  get recipient() {\n    const pTag = this.getMatchingTags(\"p\")?.[0];\n    if (!pTag) return void 0;\n    const user = new NDKUser({ pubkey: pTag[1] });\n    return user;\n  }\n  set recipient(user) {\n    this.removeTag(\"p\");\n    if (!user) return;\n    this.tags.push([\"p\", user.pubkey]);\n  }\n  /**\n   * The amount of the subscription.\n   */\n  get amount() {\n    const amountTag = this.getMatchingTags(\"amount\")?.[0];\n    if (!amountTag) return void 0;\n    return parseTagToSubscriptionAmount(amountTag);\n  }\n  set amount(amount) {\n    this.removeTag(\"amount\");\n    if (!amount) return;\n    this.tags.push(newAmount(amount.amount, amount.currency, amount.term));\n  }\n  /**\n   * The event id or NIP-33 tag id of the tier that the user is subscribing to.\n   */\n  get tierId() {\n    const eTag = this.getMatchingTags(\"e\")?.[0];\n    const aTag = this.getMatchingTags(\"a\")?.[0];\n    if (!eTag || !aTag) return void 0;\n    return eTag[1] ?? aTag[1];\n  }\n  set tier(tier) {\n    this.removeTag(\"e\");\n    this.removeTag(\"a\");\n    this.removeTag(\"event\");\n    if (!tier) return;\n    this.tag(tier);\n    this.removeTag(\"p\");\n    this.tags.push([\"p\", tier.pubkey]);\n    this.tags.push([\"event\", JSON.stringify(tier.rawEvent())]);\n  }\n  /**\n   * Fetches the tier that the user is subscribing to.\n   */\n  async fetchTier() {\n    const eventTag = this.tagValue(\"event\");\n    if (eventTag) {\n      try {\n        const parsedEvent = JSON.parse(eventTag);\n        return new NDKSubscriptionTier(this.ndk, parsedEvent);\n      } catch {\n        this.debug(\"Failed to parse event tag\");\n      }\n    }\n    const tierId = this.tierId;\n    if (!tierId) return void 0;\n    const e = await this.ndk?.fetchEvent(tierId);\n    if (!e) return void 0;\n    return NDKSubscriptionTier.from(e);\n  }\n  get isValid() {\n    if (this.getMatchingTags(\"amount\").length !== 1) {\n      this.debug(\"Invalid # of amount tag\");\n      return false;\n    }\n    if (!this.amount) {\n      this.debug(\"Invalid amount tag\");\n      return false;\n    }\n    if (this.getMatchingTags(\"p\").length !== 1) {\n      this.debug(\"Invalid # of p tag\");\n      return false;\n    }\n    if (!this.recipient) {\n      this.debug(\"Invalid p tag\");\n      return false;\n    }\n    return true;\n  }\n};\n\n// src/events/gift-wrapping.ts\n\n\n// src/signers/private-key/index.ts\n\n\n\nvar NDKPrivateKeySigner = class _NDKPrivateKeySigner {\n  _user;\n  _privateKey;\n  _pubkey;\n  /**\n   * Create a new signer from a private key.\n   * @param privateKey - The private key to use in hex form or nsec.\n   * @param ndk - The NDK instance to use.\n   */\n  constructor(privateKeyOrNsec, ndk) {\n    if (typeof privateKeyOrNsec === \"string\") {\n      if (privateKeyOrNsec.startsWith(\"nsec1\")) {\n        const { type, data } = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(privateKeyOrNsec);\n        if (type === \"nsec\") this._privateKey = data;\n        else throw new Error(\"Invalid private key provided.\");\n      } else if (privateKeyOrNsec.length === 64) {\n        this._privateKey = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(privateKeyOrNsec);\n      } else {\n        throw new Error(\"Invalid private key provided.\");\n      }\n    } else {\n      this._privateKey = privateKeyOrNsec;\n    }\n    this._pubkey = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.getPublicKey)(this._privateKey);\n    if (ndk) this._user = ndk.getUser({ pubkey: this._pubkey });\n    this._user ??= new NDKUser({ pubkey: this._pubkey });\n  }\n  /**\n   * Get the private key in hex form.\n   */\n  get privateKey() {\n    if (!this._privateKey) throw new Error(\"Not ready\");\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(this._privateKey);\n  }\n  /**\n   * Get the public key in hex form.\n   */\n  get pubkey() {\n    if (!this._pubkey) throw new Error(\"Not ready\");\n    return this._pubkey;\n  }\n  /**\n   * Get the private key in nsec form.\n   */\n  get nsec() {\n    if (!this._privateKey) throw new Error(\"Not ready\");\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.nsecEncode(this._privateKey);\n  }\n  /**\n   * Get the public key in npub form.\n   */\n  get npub() {\n    if (!this._pubkey) throw new Error(\"Not ready\");\n    return nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.npubEncode(this._pubkey);\n  }\n  /**\n   * Generate a new private key.\n   */\n  static generate() {\n    const privateKey = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.generateSecretKey)();\n    return new _NDKPrivateKeySigner(privateKey);\n  }\n  /**\n   * Noop in NDKPrivateKeySigner.\n   */\n  async blockUntilReady() {\n    return this._user;\n  }\n  /**\n   * Get the user.\n   */\n  async user() {\n    return this._user;\n  }\n  /**\n   * Get the user.\n   */\n  get userSync() {\n    return this._user;\n  }\n  async sign(event) {\n    if (!this._privateKey) {\n      throw Error(\"Attempted to sign without a private key\");\n    }\n    return (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.finalizeEvent)(event, this._privateKey).sig;\n  }\n  async encryptionEnabled(scheme) {\n    const enabled = [];\n    if (!scheme || scheme === \"nip04\") enabled.push(\"nip04\");\n    if (!scheme || scheme === \"nip44\") enabled.push(\"nip44\");\n    return enabled;\n  }\n  async encrypt(recipient, value, scheme) {\n    if (!this._privateKey || !this.privateKey) {\n      throw Error(\"Attempted to encrypt without a private key\");\n    }\n    const recipientHexPubKey = recipient.pubkey;\n    if (scheme === \"nip44\") {\n      const conversationKey = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.utils.getConversationKey(this._privateKey, recipientHexPubKey);\n      return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.encrypt(value, conversationKey);\n    }\n    return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip04.encrypt(this._privateKey, recipientHexPubKey, value);\n  }\n  async decrypt(sender, value, scheme) {\n    if (!this._privateKey || !this.privateKey) {\n      throw Error(\"Attempted to decrypt without a private key\");\n    }\n    const senderHexPubKey = sender.pubkey;\n    if (scheme === \"nip44\") {\n      const conversationKey = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.utils.getConversationKey(this._privateKey, senderHexPubKey);\n      return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip44.v2.decrypt(value, conversationKey);\n    }\n    return await nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip04.decrypt(this._privateKey, senderHexPubKey, value);\n  }\n  /**\n   * Serializes the signer's private key into a storable format.\n   * @returns A JSON string containing the type and the hex private key.\n   */\n  toPayload() {\n    if (!this._privateKey) throw new Error(\"Private key not available\");\n    const payload = {\n      type: \"private-key\",\n      payload: this.privateKey\n      // Use the hex private key\n    };\n    return JSON.stringify(payload);\n  }\n  /**\n   * Deserializes the signer from a payload string.\n   * @param payloadString The JSON string obtained from toPayload().\n   * @param ndk Optional NDK instance.\n   * @returns An instance of NDKPrivateKeySigner.\n   */\n  static async fromPayload(payloadString, ndk) {\n    const payload = JSON.parse(payloadString);\n    if (payload.type !== \"private-key\") {\n      throw new Error(`Invalid payload type: expected 'private-key', got ${payload.type}`);\n    }\n    if (!payload.payload || typeof payload.payload !== \"string\") {\n      throw new Error(\"Invalid payload content for private-key signer\");\n    }\n    return new _NDKPrivateKeySigner(payload.payload, ndk);\n  }\n};\n\n// src/events/gift-wrapping.ts\nasync function giftWrap(event, recipient, signer, params = {}) {\n  let _signer = signer;\n  params.scheme ??= \"nip44\";\n  if (!_signer) {\n    if (!event.ndk) throw new Error(\"no signer available for giftWrap\");\n    _signer = event.ndk.signer;\n  }\n  if (!_signer) throw new Error(\"no signer\");\n  if (!_signer.encryptionEnabled || !_signer.encryptionEnabled(params.scheme))\n    throw new Error(\"signer is not able to giftWrap\");\n  const rumor = getRumorEvent(event, params?.rumorKind);\n  const seal = await getSealEvent(rumor, recipient, _signer, params.scheme);\n  const wrap = await getWrapEvent(seal, recipient, params);\n  return new NDKEvent(event.ndk, wrap);\n}\nasync function giftUnwrap(event, sender, signer, scheme = \"nip44\") {\n  const _sender = sender || new NDKUser({ pubkey: event.pubkey });\n  let _signer = signer;\n  if (!_signer) {\n    if (!event.ndk) throw new Error(\"no signer available for giftUnwrap\");\n    _signer = event.ndk.signer;\n  }\n  if (!signer) throw new Error(\"no signer\");\n  try {\n    const seal = JSON.parse(await signer.decrypt(_sender, event.content, scheme));\n    if (!seal) throw new Error(\"Failed to decrypt wrapper\");\n    if (!new NDKEvent(void 0, seal).verifySignature(false))\n      throw new Error(\"GiftSeal signature verification failed!\");\n    const rumorSender = new NDKUser({ pubkey: seal.pubkey });\n    const rumor = JSON.parse(await signer.decrypt(rumorSender, seal.content, scheme));\n    if (!rumor) throw new Error(\"Failed to decrypt seal\");\n    if (rumor.pubkey !== seal.pubkey) throw new Error(\"Invalid GiftWrap, sender validation failed!\");\n    return new NDKEvent(event.ndk, rumor);\n  } catch (_e) {\n    return Promise.reject(\"Got error unwrapping event! See console log.\");\n  }\n}\nfunction getRumorEvent(event, kind) {\n  const rumor = event.rawEvent();\n  rumor.kind = kind || rumor.kind || 14 /* PrivateDirectMessage */;\n  rumor.sig = void 0;\n  rumor.id = (0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.getEventHash)(rumor);\n  return new NDKEvent(event.ndk, rumor);\n}\nasync function getSealEvent(rumor, recipient, signer, scheme = \"nip44\") {\n  const seal = new NDKEvent(rumor.ndk);\n  seal.kind = 13 /* GiftWrapSeal */;\n  seal.created_at = approximateNow(5);\n  seal.content = JSON.stringify(rumor.rawEvent());\n  await seal.encrypt(recipient, signer, scheme);\n  await seal.sign(signer);\n  return seal;\n}\nasync function getWrapEvent(sealed, recipient, params, scheme = \"nip44\") {\n  const signer = NDKPrivateKeySigner.generate();\n  const wrap = new NDKEvent(sealed.ndk);\n  wrap.kind = 1059 /* GiftWrap */;\n  wrap.created_at = approximateNow(5);\n  if (params?.wrapTags) wrap.tags = params.wrapTags;\n  wrap.tag(recipient);\n  wrap.content = JSON.stringify(sealed.rawEvent());\n  await wrap.encrypt(recipient, signer, scheme);\n  await wrap.sign(signer);\n  return wrap;\n}\nfunction approximateNow(drift = 0) {\n  return Math.round(Date.now() / 1e3 - Math.random() * 10 ** drift);\n}\n\n// src/events/kinds/simple-group/index.ts\nvar NDKSimpleGroup = class _NDKSimpleGroup {\n  ndk;\n  groupId;\n  relaySet;\n  fetchingMetadata;\n  metadata;\n  memberList;\n  adminList;\n  constructor(ndk, relaySet, groupId) {\n    this.ndk = ndk;\n    this.groupId = groupId ?? randomId(24);\n    this.relaySet = relaySet;\n  }\n  get id() {\n    return this.groupId;\n  }\n  relayUrls() {\n    return this.relaySet?.relayUrls;\n  }\n  get name() {\n    return this.metadata?.name;\n  }\n  get about() {\n    return this.metadata?.about;\n  }\n  get picture() {\n    return this.metadata?.picture;\n  }\n  get members() {\n    return this.memberList?.members ?? [];\n  }\n  get admins() {\n    return this.adminList?.members ?? [];\n  }\n  async getMetadata() {\n    await this.ensureMetadataEvent();\n    return this.metadata;\n  }\n  /**\n   * Creates the group by publishing a kind:9007 event.\n   * @param signer\n   * @returns\n   */\n  async createGroup(signer) {\n    signer ??= this.ndk.signer;\n    if (!signer) throw new Error(\"No signer available\");\n    const user = await signer.user();\n    if (!user) throw new Error(\"No user available\");\n    const event = new NDKEvent(this.ndk);\n    event.kind = 9007 /* GroupAdminCreateGroup */;\n    event.tags.push([\"h\", this.groupId]);\n    await event.sign(signer);\n    return event.publish(this.relaySet);\n  }\n  async setMetadata({ name, about, picture }) {\n    const event = new NDKEvent(this.ndk);\n    event.kind = 9002 /* GroupAdminEditMetadata */;\n    event.tags.push([\"h\", this.groupId]);\n    if (name) event.tags.push([\"name\", name]);\n    if (about) event.tags.push([\"about\", about]);\n    if (picture) event.tags.push([\"picture\", picture]);\n    await event.sign();\n    return event.publish(this.relaySet);\n  }\n  /**\n   * Adds a user to the group using a kind:9000 event\n   * @param user user to add\n   * @param opts options\n   */\n  async addUser(user) {\n    const addUserEvent = _NDKSimpleGroup.generateAddUserEvent(user.pubkey, this.groupId);\n    addUserEvent.ndk = this.ndk;\n    return addUserEvent;\n  }\n  async getMemberListEvent() {\n    const memberList = await this.ndk.fetchEvent(\n      {\n        kinds: [39002 /* GroupMembers */],\n        \"#d\": [this.groupId]\n      },\n      void 0,\n      this.relaySet\n    );\n    if (!memberList) return null;\n    return NDKSimpleGroupMemberList.from(memberList);\n  }\n  /**\n   * Gets a list of users that belong to this group\n   */\n  async getMembers() {\n    const members = [];\n    const memberPubkeys = /* @__PURE__ */ new Set();\n    const memberListEvent = await this.getMemberListEvent();\n    if (!memberListEvent) return [];\n    for (const pTag of memberListEvent.getMatchingTags(\"p\")) {\n      const pubkey = pTag[1];\n      if (memberPubkeys.has(pubkey)) continue;\n      memberPubkeys.add(pubkey);\n      try {\n        members.push(this.ndk.getUser({ pubkey }));\n      } catch {\n      }\n    }\n    return members;\n  }\n  /**\n   * Generates an event that lists the members of a group.\n   * @param groupId\n   * @returns\n   */\n  static generateUserListEvent(groupId) {\n    const event = new NDKEvent(void 0, {\n      kind: 39002 /* GroupMembers */,\n      tags: [\n        [\"h\", groupId],\n        [\"alt\", \"Group Member List\"]\n      ]\n    });\n    return event;\n  }\n  /**\n   * Generates an event that adds a user to a group.\n   * @param userPubkey pubkey of the user to add\n   * @param groupId group to add the user to\n   * @returns\n   */\n  static generateAddUserEvent(userPubkey, groupId) {\n    const event = new NDKEvent(void 0, {\n      kind: 9e3 /* GroupAdminAddUser */,\n      tags: [[\"h\", groupId]]\n    });\n    event.tags.push([\"p\", userPubkey]);\n    return event;\n  }\n  async requestToJoin(_pubkey, content) {\n    const event = new NDKEvent(this.ndk, {\n      kind: 9021 /* GroupAdminRequestJoin */,\n      content: content ?? \"\",\n      tags: [[\"h\", this.groupId]]\n    });\n    return event.publish(this.relaySet);\n  }\n  /**\n   * Makes sure that a metadata event exists locally\n   */\n  async ensureMetadataEvent() {\n    if (this.metadata) return;\n    if (this.fetchingMetadata) return this.fetchingMetadata;\n    this.fetchingMetadata = this.ndk.fetchEvent(\n      {\n        kinds: [39e3 /* GroupMetadata */],\n        \"#d\": [this.groupId]\n      },\n      void 0,\n      this.relaySet\n    ).then((event) => {\n      if (event) {\n        this.metadata = NDKSimpleGroupMetadata.from(event);\n      } else {\n        this.metadata = new NDKSimpleGroupMetadata(this.ndk);\n        this.metadata.dTag = this.groupId;\n      }\n    }).finally(() => {\n      this.fetchingMetadata = void 0;\n    }).catch(() => {\n      throw new Error(`Failed to fetch metadata for group ${this.groupId}`);\n    });\n    return this.fetchingMetadata;\n  }\n};\nfunction randomId(length) {\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charsLength = chars.length;\n  let result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * charsLength));\n  }\n  return result;\n}\n\n// src/app-settings/index.ts\nvar NDKAppSettings = class _NDKAppSettings extends NDKEvent {\n  appName;\n  settings = {};\n  constructor(ndk, rawEvent) {\n    super(ndk, rawEvent);\n    this.kind ??= 30078 /* AppSpecificData */;\n    this.dTag ??= this.appName;\n    if (this.content.length > 0) {\n      try {\n        this.settings = JSON.parse(this.content);\n      } catch (error) {\n        console.error(\"Error parsing app settings\", error);\n      }\n    }\n  }\n  static from(event) {\n    return new _NDKAppSettings(event.ndk, event);\n  }\n  /**\n   * Set a value for a given key.\n   *\n   * @param key\n   * @param value\n   */\n  set(key, value) {\n    this.settings[key] = value;\n  }\n  /**\n   * Get a value for a given key.\n   *\n   * @param key\n   * @returns\n   */\n  get(key) {\n    return this.settings[key];\n  }\n  async publishReplaceable(relaySet, timeoutMs, requiredRelayCount) {\n    this.content = JSON.stringify(this.settings);\n    return super.publishReplaceable(relaySet, timeoutMs, requiredRelayCount);\n  }\n};\n\n// src/relay/auth-policies.ts\n\nfunction disconnect(pool, debug8) {\n  debug8 ??= debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:relay:auth-policies:disconnect\");\n  return async (relay) => {\n    debug8?.(`Relay ${relay.url} requested authentication, disconnecting`);\n    pool.removeRelay(relay.url);\n  };\n}\nasync function signAndAuth(event, relay, signer, debug8, resolve, reject) {\n  try {\n    await event.sign(signer);\n    resolve(event);\n  } catch (e) {\n    debug8?.(`Failed to publish auth event to relay ${relay.url}`, e);\n    reject(event);\n  }\n}\nfunction signIn({ ndk, signer, debug: debug8 } = {}) {\n  debug8 ??= debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:auth-policies:signIn\");\n  return async (relay, challenge) => {\n    debug8?.(`Relay ${relay.url} requested authentication, signing in`);\n    const event = new NDKEvent(ndk);\n    event.kind = 22242 /* ClientAuth */;\n    event.tags = [\n      [\"relay\", relay.url],\n      [\"challenge\", challenge]\n    ];\n    signer ??= ndk?.signer;\n    return new Promise(async (resolve, reject) => {\n      if (signer) {\n        await signAndAuth(event, relay, signer, debug8, resolve, reject);\n      } else {\n        ndk?.once(\"signer:ready\", async (signer2) => {\n          await signAndAuth(event, relay, signer2, debug8, resolve, reject);\n        });\n      }\n    });\n  };\n}\nvar NDKRelayAuthPolicies = {\n  disconnect,\n  signIn\n};\n\n// src/signers/nip07/index.ts\n\nvar NDKNip07Signer = class _NDKNip07Signer {\n  _userPromise;\n  encryptionQueue = [];\n  encryptionProcessing = false;\n  debug;\n  waitTimeout;\n  _pubkey;\n  ndk;\n  _user;\n  /**\n   * @param waitTimeout - The timeout in milliseconds to wait for the NIP-07 to become available\n   */\n  constructor(waitTimeout = 1e3, ndk) {\n    this.debug = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:nip07\");\n    this.waitTimeout = waitTimeout;\n    this.ndk = ndk;\n  }\n  get pubkey() {\n    if (!this._pubkey) throw new Error(\"Not ready\");\n    return this._pubkey;\n  }\n  async blockUntilReady() {\n    await this.waitForExtension();\n    const pubkey = await window.nostr?.getPublicKey();\n    if (!pubkey) {\n      throw new Error(\"User rejected access\");\n    }\n    this._pubkey = pubkey;\n    let user;\n    if (this.ndk) user = this.ndk.getUser({ pubkey });\n    else user = new NDKUser({ pubkey });\n    this._user = user;\n    return user;\n  }\n  /**\n   * Getter for the user property.\n   * @returns The NDKUser instance.\n   */\n  async user() {\n    if (!this._userPromise) {\n      this._userPromise = this.blockUntilReady();\n    }\n    return this._userPromise;\n  }\n  get userSync() {\n    if (!this._user) throw new Error(\"User not ready\");\n    return this._user;\n  }\n  /**\n   * Signs the given Nostr event.\n   * @param event - The Nostr event to be signed.\n   * @returns The signature of the signed event.\n   * @throws Error if the NIP-07 is not available on the window object.\n   */\n  async sign(event) {\n    await this.waitForExtension();\n    const signedEvent = await window.nostr?.signEvent(event);\n    if (!signedEvent) throw new Error(\"Failed to sign event\");\n    return signedEvent.sig;\n  }\n  async relays(ndk) {\n    await this.waitForExtension();\n    const relays = await window.nostr?.getRelays?.() || {};\n    const activeRelays = [];\n    for (const url of Object.keys(relays)) {\n      if (relays[url].read && relays[url].write) {\n        activeRelays.push(url);\n      }\n    }\n    return activeRelays.map((url) => new NDKRelay(url, ndk?.relayAuthDefaultPolicy, ndk));\n  }\n  async encryptionEnabled(nip) {\n    const enabled = [];\n    if ((!nip || nip === \"nip04\") && Boolean(window.nostr?.nip04)) enabled.push(\"nip04\");\n    if ((!nip || nip === \"nip44\") && Boolean(window.nostr?.nip44)) enabled.push(\"nip44\");\n    return enabled;\n  }\n  async encrypt(recipient, value, nip = \"nip04\") {\n    if (!await this.encryptionEnabled(nip))\n      throw new Error(`${nip}encryption is not available from your browser extension`);\n    await this.waitForExtension();\n    const recipientHexPubKey = recipient.pubkey;\n    return this.queueEncryption(nip, \"encrypt\", recipientHexPubKey, value);\n  }\n  async decrypt(sender, value, nip = \"nip04\") {\n    if (!await this.encryptionEnabled(nip))\n      throw new Error(`${nip}encryption is not available from your browser extension`);\n    await this.waitForExtension();\n    const senderHexPubKey = sender.pubkey;\n    return this.queueEncryption(nip, \"decrypt\", senderHexPubKey, value);\n  }\n  async queueEncryption(scheme, method, counterpartyHexpubkey, value) {\n    return new Promise((resolve, reject) => {\n      this.encryptionQueue.push({\n        scheme,\n        method,\n        counterpartyHexpubkey,\n        value,\n        resolve,\n        reject\n      });\n      if (!this.encryptionProcessing) {\n        this.processEncryptionQueue();\n      }\n    });\n  }\n  async processEncryptionQueue(item, retries = 0) {\n    if (!item && this.encryptionQueue.length === 0) {\n      this.encryptionProcessing = false;\n      return;\n    }\n    this.encryptionProcessing = true;\n    const currentItem = item || this.encryptionQueue.shift();\n    if (!currentItem) {\n      this.encryptionProcessing = false;\n      return;\n    }\n    const { scheme, method, counterpartyHexpubkey, value, resolve, reject } = currentItem;\n    this.debug(\"Processing encryption queue item\", {\n      method,\n      counterpartyHexpubkey,\n      value\n    });\n    try {\n      const result = await window.nostr?.[scheme]?.[method](counterpartyHexpubkey, value);\n      if (!result) throw new Error(\"Failed to encrypt/decrypt\");\n      resolve(result);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      if (errorMessage.includes(\"call already executing\") && retries < 5) {\n        this.debug(\"Retrying encryption queue item\", {\n          method,\n          counterpartyHexpubkey,\n          value,\n          retries\n        });\n        setTimeout(() => {\n          this.processEncryptionQueue(currentItem, retries + 1);\n        }, 50 * retries);\n        return;\n      }\n      reject(error instanceof Error ? error : new Error(errorMessage));\n    }\n    this.processEncryptionQueue();\n  }\n  waitForExtension() {\n    return new Promise((resolve, reject) => {\n      if (window.nostr) {\n        resolve();\n        return;\n      }\n      let timerId;\n      const intervalId = setInterval(() => {\n        if (window.nostr) {\n          clearTimeout(timerId);\n          clearInterval(intervalId);\n          resolve();\n        }\n      }, 100);\n      timerId = setTimeout(() => {\n        clearInterval(intervalId);\n        reject(new Error(\"NIP-07 extension not available\"));\n      }, this.waitTimeout);\n    });\n  }\n  /**\n   * Serializes the signer type into a storable format.\n   * NIP-07 signers don't have persistent state to serialize beyond their type.\n   * @returns A JSON string containing the type.\n   */\n  toPayload() {\n    const payload = {\n      type: \"nip07\",\n      payload: \"\"\n      // No specific payload needed for NIP-07\n    };\n    return JSON.stringify(payload);\n  }\n  /**\n   * Deserializes the signer from a payload string.\n   * Creates a new NDKNip07Signer instance.\n   * @param payloadString The JSON string obtained from toPayload().\n   * @param ndk Optional NDK instance.\n   * @returns An instance of NDKNip07Signer.\n   */\n  static async fromPayload(payloadString, ndk) {\n    const payload = JSON.parse(payloadString);\n    if (payload.type !== \"nip07\") {\n      throw new Error(`Invalid payload type: expected 'nip07', got ${payload.type}`);\n    }\n    return new _NDKNip07Signer(void 0, ndk);\n  }\n};\n\n// src/signers/nip46/backend/index.ts\n\n\n// src/signers/nip46/rpc.ts\n\nvar NDKNostrRpc = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  ndk;\n  signer;\n  relaySet;\n  debug;\n  encryptionType = \"nip04\";\n  pool;\n  constructor(ndk, signer, debug8, relayUrls) {\n    super();\n    this.ndk = ndk;\n    this.signer = signer;\n    if (relayUrls) {\n      this.pool = new NDKPool(relayUrls, [], ndk, {\n        debug: debug8.extend(\"rpc-pool\"),\n        name: \"Nostr RPC\"\n      });\n      this.relaySet = new NDKRelaySet(/* @__PURE__ */ new Set(), ndk, this.pool);\n      for (const url of relayUrls) {\n        const relay = this.pool.getRelay(url, false, false);\n        relay.authPolicy = NDKRelayAuthPolicies.signIn({ ndk, signer, debug: debug8 });\n        this.relaySet.addRelay(relay);\n        relay.connect();\n      }\n    }\n    this.debug = debug8.extend(\"rpc\");\n  }\n  /**\n   * Subscribe to a filter. This function will resolve once the subscription is ready.\n   */\n  subscribe(filter) {\n    const sub = this.ndk.subscribe(\n      filter,\n      {\n        closeOnEose: false,\n        groupable: false,\n        cacheUsage: \"ONLY_RELAY\" /* ONLY_RELAY */,\n        pool: this.pool,\n        relaySet: this.relaySet\n      },\n      false\n    );\n    sub.on(\"event\", async (event) => {\n      try {\n        const parsedEvent = await this.parseEvent(event);\n        if (parsedEvent.method) {\n          this.emit(\"request\", parsedEvent);\n        } else {\n          this.emit(`response-${parsedEvent.id}`, parsedEvent);\n        }\n      } catch (e) {\n        this.debug(\"error parsing event\", e, event.rawEvent());\n      }\n    });\n    return new Promise((resolve) => {\n      sub.on(\"eose\", () => {\n        this.debug(\"eosed\");\n        resolve(sub);\n      });\n      sub.start();\n    });\n  }\n  async parseEvent(event) {\n    if (this.encryptionType === \"nip44\" && event.content.includes(\"?iv=\")) {\n      this.encryptionType = \"nip04\";\n    } else if (this.encryptionType === \"nip04\" && !event.content.includes(\"?iv=\")) {\n      this.encryptionType = \"nip44\";\n    }\n    const remoteUser = this.ndk.getUser({ pubkey: event.pubkey });\n    remoteUser.ndk = this.ndk;\n    let decryptedContent;\n    try {\n      decryptedContent = await this.signer.decrypt(remoteUser, event.content, this.encryptionType);\n    } catch (_e) {\n      const otherEncryptionType = this.encryptionType === \"nip04\" ? \"nip44\" : \"nip04\";\n      decryptedContent = await this.signer.decrypt(remoteUser, event.content, otherEncryptionType);\n      this.encryptionType = otherEncryptionType;\n    }\n    const parsedContent = JSON.parse(decryptedContent);\n    const { id, method, params, result, error } = parsedContent;\n    if (method) {\n      return { id, pubkey: event.pubkey, method, params, event };\n    }\n    return { id, result, error, event };\n  }\n  async sendResponse(id, remotePubkey, result, kind = 24133 /* NostrConnect */, error) {\n    const res = { id, result };\n    if (error) {\n      res.error = error;\n    }\n    const localUser = await this.signer.user();\n    const remoteUser = this.ndk.getUser({ pubkey: remotePubkey });\n    const event = new NDKEvent(this.ndk, {\n      kind,\n      content: JSON.stringify(res),\n      tags: [[\"p\", remotePubkey]],\n      pubkey: localUser.pubkey\n    });\n    event.content = await this.signer.encrypt(remoteUser, event.content, this.encryptionType);\n    await event.sign(this.signer);\n    await event.publish(this.relaySet);\n  }\n  /**\n   * Sends a request.\n   * @param remotePubkey\n   * @param method\n   * @param params\n   * @param kind\n   * @param id\n   */\n  async sendRequest(remotePubkey, method, params = [], kind = 24133, cb) {\n    const id = Math.random().toString(36).substring(7);\n    const localUser = await this.signer.user();\n    const remoteUser = this.ndk.getUser({ pubkey: remotePubkey });\n    const request = { id, method, params };\n    const promise = new Promise(() => {\n      const responseHandler = (response) => {\n        if (response.result === \"auth_url\") {\n          this.once(`response-${id}`, responseHandler);\n          this.emit(\"authUrl\", response.error);\n        } else if (cb) {\n          cb(response);\n        }\n      };\n      this.once(`response-${id}`, responseHandler);\n    });\n    const event = new NDKEvent(this.ndk, {\n      kind,\n      content: JSON.stringify(request),\n      tags: [[\"p\", remotePubkey]],\n      pubkey: localUser.pubkey\n    });\n    event.content = await this.signer.encrypt(remoteUser, event.content, this.encryptionType);\n    await event.sign(this.signer);\n    await event.publish(this.relaySet);\n    return promise;\n  }\n};\n\n// src/signers/nip46/backend/connect.ts\nvar ConnectEventHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [_, token] = params;\n    const debug8 = backend.debug.extend(\"connect\");\n    debug8(`connection request from ${remotePubkey}`);\n    if (token && backend.applyToken) {\n      debug8(\"applying token\");\n      await backend.applyToken(remotePubkey, token);\n    }\n    if (await backend.pubkeyAllowed({\n      id,\n      pubkey: remotePubkey,\n      method: \"connect\",\n      params: token\n    })) {\n      debug8(`connection request from ${remotePubkey} allowed`);\n      return \"ack\";\n    }\n    debug8(`connection request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n};\n\n// src/signers/nip46/backend/get-public-key.ts\nvar GetPublicKeyHandlingStrategy = class {\n  async handle(backend, _id, _remotePubkey, _params) {\n    return backend.localUser?.pubkey;\n  }\n};\n\n// src/signers/nip46/backend/nip04-decrypt.ts\nvar Nip04DecryptHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [senderPubkey, payload] = params;\n    const senderUser = new NDKUser({ pubkey: senderPubkey });\n    const decryptedPayload = await decrypt2(backend, id, remotePubkey, senderUser, payload);\n    return decryptedPayload;\n  }\n};\nasync function decrypt2(backend, id, remotePubkey, senderUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip04_decrypt\",\n    params: payload\n  })) {\n    backend.debug(`decrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.decrypt(senderUser, payload, \"nip04\");\n}\n\n// src/signers/nip46/backend/nip04-encrypt.ts\nvar Nip04EncryptHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [recipientPubkey, payload] = params;\n    const recipientUser = new NDKUser({ pubkey: recipientPubkey });\n    const encryptedPayload = await encrypt2(backend, id, remotePubkey, recipientUser, payload);\n    return encryptedPayload;\n  }\n};\nasync function encrypt2(backend, id, remotePubkey, recipientUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip04_encrypt\",\n    params: payload\n  })) {\n    backend.debug(`encrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.encrypt(recipientUser, payload, \"nip04\");\n}\n\n// src/signers/nip46/backend/nip44-decrypt.ts\nvar Nip04DecryptHandlingStrategy2 = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [senderPubkey, payload] = params;\n    const senderUser = new NDKUser({ pubkey: senderPubkey });\n    const decryptedPayload = await decrypt3(backend, id, remotePubkey, senderUser, payload);\n    return decryptedPayload;\n  }\n};\nasync function decrypt3(backend, id, remotePubkey, senderUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip44_decrypt\",\n    params: payload\n  })) {\n    backend.debug(`decrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.decrypt(senderUser, payload, \"nip44\");\n}\n\n// src/signers/nip46/backend/nip44-encrypt.ts\nvar Nip04EncryptHandlingStrategy2 = class {\n  async handle(backend, id, remotePubkey, params) {\n    const [recipientPubkey, payload] = params;\n    const recipientUser = new NDKUser({ pubkey: recipientPubkey });\n    const encryptedPayload = await encrypt3(backend, id, remotePubkey, recipientUser, payload);\n    return encryptedPayload;\n  }\n};\nasync function encrypt3(backend, id, remotePubkey, recipientUser, payload) {\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"nip44_encrypt\",\n    params: payload\n  })) {\n    backend.debug(`encrypt request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  return await backend.signer.encrypt(recipientUser, payload, \"nip44\");\n}\n\n// src/signers/nip46/backend/ping.ts\nvar PingEventHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, _params) {\n    const debug8 = backend.debug.extend(\"ping\");\n    debug8(`ping request from ${remotePubkey}`);\n    if (await backend.pubkeyAllowed({ id, pubkey: remotePubkey, method: \"ping\" })) {\n      debug8(`connection request from ${remotePubkey} allowed`);\n      return \"pong\";\n    }\n    debug8(`connection request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n};\n\n// src/signers/nip46/backend/sign-event.ts\nvar SignEventHandlingStrategy = class {\n  async handle(backend, id, remotePubkey, params) {\n    const event = await signEvent(backend, id, remotePubkey, params);\n    if (!event) return void 0;\n    return JSON.stringify(await event.toNostrEvent());\n  }\n};\nasync function signEvent(backend, id, remotePubkey, params) {\n  const [eventString] = params;\n  backend.debug(`sign event request from ${remotePubkey}`);\n  const event = new NDKEvent(backend.ndk, JSON.parse(eventString));\n  backend.debug(\"event to sign\", event.rawEvent());\n  if (!await backend.pubkeyAllowed({\n    id,\n    pubkey: remotePubkey,\n    method: \"sign_event\",\n    params: event\n  })) {\n    backend.debug(`sign event request from ${remotePubkey} rejected`);\n    return void 0;\n  }\n  backend.debug(`sign event request from ${remotePubkey} allowed`);\n  await event.sign(backend.signer);\n  return event;\n}\n\n// src/signers/nip46/backend/index.ts\nvar NDKNip46Backend = class {\n  ndk;\n  signer;\n  localUser;\n  debug;\n  rpc;\n  permitCallback;\n  relayUrls;\n  /**\n   * @param ndk The NDK instance to use\n   * @param privateKeyOrSigner The private key or signer of the npub that wants to be published as\n   * @param permitCallback Callback executed when permission is requested\n   */\n  constructor(ndk, privateKeyOrSigner, permitCallback, relayUrls) {\n    this.ndk = ndk;\n    if (privateKeyOrSigner instanceof Uint8Array) {\n      this.signer = new NDKPrivateKeySigner(privateKeyOrSigner);\n    } else if (privateKeyOrSigner instanceof String) {\n      this.signer = new NDKPrivateKeySigner((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(privateKeyOrSigner));\n    } else if (privateKeyOrSigner instanceof NDKPrivateKeySigner) {\n      this.signer = privateKeyOrSigner;\n    } else {\n      throw new Error(\"Invalid signer\");\n    }\n    this.debug = ndk.debug.extend(\"nip46:backend\");\n    this.relayUrls = relayUrls ?? Array.from(ndk.pool.relays.keys());\n    this.rpc = new NDKNostrRpc(ndk, this.signer, this.debug, this.relayUrls);\n    this.permitCallback = permitCallback;\n  }\n  /**\n   * This method starts the backend, which will start listening for incoming\n   * requests.\n   */\n  async start() {\n    this.localUser = await this.signer.user();\n    const sub = this.ndk.subscribe(\n      {\n        kinds: [24133],\n        \"#p\": [this.localUser.pubkey]\n      },\n      { closeOnEose: false }\n    );\n    sub.on(\"event\", (e) => this.handleIncomingEvent(e));\n  }\n  handlers = {\n    connect: new ConnectEventHandlingStrategy(),\n    sign_event: new SignEventHandlingStrategy(),\n    nip04_encrypt: new Nip04EncryptHandlingStrategy(),\n    nip04_decrypt: new Nip04DecryptHandlingStrategy(),\n    nip44_encrypt: new Nip04EncryptHandlingStrategy2(),\n    nip44_decrypt: new Nip04DecryptHandlingStrategy2(),\n    get_public_key: new GetPublicKeyHandlingStrategy(),\n    ping: new PingEventHandlingStrategy()\n  };\n  /**\n   * Enables the user to set a custom strategy for handling incoming events.\n   * @param method - The method to set the strategy for\n   * @param strategy - The strategy to set\n   */\n  setStrategy(method, strategy) {\n    this.handlers[method] = strategy;\n  }\n  /**\n   * Overload this method to apply tokens, which can\n   * wrap permission sets to be applied to a pubkey.\n   * @param pubkey public key to apply token to\n   * @param token token to apply\n   */\n  async applyToken(_pubkey, _token) {\n    throw new Error(\"connection token not supported\");\n  }\n  async handleIncomingEvent(event) {\n    const { id, method, params } = await this.rpc.parseEvent(event);\n    const remotePubkey = event.pubkey;\n    let response;\n    this.debug(\"incoming event\", { id, method, params });\n    if (!event.verifySignature(false)) {\n      this.debug(\"invalid signature\", event.rawEvent());\n      return;\n    }\n    const strategy = this.handlers[method];\n    if (strategy) {\n      try {\n        response = await strategy.handle(this, id, remotePubkey, params);\n      } catch (e) {\n        this.debug(\"error handling event\", e, { id, method, params });\n        this.rpc.sendResponse(id, remotePubkey, \"error\", void 0, e.message);\n      }\n    } else {\n      this.debug(\"unsupported method\", { method, params });\n    }\n    if (response) {\n      this.debug(`sending response to ${remotePubkey}`, response);\n      this.rpc.sendResponse(id, remotePubkey, response);\n    } else {\n      this.rpc.sendResponse(id, remotePubkey, \"error\", void 0, \"Not authorized\");\n    }\n  }\n  /**\n   * This method should be overriden by the user to allow or reject incoming\n   * connections.\n   */\n  async pubkeyAllowed(params) {\n    return this.permitCallback(params);\n  }\n};\n\n// src/signers/nip46/index.ts\n\n\n// src/signers/deserialization.ts\nvar signerRegistry = /* @__PURE__ */ new Map();\nsignerRegistry.set(\"private-key\", NDKPrivateKeySigner);\nsignerRegistry.set(\"nip07\", NDKNip07Signer);\nsignerRegistry.set(\"nip46\", NDKNip46Signer);\nasync function ndkSignerFromPayload(payloadString, ndk) {\n  let parsed;\n  try {\n    parsed = JSON.parse(payloadString);\n  } catch (e) {\n    throw new Error(`Failed to parse signer payload: ${e instanceof Error ? e.message : String(e)}`);\n  }\n  const SignerClass = signerRegistry.get(parsed.type);\n  if (!SignerClass) {\n    throw new Error(`Unknown signer type: ${parsed.type}`);\n  }\n  try {\n    return await SignerClass.fromPayload(payloadString, ndk);\n  } catch (e) {\n    const errorMsg = e instanceof Error ? e.message : String(e);\n    throw new Error(`Failed to deserialize signer type ${parsed.type}: ${errorMsg}`);\n  }\n}\n\n// src/signers/nip46/index.ts\nvar NDKNip46Signer = class _NDKNip46Signer extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  ndk;\n  _user;\n  /**\n   * The pubkey of the bunker that will be providing signatures\n   */\n  bunkerPubkey;\n  /**\n   * The pubkey of the user that events will be published as\n   */\n  userPubkey;\n  get pubkey() {\n    if (!this.userPubkey) throw new Error(\"Not ready\");\n    return this.userPubkey;\n  }\n  /**\n   * An optional secret value provided to connect to the bunker\n   */\n  secret;\n  localSigner;\n  nip05;\n  rpc;\n  debug;\n  relayUrls;\n  subscription;\n  /**\n   * @param ndk - The NDK instance to use\n   * @param userOrConnectionToken - The public key, or a connection token, of the npub that wants to be published as\n   * @param localSigner - The signer that will be used to request events to be signed\n   */\n  constructor(ndk, userOrConnectionToken, localSigner) {\n    super();\n    this.ndk = ndk;\n    this.debug = ndk.debug.extend(\"nip46:signer\");\n    if (userOrConnectionToken.startsWith(\"bunker://\")) {\n      this.connectionTokenInit(userOrConnectionToken);\n    } else {\n      this.nip05Init(userOrConnectionToken);\n    }\n    if (!localSigner) {\n      this.localSigner = NDKPrivateKeySigner.generate();\n    } else {\n      this.localSigner = localSigner;\n    }\n    this.rpc = new NDKNostrRpc(this.ndk, this.localSigner, this.debug, this.relayUrls);\n  }\n  connectionTokenInit(connectionToken) {\n    const bunkerUrl = new URL(connectionToken);\n    const bunkerPubkey = bunkerUrl.hostname || bunkerUrl.pathname.replace(/^\\/\\//, \"\");\n    const userPubkey = bunkerUrl.searchParams.get(\"pubkey\");\n    const relayUrls = bunkerUrl.searchParams.getAll(\"relay\");\n    const secret = bunkerUrl.searchParams.get(\"secret\");\n    this.bunkerPubkey = bunkerPubkey;\n    this.userPubkey = userPubkey;\n    this.relayUrls = relayUrls;\n    this.secret = secret;\n  }\n  nip05Init(nip05) {\n    this.nip05 = nip05;\n  }\n  /**\n   * We start listening for events from the bunker\n   */\n  async startListening() {\n    if (this.subscription) return;\n    const localUser = await this.localSigner.user();\n    if (!localUser) throw new Error(\"Local signer not ready\");\n    this.subscription = await this.rpc.subscribe({\n      kinds: [24133 /* NostrConnect */],\n      \"#p\": [localUser.pubkey]\n    });\n  }\n  /**\n   * Get the user that is being published as\n   */\n  async user() {\n    if (this._user) return this._user;\n    return this.blockUntilReady();\n  }\n  get userSync() {\n    if (!this._user) throw new Error(\"Remote user not ready synchronously\");\n    return this._user;\n  }\n  async blockUntilReady() {\n    if (this.nip05 && !this.userPubkey) {\n      const user = await NDKUser.fromNip05(this.nip05, this.ndk);\n      if (user) {\n        this._user = user;\n        this.userPubkey = user.pubkey;\n        this.relayUrls = user.nip46Urls;\n        this.rpc = new NDKNostrRpc(this.ndk, this.localSigner, this.debug, this.relayUrls);\n      }\n    }\n    if (!this.bunkerPubkey && this.userPubkey) {\n      this.bunkerPubkey = this.userPubkey;\n    } else if (!this.bunkerPubkey) {\n      throw new Error(\"Bunker pubkey not set\");\n    }\n    await this.startListening();\n    this.rpc.on(\"authUrl\", (...props) => {\n      this.emit(\"authUrl\", ...props);\n    });\n    return new Promise((resolve, reject) => {\n      const connectParams = [this.userPubkey ?? \"\"];\n      if (this.secret) connectParams.push(this.secret);\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(this.bunkerPubkey, \"connect\", connectParams, 24133, (response) => {\n        if (response.result === \"ack\") {\n          this.getPublicKey().then((pubkey) => {\n            this.userPubkey = pubkey;\n            this._user = this.ndk.getUser({ pubkey });\n            resolve(this._user);\n          });\n        } else {\n          reject(response.error);\n        }\n      });\n    });\n  }\n  async getPublicKey() {\n    if (this.userPubkey) return this.userPubkey;\n    return new Promise((resolve, _reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(this.bunkerPubkey, \"get_public_key\", [], 24133, (response) => {\n        resolve(response.result);\n      });\n    });\n  }\n  async encryptionEnabled(scheme) {\n    if (scheme) return [scheme];\n    return Promise.resolve([\"nip04\", \"nip44\"]);\n  }\n  async encrypt(recipient, value, scheme = \"nip04\") {\n    return this.encryption(recipient, value, scheme, \"encrypt\");\n  }\n  async decrypt(sender, value, scheme = \"nip04\") {\n    return this.encryption(sender, value, scheme, \"decrypt\");\n  }\n  async encryption(peer, value, scheme, method) {\n    const promise = new Promise((resolve, reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(\n        this.bunkerPubkey,\n        `${scheme}_${method}`,\n        [peer.pubkey, value],\n        24133,\n        (response) => {\n          if (!response.error) {\n            resolve(response.result);\n          } else {\n            reject(response.error);\n          }\n        }\n      );\n    });\n    return promise;\n  }\n  async sign(event) {\n    const promise = new Promise((resolve, reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(\n        this.bunkerPubkey,\n        \"sign_event\",\n        [JSON.stringify(event)],\n        24133,\n        (response) => {\n          if (!response.error) {\n            const json = JSON.parse(response.result);\n            resolve(json.sig);\n          } else {\n            reject(response.error);\n          }\n        }\n      );\n    });\n    return promise;\n  }\n  /**\n   * Allows creating a new account on the remote server.\n   * @param username Desired username for the NIP-05\n   * @param domain Desired domain for the NIP-05\n   * @param email Email address to associate with this account -- Remote servers may use this for recovery\n   * @returns The public key of the newly created account\n   */\n  async createAccount(username, domain, email) {\n    await this.startListening();\n    const req = [];\n    if (username) req.push(username);\n    if (domain) req.push(domain);\n    if (email) req.push(email);\n    return new Promise((resolve, reject) => {\n      if (!this.bunkerPubkey) throw new Error(\"Bunker pubkey not set\");\n      this.rpc.sendRequest(\n        this.bunkerPubkey,\n        \"create_account\",\n        req,\n        24133 /* NostrConnect */,\n        (response) => {\n          if (!response.error) {\n            const pubkey = response.result;\n            resolve(pubkey);\n          } else {\n            reject(response.error);\n          }\n        }\n      );\n    });\n  }\n  /**\n   * Serializes the signer's connection details and local signer state.\n   * @returns A JSON string containing the type, connection info, and local signer payload.\n   */\n  toPayload() {\n    if (!this.bunkerPubkey || !this.userPubkey) {\n      throw new Error(\"NIP-46 signer is not fully initialized for serialization\");\n    }\n    const payload = {\n      type: \"nip46\",\n      payload: {\n        bunkerPubkey: this.bunkerPubkey,\n        userPubkey: this.userPubkey,\n        relayUrls: this.relayUrls,\n        secret: this.secret,\n        localSignerPayload: this.localSigner.toPayload(),\n        // Store nip05 if it was used for initialization, otherwise null\n        nip05: this.nip05 || null\n      }\n    };\n    return JSON.stringify(payload);\n  }\n  /**\n   * Deserializes the signer from a payload string.\n   * @param payloadString The JSON string obtained from toPayload().\n   * @param ndk The NDK instance, required for NIP-46.\n   * @returns An instance of NDKNip46Signer.\n   */\n  static async fromPayload(payloadString, ndk) {\n    if (!ndk) {\n      throw new Error(\"NDK instance is required to deserialize NIP-46 signer\");\n    }\n    const parsed = JSON.parse(payloadString);\n    if (parsed.type !== \"nip46\") {\n      throw new Error(`Invalid payload type: expected 'nip46', got ${parsed.type}`);\n    }\n    const payload = parsed.payload;\n    if (!payload || typeof payload !== \"object\" || !payload.localSignerPayload) {\n      throw new Error(\"Invalid payload content for nip46 signer\");\n    }\n    const localSigner = await ndkSignerFromPayload(payload.localSignerPayload, ndk);\n    if (!localSigner) {\n      throw new Error(\"Failed to deserialize local signer for NIP-46\");\n    }\n    let signer;\n    if (payload.nip05) {\n      signer = new _NDKNip46Signer(ndk, payload.nip05, localSigner);\n      signer.userPubkey = payload.userPubkey;\n      signer.bunkerPubkey = payload.bunkerPubkey;\n      signer.relayUrls = payload.relayUrls;\n      signer.secret = payload.secret;\n    } else {\n      signer = new _NDKNip46Signer(ndk, payload.userPubkey, localSigner);\n      signer.bunkerPubkey = payload.bunkerPubkey;\n      signer.relayUrls = payload.relayUrls;\n      signer.secret = payload.secret;\n    }\n    return signer;\n  }\n};\n\n// src/dvm/schedule.ts\nfunction addRelays(event, relays) {\n  const tags = [];\n  if (!relays || relays.length === 0) {\n    const poolRelays = event.ndk?.pool.relays;\n    relays = poolRelays ? Object.keys(poolRelays) : void 0;\n  }\n  if (relays && relays.length > 0) tags.push([\"relays\", ...relays]);\n  return tags;\n}\nasync function dvmSchedule(events, dvm, relays, encrypted = true, waitForConfirmationForMs) {\n  if (!Array.isArray(events)) {\n    events = [events];\n  }\n  const ndk = events[0].ndk;\n  if (!ndk) throw new Error(\"NDK not set\");\n  for (const event of events) {\n    if (!event.sig) throw new Error(\"Event not signed\");\n    if (!event.created_at) throw new Error(\"Event has no date\");\n    if (!dvm) throw new Error(\"No DVM specified\");\n    if (event.created_at <= Date.now() / 1e3) throw new Error(\"Event needs to be in the future\");\n  }\n  const scheduleEvent = new NDKDVMRequest(ndk, {\n    kind: 5905 /* DVMEventSchedule */\n  });\n  for (const event of events) {\n    scheduleEvent.addInput(JSON.stringify(event.rawEvent()), \"text\");\n  }\n  scheduleEvent.tags.push(...addRelays(events[0], relays));\n  if (encrypted) {\n    await scheduleEvent.encryption(dvm);\n  } else {\n    scheduleEvent.dvm = dvm;\n  }\n  await scheduleEvent.sign();\n  let res;\n  if (waitForConfirmationForMs) {\n    res = ndk.subscribe(\n      {\n        kinds: [5905 /* DVMEventSchedule */ + 1e3, 7e3 /* DVMJobFeedback */],\n        ...scheduleEvent.filter()\n      },\n      { groupable: false, closeOnEose: false }\n    );\n  }\n  const timeoutPromise = new Promise((reject) => {\n    setTimeout(() => {\n      res?.stop();\n      reject(\"Timeout waiting for an answer from the DVM\");\n    }, waitForConfirmationForMs);\n  });\n  const schedulePromise = new Promise((resolve, reject) => {\n    if (waitForConfirmationForMs) {\n      res?.on(\"event\", async (e) => {\n        res?.stop();\n        if (e.kind === 7e3 /* DVMJobFeedback */) {\n          const feedback = await NDKDVMJobFeedback.from(e);\n          if (feedback.status === \"error\") {\n            const statusTag = feedback.getMatchingTags(\"status\");\n            reject(statusTag?.[2] ?? feedback);\n          } else {\n            resolve(feedback);\n          }\n        }\n        resolve(e);\n      });\n    }\n    scheduleEvent.publish().then(() => {\n      if (!waitForConfirmationForMs) resolve(void 0);\n    });\n  });\n  return new Promise((resolve, reject) => {\n    if (waitForConfirmationForMs) {\n      Promise.race([timeoutPromise, schedulePromise]).then((e) => {\n        resolve(e);\n      }).catch(reject);\n    } else {\n      schedulePromise.then(resolve);\n    }\n  });\n}\n\n// src/ndk/index.ts\n\n\n\n// src/events/dedup.ts\nfunction dedup(event1, event2) {\n  if (event1.created_at > event2.created_at) {\n    return event1;\n  }\n  return event2;\n}\n\n// src/outbox/tracker.ts\n\n\n\n// src/utils/get-users-relay-list.ts\nasync function getRelayListForUser(pubkey, ndk) {\n  const list = await getRelayListForUsers([pubkey], ndk);\n  return list.get(pubkey);\n}\nasync function getRelayListForUsers(pubkeys, ndk, skipCache = false, timeout = 1e3) {\n  const pool = ndk.outboxPool || ndk.pool;\n  const set = /* @__PURE__ */ new Set();\n  for (const relay of pool.relays.values()) set.add(relay);\n  const relayLists = /* @__PURE__ */ new Map();\n  const fromContactList = /* @__PURE__ */ new Map();\n  const relaySet = new NDKRelaySet(set, ndk);\n  if (ndk.cacheAdapter?.locking && !skipCache) {\n    const cachedList = await ndk.fetchEvents(\n      { kinds: [3, 10002], authors: Array.from(new Set(pubkeys)) },\n      { cacheUsage: \"ONLY_CACHE\" /* ONLY_CACHE */, subId: \"ndk-relay-list-fetch\" }\n    );\n    for (const relayList of cachedList) {\n      if (relayList.kind === 10002) relayLists.set(relayList.pubkey, NDKRelayList.from(relayList));\n    }\n    for (const relayList of cachedList) {\n      if (relayList.kind === 3) {\n        if (relayLists.has(relayList.pubkey)) continue;\n        const list = relayListFromKind3(ndk, relayList);\n        if (list) fromContactList.set(relayList.pubkey, list);\n      }\n    }\n    pubkeys = pubkeys.filter((pubkey) => !relayLists.has(pubkey) && !fromContactList.has(pubkey));\n  }\n  if (pubkeys.length === 0) return relayLists;\n  const relayListEvents = /* @__PURE__ */ new Map();\n  const contactListEvents = /* @__PURE__ */ new Map();\n  return new Promise((resolve) => {\n    const handleSubscription = async () => {\n      const subscribeOpts = {\n        closeOnEose: true,\n        pool,\n        groupable: true,\n        subId: \"ndk-relay-list-fetch\",\n        addSinceFromCache: true,\n        relaySet\n      };\n      if (relaySet) subscribeOpts.relaySet = relaySet;\n      ndk.subscribe({ kinds: [3, 10002], authors: pubkeys }, subscribeOpts, {\n        onEvent: (event) => {\n          if (event.kind === 10002 /* RelayList */) {\n            const existingEvent = relayListEvents.get(event.pubkey);\n            if (existingEvent && existingEvent.created_at > event.created_at) return;\n            relayListEvents.set(event.pubkey, event);\n          } else if (event.kind === 3 /* Contacts */) {\n            const existingEvent = contactListEvents.get(event.pubkey);\n            if (existingEvent && existingEvent.created_at > event.created_at) return;\n            contactListEvents.set(event.pubkey, event);\n          }\n        },\n        onEose: () => {\n          for (const event of relayListEvents.values()) {\n            relayLists.set(event.pubkey, NDKRelayList.from(event));\n          }\n          for (const pubkey of pubkeys) {\n            if (relayLists.has(pubkey)) continue;\n            const contactList = contactListEvents.get(pubkey);\n            if (!contactList) continue;\n            const list = relayListFromKind3(ndk, contactList);\n            if (list) relayLists.set(pubkey, list);\n          }\n          resolve(relayLists);\n        }\n      });\n      setTimeout(() => {\n        resolve(relayLists);\n      }, timeout);\n    };\n    handleSubscription();\n  });\n}\n\n// src/outbox/tracker.ts\nvar OutboxItem = class {\n  /**\n   * Type of item\n   */\n  type;\n  /**\n   * The relay URLs that are of interest to this item\n   */\n  relayUrlScores;\n  readRelays;\n  writeRelays;\n  constructor(type) {\n    this.type = type;\n    this.relayUrlScores = /* @__PURE__ */ new Map();\n    this.readRelays = /* @__PURE__ */ new Set();\n    this.writeRelays = /* @__PURE__ */ new Set();\n  }\n};\nvar OutboxTracker = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  data;\n  ndk;\n  debug;\n  constructor(ndk) {\n    super();\n    this.ndk = ndk;\n    this.debug = ndk.debug.extend(\"outbox-tracker\");\n    this.data = new typescript_lru_cache__WEBPACK_IMPORTED_MODULE_3__.LRUCache({\n      maxSize: 1e5,\n      entryExpirationTimeInMS: 2 * 60 * 1e3\n    });\n  }\n  /**\n   * Adds a list of users to the tracker.\n   * @param items\n   * @param skipCache\n   */\n  async trackUsers(items, skipCache = false) {\n    const promises = [];\n    for (let i = 0; i < items.length; i += 400) {\n      const slice = items.slice(i, i + 400);\n      const pubkeys = slice.map((item) => getKeyFromItem(item)).filter((pubkey) => !this.data.has(pubkey));\n      if (pubkeys.length === 0) continue;\n      for (const pubkey of pubkeys) {\n        this.data.set(pubkey, new OutboxItem(\"user\"));\n      }\n      promises.push(\n        new Promise((resolve) => {\n          getRelayListForUsers(pubkeys, this.ndk, skipCache).then((relayLists) => {\n            for (const [pubkey, relayList] of relayLists) {\n              let outboxItem = this.data.get(pubkey);\n              outboxItem ??= new OutboxItem(\"user\");\n              if (relayList) {\n                outboxItem.readRelays = new Set(normalize(relayList.readRelayUrls));\n                outboxItem.writeRelays = new Set(normalize(relayList.writeRelayUrls));\n                for (const relayUrl of outboxItem.readRelays) {\n                  if (this.ndk.pool.blacklistRelayUrls.has(relayUrl)) {\n                    outboxItem.readRelays.delete(relayUrl);\n                  }\n                }\n                for (const relayUrl of outboxItem.writeRelays) {\n                  if (this.ndk.pool.blacklistRelayUrls.has(relayUrl)) {\n                    outboxItem.writeRelays.delete(relayUrl);\n                  }\n                }\n                this.data.set(pubkey, outboxItem);\n              }\n            }\n          }).finally(resolve);\n        })\n      );\n    }\n    return Promise.all(promises);\n  }\n  /**\n   *\n   * @param key\n   * @param score\n   */\n  track(item, type, _skipCache = true) {\n    const key = getKeyFromItem(item);\n    type ??= getTypeFromItem(item);\n    let outboxItem = this.data.get(key);\n    if (!outboxItem) {\n      outboxItem = new OutboxItem(type);\n      if (item instanceof NDKUser) {\n        this.trackUsers([item]);\n      }\n    }\n    return outboxItem;\n  }\n};\nfunction getKeyFromItem(item) {\n  if (item instanceof NDKUser) {\n    return item.pubkey;\n  }\n  return item;\n}\nfunction getTypeFromItem(item) {\n  if (item instanceof NDKUser) {\n    return \"user\";\n  }\n  return \"kind\";\n}\n\n// src/relay/sets/utils.ts\nfunction correctRelaySet(relaySet, pool) {\n  const connectedRelays = pool.connectedRelays();\n  const includesConnectedRelay = Array.from(relaySet.relays).some((relay) => {\n    return connectedRelays.map((r) => r.url).includes(relay.url);\n  });\n  if (!includesConnectedRelay) {\n    for (const relay of connectedRelays) {\n      relaySet.addRelay(relay);\n    }\n  }\n  if (connectedRelays.length === 0) {\n    for (const relay of pool.relays.values()) {\n      relaySet.addRelay(relay);\n    }\n  }\n  return relaySet;\n}\n\n// src/subscription/manager.ts\n\nvar NDKSubscriptionManager = class {\n  subscriptions;\n  seenEvents = /* @__PURE__ */ new Map();\n  constructor() {\n    this.subscriptions = /* @__PURE__ */ new Map();\n  }\n  add(sub) {\n    this.subscriptions.set(sub.internalId, sub);\n    if (sub.onStopped) {\n    }\n    sub.onStopped = () => {\n      this.subscriptions.delete(sub.internalId);\n    };\n    sub.on(\"close\", () => {\n      this.subscriptions.delete(sub.internalId);\n    });\n  }\n  seenEvent(eventId, relay) {\n    const current = this.seenEvents.get(eventId) || [];\n    current.push(relay);\n    this.seenEvents.set(eventId, current);\n  }\n  /**\n   * Whenever an event comes in, this function is called.\n   * This function matches the received event against all the\n   * known (i.e. active) NDKSubscriptions, and if it matches,\n   * it sends the event to the subscription.\n   *\n   * This is the single place in the codebase that matches\n   * incoming events with parties interested in the event.\n   *\n   * This is also what allows for reactivity in NDK apps, such that\n   * whenever an active subscription receives an event that some\n   * other active subscription would want to receive, both receive it.\n   *\n   * TODO This also allows for subscriptions that overlap in meaning\n   * to be collapsed into one.\n   *\n   * I.e. if a subscription with filter: kinds: [1], authors: [alice]\n   * is created and EOSEs, and then a subsequent subscription with\n   * kinds: [1], authors: [alice] is created, once the second subscription\n   * EOSEs we can safely close it, increment its refCount and close it,\n   * and when the first subscription receives a new event from Alice this\n   * code will make the second subscription receive the event even though\n   * it has no active subscription on a relay.\n   * @param event Raw event received from a relay\n   * @param relay Relay that sent the event\n   * @param optimisticPublish Whether the event is coming from an optimistic publish\n   */\n  dispatchEvent(event, relay, optimisticPublish = false) {\n    if (relay) this.seenEvent(event.id, relay);\n    const subscriptions = this.subscriptions.values();\n    const matchingSubs = [];\n    for (const sub of subscriptions) {\n      if ((0,nostr_tools__WEBPACK_IMPORTED_MODULE_2__.matchFilters)(sub.filters, event)) {\n        matchingSubs.push(sub);\n      }\n    }\n    for (const sub of matchingSubs) {\n      sub.eventReceived(event, relay, false, optimisticPublish);\n    }\n  }\n};\n\n// src/ndk/active-user.ts\n\nvar debug6 = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:active-user\");\nasync function getUserRelayList(user) {\n  if (!this.autoConnectUserRelays) return;\n  const userRelays = await getRelayListForUser(user.pubkey, this);\n  if (!userRelays) return;\n  for (const url of userRelays.relays) {\n    let relay = this.pool.relays.get(url);\n    if (!relay) {\n      relay = new NDKRelay(url, this.relayAuthDefaultPolicy, this);\n      this.pool.addRelay(relay);\n    }\n  }\n  return userRelays;\n}\nasync function setActiveUser(user) {\n  const pool = this.outboxPool || this.pool;\n  if (pool.connectedRelays.length > 0) {\n    setActiveUserConnected.call(this, user);\n  } else {\n    pool.once(\"connect\", () => {\n      setActiveUserConnected.call(this, user);\n    });\n  }\n}\nasync function setActiveUserConnected(user) {\n  const userRelays = await getUserRelayList.call(this, user);\n  const filters = [\n    {\n      kinds: [10006 /* BlockRelayList */],\n      authors: [user.pubkey]\n    }\n  ];\n  if (this.autoFetchUserMutelist) {\n    filters[0].kinds?.push(1e4 /* MuteList */);\n  }\n  const events = /* @__PURE__ */ new Map();\n  const relaySet = userRelays ? userRelays.relaySet : void 0;\n  this.subscribe(\n    filters,\n    { subId: \"active-user-settings\", closeOnEose: true, relaySet },\n    {\n      onEvent: (event) => {\n        const prevEvent = events.get(event.kind);\n        if (prevEvent && prevEvent.created_at >= event.created_at) return;\n        events.set(event.kind, event);\n      },\n      onEose: () => {\n        for (const event of events.values()) {\n          processEvent.call(this, event);\n        }\n      }\n    }\n  );\n}\nasync function processEvent(event) {\n  if (event.kind === 10006 /* BlockRelayList */) {\n    processBlockRelayList.call(this, event);\n  } else if (event.kind === 1e4 /* MuteList */) {\n    processMuteList.call(this, event);\n  }\n}\nfunction processBlockRelayList(event) {\n  const list = lists_default.from(event);\n  for (const item of list.items) {\n    this.pool.blacklistRelayUrls.add(item[0]);\n  }\n  debug6(\"Added %d relays to relay blacklist\", list.items.length);\n}\nfunction processMuteList(muteList) {\n  const list = lists_default.from(muteList);\n  for (const item of list.items) {\n    this.mutedIds.set(item[1], item[0]);\n  }\n  debug6(\"Added %d users to mute list\", list.items.length);\n}\n\n// src/ndk/entity.ts\n\nfunction getEntity(entity) {\n  try {\n    const decoded = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip19.decode(entity);\n    if (decoded.type === \"npub\") return npub(this, decoded.data);\n    if (decoded.type === \"nprofile\") return nprofile(this, decoded.data);\n    return decoded;\n  } catch (_e) {\n    return null;\n  }\n}\nfunction npub(ndk, pubkey) {\n  return ndk.getUser({ pubkey });\n}\nfunction nprofile(ndk, profile) {\n  const user = ndk.getUser({ pubkey: profile.pubkey });\n  if (profile.relays) user.relayUrls = profile.relays;\n  return user;\n}\n\n// src/ndk/fetch-event-from-tag.ts\nfunction isValidHint(hint) {\n  if (!hint || hint === \"\") return false;\n  try {\n    new URL(hint);\n    return true;\n  } catch (_e) {\n    return false;\n  }\n}\nasync function fetchEventFromTag(tag, originalEvent, subOpts, fallback = {\n  type: \"timeout\"\n}) {\n  const d4 = this.debug.extend(\"fetch-event-from-tag\");\n  const [_, id, hint] = tag;\n  subOpts = {};\n  d4(\"fetching event from tag\", tag, subOpts, fallback);\n  const authorRelays = getRelaysForSync(this, originalEvent.pubkey);\n  if (authorRelays && authorRelays.size > 0) {\n    d4(\"fetching event from author relays %o\", Array.from(authorRelays));\n    const relaySet2 = NDKRelaySet.fromRelayUrls(Array.from(authorRelays), this);\n    const event2 = await this.fetchEvent(id, subOpts, relaySet2);\n    if (event2) return event2;\n  } else {\n    d4(\"no author relays found for %s\", originalEvent.pubkey, originalEvent);\n  }\n  const relaySet = calculateRelaySetsFromFilters(this, [{ ids: [id] }], this.pool);\n  d4(\"fetching event without relay hint\", relaySet);\n  const event = await this.fetchEvent(id, subOpts);\n  if (event) return event;\n  if (hint && hint !== \"\") {\n    const event2 = await this.fetchEvent(id, subOpts, this.pool.getRelay(hint, true, true, [{ ids: [id] }]));\n    if (event2) return event2;\n  }\n  let result = void 0;\n  const relay = isValidHint(hint) ? this.pool.getRelay(hint, false, true, [{ ids: [id] }]) : void 0;\n  const fetchMaybeWithRelayHint = new Promise((resolve) => {\n    this.fetchEvent(id, subOpts, relay).then(resolve);\n  });\n  if (!isValidHint(hint) || fallback.type === \"none\") {\n    return fetchMaybeWithRelayHint;\n  }\n  const fallbackFetchPromise = new Promise(async (resolve) => {\n    const fallbackRelaySet = fallback.relaySet;\n    const timeout = fallback.timeout ?? 1500;\n    const timeoutPromise = new Promise((resolve2) => setTimeout(resolve2, timeout));\n    if (fallback.type === \"timeout\") await timeoutPromise;\n    if (result) {\n      resolve(result);\n    } else {\n      d4(\"fallback fetch triggered\");\n      const fallbackEvent = await this.fetchEvent(id, subOpts, fallbackRelaySet);\n      resolve(fallbackEvent);\n    }\n  });\n  switch (fallback.type) {\n    case \"timeout\":\n      return Promise.race([fetchMaybeWithRelayHint, fallbackFetchPromise]);\n    case \"eose\":\n      result = await fetchMaybeWithRelayHint;\n      if (result) return result;\n      return fallbackFetchPromise;\n  }\n}\n\n// src/ndk/queue/index.ts\nvar Queue = class {\n  queue = [];\n  maxConcurrency;\n  processing = /* @__PURE__ */ new Set();\n  promises = /* @__PURE__ */ new Map();\n  constructor(_name, maxConcurrency) {\n    this.maxConcurrency = maxConcurrency;\n  }\n  add(item) {\n    if (this.promises.has(item.id)) {\n      return this.promises.get(item.id);\n    }\n    const promise = new Promise((resolve, reject) => {\n      this.queue.push({\n        ...item,\n        func: () => item.func().then(\n          (result) => {\n            resolve(result);\n            return result;\n          },\n          (error) => {\n            reject(error);\n            throw error;\n          }\n        )\n      });\n      this.process();\n    });\n    this.promises.set(item.id, promise);\n    promise.finally(() => {\n      this.promises.delete(item.id);\n      this.processing.delete(item.id);\n      this.process();\n    });\n    return promise;\n  }\n  process() {\n    if (this.processing.size >= this.maxConcurrency || this.queue.length === 0) {\n      return;\n    }\n    const item = this.queue.shift();\n    if (!item || this.processing.has(item.id)) {\n      return;\n    }\n    this.processing.add(item.id);\n    item.func();\n  }\n  clear() {\n    this.queue = [];\n  }\n  clearProcessing() {\n    this.processing.clear();\n  }\n  clearAll() {\n    this.clear();\n    this.clearProcessing();\n  }\n  length() {\n    return this.queue.length;\n  }\n};\n\n// src/ndk/index.ts\nvar DEFAULT_OUTBOX_RELAYS = [\"wss://purplepag.es/\", \"wss://nos.lol/\"];\nvar DEFAULT_BLACKLISTED_RELAYS = [\n  \"wss://brb.io/\",\n  // BRB\n  \"wss://nostr.mutinywallet.com/\"\n  // Don't try to read from this relay since it's a write-only relay\n  // \"wss://purplepag.es/\", // This is a hack, since this is a mostly read-only relay, but not fully. Once we have relay routing this can be removed so it only receives the supported kinds\n];\nvar NDK = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  _explicitRelayUrls;\n  blacklistRelayUrls;\n  pool;\n  outboxPool;\n  _signer;\n  _activeUser;\n  cacheAdapter;\n  debug;\n  devWriteRelaySet;\n  outboxTracker;\n  mutedIds;\n  clientName;\n  clientNip89;\n  queuesZapConfig;\n  queuesNip05;\n  asyncSigVerification = false;\n  initialValidationRatio = 1;\n  lowestValidationRatio = 1;\n  validationRatioFn;\n  subManager;\n  publishingFailureHandled = false;\n  pools = [];\n  /**\n   * Default relay-auth policy that will be used when a relay requests authentication,\n   * if no other policy is specified for that relay.\n   *\n   * @example Disconnect from relays that request authentication:\n   * ```typescript\n   * ndk.relayAuthDefaultPolicy = NDKAuthPolicies.disconnect(ndk.pool);\n   * ```\n   *\n   * @example Sign in to relays that request authentication:\n   * ```typescript\n   * ndk.relayAuthDefaultPolicy = NDKAuthPolicies.signIn({ndk})\n   * ```\n   *\n   * @example Sign in to relays that request authentication, asking the user for confirmation:\n   * ```typescript\n   * ndk.relayAuthDefaultPolicy = (relay: NDKRelay) => {\n   *     const signIn = NDKAuthPolicies.signIn({ndk});\n   *     if (confirm(`Relay ${relay.url} is requesting authentication, do you want to sign in?`)) {\n   *        signIn(relay);\n   *     }\n   * }\n   * ```\n   */\n  relayAuthDefaultPolicy;\n  /**\n   * Fetch function to use for HTTP requests.\n   *\n   * @example\n   * ```typescript\n   * import fetch from \"node-fetch\";\n   *\n   * ndk.httpFetch = fetch;\n   * ```\n   */\n  httpFetch;\n  /**\n   * Provide a caller function to receive all networking traffic from relays\n   */\n  netDebug;\n  autoConnectUserRelays = true;\n  autoFetchUserMutelist = true;\n  walletConfig;\n  constructor(opts = {}) {\n    super();\n    this.debug = opts.debug || debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk\");\n    this.netDebug = opts.netDebug;\n    this._explicitRelayUrls = opts.explicitRelayUrls || [];\n    this.blacklistRelayUrls = opts.blacklistRelayUrls || DEFAULT_BLACKLISTED_RELAYS;\n    this.subManager = new NDKSubscriptionManager();\n    this.pool = new NDKPool(opts.explicitRelayUrls || [], [], this);\n    this.pool.name = \"Main\";\n    this.pool.on(\"relay:auth\", async (relay, challenge) => {\n      if (this.relayAuthDefaultPolicy) {\n        await this.relayAuthDefaultPolicy(relay, challenge);\n      }\n    });\n    this.autoConnectUserRelays = opts.autoConnectUserRelays ?? true;\n    this.autoFetchUserMutelist = opts.autoFetchUserMutelist ?? true;\n    this.clientName = opts.clientName;\n    this.clientNip89 = opts.clientNip89;\n    this.relayAuthDefaultPolicy = opts.relayAuthDefaultPolicy;\n    if (opts.enableOutboxModel) {\n      this.outboxPool = new NDKPool(opts.outboxRelayUrls || DEFAULT_OUTBOX_RELAYS, [], this, {\n        debug: this.debug.extend(\"outbox-pool\"),\n        name: \"Outbox Pool\"\n      });\n      this.outboxTracker = new OutboxTracker(this);\n    }\n    this.signer = opts.signer;\n    this.cacheAdapter = opts.cacheAdapter;\n    this.mutedIds = opts.mutedIds || /* @__PURE__ */ new Map();\n    if (opts.devWriteRelayUrls) {\n      this.devWriteRelaySet = NDKRelaySet.fromRelayUrls(opts.devWriteRelayUrls, this);\n    }\n    this.queuesZapConfig = new Queue(\"zaps\", 3);\n    this.queuesNip05 = new Queue(\"nip05\", 10);\n    this.signatureVerificationWorker = opts.signatureVerificationWorker;\n    this.initialValidationRatio = opts.initialValidationRatio || 1;\n    this.lowestValidationRatio = opts.lowestValidationRatio || 1;\n    try {\n      this.httpFetch = fetch;\n    } catch {\n    }\n  }\n  set explicitRelayUrls(urls) {\n    this._explicitRelayUrls = urls.map(normalizeRelayUrl);\n    this.pool.relayUrls = urls;\n  }\n  get explicitRelayUrls() {\n    return this._explicitRelayUrls || [];\n  }\n  set signatureVerificationWorker(worker2) {\n    this.asyncSigVerification = !!worker2;\n    if (worker2) {\n      signatureVerificationInit(worker2);\n    }\n  }\n  /**\n   * Adds an explicit relay to the pool.\n   * @param url\n   * @param relayAuthPolicy Authentication policy to use if different from the default\n   * @param connect Whether to connect to the relay automatically\n   * @returns\n   */\n  addExplicitRelay(urlOrRelay, relayAuthPolicy, connect = true) {\n    let relay;\n    if (typeof urlOrRelay === \"string\") {\n      relay = new NDKRelay(urlOrRelay, relayAuthPolicy, this);\n    } else {\n      relay = urlOrRelay;\n    }\n    this.pool.addRelay(relay, connect);\n    this.explicitRelayUrls?.push(relay.url);\n    return relay;\n  }\n  toJSON() {\n    return { relayCount: this.pool.relays.size }.toString();\n  }\n  get activeUser() {\n    return this._activeUser;\n  }\n  /**\n   * Sets the active user for this NDK instance, typically this will be\n   * called when assigning a signer to the NDK instance.\n   *\n   * This function will automatically connect to the user's relays if\n   * `autoConnectUserRelays` is set to true.\n   *\n   * It will also fetch the user's mutelist if `autoFetchUserMutelist` is set to true.\n   */\n  set activeUser(user) {\n    const differentUser = this._activeUser?.pubkey !== user?.pubkey;\n    this._activeUser = user;\n    if (user && differentUser) {\n      setActiveUser.call(this, user);\n    } else if (!user) {\n      this.mutedIds = /* @__PURE__ */ new Map();\n    }\n  }\n  get signer() {\n    return this._signer;\n  }\n  set signer(newSigner) {\n    this._signer = newSigner;\n    if (newSigner) this.emit(\"signer:ready\", newSigner);\n    newSigner?.user().then((user) => {\n      user.ndk = this;\n      this.activeUser = user;\n    });\n  }\n  /**\n   * Connect to relays with optional timeout.\n   * If the timeout is reached, the connection will be continued to be established in the background.\n   */\n  async connect(timeoutMs) {\n    if (this._signer && this.autoConnectUserRelays) {\n      this.debug(\n        \"Attempting to connect to user relays specified by signer %o\",\n        await this._signer.relays?.(this)\n      );\n      if (this._signer.relays) {\n        const relays = await this._signer.relays(this);\n        relays.forEach((relay) => this.pool.addRelay(relay));\n      }\n    }\n    const connections = [this.pool.connect(timeoutMs)];\n    if (this.outboxPool) {\n      connections.push(this.outboxPool.connect(timeoutMs));\n    }\n    this.debug(\"Connecting to relays %o\", { timeoutMs });\n    return Promise.allSettled(connections).then(() => {\n    });\n  }\n  /**\n   * Get a NDKUser object\n   *\n   * @param opts\n   * @returns\n   */\n  getUser(opts) {\n    const user = new NDKUser(opts);\n    user.ndk = this;\n    return user;\n  }\n  /**\n   * Get a NDKUser from a NIP05\n   * @param nip05 NIP-05 ID\n   * @param skipCache Skip cache\n   * @returns\n   */\n  async getUserFromNip05(nip05, skipCache = false) {\n    return NDKUser.fromNip05(nip05, this, skipCache);\n  }\n  /**\n   * Creates and starts a new subscription.\n   *\n   * Subscriptions automatically start unless `autoStart` is set to `false`.\n   * You can control automatic closing on EOSE via `opts.closeOnEose`.\n   *\n   * @param filters - A single NDKFilter object or an array of filters.\n   * @param opts - Optional NDKSubscriptionOptions to customize behavior (e.g., caching, grouping).\n   * @param handlers - Optional handlers for subscription events. Passing handlers is the preferred method of using ndk.subscribe.\n   *   - `onEvent`: Called for each event received.\n   *  - `onEvents`: Called once with an array of events when the subscription starts (from the cache).\n   *  - `onEose`: Called when the subscription receives EOSE.\n   *  For backwards compatibility, this third parameter also accepts a relaySet, the relaySet should be passed via `opts.relaySet`.\n   *\n   * @param _autoStart - For backwards compatibility, this can be a boolean indicating whether to start the subscription immediately.\n   *  This parameter is deprecated and will be removed in a future version.\n   *   - `false`: Creates the subscription but does not start it (call `subscription.start()` manually).\n   * @returns The created NDKSubscription instance.\n   *\n   * @example Basic subscription\n   * ```typescript\n   * const sub = ndk.subscribe({ kinds: [1], authors: [pubkey] });\n   * sub.on(\"event\", (event) => console.log(\"Kind 1 event:\", event.content));\n   * ```\n   *\n   * @example Subscription with options and direct handlers\n   * ```typescript\n   * const sub = ndk.subscribe(\n   *   { kinds: [0], authors: [pubkey] },\n   *   { closeOnEose: true, cacheUsage: NDKSubscriptionCacheUsage.PARALLEL },\n   *   undefined, // Use default relay set calculation\n   *   {\n   *     onEvents: (events) => { // Renamed parameter\n   *       if (events.length > 0) {\n   *         console.log(`Got ${events.length} profile events from cache:`, events[0].content);\n   *       }\n   *     },\n   *     onEvent: (event) => { // Renamed parameter\n   *       console.log(\"Got profile update from relay:\", event.content); // Clarified source\n   *     },\n   *     onEose: () => console.log(\"Profile subscription finished.\")\n   *   }\n   * );\n   * ```\n   *\n   * @since 2.13.0 `relaySet` parameter removed; pass `relaySet` or `relayUrls` via `opts`.\n   */\n  subscribe(filters, opts, autoStartOrRelaySet = true, _autoStart = true) {\n    let _relaySet = opts?.relaySet;\n    let autoStart = _autoStart;\n    if (autoStartOrRelaySet instanceof NDKRelaySet) {\n      console.warn(\"relaySet is deprecated, use opts.relaySet instead. This will be removed in version v2.14.0\");\n      _relaySet = autoStartOrRelaySet;\n      autoStart = _autoStart;\n    } else if (typeof autoStartOrRelaySet === \"boolean\" || typeof autoStartOrRelaySet === \"object\") {\n      autoStart = autoStartOrRelaySet;\n    }\n    const subscription = new NDKSubscription(this, filters, { relaySet: _relaySet, ...opts });\n    this.subManager.add(subscription);\n    const pool = subscription.pool;\n    if (subscription.relaySet) {\n      for (const relay of subscription.relaySet.relays) {\n        pool.useTemporaryRelay(relay, void 0, subscription.filters);\n      }\n    }\n    if (this.outboxPool && subscription.hasAuthorsFilter()) {\n      const authors = subscription.filters.filter((filter) => filter.authors && filter.authors?.length > 0).flatMap((filter) => filter.authors);\n      this.outboxTracker?.trackUsers(authors);\n    }\n    if (autoStart) {\n      let eventsHandler;\n      if (typeof autoStart === \"object\") {\n        if (autoStart.onEvent) subscription.on(\"event\", autoStart.onEvent);\n        if (autoStart.onEose) subscription.on(\"eose\", autoStart.onEose);\n        if (autoStart.onEvents) eventsHandler = autoStart.onEvents;\n      }\n      setTimeout(() => {\n        const cachedEvents = subscription.start(!eventsHandler);\n        if (cachedEvents && cachedEvents.length > 0 && !!eventsHandler) eventsHandler(cachedEvents);\n      }, 0);\n    }\n    return subscription;\n  }\n  /**\n   * Publish an event to a relay\n   * @param event event to publish\n   * @param relaySet explicit relay set to use\n   * @param timeoutMs timeout in milliseconds to wait for the event to be published\n   * @returns The relays the event was published to\n   *\n   * @deprecated Use `event.publish()` instead\n   */\n  async publish(event, relaySet, timeoutMs) {\n    this.debug(\"Deprecated: Use `event.publish()` instead\");\n    return event.publish(relaySet, timeoutMs);\n  }\n  /**\n   * Attempts to fetch an event from a tag, following relay hints and\n   * other best practices.\n   * @param tag Tag to fetch the event from\n   * @param originalEvent Event where the tag came from\n   * @param subOpts Subscription options to use when fetching the event\n   * @param fallback Fallback options to use when the hint relay doesn't respond\n   * @returns\n   */\n  fetchEventFromTag = fetchEventFromTag.bind(this);\n  /**\n   * Fetch an event from the cache synchronously.\n   * @param idOrFilter event id in bech32 format or filter\n   * @returns events from the cache or null if the cache is empty\n   */\n  fetchEventSync(idOrFilter) {\n    if (!this.cacheAdapter) throw new Error(\"Cache adapter not set\");\n    let filters;\n    if (typeof idOrFilter === \"string\") filters = [filterFromId(idOrFilter)];\n    else filters = idOrFilter;\n    const sub = new NDKSubscription(this, filters);\n    const events = this.cacheAdapter.query(sub);\n    if (events instanceof Promise) throw new Error(\"Cache adapter is async\");\n    return events.map((e) => {\n      e.ndk = this;\n      return e;\n    });\n  }\n  /**\n   * Fetch a single event.\n   *\n   * @param idOrFilter event id in bech32 format or filter\n   * @param opts subscription options\n   * @param relaySetOrRelay explicit relay set to use\n   */\n  async fetchEvent(idOrFilter, opts, relaySetOrRelay) {\n    let filters;\n    let relaySet;\n    if (relaySetOrRelay instanceof NDKRelay) {\n      relaySet = new NDKRelaySet(/* @__PURE__ */ new Set([relaySetOrRelay]), this);\n    } else if (relaySetOrRelay instanceof NDKRelaySet) {\n      relaySet = relaySetOrRelay;\n    }\n    if (!relaySetOrRelay && typeof idOrFilter === \"string\") {\n      if (!isNip33AValue(idOrFilter)) {\n        const relays = relaysFromBech32(idOrFilter, this);\n        if (relays.length > 0) {\n          relaySet = new NDKRelaySet(new Set(relays), this);\n          relaySet = correctRelaySet(relaySet, this.pool);\n        }\n      }\n    }\n    if (typeof idOrFilter === \"string\") {\n      filters = [filterFromId(idOrFilter)];\n    } else if (Array.isArray(idOrFilter)) {\n      filters = idOrFilter;\n    } else {\n      filters = [idOrFilter];\n    }\n    if (filters.length === 0) {\n      throw new Error(`Invalid filter: ${JSON.stringify(idOrFilter)}`);\n    }\n    return new Promise((resolve) => {\n      let fetchedEvent = null;\n      const subscribeOpts = {\n        ...opts || {},\n        closeOnEose: true\n      };\n      if (relaySet) subscribeOpts.relaySet = relaySet;\n      const s = this.subscribe(\n        filters,\n        subscribeOpts,\n        // relaySet, // Removed: Passed via opts\n        false\n        // autoStart = false\n      );\n      const t2 = setTimeout(() => {\n        s.stop();\n        resolve(fetchedEvent);\n      }, 1e4);\n      s.on(\"event\", (event) => {\n        event.ndk = this;\n        if (!event.isReplaceable()) {\n          clearTimeout(t2);\n          resolve(event);\n        } else if (!fetchedEvent || fetchedEvent.created_at < event.created_at) {\n          fetchedEvent = event;\n        }\n      });\n      s.on(\"eose\", () => {\n        clearTimeout(t2);\n        resolve(fetchedEvent);\n      });\n      s.start();\n    });\n  }\n  /**\n   * Fetch events\n   */\n  async fetchEvents(filters, opts, relaySet) {\n    return new Promise((resolve) => {\n      const events = /* @__PURE__ */ new Map();\n      const subscribeOpts = {\n        ...opts || {},\n        closeOnEose: true\n      };\n      if (relaySet) subscribeOpts.relaySet = relaySet;\n      const relaySetSubscription = this.subscribe(\n        filters,\n        subscribeOpts,\n        // relaySet, // Removed: Passed via opts\n        false\n        // autoStart = false\n      );\n      const onEvent = (event) => {\n        let _event;\n        if (!(event instanceof NDKEvent)) _event = new NDKEvent(void 0, event);\n        else _event = event;\n        const dedupKey = _event.deduplicationKey();\n        const existingEvent = events.get(dedupKey);\n        if (existingEvent) {\n          _event = dedup(existingEvent, _event);\n        }\n        _event.ndk = this;\n        events.set(dedupKey, _event);\n      };\n      relaySetSubscription.on(\"event\", onEvent);\n      relaySetSubscription.on(\"eose\", () => {\n        resolve(new Set(events.values()));\n      });\n      relaySetSubscription.start();\n    });\n  }\n  /**\n   * Ensures that a signer is available to sign an event.\n   */\n  assertSigner() {\n    if (!this.signer) {\n      this.emit(\"signer:required\");\n      throw new Error(\"Signer required\");\n    }\n  }\n  getEntity = getEntity.bind(this);\n  set wallet(wallet) {\n    if (!wallet) {\n      this.walletConfig = void 0;\n      return;\n    }\n    this.walletConfig ??= {};\n    this.walletConfig.lnPay = wallet?.lnPay?.bind(wallet);\n    this.walletConfig.cashuPay = wallet?.cashuPay?.bind(wallet);\n  }\n};\n\n// src/zap/invoice.ts\n\nfunction zapInvoiceFromEvent(event) {\n  const description = event.getMatchingTags(\"description\")[0];\n  const bolt11 = event.getMatchingTags(\"bolt11\")[0];\n  let decodedInvoice;\n  let zapRequest;\n  if (!description || !bolt11 || !bolt11[1]) {\n    return null;\n  }\n  try {\n    let zapRequestPayload = description[1];\n    if (zapRequestPayload.startsWith(\"%\")) {\n      zapRequestPayload = decodeURIComponent(zapRequestPayload);\n    }\n    if (zapRequestPayload === \"\") {\n      return null;\n    }\n    zapRequest = JSON.parse(zapRequestPayload);\n    decodedInvoice = (0,light_bolt11_decoder__WEBPACK_IMPORTED_MODULE_7__.decode)(bolt11[1]);\n  } catch (_e) {\n    return null;\n  }\n  const amountSection = decodedInvoice.sections.find((s) => s.name === \"amount\");\n  if (!amountSection) {\n    return null;\n  }\n  const amount = Number.parseInt(amountSection.value);\n  if (!amount) {\n    return null;\n  }\n  const content = zapRequest.content;\n  const sender = zapRequest.pubkey;\n  const recipientTag = event.getMatchingTags(\"p\")[0];\n  const recipient = recipientTag[1];\n  let zappedEvent = event.getMatchingTags(\"e\")[0];\n  if (!zappedEvent) {\n    zappedEvent = event.getMatchingTags(\"a\")[0];\n  }\n  const zappedEventId = zappedEvent ? zappedEvent[1] : void 0;\n  const zapInvoice = {\n    id: event.id,\n    zapper: event.pubkey,\n    zappee: sender,\n    zapped: recipient,\n    zappedEvent: zappedEventId,\n    amount,\n    comment: content\n  };\n  return zapInvoice;\n}\n\n// src/zapper/index.ts\n\n\n\n// src/zapper/ln.ts\n\n\nvar d2 = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:zapper:ln\");\nasync function getNip57ZapSpecFromLud({ lud06, lud16 }, ndk) {\n  let zapEndpoint;\n  if (lud16 && !lud16.startsWith(\"LNURL\")) {\n    const [name, domain] = lud16.split(\"@\");\n    zapEndpoint = `https://${domain}/.well-known/lnurlp/${name}`;\n  } else if (lud06) {\n    const { words } = _scure_base__WEBPACK_IMPORTED_MODULE_8__.bech32.decode(lud06, 1e3);\n    const data = _scure_base__WEBPACK_IMPORTED_MODULE_8__.bech32.fromWords(words);\n    const utf8Decoder = new TextDecoder(\"utf-8\");\n    zapEndpoint = utf8Decoder.decode(data);\n  }\n  if (!zapEndpoint) {\n    d2(\"No zap endpoint found %o\", { lud06, lud16 });\n    throw new Error(\"No zap endpoint found\");\n  }\n  try {\n    const _fetch = ndk.httpFetch || fetch;\n    const response = await _fetch(zapEndpoint);\n    if (response.status !== 200) {\n      const text = await response.text();\n      throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${text}`);\n    }\n    return await response.json();\n  } catch (e) {\n    throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${e}`);\n  }\n}\n\n// src/zapper/nip57.ts\n\nasync function generateZapRequest(target, ndk, data, pubkey, amount, relays, comment, tags, signer) {\n  const zapEndpoint = data.callback;\n  const zapRequest = nostr_tools__WEBPACK_IMPORTED_MODULE_2__.nip57.makeZapRequest({\n    profile: pubkey,\n    // set the event to null since nostr-tools doesn't support nip-33 zaps\n    event: null,\n    amount,\n    comment: comment || \"\",\n    relays: relays.slice(0, 4)\n  });\n  if (target instanceof NDKEvent) {\n    const tags2 = target.referenceTags();\n    const nonPTags = tags2.filter((tag) => tag[0] !== \"p\");\n    zapRequest.tags.push(...nonPTags);\n  }\n  zapRequest.tags.push([\"lnurl\", zapEndpoint]);\n  const event = new NDKEvent(ndk, zapRequest);\n  if (tags) {\n    event.tags = event.tags.concat(tags);\n  }\n  const eTaggedEvents = /* @__PURE__ */ new Set();\n  const aTaggedEvents = /* @__PURE__ */ new Set();\n  for (const tag of event.tags) {\n    if (tag[0] === \"e\") {\n      eTaggedEvents.add(tag[1]);\n    } else if (tag[0] === \"a\") {\n      aTaggedEvents.add(tag[1]);\n    }\n  }\n  if (eTaggedEvents.size > 1) throw new Error(\"Only one e-tag is allowed\");\n  if (aTaggedEvents.size > 1) throw new Error(\"Only one a-tag is allowed\");\n  event.tags = event.tags.filter((tag) => tag[0] !== \"p\");\n  event.tags.push([\"p\", pubkey]);\n  await event.sign(signer);\n  return event;\n}\n\n// src/zapper/index.ts\nvar d3 = debug__WEBPACK_IMPORTED_MODULE_1__(\"ndk:zapper\");\nvar NDKZapper = class extends tseep__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n  target;\n  ndk;\n  comment;\n  amount;\n  unit;\n  tags;\n  signer;\n  zapMethod;\n  nutzapAsFallback;\n  lnPay;\n  /**\n   * Called when a cashu payment is to be made.\n   * This function should swap/mint proofs for the required amount, in the required unit,\n   * in any of the provided mints and return the proofs and mint used.\n   */\n  cashuPay;\n  onComplete;\n  maxRelays = 3;\n  /**\n   *\n   * @param target The target of the zap\n   * @param amount The amount to send indicated in the unit\n   * @param unit The unit of the amount\n   * @param opts Options for the zap\n   */\n  constructor(target, amount, unit = \"msat\", opts = {}) {\n    super();\n    this.target = target;\n    this.ndk = opts.ndk || target.ndk;\n    if (!this.ndk) {\n      throw new Error(\"No NDK instance provided\");\n    }\n    this.amount = amount;\n    this.comment = opts.comment;\n    this.unit = unit;\n    this.tags = opts.tags;\n    this.signer = opts.signer;\n    this.nutzapAsFallback = opts.nutzapAsFallback ?? false;\n    this.lnPay = opts.lnPay || this.ndk.walletConfig?.lnPay;\n    this.cashuPay = opts.cashuPay || this.ndk.walletConfig?.cashuPay;\n    this.onComplete = opts.onComplete || this.ndk.walletConfig?.onPaymentComplete;\n  }\n  /**\n   * Initiate zapping process\n   *\n   * This function will calculate the splits for this zap and initiate each zap split.\n   */\n  async zap(methods) {\n    const splits = this.getZapSplits();\n    const results = /* @__PURE__ */ new Map();\n    await Promise.all(\n      splits.map(async (split) => {\n        let result;\n        try {\n          result = await this.zapSplit(split, methods);\n        } catch (e) {\n          result = new Error(e.message);\n        }\n        this.emit(\"split:complete\", split, result);\n        results.set(split, result);\n      })\n    );\n    this.emit(\"complete\", results);\n    if (this.onComplete) this.onComplete(results);\n    return results;\n  }\n  async zapNip57(split, data) {\n    if (!this.lnPay) throw new Error(\"No lnPay function available\");\n    const zapSpec = await getNip57ZapSpecFromLud(data, this.ndk);\n    if (!zapSpec) throw new Error(\"No zap spec available for recipient\");\n    const relays = await this.relays(split.pubkey);\n    const zapRequest = await generateZapRequest(\n      this.target,\n      this.ndk,\n      zapSpec,\n      split.pubkey,\n      split.amount,\n      relays,\n      this.comment,\n      this.tags,\n      this.signer\n    );\n    if (!zapRequest) {\n      d3(\"Unable to generate zap request\");\n      throw new Error(\"Unable to generate zap request\");\n    }\n    const pr = await this.getLnInvoice(zapRequest, split.amount, zapSpec);\n    if (!pr) {\n      d3(\"Unable to get payment request\");\n      throw new Error(\"Unable to get payment request\");\n    }\n    this.emit(\"ln_invoice\", {\n      amount: split.amount,\n      recipientPubkey: split.pubkey,\n      unit: this.unit,\n      nip57ZapRequest: zapRequest,\n      pr,\n      type: \"nip57\"\n    });\n    const res = await this.lnPay({\n      target: this.target,\n      recipientPubkey: split.pubkey,\n      paymentDescription: \"NIP-57 Zap\",\n      pr,\n      amount: split.amount,\n      unit: this.unit,\n      nip57ZapRequest: zapRequest\n    });\n    if (res?.preimage) {\n      this.emit(\"ln_payment\", {\n        preimage: res.preimage,\n        amount: split.amount,\n        recipientPubkey: split.pubkey,\n        pr,\n        unit: this.unit,\n        nip57ZapRequest: zapRequest,\n        type: \"nip57\"\n      });\n    }\n    return res;\n  }\n  /**\n   * Fetches information about a NIP-61 zap and asks the caller to create cashu proofs for the zap.\n   *\n   * (note that the cashuPay function can use any method to create the proofs, including using lightning\n   * to mint proofs in the specified mint, the responsibility of minting the proofs is delegated to the caller (e.g. ndk-wallet))\n   */\n  async zapNip61(split, data) {\n    if (!this.cashuPay) throw new Error(\"No cashuPay function available\");\n    let ret;\n    ret = await this.cashuPay(\n      {\n        target: this.target,\n        recipientPubkey: split.pubkey,\n        paymentDescription: \"NIP-61 Zap\",\n        amount: split.amount,\n        unit: this.unit,\n        ...data ?? {}\n      },\n      (pr) => {\n        this.emit(\"ln_invoice\", {\n          pr,\n          amount: split.amount,\n          recipientPubkey: split.pubkey,\n          unit: this.unit,\n          type: \"nip61\"\n        });\n      }\n    );\n    d3(\"NIP-61 Zap result: %o\", ret);\n    if (ret instanceof Error) {\n      return ret;\n    }\n    if (ret) {\n      const { proofs, mint } = ret;\n      if (!proofs || !mint) throw new Error(`Invalid zap confirmation: missing proofs or mint: ${ret}`);\n      const relays = await this.relays(split.pubkey);\n      const relaySet = NDKRelaySet.fromRelayUrls(relays, this.ndk);\n      const nutzap = new NDKNutzap(this.ndk);\n      nutzap.tags = [...nutzap.tags, ...this.tags || []];\n      nutzap.proofs = proofs;\n      nutzap.mint = mint;\n      nutzap.target = this.target;\n      nutzap.comment = this.comment;\n      nutzap.unit = \"sat\";\n      nutzap.recipientPubkey = split.pubkey;\n      await nutzap.sign(this.signer);\n      nutzap.publish(relaySet);\n      return nutzap;\n    }\n  }\n  /**\n   * Get the zap methods available for the recipient and initiates the zap\n   * in the desired method.\n   * @param split\n   * @param methods - The methods to try, if not provided, all methods will be tried.\n   * @returns\n   */\n  async zapSplit(split, methods) {\n    const recipient = this.ndk.getUser({ pubkey: split.pubkey });\n    const zapMethods = await recipient.getZapInfo(2500);\n    let retVal;\n    const canFallbackToNip61 = this.nutzapAsFallback && this.cashuPay;\n    if (zapMethods.size === 0 && !canFallbackToNip61)\n      throw new Error(\"No zap method available for recipient and NIP-61 fallback is disabled\");\n    const nip61Fallback = async () => {\n      if (!this.nutzapAsFallback) return;\n      const relayLists = await getRelayListForUsers([split.pubkey], this.ndk);\n      let relayUrls = relayLists.get(split.pubkey)?.readRelayUrls;\n      relayUrls = this.ndk.pool.connectedRelays().map((r) => r.url);\n      return await this.zapNip61(split, {\n        // use the user's relay list\n        relays: relayUrls,\n        // lock to the user's actual pubkey\n        p2pk: split.pubkey,\n        // allow intramint fallback\n        allowIntramintFallback: !!canFallbackToNip61\n      });\n    };\n    const canUseNip61 = !methods || methods.includes(\"nip61\");\n    const canUseNip57 = !methods || methods.includes(\"nip57\");\n    const nip61Method = zapMethods.get(\"nip61\");\n    if (nip61Method && canUseNip61) {\n      try {\n        retVal = await this.zapNip61(split, nip61Method);\n        if (retVal instanceof NDKNutzap) return retVal;\n      } catch (e) {\n        this.emit(\"notice\", `NIP-61 attempt failed: ${e.message}`);\n      }\n    }\n    const nip57Method = zapMethods.get(\"nip57\");\n    if (nip57Method && canUseNip57) {\n      try {\n        retVal = await this.zapNip57(split, nip57Method);\n        if (!(retVal instanceof Error)) return retVal;\n      } catch (e) {\n        this.emit(\"notice\", `NIP-57 attempt failed: ${e.message}`);\n      }\n    }\n    if (canFallbackToNip61) {\n      retVal = await nip61Fallback();\n      if (retVal instanceof Error) throw retVal;\n      return retVal;\n    }\n    this.emit(\"notice\", \"Zap methods exhausted and there was no fallback to NIP-61\");\n    if (retVal instanceof Error) throw retVal;\n    return retVal;\n  }\n  /**\n   * Gets a bolt11 for a nip57 zap\n   * @param event\n   * @param amount\n   * @param zapEndpoint\n   * @returns\n   */\n  async getLnInvoice(zapRequest, amount, data) {\n    const zapEndpoint = data.callback;\n    const eventPayload = JSON.stringify(zapRequest.rawEvent());\n    d3(\n      `Fetching invoice from ${zapEndpoint}?${new URLSearchParams({\n        amount: amount.toString(),\n        nostr: eventPayload\n      })}`\n    );\n    const url = new URL(zapEndpoint);\n    url.searchParams.append(\"amount\", amount.toString());\n    url.searchParams.append(\"nostr\", eventPayload);\n    d3(`Fetching invoice from ${url.toString()}`);\n    const response = await fetch(url.toString());\n    d3(`Got response from zap endpoint: ${zapEndpoint}`, { status: response.status });\n    if (response.status !== 200) {\n      d3(`Received non-200 status from zap endpoint: ${zapEndpoint}`, {\n        status: response.status,\n        amount,\n        nostr: eventPayload\n      });\n      const text = await response.text();\n      throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${text}`);\n    }\n    const body = await response.json();\n    return body.pr;\n  }\n  getZapSplits() {\n    if (this.target instanceof NDKUser) {\n      return [\n        {\n          pubkey: this.target.pubkey,\n          amount: this.amount\n        }\n      ];\n    }\n    const zapTags = this.target.getMatchingTags(\"zap\");\n    if (zapTags.length === 0) {\n      return [\n        {\n          pubkey: this.target.pubkey,\n          amount: this.amount\n        }\n      ];\n    }\n    const splits = [];\n    const total = zapTags.reduce((acc, tag) => acc + Number.parseInt(tag[2]), 0);\n    for (const tag of zapTags) {\n      const pubkey = tag[1];\n      const amount = Math.floor(Number.parseInt(tag[2]) / total * this.amount);\n      splits.push({ pubkey, amount });\n    }\n    return splits;\n  }\n  /**\n   * Gets the zap method that should be used to zap a pubbkey\n   * @param ndk\n   * @param pubkey\n   * @returns\n   */\n  async getZapMethods(ndk, recipient, timeout = 2500) {\n    const user = ndk.getUser({ pubkey: recipient });\n    return await user.getZapInfo(timeout);\n  }\n  /**\n   * @returns the relays to use for the zap request\n   */\n  async relays(pubkey) {\n    let r = [];\n    if (this.ndk?.activeUser) {\n      const relayLists = await getRelayListForUsers([this.ndk.activeUser.pubkey, pubkey], this.ndk);\n      const relayScores = /* @__PURE__ */ new Map();\n      for (const relayList of relayLists.values()) {\n        for (const url of relayList.readRelayUrls) {\n          const score = relayScores.get(url) || 0;\n          relayScores.set(url, score + 1);\n        }\n      }\n      r = Array.from(relayScores.entries()).sort((a, b) => b[1] - a[1]).map(([url]) => url).slice(0, this.maxRelays);\n    }\n    if (this.ndk?.pool?.permanentAndConnectedRelays().length) {\n      r = this.ndk.pool.permanentAndConnectedRelays().map((relay) => relay.url);\n    }\n    if (!r.length) {\n      r = [];\n    }\n    return r;\n  }\n};\n\n// src/utils/filter.ts\nfunction matchFilter(filter, event) {\n  if (filter.ids && filter.ids.indexOf(event.id) === -1) {\n    return false;\n  }\n  if (filter.kinds && filter.kinds.indexOf(event.kind) === -1) {\n    return false;\n  }\n  if (filter.authors && filter.authors.indexOf(event.pubkey) === -1) {\n    return false;\n  }\n  for (const f in filter) {\n    if (f[0] === \"#\") {\n      const tagName = f.slice(1);\n      if (tagName === \"t\") {\n        const values = filter[`#${tagName}`]?.map((v) => v.toLowerCase());\n        if (values && !event.tags.find(([t, v]) => t === tagName && values?.indexOf(v.toLowerCase()) !== -1))\n          return false;\n      } else {\n        const values = filter[`#${tagName}`];\n        if (values && !event.tags.find(([t, v]) => t === tagName && values?.indexOf(v) !== -1)) return false;\n      }\n    }\n  }\n  if (filter.since && event.created_at < filter.since) return false;\n  if (filter.until && event.created_at > filter.until) return false;\n  return true;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@nostr-dev-kit/ndk-wallet/node_modules/@nostr-dev-kit/ndk/dist/index.mjs\n");

/***/ })

};
;