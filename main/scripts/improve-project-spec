#!/usr/bin/env bun
// File: scripts/improve-project-spec.ts

import { promises as fs } from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables from .env file
dotenv.config();

interface ProjectInput {
    name: string;
    tagline: string;
    productSpec: string;
    // Allow other fields potentially
    [key: string]: any;
}

interface OllamaResponse {
    model: string;
    created_at: string;
    response: string;
    done: boolean;
    context?: number[]; // Optional context if streaming=false
    total_duration?: number;
    load_duration?: number;
    prompt_eval_count?: number;
    prompt_eval_duration?: number;
    eval_count?: number;
    eval_duration?: number;
}


async function improveSpec(): Promise<string> { // Removed inputFilePath parameter
    // --- Configuration ---
    const ollamaApiUrl = process.env.OLLAMA_API_URL || 'http://localhost:11434';
    const ollamaModel = process.env.OLLAMA_MODEL || 'qwen2.5'; // Default model
    const ollamaGenerateEndpoint = new URL('/api/generate', ollamaApiUrl).toString();

    // --- Read Input from Stdin ---
    let projectData: ProjectInput;
    try {
        // Read the entire stdin stream
        const chunks: Buffer[] = [];
        for await (const chunk of process.stdin) {
            chunks.push(chunk as Buffer);
        }
        const stdinContent = Buffer.concat(chunks).toString('utf-8');

        if (!stdinContent) {
            throw new Error('Stdin is empty.');
        }
        projectData = JSON.parse(stdinContent);
        if (!projectData.productSpec) {
            throw new Error('Input JSON from stdin must contain "productSpec" fields.');
        }
    } catch (error: any) {
        throw new Error(`Failed to read or parse JSON from stdin: ${error.message}`);
    }

    // --- Construct Prompt ---
    const prompt = `
You are an expert product manager and technical writer.
Given the following project details:
Project Name: ${projectData.name}
Project Tagline: ${projectData.tagline}
Current Product Specification:
---
${projectData.productSpec}
---

Please review the current product specification and provide an improved version.
Focus on clarity, completeness, and feasibility. Ensure the spec clearly defines the core features, user stories (if applicable), and technical considerations.
Output *only* the improved product specification text, without any introductory phrases like "Here is the improved spec:" or explanations.
`.trim();

    // --- Call Ollama API ---
    try {
        console.error(`Calling Ollama API: ${ollamaGenerateEndpoint} with model ${ollamaModel}`); // Log to stderr
        const response = await fetch(ollamaGenerateEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                model: ollamaModel,
                prompt: prompt,
                stream: false, // Get the full response at once
            }),
        });

        if (!response.ok) {
            const errorBody = await response.text();
            throw new Error(`Ollama API request failed with status ${response.status}: ${errorBody}`);
        }

        const result = await response.json() as OllamaResponse;
        console.error(`Ollama response received. Done: ${result.done}`); // Log to stderr

        if (!result.response) {
             throw new Error('Ollama response did not contain a "response" field.');
        }

        return result.response.trim();

    } catch (error: any) {
        throw new Error(`Failed to call Ollama API: ${error.message}`);
    }
}

// --- Main Execution ---
async function main() {
    // No longer expecting command-line arguments, input comes from stdin
    // if (process.argv.length !== 3) {
    //     console.error('Usage: pipe JSON input to | bun scripts/improve-project-spec');
    //     process.exit(1);
    // }
    // const inputFilePath = path.resolve(process.argv[2]); // Resolve to absolute path
    try {
        const improvedSpec = await improveSpec(); // Call without argument
        console.log(improvedSpec); // Output improved spec to stdout
    } catch (error: any) {
        console.error(`Error: ${error.message}`); // Log errors to stderr
        // As a fallback, maybe output the original spec? Or just fail? Let's fail clearly.
        // console.log(JSON.stringify({ error: error.message })); // Output error as JSON to stdout?
        process.exit(1); // Exit with error code
    }
}

main();